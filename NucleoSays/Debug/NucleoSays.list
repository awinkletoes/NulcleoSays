
NucleoSays.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008608  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c48  080086c8  080086c8  000096c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009310  08009310  0000b078  2**0
                  CONTENTS
  4 .ARM          00000008  08009310  08009310  0000a310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009318  08009318  0000b078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009318  08009318  0000a318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800931c  0800931c  0000a31c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08009320  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d4  20000078  08009398  0000b078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000044c  08009398  0000b44c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000b078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011e97  00000000  00000000  0000b0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002602  00000000  00000000  0001cf37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  0001f540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cf6  00000000  00000000  000205d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016278  00000000  00000000  000212ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c39  00000000  00000000  00037546  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008066c  00000000  00000000  0004c17f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cc7eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047d0  00000000  00000000  000cc830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000d1000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080086b0 	.word	0x080086b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	080086b0 	.word	0x080086b0

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <__aeabi_uldivmod>:
 8000408:	2b00      	cmp	r3, #0
 800040a:	d111      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 800040c:	2a00      	cmp	r2, #0
 800040e:	d10f      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 8000410:	2900      	cmp	r1, #0
 8000412:	d100      	bne.n	8000416 <__aeabi_uldivmod+0xe>
 8000414:	2800      	cmp	r0, #0
 8000416:	d002      	beq.n	800041e <__aeabi_uldivmod+0x16>
 8000418:	2100      	movs	r1, #0
 800041a:	43c9      	mvns	r1, r1
 800041c:	0008      	movs	r0, r1
 800041e:	b407      	push	{r0, r1, r2}
 8000420:	4802      	ldr	r0, [pc, #8]	@ (800042c <__aeabi_uldivmod+0x24>)
 8000422:	a102      	add	r1, pc, #8	@ (adr r1, 800042c <__aeabi_uldivmod+0x24>)
 8000424:	1840      	adds	r0, r0, r1
 8000426:	9002      	str	r0, [sp, #8]
 8000428:	bd03      	pop	{r0, r1, pc}
 800042a:	46c0      	nop			@ (mov r8, r8)
 800042c:	ffffffd9 	.word	0xffffffd9
 8000430:	b403      	push	{r0, r1}
 8000432:	4668      	mov	r0, sp
 8000434:	b501      	push	{r0, lr}
 8000436:	9802      	ldr	r0, [sp, #8]
 8000438:	f000 f834 	bl	80004a4 <__udivmoddi4>
 800043c:	9b01      	ldr	r3, [sp, #4]
 800043e:	469e      	mov	lr, r3
 8000440:	b002      	add	sp, #8
 8000442:	bc0c      	pop	{r2, r3}
 8000444:	4770      	bx	lr
 8000446:	46c0      	nop			@ (mov r8, r8)

08000448 <__aeabi_lmul>:
 8000448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044a:	46ce      	mov	lr, r9
 800044c:	4699      	mov	r9, r3
 800044e:	0c03      	lsrs	r3, r0, #16
 8000450:	469c      	mov	ip, r3
 8000452:	0413      	lsls	r3, r2, #16
 8000454:	4647      	mov	r7, r8
 8000456:	0c1b      	lsrs	r3, r3, #16
 8000458:	001d      	movs	r5, r3
 800045a:	000e      	movs	r6, r1
 800045c:	4661      	mov	r1, ip
 800045e:	0404      	lsls	r4, r0, #16
 8000460:	0c24      	lsrs	r4, r4, #16
 8000462:	b580      	push	{r7, lr}
 8000464:	0007      	movs	r7, r0
 8000466:	0c10      	lsrs	r0, r2, #16
 8000468:	434b      	muls	r3, r1
 800046a:	4365      	muls	r5, r4
 800046c:	4341      	muls	r1, r0
 800046e:	4360      	muls	r0, r4
 8000470:	0c2c      	lsrs	r4, r5, #16
 8000472:	18c0      	adds	r0, r0, r3
 8000474:	1824      	adds	r4, r4, r0
 8000476:	468c      	mov	ip, r1
 8000478:	42a3      	cmp	r3, r4
 800047a:	d903      	bls.n	8000484 <__aeabi_lmul+0x3c>
 800047c:	2380      	movs	r3, #128	@ 0x80
 800047e:	025b      	lsls	r3, r3, #9
 8000480:	4698      	mov	r8, r3
 8000482:	44c4      	add	ip, r8
 8000484:	4649      	mov	r1, r9
 8000486:	4379      	muls	r1, r7
 8000488:	4356      	muls	r6, r2
 800048a:	0c23      	lsrs	r3, r4, #16
 800048c:	042d      	lsls	r5, r5, #16
 800048e:	0c2d      	lsrs	r5, r5, #16
 8000490:	1989      	adds	r1, r1, r6
 8000492:	4463      	add	r3, ip
 8000494:	0424      	lsls	r4, r4, #16
 8000496:	1960      	adds	r0, r4, r5
 8000498:	18c9      	adds	r1, r1, r3
 800049a:	bcc0      	pop	{r6, r7}
 800049c:	46b9      	mov	r9, r7
 800049e:	46b0      	mov	r8, r6
 80004a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)

080004a4 <__udivmoddi4>:
 80004a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a6:	4657      	mov	r7, sl
 80004a8:	464e      	mov	r6, r9
 80004aa:	4645      	mov	r5, r8
 80004ac:	46de      	mov	lr, fp
 80004ae:	b5e0      	push	{r5, r6, r7, lr}
 80004b0:	0004      	movs	r4, r0
 80004b2:	000d      	movs	r5, r1
 80004b4:	4692      	mov	sl, r2
 80004b6:	4699      	mov	r9, r3
 80004b8:	b083      	sub	sp, #12
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d830      	bhi.n	8000520 <__udivmoddi4+0x7c>
 80004be:	d02d      	beq.n	800051c <__udivmoddi4+0x78>
 80004c0:	4649      	mov	r1, r9
 80004c2:	4650      	mov	r0, sl
 80004c4:	f000 f8ba 	bl	800063c <__clzdi2>
 80004c8:	0029      	movs	r1, r5
 80004ca:	0006      	movs	r6, r0
 80004cc:	0020      	movs	r0, r4
 80004ce:	f000 f8b5 	bl	800063c <__clzdi2>
 80004d2:	1a33      	subs	r3, r6, r0
 80004d4:	4698      	mov	r8, r3
 80004d6:	3b20      	subs	r3, #32
 80004d8:	d434      	bmi.n	8000544 <__udivmoddi4+0xa0>
 80004da:	469b      	mov	fp, r3
 80004dc:	4653      	mov	r3, sl
 80004de:	465a      	mov	r2, fp
 80004e0:	4093      	lsls	r3, r2
 80004e2:	4642      	mov	r2, r8
 80004e4:	001f      	movs	r7, r3
 80004e6:	4653      	mov	r3, sl
 80004e8:	4093      	lsls	r3, r2
 80004ea:	001e      	movs	r6, r3
 80004ec:	42af      	cmp	r7, r5
 80004ee:	d83b      	bhi.n	8000568 <__udivmoddi4+0xc4>
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d100      	bne.n	80004f6 <__udivmoddi4+0x52>
 80004f4:	e079      	b.n	80005ea <__udivmoddi4+0x146>
 80004f6:	465b      	mov	r3, fp
 80004f8:	1ba4      	subs	r4, r4, r6
 80004fa:	41bd      	sbcs	r5, r7
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	da00      	bge.n	8000502 <__udivmoddi4+0x5e>
 8000500:	e076      	b.n	80005f0 <__udivmoddi4+0x14c>
 8000502:	2200      	movs	r2, #0
 8000504:	2300      	movs	r3, #0
 8000506:	9200      	str	r2, [sp, #0]
 8000508:	9301      	str	r3, [sp, #4]
 800050a:	2301      	movs	r3, #1
 800050c:	465a      	mov	r2, fp
 800050e:	4093      	lsls	r3, r2
 8000510:	9301      	str	r3, [sp, #4]
 8000512:	2301      	movs	r3, #1
 8000514:	4642      	mov	r2, r8
 8000516:	4093      	lsls	r3, r2
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	e029      	b.n	8000570 <__udivmoddi4+0xcc>
 800051c:	4282      	cmp	r2, r0
 800051e:	d9cf      	bls.n	80004c0 <__udivmoddi4+0x1c>
 8000520:	2200      	movs	r2, #0
 8000522:	2300      	movs	r3, #0
 8000524:	9200      	str	r2, [sp, #0]
 8000526:	9301      	str	r3, [sp, #4]
 8000528:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <__udivmoddi4+0x8e>
 800052e:	601c      	str	r4, [r3, #0]
 8000530:	605d      	str	r5, [r3, #4]
 8000532:	9800      	ldr	r0, [sp, #0]
 8000534:	9901      	ldr	r1, [sp, #4]
 8000536:	b003      	add	sp, #12
 8000538:	bcf0      	pop	{r4, r5, r6, r7}
 800053a:	46bb      	mov	fp, r7
 800053c:	46b2      	mov	sl, r6
 800053e:	46a9      	mov	r9, r5
 8000540:	46a0      	mov	r8, r4
 8000542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000544:	4642      	mov	r2, r8
 8000546:	469b      	mov	fp, r3
 8000548:	2320      	movs	r3, #32
 800054a:	1a9b      	subs	r3, r3, r2
 800054c:	4652      	mov	r2, sl
 800054e:	40da      	lsrs	r2, r3
 8000550:	4641      	mov	r1, r8
 8000552:	0013      	movs	r3, r2
 8000554:	464a      	mov	r2, r9
 8000556:	408a      	lsls	r2, r1
 8000558:	0017      	movs	r7, r2
 800055a:	4642      	mov	r2, r8
 800055c:	431f      	orrs	r7, r3
 800055e:	4653      	mov	r3, sl
 8000560:	4093      	lsls	r3, r2
 8000562:	001e      	movs	r6, r3
 8000564:	42af      	cmp	r7, r5
 8000566:	d9c3      	bls.n	80004f0 <__udivmoddi4+0x4c>
 8000568:	2200      	movs	r2, #0
 800056a:	2300      	movs	r3, #0
 800056c:	9200      	str	r2, [sp, #0]
 800056e:	9301      	str	r3, [sp, #4]
 8000570:	4643      	mov	r3, r8
 8000572:	2b00      	cmp	r3, #0
 8000574:	d0d8      	beq.n	8000528 <__udivmoddi4+0x84>
 8000576:	07fb      	lsls	r3, r7, #31
 8000578:	0872      	lsrs	r2, r6, #1
 800057a:	431a      	orrs	r2, r3
 800057c:	4646      	mov	r6, r8
 800057e:	087b      	lsrs	r3, r7, #1
 8000580:	e00e      	b.n	80005a0 <__udivmoddi4+0xfc>
 8000582:	42ab      	cmp	r3, r5
 8000584:	d101      	bne.n	800058a <__udivmoddi4+0xe6>
 8000586:	42a2      	cmp	r2, r4
 8000588:	d80c      	bhi.n	80005a4 <__udivmoddi4+0x100>
 800058a:	1aa4      	subs	r4, r4, r2
 800058c:	419d      	sbcs	r5, r3
 800058e:	2001      	movs	r0, #1
 8000590:	1924      	adds	r4, r4, r4
 8000592:	416d      	adcs	r5, r5
 8000594:	2100      	movs	r1, #0
 8000596:	3e01      	subs	r6, #1
 8000598:	1824      	adds	r4, r4, r0
 800059a:	414d      	adcs	r5, r1
 800059c:	2e00      	cmp	r6, #0
 800059e:	d006      	beq.n	80005ae <__udivmoddi4+0x10a>
 80005a0:	42ab      	cmp	r3, r5
 80005a2:	d9ee      	bls.n	8000582 <__udivmoddi4+0xde>
 80005a4:	3e01      	subs	r6, #1
 80005a6:	1924      	adds	r4, r4, r4
 80005a8:	416d      	adcs	r5, r5
 80005aa:	2e00      	cmp	r6, #0
 80005ac:	d1f8      	bne.n	80005a0 <__udivmoddi4+0xfc>
 80005ae:	9800      	ldr	r0, [sp, #0]
 80005b0:	9901      	ldr	r1, [sp, #4]
 80005b2:	465b      	mov	r3, fp
 80005b4:	1900      	adds	r0, r0, r4
 80005b6:	4169      	adcs	r1, r5
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	db24      	blt.n	8000606 <__udivmoddi4+0x162>
 80005bc:	002b      	movs	r3, r5
 80005be:	465a      	mov	r2, fp
 80005c0:	4644      	mov	r4, r8
 80005c2:	40d3      	lsrs	r3, r2
 80005c4:	002a      	movs	r2, r5
 80005c6:	40e2      	lsrs	r2, r4
 80005c8:	001c      	movs	r4, r3
 80005ca:	465b      	mov	r3, fp
 80005cc:	0015      	movs	r5, r2
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	db2a      	blt.n	8000628 <__udivmoddi4+0x184>
 80005d2:	0026      	movs	r6, r4
 80005d4:	409e      	lsls	r6, r3
 80005d6:	0033      	movs	r3, r6
 80005d8:	0026      	movs	r6, r4
 80005da:	4647      	mov	r7, r8
 80005dc:	40be      	lsls	r6, r7
 80005de:	0032      	movs	r2, r6
 80005e0:	1a80      	subs	r0, r0, r2
 80005e2:	4199      	sbcs	r1, r3
 80005e4:	9000      	str	r0, [sp, #0]
 80005e6:	9101      	str	r1, [sp, #4]
 80005e8:	e79e      	b.n	8000528 <__udivmoddi4+0x84>
 80005ea:	42a3      	cmp	r3, r4
 80005ec:	d8bc      	bhi.n	8000568 <__udivmoddi4+0xc4>
 80005ee:	e782      	b.n	80004f6 <__udivmoddi4+0x52>
 80005f0:	4642      	mov	r2, r8
 80005f2:	2320      	movs	r3, #32
 80005f4:	2100      	movs	r1, #0
 80005f6:	1a9b      	subs	r3, r3, r2
 80005f8:	2200      	movs	r2, #0
 80005fa:	9100      	str	r1, [sp, #0]
 80005fc:	9201      	str	r2, [sp, #4]
 80005fe:	2201      	movs	r2, #1
 8000600:	40da      	lsrs	r2, r3
 8000602:	9201      	str	r2, [sp, #4]
 8000604:	e785      	b.n	8000512 <__udivmoddi4+0x6e>
 8000606:	4642      	mov	r2, r8
 8000608:	2320      	movs	r3, #32
 800060a:	1a9b      	subs	r3, r3, r2
 800060c:	002a      	movs	r2, r5
 800060e:	4646      	mov	r6, r8
 8000610:	409a      	lsls	r2, r3
 8000612:	0023      	movs	r3, r4
 8000614:	40f3      	lsrs	r3, r6
 8000616:	4644      	mov	r4, r8
 8000618:	4313      	orrs	r3, r2
 800061a:	002a      	movs	r2, r5
 800061c:	40e2      	lsrs	r2, r4
 800061e:	001c      	movs	r4, r3
 8000620:	465b      	mov	r3, fp
 8000622:	0015      	movs	r5, r2
 8000624:	2b00      	cmp	r3, #0
 8000626:	dad4      	bge.n	80005d2 <__udivmoddi4+0x12e>
 8000628:	4642      	mov	r2, r8
 800062a:	002f      	movs	r7, r5
 800062c:	2320      	movs	r3, #32
 800062e:	0026      	movs	r6, r4
 8000630:	4097      	lsls	r7, r2
 8000632:	1a9b      	subs	r3, r3, r2
 8000634:	40de      	lsrs	r6, r3
 8000636:	003b      	movs	r3, r7
 8000638:	4333      	orrs	r3, r6
 800063a:	e7cd      	b.n	80005d8 <__udivmoddi4+0x134>

0800063c <__clzdi2>:
 800063c:	b510      	push	{r4, lr}
 800063e:	2900      	cmp	r1, #0
 8000640:	d103      	bne.n	800064a <__clzdi2+0xe>
 8000642:	f000 f807 	bl	8000654 <__clzsi2>
 8000646:	3020      	adds	r0, #32
 8000648:	e002      	b.n	8000650 <__clzdi2+0x14>
 800064a:	0008      	movs	r0, r1
 800064c:	f000 f802 	bl	8000654 <__clzsi2>
 8000650:	bd10      	pop	{r4, pc}
 8000652:	46c0      	nop			@ (mov r8, r8)

08000654 <__clzsi2>:
 8000654:	211c      	movs	r1, #28
 8000656:	2301      	movs	r3, #1
 8000658:	041b      	lsls	r3, r3, #16
 800065a:	4298      	cmp	r0, r3
 800065c:	d301      	bcc.n	8000662 <__clzsi2+0xe>
 800065e:	0c00      	lsrs	r0, r0, #16
 8000660:	3910      	subs	r1, #16
 8000662:	0a1b      	lsrs	r3, r3, #8
 8000664:	4298      	cmp	r0, r3
 8000666:	d301      	bcc.n	800066c <__clzsi2+0x18>
 8000668:	0a00      	lsrs	r0, r0, #8
 800066a:	3908      	subs	r1, #8
 800066c:	091b      	lsrs	r3, r3, #4
 800066e:	4298      	cmp	r0, r3
 8000670:	d301      	bcc.n	8000676 <__clzsi2+0x22>
 8000672:	0900      	lsrs	r0, r0, #4
 8000674:	3904      	subs	r1, #4
 8000676:	a202      	add	r2, pc, #8	@ (adr r2, 8000680 <__clzsi2+0x2c>)
 8000678:	5c10      	ldrb	r0, [r2, r0]
 800067a:	1840      	adds	r0, r0, r1
 800067c:	4770      	bx	lr
 800067e:	46c0      	nop			@ (mov r8, r8)
 8000680:	02020304 	.word	0x02020304
 8000684:	01010101 	.word	0x01010101
	...

08000690 <main>:
// main
//
///////////////////////////////////////////////////////////////////////////////

int main(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08c      	sub	sp, #48	@ 0x30
 8000694:	af02      	add	r7, sp, #8
  uint32_t i;
  uint32_t x_prev=120, y_prev=160;
 8000696:	2378      	movs	r3, #120	@ 0x78
 8000698:	623b      	str	r3, [r7, #32]
 800069a:	23a0      	movs	r3, #160	@ 0xa0
 800069c:	61fb      	str	r3, [r7, #28]
  uint32_t x_new=120, y_new=160;
 800069e:	2378      	movs	r3, #120	@ 0x78
 80006a0:	61bb      	str	r3, [r7, #24]
 80006a2:	23a0      	movs	r3, #160	@ 0xa0
 80006a4:	617b      	str	r3, [r7, #20]
  uint32_t dx=4, dy=4, delta=5, radius=16;
 80006a6:	2304      	movs	r3, #4
 80006a8:	613b      	str	r3, [r7, #16]
 80006aa:	2304      	movs	r3, #4
 80006ac:	60fb      	str	r3, [r7, #12]
 80006ae:	2305      	movs	r3, #5
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	2310      	movs	r3, #16
 80006b4:	607b      	str	r3, [r7, #4]

  // MCU Configuration--------------------------------------------------------
  // Reset of all peripherals, Initializes the Flash interface and the Systick.
  HAL_Init();
 80006b6:	f001 fbd9 	bl	8001e6c <HAL_Init>
  // Configure the system clock
  SystemClock_Config();
 80006ba:	f000 fbe9 	bl	8000e90 <SystemClock_Config>
  // Initialize all configured peripherals
  MX_GPIO_Init();
 80006be:	f000 fd0d 	bl	80010dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006c2:	f000 fcdb 	bl	800107c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80006c6:	f000 fca1 	bl	800100c <MX_SPI1_Init>
  MX_I2C1_Init();
 80006ca:	f000 fc49 	bl	8000f60 <MX_I2C1_Init>

  // LCD display initialization; black screen;
  LCD_init();
 80006ce:	f001 fb57 	bl	8001d80 <LCD_init>

  // one time print of message and variable names;
  // note this text will be having pixels erased as the yellow
  // circle will be moved and overlapping with the text;
  NunChuck_print_data_init();
 80006d2:	f000 fa2b 	bl	8000b2c <NunChuck_print_data_init>
  // NunChuck phase 1;
  NunChuck_phase1_init();
 80006d6:	f000 fa87 	bl	8000be8 <NunChuck_phase1_init>


  while (1)
  {
    correct = 0;
 80006da:	4bca      	ldr	r3, [pc, #808]	@ (8000a04 <main+0x374>)
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80006e0:	23a0      	movs	r3, #160	@ 0xa0
 80006e2:	05db      	lsls	r3, r3, #23
 80006e4:	2200      	movs	r2, #0
 80006e6:	2120      	movs	r1, #32
 80006e8:	0018      	movs	r0, r3
 80006ea:	f001 fe9a 	bl	8002422 <HAL_GPIO_WritePin>

    // clear receive buffer;
    for ( i = 0; i < BUFSIZE; i++ ) {
 80006ee:	2300      	movs	r3, #0
 80006f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80006f2:	e007      	b.n	8000704 <main+0x74>
      I2CSlaveBuffer[i] = 0x00;
 80006f4:	4ac4      	ldr	r2, [pc, #784]	@ (8000a08 <main+0x378>)
 80006f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006f8:	18d3      	adds	r3, r2, r3
 80006fa:	2200      	movs	r2, #0
 80006fc:	701a      	strb	r2, [r3, #0]
    for ( i = 0; i < BUFSIZE; i++ ) {
 80006fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000700:	3301      	adds	r3, #1
 8000702:	627b      	str	r3, [r7, #36]	@ 0x24
 8000704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000706:	2b3f      	cmp	r3, #63	@ 0x3f
 8000708:	d9f4      	bls.n	80006f4 <main+0x64>
    }

    int random_action = rand() % 5;
 800070a:	f006 fde7 	bl	80072dc <rand>
 800070e:	0003      	movs	r3, r0
 8000710:	2105      	movs	r1, #5
 8000712:	0018      	movs	r0, r3
 8000714:	f7ff fe72 	bl	80003fc <__aeabi_idivmod>
 8000718:	000b      	movs	r3, r1
 800071a:	603b      	str	r3, [r7, #0]
    // 0: C-it!       The program expects c to be pushed.
    // 1: Z-it!       The program expects z to be pushed.
    // 2: Push-it!    The program expects the blue push button to be pushed.
    // 3: Twist-it!   The program expects joystick movement from the Wii Nunchuck.
    // 4: Shake-it!   The program expected joystick acceleration from the Wii Nunchuck.
    HAL_UART_Transmit(&huart2, (uint8_t*)EXPECTED_ACTION, strlen(EXPECTED_ACTION), HAL_MAX_DELAY);
 800071c:	2301      	movs	r3, #1
 800071e:	425b      	negs	r3, r3
 8000720:	49ba      	ldr	r1, [pc, #744]	@ (8000a0c <main+0x37c>)
 8000722:	48bb      	ldr	r0, [pc, #748]	@ (8000a10 <main+0x380>)
 8000724:	2211      	movs	r2, #17
 8000726:	f003 fec9 	bl	80044bc <HAL_UART_Transmit>

    if (random_action == 0) {
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d111      	bne.n	8000754 <main+0xc4>
      LCD_PutStr(32,32,  (char *)"C-it!", DEFAULT_FONT, C_WHITE, C_BLACK);
 8000730:	4bb8      	ldr	r3, [pc, #736]	@ (8000a14 <main+0x384>)
 8000732:	4ab9      	ldr	r2, [pc, #740]	@ (8000a18 <main+0x388>)
 8000734:	2100      	movs	r1, #0
 8000736:	9101      	str	r1, [sp, #4]
 8000738:	49b8      	ldr	r1, [pc, #736]	@ (8000a1c <main+0x38c>)
 800073a:	9100      	str	r1, [sp, #0]
 800073c:	2120      	movs	r1, #32
 800073e:	2020      	movs	r0, #32
 8000740:	f001 fae2 	bl	8001d08 <LCD_PutStr>
      HAL_UART_Transmit(&huart2, (uint8_t*)C_IT, strlen(C_IT), HAL_MAX_DELAY);
 8000744:	2301      	movs	r3, #1
 8000746:	425b      	negs	r3, r3
 8000748:	49b5      	ldr	r1, [pc, #724]	@ (8000a20 <main+0x390>)
 800074a:	48b1      	ldr	r0, [pc, #708]	@ (8000a10 <main+0x380>)
 800074c:	2209      	movs	r2, #9
 800074e:	f003 feb5 	bl	80044bc <HAL_UART_Transmit>
 8000752:	e04f      	b.n	80007f4 <main+0x164>
    } else if (random_action == 1){
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	2b01      	cmp	r3, #1
 8000758:	d111      	bne.n	800077e <main+0xee>
      LCD_PutStr(32,32,  (char *)"Z-it!", DEFAULT_FONT, C_WHITE, C_BLACK);
 800075a:	4bae      	ldr	r3, [pc, #696]	@ (8000a14 <main+0x384>)
 800075c:	4ab1      	ldr	r2, [pc, #708]	@ (8000a24 <main+0x394>)
 800075e:	2100      	movs	r1, #0
 8000760:	9101      	str	r1, [sp, #4]
 8000762:	49ae      	ldr	r1, [pc, #696]	@ (8000a1c <main+0x38c>)
 8000764:	9100      	str	r1, [sp, #0]
 8000766:	2120      	movs	r1, #32
 8000768:	2020      	movs	r0, #32
 800076a:	f001 facd 	bl	8001d08 <LCD_PutStr>
      HAL_UART_Transmit(&huart2, (uint8_t*)Z_IT, strlen(Z_IT), HAL_MAX_DELAY);
 800076e:	2301      	movs	r3, #1
 8000770:	425b      	negs	r3, r3
 8000772:	49ad      	ldr	r1, [pc, #692]	@ (8000a28 <main+0x398>)
 8000774:	48a6      	ldr	r0, [pc, #664]	@ (8000a10 <main+0x380>)
 8000776:	2209      	movs	r2, #9
 8000778:	f003 fea0 	bl	80044bc <HAL_UART_Transmit>
 800077c:	e03a      	b.n	80007f4 <main+0x164>
    } else if (random_action == 2) {
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	2b02      	cmp	r3, #2
 8000782:	d111      	bne.n	80007a8 <main+0x118>
      LCD_PutStr(32,32,  (char *)"Push-it!", DEFAULT_FONT, C_WHITE, C_BLACK);
 8000784:	4ba3      	ldr	r3, [pc, #652]	@ (8000a14 <main+0x384>)
 8000786:	4aa9      	ldr	r2, [pc, #676]	@ (8000a2c <main+0x39c>)
 8000788:	2100      	movs	r1, #0
 800078a:	9101      	str	r1, [sp, #4]
 800078c:	49a3      	ldr	r1, [pc, #652]	@ (8000a1c <main+0x38c>)
 800078e:	9100      	str	r1, [sp, #0]
 8000790:	2120      	movs	r1, #32
 8000792:	2020      	movs	r0, #32
 8000794:	f001 fab8 	bl	8001d08 <LCD_PutStr>
      HAL_UART_Transmit(&huart2, (uint8_t*)PUSH_IT, strlen(PUSH_IT), HAL_MAX_DELAY);
 8000798:	2301      	movs	r3, #1
 800079a:	425b      	negs	r3, r3
 800079c:	49a4      	ldr	r1, [pc, #656]	@ (8000a30 <main+0x3a0>)
 800079e:	489c      	ldr	r0, [pc, #624]	@ (8000a10 <main+0x380>)
 80007a0:	2217      	movs	r2, #23
 80007a2:	f003 fe8b 	bl	80044bc <HAL_UART_Transmit>
 80007a6:	e025      	b.n	80007f4 <main+0x164>
    } else if (random_action == 3) {
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	2b03      	cmp	r3, #3
 80007ac:	d111      	bne.n	80007d2 <main+0x142>
      LCD_PutStr(32,32,  (char *)"Twist-it!", DEFAULT_FONT, C_WHITE, C_BLACK);
 80007ae:	4b99      	ldr	r3, [pc, #612]	@ (8000a14 <main+0x384>)
 80007b0:	4aa0      	ldr	r2, [pc, #640]	@ (8000a34 <main+0x3a4>)
 80007b2:	2100      	movs	r1, #0
 80007b4:	9101      	str	r1, [sp, #4]
 80007b6:	4999      	ldr	r1, [pc, #612]	@ (8000a1c <main+0x38c>)
 80007b8:	9100      	str	r1, [sp, #0]
 80007ba:	2120      	movs	r1, #32
 80007bc:	2020      	movs	r0, #32
 80007be:	f001 faa3 	bl	8001d08 <LCD_PutStr>
      HAL_UART_Transmit(&huart2, (uint8_t*)TWIST_IT, strlen(TWIST_IT), HAL_MAX_DELAY);
 80007c2:	2301      	movs	r3, #1
 80007c4:	425b      	negs	r3, r3
 80007c6:	499c      	ldr	r1, [pc, #624]	@ (8000a38 <main+0x3a8>)
 80007c8:	4891      	ldr	r0, [pc, #580]	@ (8000a10 <main+0x380>)
 80007ca:	2213      	movs	r2, #19
 80007cc:	f003 fe76 	bl	80044bc <HAL_UART_Transmit>
 80007d0:	e010      	b.n	80007f4 <main+0x164>
    } else {
      LCD_PutStr(32,32,  (char *)"Shake-it!", DEFAULT_FONT, C_WHITE, C_BLACK);
 80007d2:	4b90      	ldr	r3, [pc, #576]	@ (8000a14 <main+0x384>)
 80007d4:	4a99      	ldr	r2, [pc, #612]	@ (8000a3c <main+0x3ac>)
 80007d6:	2100      	movs	r1, #0
 80007d8:	9101      	str	r1, [sp, #4]
 80007da:	4990      	ldr	r1, [pc, #576]	@ (8000a1c <main+0x38c>)
 80007dc:	9100      	str	r1, [sp, #0]
 80007de:	2120      	movs	r1, #32
 80007e0:	2020      	movs	r0, #32
 80007e2:	f001 fa91 	bl	8001d08 <LCD_PutStr>
      HAL_UART_Transmit(&huart2, (uint8_t*)SHAKE_IT, strlen(SHAKE_IT), HAL_MAX_DELAY);
 80007e6:	2301      	movs	r3, #1
 80007e8:	425b      	negs	r3, r3
 80007ea:	4995      	ldr	r1, [pc, #596]	@ (8000a40 <main+0x3b0>)
 80007ec:	4888      	ldr	r0, [pc, #544]	@ (8000a10 <main+0x380>)
 80007ee:	2212      	movs	r2, #18
 80007f0:	f003 fe64 	bl	80044bc <HAL_UART_Transmit>
    }

    HAL_Delay(2000);
 80007f4:	23fa      	movs	r3, #250	@ 0xfa
 80007f6:	00db      	lsls	r3, r3, #3
 80007f8:	0018      	movs	r0, r3
 80007fa:	f001 fba7 	bl	8001f4c <HAL_Delay>
    if (random_action == 0) {
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d10a      	bne.n	800081a <main+0x18a>
      LCD_PutStr(32,32,  (char *)"C-it!", DEFAULT_FONT, C_BLACK, C_BLACK);
 8000804:	4b83      	ldr	r3, [pc, #524]	@ (8000a14 <main+0x384>)
 8000806:	4a84      	ldr	r2, [pc, #528]	@ (8000a18 <main+0x388>)
 8000808:	2100      	movs	r1, #0
 800080a:	9101      	str	r1, [sp, #4]
 800080c:	2100      	movs	r1, #0
 800080e:	9100      	str	r1, [sp, #0]
 8000810:	2120      	movs	r1, #32
 8000812:	2020      	movs	r0, #32
 8000814:	f001 fa78 	bl	8001d08 <LCD_PutStr>
 8000818:	e033      	b.n	8000882 <main+0x1f2>
    } else if (random_action == 1){
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	2b01      	cmp	r3, #1
 800081e:	d10a      	bne.n	8000836 <main+0x1a6>
      LCD_PutStr(32,32,  (char *)"Z-it!", DEFAULT_FONT, C_BLACK, C_BLACK);
 8000820:	4b7c      	ldr	r3, [pc, #496]	@ (8000a14 <main+0x384>)
 8000822:	4a80      	ldr	r2, [pc, #512]	@ (8000a24 <main+0x394>)
 8000824:	2100      	movs	r1, #0
 8000826:	9101      	str	r1, [sp, #4]
 8000828:	2100      	movs	r1, #0
 800082a:	9100      	str	r1, [sp, #0]
 800082c:	2120      	movs	r1, #32
 800082e:	2020      	movs	r0, #32
 8000830:	f001 fa6a 	bl	8001d08 <LCD_PutStr>
 8000834:	e025      	b.n	8000882 <main+0x1f2>
    } else if (random_action == 2) {
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	2b02      	cmp	r3, #2
 800083a:	d10a      	bne.n	8000852 <main+0x1c2>
      LCD_PutStr(32,32,  (char *)"Push-it!", DEFAULT_FONT, C_BLACK, C_BLACK);
 800083c:	4b75      	ldr	r3, [pc, #468]	@ (8000a14 <main+0x384>)
 800083e:	4a7b      	ldr	r2, [pc, #492]	@ (8000a2c <main+0x39c>)
 8000840:	2100      	movs	r1, #0
 8000842:	9101      	str	r1, [sp, #4]
 8000844:	2100      	movs	r1, #0
 8000846:	9100      	str	r1, [sp, #0]
 8000848:	2120      	movs	r1, #32
 800084a:	2020      	movs	r0, #32
 800084c:	f001 fa5c 	bl	8001d08 <LCD_PutStr>
 8000850:	e017      	b.n	8000882 <main+0x1f2>
    } else if (random_action == 3) {
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	2b03      	cmp	r3, #3
 8000856:	d10a      	bne.n	800086e <main+0x1de>
      LCD_PutStr(32,32,  (char *)"Twist-it!", DEFAULT_FONT, C_BLACK, C_BLACK);
 8000858:	4b6e      	ldr	r3, [pc, #440]	@ (8000a14 <main+0x384>)
 800085a:	4a76      	ldr	r2, [pc, #472]	@ (8000a34 <main+0x3a4>)
 800085c:	2100      	movs	r1, #0
 800085e:	9101      	str	r1, [sp, #4]
 8000860:	2100      	movs	r1, #0
 8000862:	9100      	str	r1, [sp, #0]
 8000864:	2120      	movs	r1, #32
 8000866:	2020      	movs	r0, #32
 8000868:	f001 fa4e 	bl	8001d08 <LCD_PutStr>
 800086c:	e009      	b.n	8000882 <main+0x1f2>
    } else {
      LCD_PutStr(32,32,  (char *)"Shake-it!", DEFAULT_FONT, C_BLACK, C_BLACK);
 800086e:	4b69      	ldr	r3, [pc, #420]	@ (8000a14 <main+0x384>)
 8000870:	4a72      	ldr	r2, [pc, #456]	@ (8000a3c <main+0x3ac>)
 8000872:	2100      	movs	r1, #0
 8000874:	9101      	str	r1, [sp, #4]
 8000876:	2100      	movs	r1, #0
 8000878:	9100      	str	r1, [sp, #0]
 800087a:	2120      	movs	r1, #32
 800087c:	2020      	movs	r0, #32
 800087e:	f001 fa43 	bl	8001d08 <LCD_PutStr>
    }

    // NunChuck phase 2
    NunChuck_phase2_read();
 8000882:	f000 f9d9 	bl	8000c38 <NunChuck_phase2_read>
    NunChuck_translate_data();
 8000886:	f000 f9f7 	bl	8000c78 <NunChuck_translate_data>
    NunChuck_print_data();
 800088a:	f000 fa63 	bl	8000d54 <NunChuck_print_data>

    HAL_Delay(1000);
 800088e:	23fa      	movs	r3, #250	@ 0xfa
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	0018      	movs	r0, r3
 8000894:	f001 fb5a 	bl	8001f4c <HAL_Delay>
    HAL_UART_Transmit(&huart2, (uint8_t*)ACTUAL_ACTION, strlen(ACTUAL_ACTION), HAL_MAX_DELAY);
 8000898:	2301      	movs	r3, #1
 800089a:	425b      	negs	r3, r3
 800089c:	4969      	ldr	r1, [pc, #420]	@ (8000a44 <main+0x3b4>)
 800089e:	485c      	ldr	r0, [pc, #368]	@ (8000a10 <main+0x380>)
 80008a0:	220f      	movs	r2, #15
 80008a2:	f003 fe0b 	bl	80044bc <HAL_UART_Transmit>

    if (c_button == 0 && random_action == 0) {
 80008a6:	4b68      	ldr	r3, [pc, #416]	@ (8000a48 <main+0x3b8>)
 80008a8:	881b      	ldrh	r3, [r3, #0]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d111      	bne.n	80008d2 <main+0x242>
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d10e      	bne.n	80008d2 <main+0x242>
      score++;
 80008b4:	4b65      	ldr	r3, [pc, #404]	@ (8000a4c <main+0x3bc>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	1c5a      	adds	r2, r3, #1
 80008ba:	4b64      	ldr	r3, [pc, #400]	@ (8000a4c <main+0x3bc>)
 80008bc:	601a      	str	r2, [r3, #0]
      HAL_UART_Transmit(&huart2, (uint8_t*)CORRECT, strlen(CORRECT), HAL_MAX_DELAY);
 80008be:	2301      	movs	r3, #1
 80008c0:	425b      	negs	r3, r3
 80008c2:	4963      	ldr	r1, [pc, #396]	@ (8000a50 <main+0x3c0>)
 80008c4:	4852      	ldr	r0, [pc, #328]	@ (8000a10 <main+0x380>)
 80008c6:	2209      	movs	r2, #9
 80008c8:	f003 fdf8 	bl	80044bc <HAL_UART_Transmit>
      correct = 1;
 80008cc:	4b4d      	ldr	r3, [pc, #308]	@ (8000a04 <main+0x374>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	601a      	str	r2, [r3, #0]
    }

    if (z_button == 0 && random_action == 1) {
 80008d2:	4b60      	ldr	r3, [pc, #384]	@ (8000a54 <main+0x3c4>)
 80008d4:	881b      	ldrh	r3, [r3, #0]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d111      	bne.n	80008fe <main+0x26e>
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d10e      	bne.n	80008fe <main+0x26e>
      score++;
 80008e0:	4b5a      	ldr	r3, [pc, #360]	@ (8000a4c <main+0x3bc>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	1c5a      	adds	r2, r3, #1
 80008e6:	4b59      	ldr	r3, [pc, #356]	@ (8000a4c <main+0x3bc>)
 80008e8:	601a      	str	r2, [r3, #0]
      HAL_UART_Transmit(&huart2, (uint8_t*)CORRECT, strlen(CORRECT), HAL_MAX_DELAY);
 80008ea:	2301      	movs	r3, #1
 80008ec:	425b      	negs	r3, r3
 80008ee:	4958      	ldr	r1, [pc, #352]	@ (8000a50 <main+0x3c0>)
 80008f0:	4847      	ldr	r0, [pc, #284]	@ (8000a10 <main+0x380>)
 80008f2:	2209      	movs	r2, #9
 80008f4:	f003 fde2 	bl	80044bc <HAL_UART_Transmit>
      correct = 1;
 80008f8:	4b42      	ldr	r3, [pc, #264]	@ (8000a04 <main+0x374>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	601a      	str	r2, [r3, #0]
    }

    if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) && random_action == 2) {
 80008fe:	2380      	movs	r3, #128	@ 0x80
 8000900:	019b      	lsls	r3, r3, #6
 8000902:	4a55      	ldr	r2, [pc, #340]	@ (8000a58 <main+0x3c8>)
 8000904:	0019      	movs	r1, r3
 8000906:	0010      	movs	r0, r2
 8000908:	f001 fd6e 	bl	80023e8 <HAL_GPIO_ReadPin>
 800090c:	1e03      	subs	r3, r0, #0
 800090e:	d111      	bne.n	8000934 <main+0x2a4>
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	2b02      	cmp	r3, #2
 8000914:	d10e      	bne.n	8000934 <main+0x2a4>
      score++;
 8000916:	4b4d      	ldr	r3, [pc, #308]	@ (8000a4c <main+0x3bc>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	1c5a      	adds	r2, r3, #1
 800091c:	4b4b      	ldr	r3, [pc, #300]	@ (8000a4c <main+0x3bc>)
 800091e:	601a      	str	r2, [r3, #0]
      HAL_UART_Transmit(&huart2, (uint8_t*)CORRECT, strlen(CORRECT), HAL_MAX_DELAY);
 8000920:	2301      	movs	r3, #1
 8000922:	425b      	negs	r3, r3
 8000924:	494a      	ldr	r1, [pc, #296]	@ (8000a50 <main+0x3c0>)
 8000926:	483a      	ldr	r0, [pc, #232]	@ (8000a10 <main+0x380>)
 8000928:	2209      	movs	r2, #9
 800092a:	f003 fdc7 	bl	80044bc <HAL_UART_Transmit>
      correct = 1;
 800092e:	4b35      	ldr	r3, [pc, #212]	@ (8000a04 <main+0x374>)
 8000930:	2201      	movs	r2, #1
 8000932:	601a      	str	r2, [r3, #0]
    }

    if (joy_x_axis != 128 && joy_y_axis != 128 && random_action == 3) {
 8000934:	4b49      	ldr	r3, [pc, #292]	@ (8000a5c <main+0x3cc>)
 8000936:	881b      	ldrh	r3, [r3, #0]
 8000938:	2b80      	cmp	r3, #128	@ 0x80
 800093a:	d015      	beq.n	8000968 <main+0x2d8>
 800093c:	4b48      	ldr	r3, [pc, #288]	@ (8000a60 <main+0x3d0>)
 800093e:	881b      	ldrh	r3, [r3, #0]
 8000940:	2b80      	cmp	r3, #128	@ 0x80
 8000942:	d011      	beq.n	8000968 <main+0x2d8>
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	2b03      	cmp	r3, #3
 8000948:	d10e      	bne.n	8000968 <main+0x2d8>
      score++;
 800094a:	4b40      	ldr	r3, [pc, #256]	@ (8000a4c <main+0x3bc>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	1c5a      	adds	r2, r3, #1
 8000950:	4b3e      	ldr	r3, [pc, #248]	@ (8000a4c <main+0x3bc>)
 8000952:	601a      	str	r2, [r3, #0]
      HAL_UART_Transmit(&huart2, (uint8_t*)CORRECT, strlen(CORRECT), HAL_MAX_DELAY);
 8000954:	2301      	movs	r3, #1
 8000956:	425b      	negs	r3, r3
 8000958:	493d      	ldr	r1, [pc, #244]	@ (8000a50 <main+0x3c0>)
 800095a:	482d      	ldr	r0, [pc, #180]	@ (8000a10 <main+0x380>)
 800095c:	2209      	movs	r2, #9
 800095e:	f003 fdad 	bl	80044bc <HAL_UART_Transmit>
      correct = 1;
 8000962:	4b28      	ldr	r3, [pc, #160]	@ (8000a04 <main+0x374>)
 8000964:	2201      	movs	r2, #1
 8000966:	601a      	str	r2, [r3, #0]
    }

    if (accel_x_axis != 400 && accel_y_axis != 550 && accel_z_axis != 700 && random_action == 4) {
 8000968:	4b3e      	ldr	r3, [pc, #248]	@ (8000a64 <main+0x3d4>)
 800096a:	881a      	ldrh	r2, [r3, #0]
 800096c:	23c8      	movs	r3, #200	@ 0xc8
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	429a      	cmp	r2, r3
 8000972:	d01c      	beq.n	80009ae <main+0x31e>
 8000974:	4b3c      	ldr	r3, [pc, #240]	@ (8000a68 <main+0x3d8>)
 8000976:	881b      	ldrh	r3, [r3, #0]
 8000978:	4a3c      	ldr	r2, [pc, #240]	@ (8000a6c <main+0x3dc>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d017      	beq.n	80009ae <main+0x31e>
 800097e:	4b3c      	ldr	r3, [pc, #240]	@ (8000a70 <main+0x3e0>)
 8000980:	881a      	ldrh	r2, [r3, #0]
 8000982:	23af      	movs	r3, #175	@ 0xaf
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	429a      	cmp	r2, r3
 8000988:	d011      	beq.n	80009ae <main+0x31e>
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	2b04      	cmp	r3, #4
 800098e:	d10e      	bne.n	80009ae <main+0x31e>
      score++;
 8000990:	4b2e      	ldr	r3, [pc, #184]	@ (8000a4c <main+0x3bc>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	1c5a      	adds	r2, r3, #1
 8000996:	4b2d      	ldr	r3, [pc, #180]	@ (8000a4c <main+0x3bc>)
 8000998:	601a      	str	r2, [r3, #0]
      HAL_UART_Transmit(&huart2, (uint8_t*)CORRECT, strlen(CORRECT), HAL_MAX_DELAY);
 800099a:	2301      	movs	r3, #1
 800099c:	425b      	negs	r3, r3
 800099e:	492c      	ldr	r1, [pc, #176]	@ (8000a50 <main+0x3c0>)
 80009a0:	481b      	ldr	r0, [pc, #108]	@ (8000a10 <main+0x380>)
 80009a2:	2209      	movs	r2, #9
 80009a4:	f003 fd8a 	bl	80044bc <HAL_UART_Transmit>
      correct = 1;
 80009a8:	4b16      	ldr	r3, [pc, #88]	@ (8000a04 <main+0x374>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	601a      	str	r2, [r3, #0]
    }

    if (correct == 0) {
 80009ae:	4b15      	ldr	r3, [pc, #84]	@ (8000a04 <main+0x374>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d106      	bne.n	80009c4 <main+0x334>
      HAL_UART_Transmit(&huart2, (uint8_t*)INCORRECT, strlen(INCORRECT), HAL_MAX_DELAY);
 80009b6:	2301      	movs	r3, #1
 80009b8:	425b      	negs	r3, r3
 80009ba:	492e      	ldr	r1, [pc, #184]	@ (8000a74 <main+0x3e4>)
 80009bc:	4814      	ldr	r0, [pc, #80]	@ (8000a10 <main+0x380>)
 80009be:	220b      	movs	r2, #11
 80009c0:	f003 fd7c 	bl	80044bc <HAL_UART_Transmit>
    }

    LCD_PutStr(180, 180,  (char *)"Score: ", DEFAULT_FONT, C_WHITE, C_BLACK);
 80009c4:	4b13      	ldr	r3, [pc, #76]	@ (8000a14 <main+0x384>)
 80009c6:	4a2c      	ldr	r2, [pc, #176]	@ (8000a78 <main+0x3e8>)
 80009c8:	2100      	movs	r1, #0
 80009ca:	9101      	str	r1, [sp, #4]
 80009cc:	4913      	ldr	r1, [pc, #76]	@ (8000a1c <main+0x38c>)
 80009ce:	9100      	str	r1, [sp, #0]
 80009d0:	21b4      	movs	r1, #180	@ 0xb4
 80009d2:	20b4      	movs	r0, #180	@ 0xb4
 80009d4:	f001 f998 	bl	8001d08 <LCD_PutStr>
    sprintf(text_buffer, "%01d", score);
 80009d8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a4c <main+0x3bc>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	4927      	ldr	r1, [pc, #156]	@ (8000a7c <main+0x3ec>)
 80009de:	4b28      	ldr	r3, [pc, #160]	@ (8000a80 <main+0x3f0>)
 80009e0:	0018      	movs	r0, r3
 80009e2:	f006 fd7d 	bl	80074e0 <siprintf>
    LCD_PutStr(200, 200, (char *)text_buffer, DEFAULT_FONT, C_YELLOW, C_BLACK);
 80009e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000a14 <main+0x384>)
 80009e8:	4a25      	ldr	r2, [pc, #148]	@ (8000a80 <main+0x3f0>)
 80009ea:	2100      	movs	r1, #0
 80009ec:	9101      	str	r1, [sp, #4]
 80009ee:	4925      	ldr	r1, [pc, #148]	@ (8000a84 <main+0x3f4>)
 80009f0:	9100      	str	r1, [sp, #0]
 80009f2:	21c8      	movs	r1, #200	@ 0xc8
 80009f4:	20c8      	movs	r0, #200	@ 0xc8
 80009f6:	f001 f987 	bl	8001d08 <LCD_PutStr>

    HAL_Delay(10);
 80009fa:	200a      	movs	r0, #10
 80009fc:	f001 faa6 	bl	8001f4c <HAL_Delay>
  {
 8000a00:	e66b      	b.n	80006da <main+0x4a>
 8000a02:	46c0      	nop			@ (mov r8, r8)
 8000a04:	20000264 	.word	0x20000264
 8000a08:	20000208 	.word	0x20000208
 8000a0c:	080086c8 	.word	0x080086c8
 8000a10:	20000140 	.word	0x20000140
 8000a14:	0800896c 	.word	0x0800896c
 8000a18:	080086dc 	.word	0x080086dc
 8000a1c:	0000ffff 	.word	0x0000ffff
 8000a20:	080086e4 	.word	0x080086e4
 8000a24:	080086f0 	.word	0x080086f0
 8000a28:	080086f8 	.word	0x080086f8
 8000a2c:	08008704 	.word	0x08008704
 8000a30:	08008710 	.word	0x08008710
 8000a34:	08008728 	.word	0x08008728
 8000a38:	08008734 	.word	0x08008734
 8000a3c:	08008748 	.word	0x08008748
 8000a40:	08008754 	.word	0x08008754
 8000a44:	08008768 	.word	0x08008768
 8000a48:	2000025c 	.word	0x2000025c
 8000a4c:	20000260 	.word	0x20000260
 8000a50:	08008778 	.word	0x08008778
 8000a54:	2000025a 	.word	0x2000025a
 8000a58:	50000800 	.word	0x50000800
 8000a5c:	20000250 	.word	0x20000250
 8000a60:	20000252 	.word	0x20000252
 8000a64:	20000254 	.word	0x20000254
 8000a68:	20000256 	.word	0x20000256
 8000a6c:	00000226 	.word	0x00000226
 8000a70:	20000258 	.word	0x20000258
 8000a74:	08008784 	.word	0x08008784
 8000a78:	08008790 	.word	0x08008790
 8000a7c:	08008798 	.word	0x08008798
 8000a80:	20000248 	.word	0x20000248
 8000a84:	0000ffe0 	.word	0x0000ffe0

08000a88 <Write_To_NunChuck>:
// read transaction.
// NOTE: NunChuck uses 'fast mode' for I2C communication!

HAL_StatusTypeDef Write_To_NunChuck(I2C_HandleTypeDef *hi2c,
    uint16_t DevAddress, uint8_t *pData, uint16_t len)
{
 8000a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a8a:	b089      	sub	sp, #36	@ 0x24
 8000a8c:	af02      	add	r7, sp, #8
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	0008      	movs	r0, r1
 8000a92:	607a      	str	r2, [r7, #4]
 8000a94:	0019      	movs	r1, r3
 8000a96:	230a      	movs	r3, #10
 8000a98:	18fb      	adds	r3, r7, r3
 8000a9a:	1c02      	adds	r2, r0, #0
 8000a9c:	801a      	strh	r2, [r3, #0]
 8000a9e:	2008      	movs	r0, #8
 8000aa0:	183b      	adds	r3, r7, r0
 8000aa2:	1c0a      	adds	r2, r1, #0
 8000aa4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef returnValue;

  // transfer transmit buffer over the I2C bus;
  returnValue = HAL_I2C_Master_Transmit(hi2c, DevAddress, pData, len, HAL_MAX_DELAY);
 8000aa6:	2617      	movs	r6, #23
 8000aa8:	19bc      	adds	r4, r7, r6
 8000aaa:	183b      	adds	r3, r7, r0
 8000aac:	881d      	ldrh	r5, [r3, #0]
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	230a      	movs	r3, #10
 8000ab2:	18fb      	adds	r3, r7, r3
 8000ab4:	8819      	ldrh	r1, [r3, #0]
 8000ab6:	68f8      	ldr	r0, [r7, #12]
 8000ab8:	2301      	movs	r3, #1
 8000aba:	425b      	negs	r3, r3
 8000abc:	9300      	str	r3, [sp, #0]
 8000abe:	002b      	movs	r3, r5
 8000ac0:	f001 fd62 	bl	8002588 <HAL_I2C_Master_Transmit>
 8000ac4:	0003      	movs	r3, r0
 8000ac6:	7023      	strb	r3, [r4, #0]
  if (returnValue != HAL_OK)
 8000ac8:	19bb      	adds	r3, r7, r6
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d002      	beq.n	8000ad6 <Write_To_NunChuck+0x4e>
    return returnValue;
 8000ad0:	19bb      	adds	r3, r7, r6
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	e000      	b.n	8000ad8 <Write_To_NunChuck+0x50>

  return HAL_OK;
 8000ad6:	2300      	movs	r3, #0
}
 8000ad8:	0018      	movs	r0, r3
 8000ada:	46bd      	mov	sp, r7
 8000adc:	b007      	add	sp, #28
 8000ade:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ae0 <Read_From_NunChuck>:

HAL_StatusTypeDef Read_From_NunChuck(I2C_HandleTypeDef *hi2c,
    uint16_t DevAddress, uint8_t *pData, uint16_t len)
{
 8000ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ae2:	b089      	sub	sp, #36	@ 0x24
 8000ae4:	af02      	add	r7, sp, #8
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	0008      	movs	r0, r1
 8000aea:	607a      	str	r2, [r7, #4]
 8000aec:	0019      	movs	r1, r3
 8000aee:	260a      	movs	r6, #10
 8000af0:	19bb      	adds	r3, r7, r6
 8000af2:	1c02      	adds	r2, r0, #0
 8000af4:	801a      	strh	r2, [r3, #0]
 8000af6:	2008      	movs	r0, #8
 8000af8:	183b      	adds	r3, r7, r0
 8000afa:	1c0a      	adds	r2, r1, #0
 8000afc:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef returnValue;

  // retrieve data;
  returnValue = HAL_I2C_Master_Receive(hi2c, DevAddress, pData, len, HAL_MAX_DELAY);
 8000afe:	2317      	movs	r3, #23
 8000b00:	18fc      	adds	r4, r7, r3
 8000b02:	183b      	adds	r3, r7, r0
 8000b04:	881d      	ldrh	r5, [r3, #0]
 8000b06:	687a      	ldr	r2, [r7, #4]
 8000b08:	19bb      	adds	r3, r7, r6
 8000b0a:	8819      	ldrh	r1, [r3, #0]
 8000b0c:	68f8      	ldr	r0, [r7, #12]
 8000b0e:	2301      	movs	r3, #1
 8000b10:	425b      	negs	r3, r3
 8000b12:	9300      	str	r3, [sp, #0]
 8000b14:	002b      	movs	r3, r5
 8000b16:	f001 fe3f 	bl	8002798 <HAL_I2C_Master_Receive>
 8000b1a:	0003      	movs	r3, r0
 8000b1c:	7023      	strb	r3, [r4, #0]

  return returnValue;
 8000b1e:	2317      	movs	r3, #23
 8000b20:	18fb      	adds	r3, r7, r3
 8000b22:	781b      	ldrb	r3, [r3, #0]
}
 8000b24:	0018      	movs	r0, r3
 8000b26:	46bd      	mov	sp, r7
 8000b28:	b007      	add	sp, #28
 8000b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000b2c <NunChuck_print_data_init>:

void NunChuck_print_data_init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af02      	add	r7, sp, #8
  // Note: this function should be called once only;
//  LCD_PutStr(32,32,  (char *)"This is I2C example", DEFAULT_FONT, C_WHITE, C_BLACK);
//  LCD_PutStr(32,48,  (char *)"Data from NunChuck:", DEFAULT_FONT, C_WHITE, C_BLACK);
  LCD_PutStr(32,64,  (char *)"joyX =", DEFAULT_FONT, C_WHITE, C_BLACK);
 8000b32:	4b24      	ldr	r3, [pc, #144]	@ (8000bc4 <NunChuck_print_data_init+0x98>)
 8000b34:	4a24      	ldr	r2, [pc, #144]	@ (8000bc8 <NunChuck_print_data_init+0x9c>)
 8000b36:	2100      	movs	r1, #0
 8000b38:	9101      	str	r1, [sp, #4]
 8000b3a:	4924      	ldr	r1, [pc, #144]	@ (8000bcc <NunChuck_print_data_init+0xa0>)
 8000b3c:	9100      	str	r1, [sp, #0]
 8000b3e:	2140      	movs	r1, #64	@ 0x40
 8000b40:	2020      	movs	r0, #32
 8000b42:	f001 f8e1 	bl	8001d08 <LCD_PutStr>
  LCD_PutStr(32,80,  (char *)"joyY =", DEFAULT_FONT, C_WHITE, C_BLACK);
 8000b46:	4b1f      	ldr	r3, [pc, #124]	@ (8000bc4 <NunChuck_print_data_init+0x98>)
 8000b48:	4a21      	ldr	r2, [pc, #132]	@ (8000bd0 <NunChuck_print_data_init+0xa4>)
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	9101      	str	r1, [sp, #4]
 8000b4e:	491f      	ldr	r1, [pc, #124]	@ (8000bcc <NunChuck_print_data_init+0xa0>)
 8000b50:	9100      	str	r1, [sp, #0]
 8000b52:	2150      	movs	r1, #80	@ 0x50
 8000b54:	2020      	movs	r0, #32
 8000b56:	f001 f8d7 	bl	8001d08 <LCD_PutStr>
  LCD_PutStr(32,96,  (char *)"accX =", DEFAULT_FONT, C_WHITE, C_BLACK);
 8000b5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc4 <NunChuck_print_data_init+0x98>)
 8000b5c:	4a1d      	ldr	r2, [pc, #116]	@ (8000bd4 <NunChuck_print_data_init+0xa8>)
 8000b5e:	2100      	movs	r1, #0
 8000b60:	9101      	str	r1, [sp, #4]
 8000b62:	491a      	ldr	r1, [pc, #104]	@ (8000bcc <NunChuck_print_data_init+0xa0>)
 8000b64:	9100      	str	r1, [sp, #0]
 8000b66:	2160      	movs	r1, #96	@ 0x60
 8000b68:	2020      	movs	r0, #32
 8000b6a:	f001 f8cd 	bl	8001d08 <LCD_PutStr>
  LCD_PutStr(32,112, (char *)"accY =", DEFAULT_FONT, C_WHITE, C_BLACK);
 8000b6e:	4b15      	ldr	r3, [pc, #84]	@ (8000bc4 <NunChuck_print_data_init+0x98>)
 8000b70:	4a19      	ldr	r2, [pc, #100]	@ (8000bd8 <NunChuck_print_data_init+0xac>)
 8000b72:	2100      	movs	r1, #0
 8000b74:	9101      	str	r1, [sp, #4]
 8000b76:	4915      	ldr	r1, [pc, #84]	@ (8000bcc <NunChuck_print_data_init+0xa0>)
 8000b78:	9100      	str	r1, [sp, #0]
 8000b7a:	2170      	movs	r1, #112	@ 0x70
 8000b7c:	2020      	movs	r0, #32
 8000b7e:	f001 f8c3 	bl	8001d08 <LCD_PutStr>
  LCD_PutStr(32,128, (char *)"accZ =", DEFAULT_FONT, C_WHITE, C_BLACK);
 8000b82:	4b10      	ldr	r3, [pc, #64]	@ (8000bc4 <NunChuck_print_data_init+0x98>)
 8000b84:	4a15      	ldr	r2, [pc, #84]	@ (8000bdc <NunChuck_print_data_init+0xb0>)
 8000b86:	2100      	movs	r1, #0
 8000b88:	9101      	str	r1, [sp, #4]
 8000b8a:	4910      	ldr	r1, [pc, #64]	@ (8000bcc <NunChuck_print_data_init+0xa0>)
 8000b8c:	9100      	str	r1, [sp, #0]
 8000b8e:	2180      	movs	r1, #128	@ 0x80
 8000b90:	2020      	movs	r0, #32
 8000b92:	f001 f8b9 	bl	8001d08 <LCD_PutStr>
  LCD_PutStr(32,144, (char *)"Z    =", DEFAULT_FONT, C_WHITE, C_BLACK);
 8000b96:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc4 <NunChuck_print_data_init+0x98>)
 8000b98:	4a11      	ldr	r2, [pc, #68]	@ (8000be0 <NunChuck_print_data_init+0xb4>)
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	9101      	str	r1, [sp, #4]
 8000b9e:	490b      	ldr	r1, [pc, #44]	@ (8000bcc <NunChuck_print_data_init+0xa0>)
 8000ba0:	9100      	str	r1, [sp, #0]
 8000ba2:	2190      	movs	r1, #144	@ 0x90
 8000ba4:	2020      	movs	r0, #32
 8000ba6:	f001 f8af 	bl	8001d08 <LCD_PutStr>
  LCD_PutStr(32,160, (char *)"C    =", DEFAULT_FONT, C_WHITE, C_BLACK);
 8000baa:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <NunChuck_print_data_init+0x98>)
 8000bac:	4a0d      	ldr	r2, [pc, #52]	@ (8000be4 <NunChuck_print_data_init+0xb8>)
 8000bae:	2100      	movs	r1, #0
 8000bb0:	9101      	str	r1, [sp, #4]
 8000bb2:	4906      	ldr	r1, [pc, #24]	@ (8000bcc <NunChuck_print_data_init+0xa0>)
 8000bb4:	9100      	str	r1, [sp, #0]
 8000bb6:	21a0      	movs	r1, #160	@ 0xa0
 8000bb8:	2020      	movs	r0, #32
 8000bba:	f001 f8a5 	bl	8001d08 <LCD_PutStr>
}
 8000bbe:	46c0      	nop			@ (mov r8, r8)
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	0800896c 	.word	0x0800896c
 8000bc8:	080087a0 	.word	0x080087a0
 8000bcc:	0000ffff 	.word	0x0000ffff
 8000bd0:	080087a8 	.word	0x080087a8
 8000bd4:	080087b0 	.word	0x080087b0
 8000bd8:	080087b8 	.word	0x080087b8
 8000bdc:	080087c0 	.word	0x080087c0
 8000be0:	080087c8 	.word	0x080087c8
 8000be4:	080087d0 	.word	0x080087d0

08000be8 <NunChuck_phase1_init>:

void NunChuck_phase1_init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  // this function should be called once only;

  I2CMasterBuffer[0] = 0xF0; // at address 0xF0 of NunChuck write:
 8000bec:	4b10      	ldr	r3, [pc, #64]	@ (8000c30 <NunChuck_phase1_init+0x48>)
 8000bee:	22f0      	movs	r2, #240	@ 0xf0
 8000bf0:	701a      	strb	r2, [r3, #0]
  I2CMasterBuffer[1] = 0x55; // data 0x55
 8000bf2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c30 <NunChuck_phase1_init+0x48>)
 8000bf4:	2255      	movs	r2, #85	@ 0x55
 8000bf6:	705a      	strb	r2, [r3, #1]
  Write_To_NunChuck(&hi2c1, NUNCHUK_ADDRESS_SLAVE1, I2CMasterBuffer, 2);
 8000bf8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c30 <NunChuck_phase1_init+0x48>)
 8000bfa:	480e      	ldr	r0, [pc, #56]	@ (8000c34 <NunChuck_phase1_init+0x4c>)
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	21a4      	movs	r1, #164	@ 0xa4
 8000c00:	f7ff ff42 	bl	8000a88 <Write_To_NunChuck>
  HAL_Delay(10);
 8000c04:	200a      	movs	r0, #10
 8000c06:	f001 f9a1 	bl	8001f4c <HAL_Delay>

  I2CMasterBuffer[0] = 0xFB; // at address 0xFB of NunChuck write:
 8000c0a:	4b09      	ldr	r3, [pc, #36]	@ (8000c30 <NunChuck_phase1_init+0x48>)
 8000c0c:	22fb      	movs	r2, #251	@ 0xfb
 8000c0e:	701a      	strb	r2, [r3, #0]
  I2CMasterBuffer[1] = 0x00; // data 0x00
 8000c10:	4b07      	ldr	r3, [pc, #28]	@ (8000c30 <NunChuck_phase1_init+0x48>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	705a      	strb	r2, [r3, #1]
  Write_To_NunChuck(&hi2c1, NUNCHUK_ADDRESS_SLAVE1, I2CMasterBuffer, 2);
 8000c16:	4a06      	ldr	r2, [pc, #24]	@ (8000c30 <NunChuck_phase1_init+0x48>)
 8000c18:	4806      	ldr	r0, [pc, #24]	@ (8000c34 <NunChuck_phase1_init+0x4c>)
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	21a4      	movs	r1, #164	@ 0xa4
 8000c1e:	f7ff ff33 	bl	8000a88 <Write_To_NunChuck>
  HAL_Delay(10);
 8000c22:	200a      	movs	r0, #10
 8000c24:	f001 f992 	bl	8001f4c <HAL_Delay>
}
 8000c28:	46c0      	nop			@ (mov r8, r8)
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	46c0      	nop			@ (mov r8, r8)
 8000c30:	200001c8 	.word	0x200001c8
 8000c34:	20000094 	.word	0x20000094

08000c38 <NunChuck_phase2_read>:

void NunChuck_phase2_read(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  // this is called repeatedly to realize continued polling of NunChuck

  I2CMasterBuffer[0] = 0x00; // value;
 8000c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c6c <NunChuck_phase2_read+0x34>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	701a      	strb	r2, [r3, #0]
  Write_To_NunChuck(&hi2c1, NUNCHUK_ADDRESS_SLAVE1, I2CMasterBuffer, 1);
 8000c42:	4a0a      	ldr	r2, [pc, #40]	@ (8000c6c <NunChuck_phase2_read+0x34>)
 8000c44:	480a      	ldr	r0, [pc, #40]	@ (8000c70 <NunChuck_phase2_read+0x38>)
 8000c46:	2301      	movs	r3, #1
 8000c48:	21a4      	movs	r1, #164	@ 0xa4
 8000c4a:	f7ff ff1d 	bl	8000a88 <Write_To_NunChuck>
  HAL_Delay(10);
 8000c4e:	200a      	movs	r0, #10
 8000c50:	f001 f97c 	bl	8001f4c <HAL_Delay>

  Read_From_NunChuck(&hi2c1, NUNCHUK_ADDRESS_SLAVE2, I2CSlaveBuffer, 6);
 8000c54:	4a07      	ldr	r2, [pc, #28]	@ (8000c74 <NunChuck_phase2_read+0x3c>)
 8000c56:	4806      	ldr	r0, [pc, #24]	@ (8000c70 <NunChuck_phase2_read+0x38>)
 8000c58:	2306      	movs	r3, #6
 8000c5a:	21a5      	movs	r1, #165	@ 0xa5
 8000c5c:	f7ff ff40 	bl	8000ae0 <Read_From_NunChuck>
  HAL_Delay(10);
 8000c60:	200a      	movs	r0, #10
 8000c62:	f001 f973 	bl	8001f4c <HAL_Delay>
}
 8000c66:	46c0      	nop			@ (mov r8, r8)
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	200001c8 	.word	0x200001c8
 8000c70:	20000094 	.word	0x20000094
 8000c74:	20000208 	.word	0x20000208

08000c78 <NunChuck_translate_data>:

void NunChuck_translate_data(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
  int byte5 = I2CSlaveBuffer[5];
 8000c7e:	4b2d      	ldr	r3, [pc, #180]	@ (8000d34 <NunChuck_translate_data+0xbc>)
 8000c80:	795b      	ldrb	r3, [r3, #5]
 8000c82:	607b      	str	r3, [r7, #4]
  joy_x_axis = I2CSlaveBuffer[0];
 8000c84:	4b2b      	ldr	r3, [pc, #172]	@ (8000d34 <NunChuck_translate_data+0xbc>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	001a      	movs	r2, r3
 8000c8a:	4b2b      	ldr	r3, [pc, #172]	@ (8000d38 <NunChuck_translate_data+0xc0>)
 8000c8c:	801a      	strh	r2, [r3, #0]
  joy_y_axis = I2CSlaveBuffer[1];
 8000c8e:	4b29      	ldr	r3, [pc, #164]	@ (8000d34 <NunChuck_translate_data+0xbc>)
 8000c90:	785b      	ldrb	r3, [r3, #1]
 8000c92:	001a      	movs	r2, r3
 8000c94:	4b29      	ldr	r3, [pc, #164]	@ (8000d3c <NunChuck_translate_data+0xc4>)
 8000c96:	801a      	strh	r2, [r3, #0]
  accel_x_axis = (I2CSlaveBuffer[2] << 2);
 8000c98:	4b26      	ldr	r3, [pc, #152]	@ (8000d34 <NunChuck_translate_data+0xbc>)
 8000c9a:	789b      	ldrb	r3, [r3, #2]
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	4b27      	ldr	r3, [pc, #156]	@ (8000d40 <NunChuck_translate_data+0xc8>)
 8000ca2:	801a      	strh	r2, [r3, #0]
  accel_y_axis = (I2CSlaveBuffer[3] << 2);
 8000ca4:	4b23      	ldr	r3, [pc, #140]	@ (8000d34 <NunChuck_translate_data+0xbc>)
 8000ca6:	78db      	ldrb	r3, [r3, #3]
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	b29a      	uxth	r2, r3
 8000cac:	4b25      	ldr	r3, [pc, #148]	@ (8000d44 <NunChuck_translate_data+0xcc>)
 8000cae:	801a      	strh	r2, [r3, #0]
  accel_z_axis = (I2CSlaveBuffer[4] << 2);
 8000cb0:	4b20      	ldr	r3, [pc, #128]	@ (8000d34 <NunChuck_translate_data+0xbc>)
 8000cb2:	791b      	ldrb	r3, [r3, #4]
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	b29a      	uxth	r2, r3
 8000cb8:	4b23      	ldr	r3, [pc, #140]	@ (8000d48 <NunChuck_translate_data+0xd0>)
 8000cba:	801a      	strh	r2, [r3, #0]
  z_button = 0;
 8000cbc:	4b23      	ldr	r3, [pc, #140]	@ (8000d4c <NunChuck_translate_data+0xd4>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	801a      	strh	r2, [r3, #0]
  c_button = 0;
 8000cc2:	4b23      	ldr	r3, [pc, #140]	@ (8000d50 <NunChuck_translate_data+0xd8>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	801a      	strh	r2, [r3, #0]

  // byte I2CSlaveBuffer[5] contains bits for z and c buttons
  // it also contains the least significant bits for the accelerometer data
  if ((byte5 >> 0) & 1)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2201      	movs	r2, #1
 8000ccc:	4013      	ands	r3, r2
 8000cce:	d002      	beq.n	8000cd6 <NunChuck_translate_data+0x5e>
    z_button = 1;
 8000cd0:	4b1e      	ldr	r3, [pc, #120]	@ (8000d4c <NunChuck_translate_data+0xd4>)
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	801a      	strh	r2, [r3, #0]
  if ((byte5 >> 1) & 1)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2202      	movs	r2, #2
 8000cda:	4013      	ands	r3, r2
 8000cdc:	d002      	beq.n	8000ce4 <NunChuck_translate_data+0x6c>
    c_button = 1;
 8000cde:	4b1c      	ldr	r3, [pc, #112]	@ (8000d50 <NunChuck_translate_data+0xd8>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	801a      	strh	r2, [r3, #0]
  accel_x_axis += (byte5 >> 2) & 0x03;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	109b      	asrs	r3, r3, #2
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	2203      	movs	r2, #3
 8000cec:	4013      	ands	r3, r2
 8000cee:	b29a      	uxth	r2, r3
 8000cf0:	4b13      	ldr	r3, [pc, #76]	@ (8000d40 <NunChuck_translate_data+0xc8>)
 8000cf2:	881b      	ldrh	r3, [r3, #0]
 8000cf4:	18d3      	adds	r3, r2, r3
 8000cf6:	b29a      	uxth	r2, r3
 8000cf8:	4b11      	ldr	r3, [pc, #68]	@ (8000d40 <NunChuck_translate_data+0xc8>)
 8000cfa:	801a      	strh	r2, [r3, #0]
  accel_y_axis += (byte5 >> 4) & 0x03;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	111b      	asrs	r3, r3, #4
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	2203      	movs	r2, #3
 8000d04:	4013      	ands	r3, r2
 8000d06:	b29a      	uxth	r2, r3
 8000d08:	4b0e      	ldr	r3, [pc, #56]	@ (8000d44 <NunChuck_translate_data+0xcc>)
 8000d0a:	881b      	ldrh	r3, [r3, #0]
 8000d0c:	18d3      	adds	r3, r2, r3
 8000d0e:	b29a      	uxth	r2, r3
 8000d10:	4b0c      	ldr	r3, [pc, #48]	@ (8000d44 <NunChuck_translate_data+0xcc>)
 8000d12:	801a      	strh	r2, [r3, #0]
  accel_z_axis += (byte5 >> 6) & 0x03;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	119b      	asrs	r3, r3, #6
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	2203      	movs	r2, #3
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	b29a      	uxth	r2, r3
 8000d20:	4b09      	ldr	r3, [pc, #36]	@ (8000d48 <NunChuck_translate_data+0xd0>)
 8000d22:	881b      	ldrh	r3, [r3, #0]
 8000d24:	18d3      	adds	r3, r2, r3
 8000d26:	b29a      	uxth	r2, r3
 8000d28:	4b07      	ldr	r3, [pc, #28]	@ (8000d48 <NunChuck_translate_data+0xd0>)
 8000d2a:	801a      	strh	r2, [r3, #0]
}
 8000d2c:	46c0      	nop			@ (mov r8, r8)
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	b002      	add	sp, #8
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000208 	.word	0x20000208
 8000d38:	20000250 	.word	0x20000250
 8000d3c:	20000252 	.word	0x20000252
 8000d40:	20000254 	.word	0x20000254
 8000d44:	20000256 	.word	0x20000256
 8000d48:	20000258 	.word	0x20000258
 8000d4c:	2000025a 	.word	0x2000025a
 8000d50:	2000025c 	.word	0x2000025c

08000d54 <NunChuck_print_data>:

void NunChuck_print_data(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af02      	add	r7, sp, #8
  // this is called as many times as reads from the NunChuck;
  sprintf(text_buffer, "%03d", joy_x_axis);
 8000d5a:	4b40      	ldr	r3, [pc, #256]	@ (8000e5c <NunChuck_print_data+0x108>)
 8000d5c:	881b      	ldrh	r3, [r3, #0]
 8000d5e:	001a      	movs	r2, r3
 8000d60:	493f      	ldr	r1, [pc, #252]	@ (8000e60 <NunChuck_print_data+0x10c>)
 8000d62:	4b40      	ldr	r3, [pc, #256]	@ (8000e64 <NunChuck_print_data+0x110>)
 8000d64:	0018      	movs	r0, r3
 8000d66:	f006 fbbb 	bl	80074e0 <siprintf>
  LCD_PutStr(88, 64, (char *)text_buffer, DEFAULT_FONT, C_YELLOW, C_BLACK);
 8000d6a:	4b3f      	ldr	r3, [pc, #252]	@ (8000e68 <NunChuck_print_data+0x114>)
 8000d6c:	4a3d      	ldr	r2, [pc, #244]	@ (8000e64 <NunChuck_print_data+0x110>)
 8000d6e:	2100      	movs	r1, #0
 8000d70:	9101      	str	r1, [sp, #4]
 8000d72:	493e      	ldr	r1, [pc, #248]	@ (8000e6c <NunChuck_print_data+0x118>)
 8000d74:	9100      	str	r1, [sp, #0]
 8000d76:	2140      	movs	r1, #64	@ 0x40
 8000d78:	2058      	movs	r0, #88	@ 0x58
 8000d7a:	f000 ffc5 	bl	8001d08 <LCD_PutStr>
  sprintf(text_buffer, "%03d", joy_y_axis);
 8000d7e:	4b3c      	ldr	r3, [pc, #240]	@ (8000e70 <NunChuck_print_data+0x11c>)
 8000d80:	881b      	ldrh	r3, [r3, #0]
 8000d82:	001a      	movs	r2, r3
 8000d84:	4936      	ldr	r1, [pc, #216]	@ (8000e60 <NunChuck_print_data+0x10c>)
 8000d86:	4b37      	ldr	r3, [pc, #220]	@ (8000e64 <NunChuck_print_data+0x110>)
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f006 fba9 	bl	80074e0 <siprintf>
  LCD_PutStr(88, 80, (char *)text_buffer, DEFAULT_FONT, C_YELLOW, C_BLACK);
 8000d8e:	4b36      	ldr	r3, [pc, #216]	@ (8000e68 <NunChuck_print_data+0x114>)
 8000d90:	4a34      	ldr	r2, [pc, #208]	@ (8000e64 <NunChuck_print_data+0x110>)
 8000d92:	2100      	movs	r1, #0
 8000d94:	9101      	str	r1, [sp, #4]
 8000d96:	4935      	ldr	r1, [pc, #212]	@ (8000e6c <NunChuck_print_data+0x118>)
 8000d98:	9100      	str	r1, [sp, #0]
 8000d9a:	2150      	movs	r1, #80	@ 0x50
 8000d9c:	2058      	movs	r0, #88	@ 0x58
 8000d9e:	f000 ffb3 	bl	8001d08 <LCD_PutStr>
  sprintf(text_buffer, "%04d", accel_x_axis);
 8000da2:	4b34      	ldr	r3, [pc, #208]	@ (8000e74 <NunChuck_print_data+0x120>)
 8000da4:	881b      	ldrh	r3, [r3, #0]
 8000da6:	001a      	movs	r2, r3
 8000da8:	4933      	ldr	r1, [pc, #204]	@ (8000e78 <NunChuck_print_data+0x124>)
 8000daa:	4b2e      	ldr	r3, [pc, #184]	@ (8000e64 <NunChuck_print_data+0x110>)
 8000dac:	0018      	movs	r0, r3
 8000dae:	f006 fb97 	bl	80074e0 <siprintf>
  LCD_PutStr(88, 96, (char *)text_buffer, DEFAULT_FONT, C_YELLOW, C_BLACK);
 8000db2:	4b2d      	ldr	r3, [pc, #180]	@ (8000e68 <NunChuck_print_data+0x114>)
 8000db4:	4a2b      	ldr	r2, [pc, #172]	@ (8000e64 <NunChuck_print_data+0x110>)
 8000db6:	2100      	movs	r1, #0
 8000db8:	9101      	str	r1, [sp, #4]
 8000dba:	492c      	ldr	r1, [pc, #176]	@ (8000e6c <NunChuck_print_data+0x118>)
 8000dbc:	9100      	str	r1, [sp, #0]
 8000dbe:	2160      	movs	r1, #96	@ 0x60
 8000dc0:	2058      	movs	r0, #88	@ 0x58
 8000dc2:	f000 ffa1 	bl	8001d08 <LCD_PutStr>
  sprintf(text_buffer, "%04d", accel_y_axis);
 8000dc6:	4b2d      	ldr	r3, [pc, #180]	@ (8000e7c <NunChuck_print_data+0x128>)
 8000dc8:	881b      	ldrh	r3, [r3, #0]
 8000dca:	001a      	movs	r2, r3
 8000dcc:	492a      	ldr	r1, [pc, #168]	@ (8000e78 <NunChuck_print_data+0x124>)
 8000dce:	4b25      	ldr	r3, [pc, #148]	@ (8000e64 <NunChuck_print_data+0x110>)
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f006 fb85 	bl	80074e0 <siprintf>
  LCD_PutStr(88, 112, (char *)text_buffer, DEFAULT_FONT, C_YELLOW, C_BLACK);
 8000dd6:	4b24      	ldr	r3, [pc, #144]	@ (8000e68 <NunChuck_print_data+0x114>)
 8000dd8:	4a22      	ldr	r2, [pc, #136]	@ (8000e64 <NunChuck_print_data+0x110>)
 8000dda:	2100      	movs	r1, #0
 8000ddc:	9101      	str	r1, [sp, #4]
 8000dde:	4923      	ldr	r1, [pc, #140]	@ (8000e6c <NunChuck_print_data+0x118>)
 8000de0:	9100      	str	r1, [sp, #0]
 8000de2:	2170      	movs	r1, #112	@ 0x70
 8000de4:	2058      	movs	r0, #88	@ 0x58
 8000de6:	f000 ff8f 	bl	8001d08 <LCD_PutStr>
  sprintf(text_buffer, "%04d", accel_z_axis);
 8000dea:	4b25      	ldr	r3, [pc, #148]	@ (8000e80 <NunChuck_print_data+0x12c>)
 8000dec:	881b      	ldrh	r3, [r3, #0]
 8000dee:	001a      	movs	r2, r3
 8000df0:	4921      	ldr	r1, [pc, #132]	@ (8000e78 <NunChuck_print_data+0x124>)
 8000df2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e64 <NunChuck_print_data+0x110>)
 8000df4:	0018      	movs	r0, r3
 8000df6:	f006 fb73 	bl	80074e0 <siprintf>
  LCD_PutStr(88, 128, (char *)text_buffer, DEFAULT_FONT, C_YELLOW, C_BLACK);
 8000dfa:	4b1b      	ldr	r3, [pc, #108]	@ (8000e68 <NunChuck_print_data+0x114>)
 8000dfc:	4a19      	ldr	r2, [pc, #100]	@ (8000e64 <NunChuck_print_data+0x110>)
 8000dfe:	2100      	movs	r1, #0
 8000e00:	9101      	str	r1, [sp, #4]
 8000e02:	491a      	ldr	r1, [pc, #104]	@ (8000e6c <NunChuck_print_data+0x118>)
 8000e04:	9100      	str	r1, [sp, #0]
 8000e06:	2180      	movs	r1, #128	@ 0x80
 8000e08:	2058      	movs	r0, #88	@ 0x58
 8000e0a:	f000 ff7d 	bl	8001d08 <LCD_PutStr>
  sprintf(text_buffer, "%01d", z_button);
 8000e0e:	4b1d      	ldr	r3, [pc, #116]	@ (8000e84 <NunChuck_print_data+0x130>)
 8000e10:	881b      	ldrh	r3, [r3, #0]
 8000e12:	001a      	movs	r2, r3
 8000e14:	491c      	ldr	r1, [pc, #112]	@ (8000e88 <NunChuck_print_data+0x134>)
 8000e16:	4b13      	ldr	r3, [pc, #76]	@ (8000e64 <NunChuck_print_data+0x110>)
 8000e18:	0018      	movs	r0, r3
 8000e1a:	f006 fb61 	bl	80074e0 <siprintf>
  LCD_PutStr(88, 144, (char *)text_buffer, DEFAULT_FONT, C_YELLOW, C_BLACK);
 8000e1e:	4b12      	ldr	r3, [pc, #72]	@ (8000e68 <NunChuck_print_data+0x114>)
 8000e20:	4a10      	ldr	r2, [pc, #64]	@ (8000e64 <NunChuck_print_data+0x110>)
 8000e22:	2100      	movs	r1, #0
 8000e24:	9101      	str	r1, [sp, #4]
 8000e26:	4911      	ldr	r1, [pc, #68]	@ (8000e6c <NunChuck_print_data+0x118>)
 8000e28:	9100      	str	r1, [sp, #0]
 8000e2a:	2190      	movs	r1, #144	@ 0x90
 8000e2c:	2058      	movs	r0, #88	@ 0x58
 8000e2e:	f000 ff6b 	bl	8001d08 <LCD_PutStr>
  sprintf(text_buffer, "%01d", c_button);
 8000e32:	4b16      	ldr	r3, [pc, #88]	@ (8000e8c <NunChuck_print_data+0x138>)
 8000e34:	881b      	ldrh	r3, [r3, #0]
 8000e36:	001a      	movs	r2, r3
 8000e38:	4913      	ldr	r1, [pc, #76]	@ (8000e88 <NunChuck_print_data+0x134>)
 8000e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e64 <NunChuck_print_data+0x110>)
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f006 fb4f 	bl	80074e0 <siprintf>
  LCD_PutStr(88, 160, (char *)text_buffer, DEFAULT_FONT, C_YELLOW, C_BLACK);
 8000e42:	4b09      	ldr	r3, [pc, #36]	@ (8000e68 <NunChuck_print_data+0x114>)
 8000e44:	4a07      	ldr	r2, [pc, #28]	@ (8000e64 <NunChuck_print_data+0x110>)
 8000e46:	2100      	movs	r1, #0
 8000e48:	9101      	str	r1, [sp, #4]
 8000e4a:	4908      	ldr	r1, [pc, #32]	@ (8000e6c <NunChuck_print_data+0x118>)
 8000e4c:	9100      	str	r1, [sp, #0]
 8000e4e:	21a0      	movs	r1, #160	@ 0xa0
 8000e50:	2058      	movs	r0, #88	@ 0x58
 8000e52:	f000 ff59 	bl	8001d08 <LCD_PutStr>
}
 8000e56:	46c0      	nop			@ (mov r8, r8)
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000250 	.word	0x20000250
 8000e60:	080087d8 	.word	0x080087d8
 8000e64:	20000248 	.word	0x20000248
 8000e68:	0800896c 	.word	0x0800896c
 8000e6c:	0000ffe0 	.word	0x0000ffe0
 8000e70:	20000252 	.word	0x20000252
 8000e74:	20000254 	.word	0x20000254
 8000e78:	080087e0 	.word	0x080087e0
 8000e7c:	20000256 	.word	0x20000256
 8000e80:	20000258 	.word	0x20000258
 8000e84:	2000025a 	.word	0x2000025a
 8000e88:	08008798 	.word	0x08008798
 8000e8c:	2000025c 	.word	0x2000025c

08000e90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e90:	b590      	push	{r4, r7, lr}
 8000e92:	b09d      	sub	sp, #116	@ 0x74
 8000e94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e96:	2438      	movs	r4, #56	@ 0x38
 8000e98:	193b      	adds	r3, r7, r4
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	2338      	movs	r3, #56	@ 0x38
 8000e9e:	001a      	movs	r2, r3
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	f006 fb89 	bl	80075b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea6:	2324      	movs	r3, #36	@ 0x24
 8000ea8:	18fb      	adds	r3, r7, r3
 8000eaa:	0018      	movs	r0, r3
 8000eac:	2314      	movs	r3, #20
 8000eae:	001a      	movs	r2, r3
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	f006 fb81 	bl	80075b8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000eb6:	003b      	movs	r3, r7
 8000eb8:	0018      	movs	r0, r3
 8000eba:	2324      	movs	r3, #36	@ 0x24
 8000ebc:	001a      	movs	r2, r3
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	f006 fb7a 	bl	80075b8 <memset>

  // Configure the main internal regulator output voltage
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ec4:	4b24      	ldr	r3, [pc, #144]	@ (8000f58 <SystemClock_Config+0xc8>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a24      	ldr	r2, [pc, #144]	@ (8000f5c <SystemClock_Config+0xcc>)
 8000eca:	401a      	ands	r2, r3
 8000ecc:	4b22      	ldr	r3, [pc, #136]	@ (8000f58 <SystemClock_Config+0xc8>)
 8000ece:	2180      	movs	r1, #128	@ 0x80
 8000ed0:	0109      	lsls	r1, r1, #4
 8000ed2:	430a      	orrs	r2, r1
 8000ed4:	601a      	str	r2, [r3, #0]

  // Initializes the RCC Oscillators according to the specified parameters
  // in the RCC_OscInitTypeDef structure.
  // NOTE: use the high speed internal clock source, and not the default
  // MultiSpeed Internal (MSI) clock, which is slower;
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ed6:	0021      	movs	r1, r4
 8000ed8:	187b      	adds	r3, r7, r1
 8000eda:	2202      	movs	r2, #2
 8000edc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ede:	187b      	adds	r3, r7, r1
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ee4:	187b      	adds	r3, r7, r1
 8000ee6:	2210      	movs	r2, #16
 8000ee8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000eea:	187b      	adds	r3, r7, r1
 8000eec:	2200      	movs	r2, #0
 8000eee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef0:	187b      	adds	r3, r7, r1
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f002 f852 	bl	8002f9c <HAL_RCC_OscConfig>
 8000ef8:	1e03      	subs	r3, r0, #0
 8000efa:	d001      	beq.n	8000f00 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000efc:	f000 f9bc 	bl	8001278 <Error_Handler>
  }

  // Initializes the CPU, AHB and APB buses clocks
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f00:	2124      	movs	r1, #36	@ 0x24
 8000f02:	187b      	adds	r3, r7, r1
 8000f04:	220f      	movs	r2, #15
 8000f06:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f08:	187b      	adds	r3, r7, r1
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f0e:	187b      	adds	r3, r7, r1
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f14:	187b      	adds	r3, r7, r1
 8000f16:	2200      	movs	r2, #0
 8000f18:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f1a:	187b      	adds	r3, r7, r1
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f20:	187b      	adds	r3, r7, r1
 8000f22:	2100      	movs	r1, #0
 8000f24:	0018      	movs	r0, r3
 8000f26:	f002 fbfd 	bl	8003724 <HAL_RCC_ClockConfig>
 8000f2a:	1e03      	subs	r3, r0, #0
 8000f2c:	d001      	beq.n	8000f32 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000f2e:	f000 f9a3 	bl	8001278 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f32:	003b      	movs	r3, r7
 8000f34:	2202      	movs	r2, #2
 8000f36:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f38:	003b      	movs	r3, r7
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f3e:	003b      	movs	r3, r7
 8000f40:	0018      	movs	r0, r3
 8000f42:	f002 fe13 	bl	8003b6c <HAL_RCCEx_PeriphCLKConfig>
 8000f46:	1e03      	subs	r3, r0, #0
 8000f48:	d001      	beq.n	8000f4e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000f4a:	f000 f995 	bl	8001278 <Error_Handler>
  }
}
 8000f4e:	46c0      	nop			@ (mov r8, r8)
 8000f50:	46bd      	mov	sp, r7
 8000f52:	b01d      	add	sp, #116	@ 0x74
 8000f54:	bd90      	pop	{r4, r7, pc}
 8000f56:	46c0      	nop			@ (mov r8, r8)
 8000f58:	40007000 	.word	0x40007000
 8000f5c:	ffffe7ff 	.word	0xffffe7ff

08000f60 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  // Peripheral clock enable
  __HAL_RCC_I2C1_CLK_ENABLE();
 8000f66:	4b24      	ldr	r3, [pc, #144]	@ (8000ff8 <MX_I2C1_Init+0x98>)
 8000f68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000f6a:	4b23      	ldr	r3, [pc, #140]	@ (8000ff8 <MX_I2C1_Init+0x98>)
 8000f6c:	2180      	movs	r1, #128	@ 0x80
 8000f6e:	0389      	lsls	r1, r1, #14
 8000f70:	430a      	orrs	r2, r1
 8000f72:	639a      	str	r2, [r3, #56]	@ 0x38

  hi2c1.Instance = I2C1;
 8000f74:	4b21      	ldr	r3, [pc, #132]	@ (8000ffc <MX_I2C1_Init+0x9c>)
 8000f76:	4a22      	ldr	r2, [pc, #136]	@ (8001000 <MX_I2C1_Init+0xa0>)
 8000f78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000f7a:	4b20      	ldr	r3, [pc, #128]	@ (8000ffc <MX_I2C1_Init+0x9c>)
 8000f7c:	4a21      	ldr	r2, [pc, #132]	@ (8001004 <MX_I2C1_Init+0xa4>)
 8000f7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f80:	4b1e      	ldr	r3, [pc, #120]	@ (8000ffc <MX_I2C1_Init+0x9c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f86:	4b1d      	ldr	r3, [pc, #116]	@ (8000ffc <MX_I2C1_Init+0x9c>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ffc <MX_I2C1_Init+0x9c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f92:	4b1a      	ldr	r3, [pc, #104]	@ (8000ffc <MX_I2C1_Init+0x9c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f98:	4b18      	ldr	r3, [pc, #96]	@ (8000ffc <MX_I2C1_Init+0x9c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f9e:	4b17      	ldr	r3, [pc, #92]	@ (8000ffc <MX_I2C1_Init+0x9c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fa4:	4b15      	ldr	r3, [pc, #84]	@ (8000ffc <MX_I2C1_Init+0x9c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	621a      	str	r2, [r3, #32]
  HAL_I2C_Init(&hi2c1);
 8000faa:	4b14      	ldr	r3, [pc, #80]	@ (8000ffc <MX_I2C1_Init+0x9c>)
 8000fac:	0018      	movs	r0, r3
 8000fae:	f001 fa55 	bl	800245c <HAL_I2C_Init>

  // Configure Analog filter
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fb2:	4b12      	ldr	r3, [pc, #72]	@ (8000ffc <MX_I2C1_Init+0x9c>)
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	f001 ffa4 	bl	8002f04 <HAL_I2CEx_ConfigAnalogFilter>
 8000fbc:	1e03      	subs	r3, r0, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_I2C1_Init+0x64>
  {
    Error_Handler();
 8000fc0:	f000 f95a 	bl	8001278 <Error_Handler>
  //if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
  //{
  //  Error_Handler();
  //}

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000fc4:	1d3b      	adds	r3, r7, #4
 8000fc6:	22c0      	movs	r2, #192	@ 0xc0
 8000fc8:	0092      	lsls	r2, r2, #2
 8000fca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fcc:	1d3b      	adds	r3, r7, #4
 8000fce:	2212      	movs	r2, #18
 8000fd0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd8:	1d3b      	adds	r3, r7, #4
 8000fda:	2203      	movs	r2, #3
 8000fdc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fde:	1d3b      	adds	r3, r7, #4
 8000fe0:	2204      	movs	r2, #4
 8000fe2:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe4:	1d3b      	adds	r3, r7, #4
 8000fe6:	4a08      	ldr	r2, [pc, #32]	@ (8001008 <MX_I2C1_Init+0xa8>)
 8000fe8:	0019      	movs	r1, r3
 8000fea:	0010      	movs	r0, r2
 8000fec:	f001 f886 	bl	80020fc <HAL_GPIO_Init>
}
 8000ff0:	46c0      	nop			@ (mov r8, r8)
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	b006      	add	sp, #24
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	20000094 	.word	0x20000094
 8001000:	40005400 	.word	0x40005400
 8001004:	00707cbb 	.word	0x00707cbb
 8001008:	50000400 	.word	0x50000400

0800100c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001010:	4b18      	ldr	r3, [pc, #96]	@ (8001074 <MX_SPI1_Init+0x68>)
 8001012:	4a19      	ldr	r2, [pc, #100]	@ (8001078 <MX_SPI1_Init+0x6c>)
 8001014:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001016:	4b17      	ldr	r3, [pc, #92]	@ (8001074 <MX_SPI1_Init+0x68>)
 8001018:	2282      	movs	r2, #130	@ 0x82
 800101a:	0052      	lsls	r2, r2, #1
 800101c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800101e:	4b15      	ldr	r3, [pc, #84]	@ (8001074 <MX_SPI1_Init+0x68>)
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001024:	4b13      	ldr	r3, [pc, #76]	@ (8001074 <MX_SPI1_Init+0x68>)
 8001026:	2200      	movs	r2, #0
 8001028:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800102a:	4b12      	ldr	r3, [pc, #72]	@ (8001074 <MX_SPI1_Init+0x68>)
 800102c:	2202      	movs	r2, #2
 800102e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001030:	4b10      	ldr	r3, [pc, #64]	@ (8001074 <MX_SPI1_Init+0x68>)
 8001032:	2200      	movs	r2, #0
 8001034:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001036:	4b0f      	ldr	r3, [pc, #60]	@ (8001074 <MX_SPI1_Init+0x68>)
 8001038:	2280      	movs	r2, #128	@ 0x80
 800103a:	0092      	lsls	r2, r2, #2
 800103c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800103e:	4b0d      	ldr	r3, [pc, #52]	@ (8001074 <MX_SPI1_Init+0x68>)
 8001040:	2200      	movs	r2, #0
 8001042:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001044:	4b0b      	ldr	r3, [pc, #44]	@ (8001074 <MX_SPI1_Init+0x68>)
 8001046:	2200      	movs	r2, #0
 8001048:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800104a:	4b0a      	ldr	r3, [pc, #40]	@ (8001074 <MX_SPI1_Init+0x68>)
 800104c:	2200      	movs	r2, #0
 800104e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001050:	4b08      	ldr	r3, [pc, #32]	@ (8001074 <MX_SPI1_Init+0x68>)
 8001052:	2200      	movs	r2, #0
 8001054:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001056:	4b07      	ldr	r3, [pc, #28]	@ (8001074 <MX_SPI1_Init+0x68>)
 8001058:	2207      	movs	r2, #7
 800105a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800105c:	4b05      	ldr	r3, [pc, #20]	@ (8001074 <MX_SPI1_Init+0x68>)
 800105e:	0018      	movs	r0, r3
 8001060:	f002 ff12 	bl	8003e88 <HAL_SPI_Init>
 8001064:	1e03      	subs	r3, r0, #0
 8001066:	d001      	beq.n	800106c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001068:	f000 f906 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800106c:	46c0      	nop			@ (mov r8, r8)
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	46c0      	nop			@ (mov r8, r8)
 8001074:	200000e8 	.word	0x200000e8
 8001078:	40013000 	.word	0x40013000

0800107c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001080:	4b14      	ldr	r3, [pc, #80]	@ (80010d4 <MX_USART2_UART_Init+0x58>)
 8001082:	4a15      	ldr	r2, [pc, #84]	@ (80010d8 <MX_USART2_UART_Init+0x5c>)
 8001084:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001086:	4b13      	ldr	r3, [pc, #76]	@ (80010d4 <MX_USART2_UART_Init+0x58>)
 8001088:	22e1      	movs	r2, #225	@ 0xe1
 800108a:	0252      	lsls	r2, r2, #9
 800108c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800108e:	4b11      	ldr	r3, [pc, #68]	@ (80010d4 <MX_USART2_UART_Init+0x58>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001094:	4b0f      	ldr	r3, [pc, #60]	@ (80010d4 <MX_USART2_UART_Init+0x58>)
 8001096:	2200      	movs	r2, #0
 8001098:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800109a:	4b0e      	ldr	r3, [pc, #56]	@ (80010d4 <MX_USART2_UART_Init+0x58>)
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010a0:	4b0c      	ldr	r3, [pc, #48]	@ (80010d4 <MX_USART2_UART_Init+0x58>)
 80010a2:	220c      	movs	r2, #12
 80010a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010a6:	4b0b      	ldr	r3, [pc, #44]	@ (80010d4 <MX_USART2_UART_Init+0x58>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ac:	4b09      	ldr	r3, [pc, #36]	@ (80010d4 <MX_USART2_UART_Init+0x58>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010b2:	4b08      	ldr	r3, [pc, #32]	@ (80010d4 <MX_USART2_UART_Init+0x58>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010b8:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <MX_USART2_UART_Init+0x58>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010be:	4b05      	ldr	r3, [pc, #20]	@ (80010d4 <MX_USART2_UART_Init+0x58>)
 80010c0:	0018      	movs	r0, r3
 80010c2:	f003 f9a7 	bl	8004414 <HAL_UART_Init>
 80010c6:	1e03      	subs	r3, r0, #0
 80010c8:	d001      	beq.n	80010ce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010ca:	f000 f8d5 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010ce:	46c0      	nop			@ (mov r8, r8)
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000140 	.word	0x20000140
 80010d8:	40004400 	.word	0x40004400

080010dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010dc:	b590      	push	{r4, r7, lr}
 80010de:	b08b      	sub	sp, #44	@ 0x2c
 80010e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e2:	2414      	movs	r4, #20
 80010e4:	193b      	adds	r3, r7, r4
 80010e6:	0018      	movs	r0, r3
 80010e8:	2314      	movs	r3, #20
 80010ea:	001a      	movs	r2, r3
 80010ec:	2100      	movs	r1, #0
 80010ee:	f006 fa63 	bl	80075b8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f2:	4b5e      	ldr	r3, [pc, #376]	@ (800126c <MX_GPIO_Init+0x190>)
 80010f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010f6:	4b5d      	ldr	r3, [pc, #372]	@ (800126c <MX_GPIO_Init+0x190>)
 80010f8:	2104      	movs	r1, #4
 80010fa:	430a      	orrs	r2, r1
 80010fc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80010fe:	4b5b      	ldr	r3, [pc, #364]	@ (800126c <MX_GPIO_Init+0x190>)
 8001100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001102:	2204      	movs	r2, #4
 8001104:	4013      	ands	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800110a:	4b58      	ldr	r3, [pc, #352]	@ (800126c <MX_GPIO_Init+0x190>)
 800110c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800110e:	4b57      	ldr	r3, [pc, #348]	@ (800126c <MX_GPIO_Init+0x190>)
 8001110:	2180      	movs	r1, #128	@ 0x80
 8001112:	430a      	orrs	r2, r1
 8001114:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001116:	4b55      	ldr	r3, [pc, #340]	@ (800126c <MX_GPIO_Init+0x190>)
 8001118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800111a:	2280      	movs	r2, #128	@ 0x80
 800111c:	4013      	ands	r3, r2
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	4b52      	ldr	r3, [pc, #328]	@ (800126c <MX_GPIO_Init+0x190>)
 8001124:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001126:	4b51      	ldr	r3, [pc, #324]	@ (800126c <MX_GPIO_Init+0x190>)
 8001128:	2101      	movs	r1, #1
 800112a:	430a      	orrs	r2, r1
 800112c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800112e:	4b4f      	ldr	r3, [pc, #316]	@ (800126c <MX_GPIO_Init+0x190>)
 8001130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001132:	2201      	movs	r2, #1
 8001134:	4013      	ands	r3, r2
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800113a:	4b4c      	ldr	r3, [pc, #304]	@ (800126c <MX_GPIO_Init+0x190>)
 800113c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800113e:	4b4b      	ldr	r3, [pc, #300]	@ (800126c <MX_GPIO_Init+0x190>)
 8001140:	2102      	movs	r1, #2
 8001142:	430a      	orrs	r2, r1
 8001144:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001146:	4b49      	ldr	r3, [pc, #292]	@ (800126c <MX_GPIO_Init+0x190>)
 8001148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800114a:	2202      	movs	r2, #2
 800114c:	4013      	ands	r3, r2
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001152:	23a0      	movs	r3, #160	@ 0xa0
 8001154:	05db      	lsls	r3, r3, #23
 8001156:	2200      	movs	r2, #0
 8001158:	2120      	movs	r1, #32
 800115a:	0018      	movs	r0, r3
 800115c:	f001 f961 	bl	8002422 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001160:	193b      	adds	r3, r7, r4
 8001162:	2280      	movs	r2, #128	@ 0x80
 8001164:	0192      	lsls	r2, r2, #6
 8001166:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001168:	193b      	adds	r3, r7, r4
 800116a:	2284      	movs	r2, #132	@ 0x84
 800116c:	0392      	lsls	r2, r2, #14
 800116e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	193b      	adds	r3, r7, r4
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001176:	193b      	adds	r3, r7, r4
 8001178:	4a3d      	ldr	r2, [pc, #244]	@ (8001270 <MX_GPIO_Init+0x194>)
 800117a:	0019      	movs	r1, r3
 800117c:	0010      	movs	r0, r2
 800117e:	f000 ffbd 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001182:	193b      	adds	r3, r7, r4
 8001184:	2220      	movs	r2, #32
 8001186:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001188:	193b      	adds	r3, r7, r4
 800118a:	2201      	movs	r2, #1
 800118c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	193b      	adds	r3, r7, r4
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001194:	193b      	adds	r3, r7, r4
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119a:	193a      	adds	r2, r7, r4
 800119c:	23a0      	movs	r3, #160	@ 0xa0
 800119e:	05db      	lsls	r3, r3, #23
 80011a0:	0011      	movs	r1, r2
 80011a2:	0018      	movs	r0, r3
 80011a4:	f000 ffaa 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level - DC*/
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80011a8:	2380      	movs	r3, #128	@ 0x80
 80011aa:	0099      	lsls	r1, r3, #2
 80011ac:	23a0      	movs	r3, #160	@ 0xa0
 80011ae:	05db      	lsls	r3, r3, #23
 80011b0:	2200      	movs	r2, #0
 80011b2:	0018      	movs	r0, r3
 80011b4:	f001 f935 	bl	8002422 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level - RST */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80011b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001270 <MX_GPIO_Init+0x194>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	2180      	movs	r1, #128	@ 0x80
 80011be:	0018      	movs	r0, r3
 80011c0:	f001 f92f 	bl	8002422 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level - CS */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80011c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001274 <MX_GPIO_Init+0x198>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	2140      	movs	r1, #64	@ 0x40
 80011ca:	0018      	movs	r0, r3
 80011cc:	f001 f929 	bl	8002422 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ST7789_DC_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011d0:	193b      	adds	r3, r7, r4
 80011d2:	2280      	movs	r2, #128	@ 0x80
 80011d4:	0092      	lsls	r2, r2, #2
 80011d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d8:	193b      	adds	r3, r7, r4
 80011da:	2201      	movs	r2, #1
 80011dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	193b      	adds	r3, r7, r4
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	193b      	adds	r3, r7, r4
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ea:	193a      	adds	r2, r7, r4
 80011ec:	23a0      	movs	r3, #160	@ 0xa0
 80011ee:	05db      	lsls	r3, r3, #23
 80011f0:	0011      	movs	r1, r2
 80011f2:	0018      	movs	r0, r3
 80011f4:	f000 ff82 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7789_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80011f8:	193b      	adds	r3, r7, r4
 80011fa:	2280      	movs	r2, #128	@ 0x80
 80011fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fe:	193b      	adds	r3, r7, r4
 8001200:	2201      	movs	r2, #1
 8001202:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	193b      	adds	r3, r7, r4
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	193b      	adds	r3, r7, r4
 800120c:	2200      	movs	r2, #0
 800120e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001210:	193b      	adds	r3, r7, r4
 8001212:	4a17      	ldr	r2, [pc, #92]	@ (8001270 <MX_GPIO_Init+0x194>)
 8001214:	0019      	movs	r1, r3
 8001216:	0010      	movs	r0, r2
 8001218:	f000 ff70 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7789_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800121c:	193b      	adds	r3, r7, r4
 800121e:	2240      	movs	r2, #64	@ 0x40
 8001220:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001222:	193b      	adds	r3, r7, r4
 8001224:	2201      	movs	r2, #1
 8001226:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	193b      	adds	r3, r7, r4
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122e:	193b      	adds	r3, r7, r4
 8001230:	2200      	movs	r2, #0
 8001232:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001234:	193b      	adds	r3, r7, r4
 8001236:	4a0f      	ldr	r2, [pc, #60]	@ (8001274 <MX_GPIO_Init+0x198>)
 8001238:	0019      	movs	r1, r3
 800123a:	0010      	movs	r0, r2
 800123c:	f000 ff5e 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001240:	0021      	movs	r1, r4
 8001242:	187b      	adds	r3, r7, r1
 8001244:	2280      	movs	r2, #128	@ 0x80
 8001246:	0192      	lsls	r2, r2, #6
 8001248:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // GPIO_MODE_IT_FALLING;
 800124a:	187b      	adds	r3, r7, r1
 800124c:	2200      	movs	r2, #0
 800124e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	187b      	adds	r3, r7, r1
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001256:	187b      	adds	r3, r7, r1
 8001258:	4a05      	ldr	r2, [pc, #20]	@ (8001270 <MX_GPIO_Init+0x194>)
 800125a:	0019      	movs	r1, r3
 800125c:	0010      	movs	r0, r2
 800125e:	f000 ff4d 	bl	80020fc <HAL_GPIO_Init>
}
 8001262:	46c0      	nop			@ (mov r8, r8)
 8001264:	46bd      	mov	sp, r7
 8001266:	b00b      	add	sp, #44	@ 0x2c
 8001268:	bd90      	pop	{r4, r7, pc}
 800126a:	46c0      	nop			@ (mov r8, r8)
 800126c:	40021000 	.word	0x40021000
 8001270:	50000800 	.word	0x50000800
 8001274:	50000400 	.word	0x50000400

08001278 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800127c:	b672      	cpsid	i
}
 800127e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001280:	46c0      	nop			@ (mov r8, r8)
 8001282:	e7fd      	b.n	8001280 <Error_Handler+0x8>

08001284 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001288:	4b07      	ldr	r3, [pc, #28]	@ (80012a8 <HAL_MspInit+0x24>)
 800128a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800128c:	4b06      	ldr	r3, [pc, #24]	@ (80012a8 <HAL_MspInit+0x24>)
 800128e:	2101      	movs	r1, #1
 8001290:	430a      	orrs	r2, r1
 8001292:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001294:	4b04      	ldr	r3, [pc, #16]	@ (80012a8 <HAL_MspInit+0x24>)
 8001296:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001298:	4b03      	ldr	r3, [pc, #12]	@ (80012a8 <HAL_MspInit+0x24>)
 800129a:	2180      	movs	r1, #128	@ 0x80
 800129c:	0549      	lsls	r1, r1, #21
 800129e:	430a      	orrs	r2, r1
 80012a0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a2:	46c0      	nop			@ (mov r8, r8)
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40021000 	.word	0x40021000

080012ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012ac:	b590      	push	{r4, r7, lr}
 80012ae:	b089      	sub	sp, #36	@ 0x24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	240c      	movs	r4, #12
 80012b6:	193b      	adds	r3, r7, r4
 80012b8:	0018      	movs	r0, r3
 80012ba:	2314      	movs	r3, #20
 80012bc:	001a      	movs	r2, r3
 80012be:	2100      	movs	r1, #0
 80012c0:	f006 f97a 	bl	80075b8 <memset>
  if(hi2c->Instance==I2C2)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a18      	ldr	r2, [pc, #96]	@ (800132c <HAL_I2C_MspInit+0x80>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d129      	bne.n	8001322 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ce:	4b18      	ldr	r3, [pc, #96]	@ (8001330 <HAL_I2C_MspInit+0x84>)
 80012d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012d2:	4b17      	ldr	r3, [pc, #92]	@ (8001330 <HAL_I2C_MspInit+0x84>)
 80012d4:	2102      	movs	r1, #2
 80012d6:	430a      	orrs	r2, r1
 80012d8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80012da:	4b15      	ldr	r3, [pc, #84]	@ (8001330 <HAL_I2C_MspInit+0x84>)
 80012dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012de:	2202      	movs	r2, #2
 80012e0:	4013      	ands	r3, r2
 80012e2:	60bb      	str	r3, [r7, #8]
 80012e4:	68bb      	ldr	r3, [r7, #8]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80012e6:	193b      	adds	r3, r7, r4
 80012e8:	22c0      	movs	r2, #192	@ 0xc0
 80012ea:	0112      	lsls	r2, r2, #4
 80012ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ee:	0021      	movs	r1, r4
 80012f0:	187b      	adds	r3, r7, r1
 80012f2:	2212      	movs	r2, #18
 80012f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	187b      	adds	r3, r7, r1
 80012f8:	2200      	movs	r2, #0
 80012fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fc:	187b      	adds	r3, r7, r1
 80012fe:	2203      	movs	r2, #3
 8001300:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8001302:	187b      	adds	r3, r7, r1
 8001304:	2206      	movs	r2, #6
 8001306:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001308:	187b      	adds	r3, r7, r1
 800130a:	4a0a      	ldr	r2, [pc, #40]	@ (8001334 <HAL_I2C_MspInit+0x88>)
 800130c:	0019      	movs	r1, r3
 800130e:	0010      	movs	r0, r2
 8001310:	f000 fef4 	bl	80020fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001314:	4b06      	ldr	r3, [pc, #24]	@ (8001330 <HAL_I2C_MspInit+0x84>)
 8001316:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001318:	4b05      	ldr	r3, [pc, #20]	@ (8001330 <HAL_I2C_MspInit+0x84>)
 800131a:	2180      	movs	r1, #128	@ 0x80
 800131c:	03c9      	lsls	r1, r1, #15
 800131e:	430a      	orrs	r2, r1
 8001320:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001322:	46c0      	nop			@ (mov r8, r8)
 8001324:	46bd      	mov	sp, r7
 8001326:	b009      	add	sp, #36	@ 0x24
 8001328:	bd90      	pop	{r4, r7, pc}
 800132a:	46c0      	nop			@ (mov r8, r8)
 800132c:	40005800 	.word	0x40005800
 8001330:	40021000 	.word	0x40021000
 8001334:	50000400 	.word	0x50000400

08001338 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001338:	b590      	push	{r4, r7, lr}
 800133a:	b08b      	sub	sp, #44	@ 0x2c
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001340:	2414      	movs	r4, #20
 8001342:	193b      	adds	r3, r7, r4
 8001344:	0018      	movs	r0, r3
 8001346:	2314      	movs	r3, #20
 8001348:	001a      	movs	r2, r3
 800134a:	2100      	movs	r1, #0
 800134c:	f006 f934 	bl	80075b8 <memset>
  if(hspi->Instance==SPI1)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a28      	ldr	r2, [pc, #160]	@ (80013f8 <HAL_SPI_MspInit+0xc0>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d14a      	bne.n	80013f0 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800135a:	4b28      	ldr	r3, [pc, #160]	@ (80013fc <HAL_SPI_MspInit+0xc4>)
 800135c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800135e:	4b27      	ldr	r3, [pc, #156]	@ (80013fc <HAL_SPI_MspInit+0xc4>)
 8001360:	2180      	movs	r1, #128	@ 0x80
 8001362:	0149      	lsls	r1, r1, #5
 8001364:	430a      	orrs	r2, r1
 8001366:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001368:	4b24      	ldr	r3, [pc, #144]	@ (80013fc <HAL_SPI_MspInit+0xc4>)
 800136a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800136c:	4b23      	ldr	r3, [pc, #140]	@ (80013fc <HAL_SPI_MspInit+0xc4>)
 800136e:	2101      	movs	r1, #1
 8001370:	430a      	orrs	r2, r1
 8001372:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001374:	4b21      	ldr	r3, [pc, #132]	@ (80013fc <HAL_SPI_MspInit+0xc4>)
 8001376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001378:	2201      	movs	r2, #1
 800137a:	4013      	ands	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
 800137e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001380:	4b1e      	ldr	r3, [pc, #120]	@ (80013fc <HAL_SPI_MspInit+0xc4>)
 8001382:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001384:	4b1d      	ldr	r3, [pc, #116]	@ (80013fc <HAL_SPI_MspInit+0xc4>)
 8001386:	2102      	movs	r1, #2
 8001388:	430a      	orrs	r2, r1
 800138a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800138c:	4b1b      	ldr	r3, [pc, #108]	@ (80013fc <HAL_SPI_MspInit+0xc4>)
 800138e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001390:	2202      	movs	r2, #2
 8001392:	4013      	ands	r3, r2
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001398:	193b      	adds	r3, r7, r4
 800139a:	22c0      	movs	r2, #192	@ 0xc0
 800139c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	193b      	adds	r3, r7, r4
 80013a0:	2202      	movs	r2, #2
 80013a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	193b      	adds	r3, r7, r4
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013aa:	193b      	adds	r3, r7, r4
 80013ac:	2203      	movs	r2, #3
 80013ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80013b0:	193b      	adds	r3, r7, r4
 80013b2:	2200      	movs	r2, #0
 80013b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b6:	193a      	adds	r2, r7, r4
 80013b8:	23a0      	movs	r3, #160	@ 0xa0
 80013ba:	05db      	lsls	r3, r3, #23
 80013bc:	0011      	movs	r1, r2
 80013be:	0018      	movs	r0, r3
 80013c0:	f000 fe9c 	bl	80020fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013c4:	0021      	movs	r1, r4
 80013c6:	187b      	adds	r3, r7, r1
 80013c8:	2208      	movs	r2, #8
 80013ca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013cc:	187b      	adds	r3, r7, r1
 80013ce:	2202      	movs	r2, #2
 80013d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	187b      	adds	r3, r7, r1
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d8:	187b      	adds	r3, r7, r1
 80013da:	2203      	movs	r2, #3
 80013dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80013de:	187b      	adds	r3, r7, r1
 80013e0:	2200      	movs	r2, #0
 80013e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e4:	187b      	adds	r3, r7, r1
 80013e6:	4a06      	ldr	r2, [pc, #24]	@ (8001400 <HAL_SPI_MspInit+0xc8>)
 80013e8:	0019      	movs	r1, r3
 80013ea:	0010      	movs	r0, r2
 80013ec:	f000 fe86 	bl	80020fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80013f0:	46c0      	nop			@ (mov r8, r8)
 80013f2:	46bd      	mov	sp, r7
 80013f4:	b00b      	add	sp, #44	@ 0x2c
 80013f6:	bd90      	pop	{r4, r7, pc}
 80013f8:	40013000 	.word	0x40013000
 80013fc:	40021000 	.word	0x40021000
 8001400:	50000400 	.word	0x50000400

08001404 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001404:	b590      	push	{r4, r7, lr}
 8001406:	b089      	sub	sp, #36	@ 0x24
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140c:	240c      	movs	r4, #12
 800140e:	193b      	adds	r3, r7, r4
 8001410:	0018      	movs	r0, r3
 8001412:	2314      	movs	r3, #20
 8001414:	001a      	movs	r2, r3
 8001416:	2100      	movs	r1, #0
 8001418:	f006 f8ce 	bl	80075b8 <memset>
  if(huart->Instance==USART2)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a18      	ldr	r2, [pc, #96]	@ (8001484 <HAL_UART_MspInit+0x80>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d129      	bne.n	800147a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001426:	4b18      	ldr	r3, [pc, #96]	@ (8001488 <HAL_UART_MspInit+0x84>)
 8001428:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800142a:	4b17      	ldr	r3, [pc, #92]	@ (8001488 <HAL_UART_MspInit+0x84>)
 800142c:	2180      	movs	r1, #128	@ 0x80
 800142e:	0289      	lsls	r1, r1, #10
 8001430:	430a      	orrs	r2, r1
 8001432:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001434:	4b14      	ldr	r3, [pc, #80]	@ (8001488 <HAL_UART_MspInit+0x84>)
 8001436:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001438:	4b13      	ldr	r3, [pc, #76]	@ (8001488 <HAL_UART_MspInit+0x84>)
 800143a:	2101      	movs	r1, #1
 800143c:	430a      	orrs	r2, r1
 800143e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001440:	4b11      	ldr	r3, [pc, #68]	@ (8001488 <HAL_UART_MspInit+0x84>)
 8001442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001444:	2201      	movs	r2, #1
 8001446:	4013      	ands	r3, r2
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800144c:	0021      	movs	r1, r4
 800144e:	187b      	adds	r3, r7, r1
 8001450:	220c      	movs	r2, #12
 8001452:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001454:	187b      	adds	r3, r7, r1
 8001456:	2202      	movs	r2, #2
 8001458:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	187b      	adds	r3, r7, r1
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001460:	187b      	adds	r3, r7, r1
 8001462:	2203      	movs	r2, #3
 8001464:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001466:	187b      	adds	r3, r7, r1
 8001468:	2204      	movs	r2, #4
 800146a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146c:	187a      	adds	r2, r7, r1
 800146e:	23a0      	movs	r3, #160	@ 0xa0
 8001470:	05db      	lsls	r3, r3, #23
 8001472:	0011      	movs	r1, r2
 8001474:	0018      	movs	r0, r3
 8001476:	f000 fe41 	bl	80020fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800147a:	46c0      	nop			@ (mov r8, r8)
 800147c:	46bd      	mov	sp, r7
 800147e:	b009      	add	sp, #36	@ 0x24
 8001480:	bd90      	pop	{r4, r7, pc}
 8001482:	46c0      	nop			@ (mov r8, r8)
 8001484:	40004400 	.word	0x40004400
 8001488:	40021000 	.word	0x40021000

0800148c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001490:	46c0      	nop			@ (mov r8, r8)
 8001492:	e7fd      	b.n	8001490 <NMI_Handler+0x4>

08001494 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001498:	46c0      	nop			@ (mov r8, r8)
 800149a:	e7fd      	b.n	8001498 <HardFault_Handler+0x4>

0800149c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80014a0:	46c0      	nop			@ (mov r8, r8)
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014aa:	46c0      	nop			@ (mov r8, r8)
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014b4:	f000 fd2e 	bl	8001f14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014b8:	46c0      	nop			@ (mov r8, r8)
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	af00      	add	r7, sp, #0
	return 1;
 80014c2:	2301      	movs	r3, #1
}
 80014c4:	0018      	movs	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <_kill>:

int _kill(int pid, int sig)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
 80014d2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80014d4:	f006 f8c6 	bl	8007664 <__errno>
 80014d8:	0003      	movs	r3, r0
 80014da:	2216      	movs	r2, #22
 80014dc:	601a      	str	r2, [r3, #0]
	return -1;
 80014de:	2301      	movs	r3, #1
 80014e0:	425b      	negs	r3, r3
}
 80014e2:	0018      	movs	r0, r3
 80014e4:	46bd      	mov	sp, r7
 80014e6:	b002      	add	sp, #8
 80014e8:	bd80      	pop	{r7, pc}

080014ea <_exit>:

void _exit (int status)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80014f2:	2301      	movs	r3, #1
 80014f4:	425a      	negs	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	0011      	movs	r1, r2
 80014fa:	0018      	movs	r0, r3
 80014fc:	f7ff ffe5 	bl	80014ca <_kill>
	while (1) {}		/* Make sure we hang here */
 8001500:	46c0      	nop			@ (mov r8, r8)
 8001502:	e7fd      	b.n	8001500 <_exit+0x16>

08001504 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]
 8001514:	e00a      	b.n	800152c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001516:	e000      	b.n	800151a <_read+0x16>
 8001518:	bf00      	nop
 800151a:	0001      	movs	r1, r0
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	1c5a      	adds	r2, r3, #1
 8001520:	60ba      	str	r2, [r7, #8]
 8001522:	b2ca      	uxtb	r2, r1
 8001524:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	3301      	adds	r3, #1
 800152a:	617b      	str	r3, [r7, #20]
 800152c:	697a      	ldr	r2, [r7, #20]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	429a      	cmp	r2, r3
 8001532:	dbf0      	blt.n	8001516 <_read+0x12>
	}

return len;
 8001534:	687b      	ldr	r3, [r7, #4]
}
 8001536:	0018      	movs	r0, r3
 8001538:	46bd      	mov	sp, r7
 800153a:	b006      	add	sp, #24
 800153c:	bd80      	pop	{r7, pc}

0800153e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b086      	sub	sp, #24
 8001542:	af00      	add	r7, sp, #0
 8001544:	60f8      	str	r0, [r7, #12]
 8001546:	60b9      	str	r1, [r7, #8]
 8001548:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154a:	2300      	movs	r3, #0
 800154c:	617b      	str	r3, [r7, #20]
 800154e:	e009      	b.n	8001564 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	1c5a      	adds	r2, r3, #1
 8001554:	60ba      	str	r2, [r7, #8]
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	0018      	movs	r0, r3
 800155a:	e000      	b.n	800155e <_write+0x20>
 800155c:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	3301      	adds	r3, #1
 8001562:	617b      	str	r3, [r7, #20]
 8001564:	697a      	ldr	r2, [r7, #20]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	429a      	cmp	r2, r3
 800156a:	dbf1      	blt.n	8001550 <_write+0x12>
	}
	return len;
 800156c:	687b      	ldr	r3, [r7, #4]
}
 800156e:	0018      	movs	r0, r3
 8001570:	46bd      	mov	sp, r7
 8001572:	b006      	add	sp, #24
 8001574:	bd80      	pop	{r7, pc}

08001576 <_close>:

int _close(int file)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b082      	sub	sp, #8
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
	return -1;
 800157e:	2301      	movs	r3, #1
 8001580:	425b      	negs	r3, r3
}
 8001582:	0018      	movs	r0, r3
 8001584:	46bd      	mov	sp, r7
 8001586:	b002      	add	sp, #8
 8001588:	bd80      	pop	{r7, pc}

0800158a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
 8001592:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	2280      	movs	r2, #128	@ 0x80
 8001598:	0192      	lsls	r2, r2, #6
 800159a:	605a      	str	r2, [r3, #4]
	return 0;
 800159c:	2300      	movs	r3, #0
}
 800159e:	0018      	movs	r0, r3
 80015a0:	46bd      	mov	sp, r7
 80015a2:	b002      	add	sp, #8
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <_isatty>:

int _isatty(int file)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
	return 1;
 80015ae:	2301      	movs	r3, #1
}
 80015b0:	0018      	movs	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	b002      	add	sp, #8
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
	return 0;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	0018      	movs	r0, r3
 80015c8:	46bd      	mov	sp, r7
 80015ca:	b004      	add	sp, #16
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015d8:	4a14      	ldr	r2, [pc, #80]	@ (800162c <_sbrk+0x5c>)
 80015da:	4b15      	ldr	r3, [pc, #84]	@ (8001630 <_sbrk+0x60>)
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015e4:	4b13      	ldr	r3, [pc, #76]	@ (8001634 <_sbrk+0x64>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d102      	bne.n	80015f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015ec:	4b11      	ldr	r3, [pc, #68]	@ (8001634 <_sbrk+0x64>)
 80015ee:	4a12      	ldr	r2, [pc, #72]	@ (8001638 <_sbrk+0x68>)
 80015f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015f2:	4b10      	ldr	r3, [pc, #64]	@ (8001634 <_sbrk+0x64>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	18d3      	adds	r3, r2, r3
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d207      	bcs.n	8001610 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001600:	f006 f830 	bl	8007664 <__errno>
 8001604:	0003      	movs	r3, r0
 8001606:	220c      	movs	r2, #12
 8001608:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800160a:	2301      	movs	r3, #1
 800160c:	425b      	negs	r3, r3
 800160e:	e009      	b.n	8001624 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001610:	4b08      	ldr	r3, [pc, #32]	@ (8001634 <_sbrk+0x64>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001616:	4b07      	ldr	r3, [pc, #28]	@ (8001634 <_sbrk+0x64>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	18d2      	adds	r2, r2, r3
 800161e:	4b05      	ldr	r3, [pc, #20]	@ (8001634 <_sbrk+0x64>)
 8001620:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001622:	68fb      	ldr	r3, [r7, #12]
}
 8001624:	0018      	movs	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	b006      	add	sp, #24
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20002000 	.word	0x20002000
 8001630:	00000400 	.word	0x00000400
 8001634:	20000268 	.word	0x20000268
 8001638:	20000450 	.word	0x20000450

0800163c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001640:	46c0      	nop			@ (mov r8, r8)
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
	...

08001648 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8001648:	480d      	ldr	r0, [pc, #52]	@ (8001680 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800164a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800164c:	f7ff fff6 	bl	800163c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001650:	480c      	ldr	r0, [pc, #48]	@ (8001684 <LoopForever+0x6>)
  ldr r1, =_edata
 8001652:	490d      	ldr	r1, [pc, #52]	@ (8001688 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001654:	4a0d      	ldr	r2, [pc, #52]	@ (800168c <LoopForever+0xe>)
  movs r3, #0
 8001656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001658:	e002      	b.n	8001660 <LoopCopyDataInit>

0800165a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800165a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800165c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800165e:	3304      	adds	r3, #4

08001660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001664:	d3f9      	bcc.n	800165a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001666:	4a0a      	ldr	r2, [pc, #40]	@ (8001690 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001668:	4c0a      	ldr	r4, [pc, #40]	@ (8001694 <LoopForever+0x16>)
  movs r3, #0
 800166a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800166c:	e001      	b.n	8001672 <LoopFillZerobss>

0800166e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800166e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001670:	3204      	adds	r2, #4

08001672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001674:	d3fb      	bcc.n	800166e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001676:	f005 fffb 	bl	8007670 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800167a:	f7ff f809 	bl	8000690 <main>

0800167e <LoopForever>:

LoopForever:
    b LoopForever
 800167e:	e7fe      	b.n	800167e <LoopForever>
  ldr   r0, =_estack
 8001680:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001688:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800168c:	08009320 	.word	0x08009320
  ldr r2, =_sbss
 8001690:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001694:	2000044c 	.word	0x2000044c

08001698 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001698:	e7fe      	b.n	8001698 <ADC1_COMP_IRQHandler>
	...

0800169c <setSPI_Size>:
 * @brief Sets SPI interface word size (0=8bit, 1=16 bit)
 * @param none
 * @return none
 */
static void setSPI_Size(int8_t size)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	0002      	movs	r2, r0
 80016a4:	1dfb      	adds	r3, r7, #7
 80016a6:	701a      	strb	r2, [r3, #0]
  if(config.spi_sz!=size){
 80016a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001714 <setSPI_Size+0x78>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	b25b      	sxtb	r3, r3
 80016ae:	1dfa      	adds	r2, r7, #7
 80016b0:	7812      	ldrb	r2, [r2, #0]
 80016b2:	b252      	sxtb	r2, r2
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d029      	beq.n	800170c <setSPI_Size+0x70>
    __HAL_SPI_DISABLE(&LCD_HANDLE);
 80016b8:	4b17      	ldr	r3, [pc, #92]	@ (8001718 <setSPI_Size+0x7c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	4b16      	ldr	r3, [pc, #88]	@ (8001718 <setSPI_Size+0x7c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2140      	movs	r1, #64	@ 0x40
 80016c4:	438a      	bics	r2, r1
 80016c6:	601a      	str	r2, [r3, #0]
    config.spi_sz=size;
 80016c8:	4b12      	ldr	r3, [pc, #72]	@ (8001714 <setSPI_Size+0x78>)
 80016ca:	1dfa      	adds	r2, r7, #7
 80016cc:	7812      	ldrb	r2, [r2, #0]
 80016ce:	701a      	strb	r2, [r3, #0]
    if(size==mode_16bit){
 80016d0:	1dfb      	adds	r3, r7, #7
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	b25b      	sxtb	r3, r3
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d10d      	bne.n	80016f6 <setSPI_Size+0x5a>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_16BIT;
 80016da:	4b0f      	ldr	r3, [pc, #60]	@ (8001718 <setSPI_Size+0x7c>)
 80016dc:	2280      	movs	r2, #128	@ 0x80
 80016de:	0112      	lsls	r2, r2, #4
 80016e0:	60da      	str	r2, [r3, #12]
      LCD_HANDLE.Instance->CR1 |= SPI_CR1_DFF;
 80016e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001718 <setSPI_Size+0x7c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001718 <setSPI_Size+0x7c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2180      	movs	r1, #128	@ 0x80
 80016ee:	0109      	lsls	r1, r1, #4
 80016f0:	430a      	orrs	r2, r1
 80016f2:	601a      	str	r2, [r3, #0]
    else{
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
      LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_DFF);
    }
  }
}
 80016f4:	e00a      	b.n	800170c <setSPI_Size+0x70>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 80016f6:	4b08      	ldr	r3, [pc, #32]	@ (8001718 <setSPI_Size+0x7c>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	60da      	str	r2, [r3, #12]
      LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_DFF);
 80016fc:	4b06      	ldr	r3, [pc, #24]	@ (8001718 <setSPI_Size+0x7c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	4b05      	ldr	r3, [pc, #20]	@ (8001718 <setSPI_Size+0x7c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4905      	ldr	r1, [pc, #20]	@ (800171c <setSPI_Size+0x80>)
 8001708:	400a      	ands	r2, r1
 800170a:	601a      	str	r2, [r3, #0]
}
 800170c:	46c0      	nop			@ (mov r8, r8)
 800170e:	46bd      	mov	sp, r7
 8001710:	b002      	add	sp, #8
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20000004 	.word	0x20000004
 8001718:	200000e8 	.word	0x200000e8
 800171c:	fffff7ff 	.word	0xfffff7ff

08001720 <LCD_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void LCD_WriteCommand(uint8_t *cmd, uint8_t argc)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	000a      	movs	r2, r1
 800172a:	1cfb      	adds	r3, r7, #3
 800172c:	701a      	strb	r2, [r3, #0]
  setSPI_Size(mode_8bit);
 800172e:	2000      	movs	r0, #0
 8001730:	f7ff ffb4 	bl	800169c <setSPI_Size>
  LCD_DC_Clr();
 8001734:	2380      	movs	r3, #128	@ 0x80
 8001736:	0099      	lsls	r1, r3, #2
 8001738:	23a0      	movs	r3, #160	@ 0xa0
 800173a:	05db      	lsls	r3, r3, #23
 800173c:	2200      	movs	r2, #0
 800173e:	0018      	movs	r0, r3
 8001740:	f000 fe6f 	bl	8002422 <HAL_GPIO_WritePin>
#ifdef LCD_CS
  LCD_CS_Clr();
 8001744:	4b16      	ldr	r3, [pc, #88]	@ (80017a0 <LCD_WriteCommand+0x80>)
 8001746:	2200      	movs	r2, #0
 8001748:	2140      	movs	r1, #64	@ 0x40
 800174a:	0018      	movs	r0, r3
 800174c:	f000 fe69 	bl	8002422 <HAL_GPIO_WritePin>
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, cmd, 1, HAL_MAX_DELAY);
 8001750:	2301      	movs	r3, #1
 8001752:	425b      	negs	r3, r3
 8001754:	6879      	ldr	r1, [r7, #4]
 8001756:	4813      	ldr	r0, [pc, #76]	@ (80017a4 <LCD_WriteCommand+0x84>)
 8001758:	2201      	movs	r2, #1
 800175a:	f002 fc29 	bl	8003fb0 <HAL_SPI_Transmit>
  if(argc){
 800175e:	1cfb      	adds	r3, r7, #3
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d011      	beq.n	800178a <LCD_WriteCommand+0x6a>
    LCD_DC_Set();
 8001766:	2380      	movs	r3, #128	@ 0x80
 8001768:	0099      	lsls	r1, r3, #2
 800176a:	23a0      	movs	r3, #160	@ 0xa0
 800176c:	05db      	lsls	r3, r3, #23
 800176e:	2201      	movs	r2, #1
 8001770:	0018      	movs	r0, r3
 8001772:	f000 fe56 	bl	8002422 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&LCD_HANDLE, (cmd+1), argc, HAL_MAX_DELAY);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	1c59      	adds	r1, r3, #1
 800177a:	1cfb      	adds	r3, r7, #3
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	b29a      	uxth	r2, r3
 8001780:	2301      	movs	r3, #1
 8001782:	425b      	negs	r3, r3
 8001784:	4807      	ldr	r0, [pc, #28]	@ (80017a4 <LCD_WriteCommand+0x84>)
 8001786:	f002 fc13 	bl	8003fb0 <HAL_SPI_Transmit>
  }
#ifdef LCD_CS
  LCD_CS_Set();
 800178a:	4b05      	ldr	r3, [pc, #20]	@ (80017a0 <LCD_WriteCommand+0x80>)
 800178c:	2201      	movs	r2, #1
 800178e:	2140      	movs	r1, #64	@ 0x40
 8001790:	0018      	movs	r0, r3
 8001792:	f000 fe46 	bl	8002422 <HAL_GPIO_WritePin>
#endif
}
 8001796:	46c0      	nop			@ (mov r8, r8)
 8001798:	46bd      	mov	sp, r7
 800179a:	b002      	add	sp, #8
 800179c:	bd80      	pop	{r7, pc}
 800179e:	46c0      	nop			@ (mov r8, r8)
 80017a0:	50000400 	.word	0x50000400
 80017a4:	200000e8 	.word	0x200000e8

080017a8 <LCD_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void LCD_WriteData(uint8_t *buff, size_t buff_size)
{
 80017a8:	b5b0      	push	{r4, r5, r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  LCD_DC_Set();
 80017b2:	2380      	movs	r3, #128	@ 0x80
 80017b4:	0099      	lsls	r1, r3, #2
 80017b6:	23a0      	movs	r3, #160	@ 0xa0
 80017b8:	05db      	lsls	r3, r3, #23
 80017ba:	2201      	movs	r2, #1
 80017bc:	0018      	movs	r0, r3
 80017be:	f000 fe30 	bl	8002422 <HAL_GPIO_WritePin>
#ifdef LCD_CS
  LCD_CS_Clr();
 80017c2:	4b19      	ldr	r3, [pc, #100]	@ (8001828 <LCD_WriteData+0x80>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	2140      	movs	r1, #64	@ 0x40
 80017c8:	0018      	movs	r0, r3
 80017ca:	f000 fe2a 	bl	8002422 <HAL_GPIO_WritePin>
#endif

  // split data in small chunks because HAL can't send more than 64K at once
  while (buff_size > 0) {
 80017ce:	e01d      	b.n	800180c <LCD_WriteData+0x64>
    uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	2280      	movs	r2, #128	@ 0x80
 80017d4:	0252      	lsls	r2, r2, #9
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d300      	bcc.n	80017dc <LCD_WriteData+0x34>
 80017da:	4b14      	ldr	r3, [pc, #80]	@ (800182c <LCD_WriteData+0x84>)
 80017dc:	210e      	movs	r1, #14
 80017de:	187a      	adds	r2, r7, r1
 80017e0:	8013      	strh	r3, [r2, #0]
        buff += chunk_size;
      else
        buff += chunk_size*2;
    }
#else
    HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
 80017e2:	2301      	movs	r3, #1
 80017e4:	425c      	negs	r4, r3
 80017e6:	000d      	movs	r5, r1
 80017e8:	187b      	adds	r3, r7, r1
 80017ea:	881a      	ldrh	r2, [r3, #0]
 80017ec:	6879      	ldr	r1, [r7, #4]
 80017ee:	4810      	ldr	r0, [pc, #64]	@ (8001830 <LCD_WriteData+0x88>)
 80017f0:	0023      	movs	r3, r4
 80017f2:	f002 fbdd 	bl	8003fb0 <HAL_SPI_Transmit>
    buff += chunk_size;
 80017f6:	0029      	movs	r1, r5
 80017f8:	187b      	adds	r3, r7, r1
 80017fa:	881b      	ldrh	r3, [r3, #0]
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	18d3      	adds	r3, r2, r3
 8001800:	607b      	str	r3, [r7, #4]
#endif
    buff_size -= chunk_size;
 8001802:	187b      	adds	r3, r7, r1
 8001804:	881b      	ldrh	r3, [r3, #0]
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	603b      	str	r3, [r7, #0]
  while (buff_size > 0) {
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1de      	bne.n	80017d0 <LCD_WriteData+0x28>
  }

#ifdef LCD_CS
  LCD_CS_Set();
 8001812:	4b05      	ldr	r3, [pc, #20]	@ (8001828 <LCD_WriteData+0x80>)
 8001814:	2201      	movs	r2, #1
 8001816:	2140      	movs	r1, #64	@ 0x40
 8001818:	0018      	movs	r0, r3
 800181a:	f000 fe02 	bl	8002422 <HAL_GPIO_WritePin>
#endif
}
 800181e:	46c0      	nop			@ (mov r8, r8)
 8001820:	46bd      	mov	sp, r7
 8001822:	b004      	add	sp, #16
 8001824:	bdb0      	pop	{r4, r5, r7, pc}
 8001826:	46c0      	nop			@ (mov r8, r8)
 8001828:	50000400 	.word	0x50000400
 800182c:	0000ffff 	.word	0x0000ffff
 8001830:	200000e8 	.word	0x200000e8

08001834 <LCD_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void LCD_SetAddressWindow(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 8001834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001836:	b08b      	sub	sp, #44	@ 0x2c
 8001838:	af00      	add	r7, sp, #0
 800183a:	0005      	movs	r5, r0
 800183c:	000c      	movs	r4, r1
 800183e:	0010      	movs	r0, r2
 8001840:	0019      	movs	r1, r3
 8001842:	1dbb      	adds	r3, r7, #6
 8001844:	1c2a      	adds	r2, r5, #0
 8001846:	801a      	strh	r2, [r3, #0]
 8001848:	1d3b      	adds	r3, r7, #4
 800184a:	1c22      	adds	r2, r4, #0
 800184c:	801a      	strh	r2, [r3, #0]
 800184e:	1cbb      	adds	r3, r7, #2
 8001850:	1c02      	adds	r2, r0, #0
 8001852:	801a      	strh	r2, [r3, #0]
 8001854:	003b      	movs	r3, r7
 8001856:	1c0a      	adds	r2, r1, #0
 8001858:	801a      	strh	r2, [r3, #0]
  int16_t x_start = x0 + LCD_X_SHIFT, x_end = x1 + LCD_X_SHIFT;
 800185a:	2026      	movs	r0, #38	@ 0x26
 800185c:	183b      	adds	r3, r7, r0
 800185e:	1dba      	adds	r2, r7, #6
 8001860:	8812      	ldrh	r2, [r2, #0]
 8001862:	801a      	strh	r2, [r3, #0]
 8001864:	2424      	movs	r4, #36	@ 0x24
 8001866:	193b      	adds	r3, r7, r4
 8001868:	1cba      	adds	r2, r7, #2
 800186a:	8812      	ldrh	r2, [r2, #0]
 800186c:	801a      	strh	r2, [r3, #0]
  int16_t y_start = y0 + LCD_Y_SHIFT, y_end = y1 + LCD_Y_SHIFT;
 800186e:	2522      	movs	r5, #34	@ 0x22
 8001870:	197b      	adds	r3, r7, r5
 8001872:	1d3a      	adds	r2, r7, #4
 8001874:	8812      	ldrh	r2, [r2, #0]
 8001876:	801a      	strh	r2, [r3, #0]
 8001878:	2620      	movs	r6, #32
 800187a:	19bb      	adds	r3, r7, r6
 800187c:	003a      	movs	r2, r7
 800187e:	8812      	ldrh	r2, [r2, #0]
 8001880:	801a      	strh	r2, [r3, #0]

  /* Column Address set */
  {
    uint8_t cmd[] = { CMD_CASET, x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF };
 8001882:	2118      	movs	r1, #24
 8001884:	187b      	adds	r3, r7, r1
 8001886:	222a      	movs	r2, #42	@ 0x2a
 8001888:	701a      	strb	r2, [r3, #0]
 800188a:	183b      	adds	r3, r7, r0
 800188c:	2200      	movs	r2, #0
 800188e:	5e9b      	ldrsh	r3, [r3, r2]
 8001890:	121b      	asrs	r3, r3, #8
 8001892:	b21b      	sxth	r3, r3
 8001894:	b2da      	uxtb	r2, r3
 8001896:	187b      	adds	r3, r7, r1
 8001898:	705a      	strb	r2, [r3, #1]
 800189a:	183b      	adds	r3, r7, r0
 800189c:	881b      	ldrh	r3, [r3, #0]
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	187b      	adds	r3, r7, r1
 80018a2:	709a      	strb	r2, [r3, #2]
 80018a4:	193b      	adds	r3, r7, r4
 80018a6:	2200      	movs	r2, #0
 80018a8:	5e9b      	ldrsh	r3, [r3, r2]
 80018aa:	121b      	asrs	r3, r3, #8
 80018ac:	b21b      	sxth	r3, r3
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	187b      	adds	r3, r7, r1
 80018b2:	70da      	strb	r2, [r3, #3]
 80018b4:	193b      	adds	r3, r7, r4
 80018b6:	881b      	ldrh	r3, [r3, #0]
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	187b      	adds	r3, r7, r1
 80018bc:	711a      	strb	r2, [r3, #4]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80018be:	187b      	adds	r3, r7, r1
 80018c0:	2104      	movs	r1, #4
 80018c2:	0018      	movs	r0, r3
 80018c4:	f7ff ff2c 	bl	8001720 <LCD_WriteCommand>
  }
  /* Row Address set */
  {
    uint8_t cmd[] = { CMD_RASET, y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF };
 80018c8:	2110      	movs	r1, #16
 80018ca:	187b      	adds	r3, r7, r1
 80018cc:	222b      	movs	r2, #43	@ 0x2b
 80018ce:	701a      	strb	r2, [r3, #0]
 80018d0:	197b      	adds	r3, r7, r5
 80018d2:	2200      	movs	r2, #0
 80018d4:	5e9b      	ldrsh	r3, [r3, r2]
 80018d6:	121b      	asrs	r3, r3, #8
 80018d8:	b21b      	sxth	r3, r3
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	187b      	adds	r3, r7, r1
 80018de:	705a      	strb	r2, [r3, #1]
 80018e0:	197b      	adds	r3, r7, r5
 80018e2:	881b      	ldrh	r3, [r3, #0]
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	187b      	adds	r3, r7, r1
 80018e8:	709a      	strb	r2, [r3, #2]
 80018ea:	19bb      	adds	r3, r7, r6
 80018ec:	2200      	movs	r2, #0
 80018ee:	5e9b      	ldrsh	r3, [r3, r2]
 80018f0:	121b      	asrs	r3, r3, #8
 80018f2:	b21b      	sxth	r3, r3
 80018f4:	b2da      	uxtb	r2, r3
 80018f6:	187b      	adds	r3, r7, r1
 80018f8:	70da      	strb	r2, [r3, #3]
 80018fa:	19bb      	adds	r3, r7, r6
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	187b      	adds	r3, r7, r1
 8001902:	711a      	strb	r2, [r3, #4]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8001904:	187b      	adds	r3, r7, r1
 8001906:	2104      	movs	r1, #4
 8001908:	0018      	movs	r0, r3
 800190a:	f7ff ff09 	bl	8001720 <LCD_WriteCommand>
  }
  {
  /* Write to RAM */
    uint8_t cmd[] = { CMD_RAMWR };
 800190e:	210c      	movs	r1, #12
 8001910:	187b      	adds	r3, r7, r1
 8001912:	4a06      	ldr	r2, [pc, #24]	@ (800192c <LCD_SetAddressWindow+0xf8>)
 8001914:	7812      	ldrb	r2, [r2, #0]
 8001916:	701a      	strb	r2, [r3, #0]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8001918:	187b      	adds	r3, r7, r1
 800191a:	2100      	movs	r1, #0
 800191c:	0018      	movs	r0, r3
 800191e:	f7ff feff 	bl	8001720 <LCD_WriteCommand>
  }
}
 8001922:	46c0      	nop			@ (mov r8, r8)
 8001924:	46bd      	mov	sp, r7
 8001926:	b00b      	add	sp, #44	@ 0x2c
 8001928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800192a:	46c0      	nop			@ (mov r8, r8)
 800192c:	080087e8 	.word	0x080087e8

08001930 <LCD_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color)
{
 8001930:	b5b0      	push	{r4, r5, r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	0004      	movs	r4, r0
 8001938:	0008      	movs	r0, r1
 800193a:	0011      	movs	r1, r2
 800193c:	1dbb      	adds	r3, r7, #6
 800193e:	1c22      	adds	r2, r4, #0
 8001940:	801a      	strh	r2, [r3, #0]
 8001942:	1d3b      	adds	r3, r7, #4
 8001944:	1c02      	adds	r2, r0, #0
 8001946:	801a      	strh	r2, [r3, #0]
 8001948:	1cbb      	adds	r3, r7, #2
 800194a:	1c0a      	adds	r2, r1, #0
 800194c:	801a      	strh	r2, [r3, #0]
  if ((x < 0) || (x > LCD_WIDTH-1) || (y < 0) || (y > LCD_HEIGHT-1))
 800194e:	1dbb      	adds	r3, r7, #6
 8001950:	2200      	movs	r2, #0
 8001952:	5e9b      	ldrsh	r3, [r3, r2]
 8001954:	2b00      	cmp	r3, #0
 8001956:	db48      	blt.n	80019ea <LCD_DrawPixel+0xba>
 8001958:	1dbb      	adds	r3, r7, #6
 800195a:	2200      	movs	r2, #0
 800195c:	5e9b      	ldrsh	r3, [r3, r2]
 800195e:	2bef      	cmp	r3, #239	@ 0xef
 8001960:	dc43      	bgt.n	80019ea <LCD_DrawPixel+0xba>
 8001962:	1d3b      	adds	r3, r7, #4
 8001964:	2200      	movs	r2, #0
 8001966:	5e9b      	ldrsh	r3, [r3, r2]
 8001968:	2b00      	cmp	r3, #0
 800196a:	db3e      	blt.n	80019ea <LCD_DrawPixel+0xba>
 800196c:	1d3b      	adds	r3, r7, #4
 800196e:	2200      	movs	r2, #0
 8001970:	5e9a      	ldrsh	r2, [r3, r2]
 8001972:	23a0      	movs	r3, #160	@ 0xa0
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	429a      	cmp	r2, r3
 8001978:	da37      	bge.n	80019ea <LCD_DrawPixel+0xba>
    return;

  uint8_t data[2] = {color >> 8, color & 0xFF};
 800197a:	1cbb      	adds	r3, r7, #2
 800197c:	881b      	ldrh	r3, [r3, #0]
 800197e:	0a1b      	lsrs	r3, r3, #8
 8001980:	b29b      	uxth	r3, r3
 8001982:	b2da      	uxtb	r2, r3
 8001984:	250c      	movs	r5, #12
 8001986:	197b      	adds	r3, r7, r5
 8001988:	701a      	strb	r2, [r3, #0]
 800198a:	1cbb      	adds	r3, r7, #2
 800198c:	881b      	ldrh	r3, [r3, #0]
 800198e:	b2da      	uxtb	r2, r3
 8001990:	197b      	adds	r3, r7, r5
 8001992:	705a      	strb	r2, [r3, #1]
  LCD_SetAddressWindow(x, y, x, y);
 8001994:	1d3b      	adds	r3, r7, #4
 8001996:	2400      	movs	r4, #0
 8001998:	5f1c      	ldrsh	r4, [r3, r4]
 800199a:	1dbb      	adds	r3, r7, #6
 800199c:	2200      	movs	r2, #0
 800199e:	5e9a      	ldrsh	r2, [r3, r2]
 80019a0:	1d3b      	adds	r3, r7, #4
 80019a2:	2100      	movs	r1, #0
 80019a4:	5e59      	ldrsh	r1, [r3, r1]
 80019a6:	1dbb      	adds	r3, r7, #6
 80019a8:	2000      	movs	r0, #0
 80019aa:	5e18      	ldrsh	r0, [r3, r0]
 80019ac:	0023      	movs	r3, r4
 80019ae:	f7ff ff41 	bl	8001834 <LCD_SetAddressWindow>

  LCD_DC_Set();
 80019b2:	2380      	movs	r3, #128	@ 0x80
 80019b4:	0099      	lsls	r1, r3, #2
 80019b6:	23a0      	movs	r3, #160	@ 0xa0
 80019b8:	05db      	lsls	r3, r3, #23
 80019ba:	2201      	movs	r2, #1
 80019bc:	0018      	movs	r0, r3
 80019be:	f000 fd30 	bl	8002422 <HAL_GPIO_WritePin>
#ifdef LCD_CS
  LCD_CS_Clr();
 80019c2:	4b0c      	ldr	r3, [pc, #48]	@ (80019f4 <LCD_DrawPixel+0xc4>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	2140      	movs	r1, #64	@ 0x40
 80019c8:	0018      	movs	r0, r3
 80019ca:	f000 fd2a 	bl	8002422 <HAL_GPIO_WritePin>
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, data, sizeof(data), HAL_MAX_DELAY);
 80019ce:	2301      	movs	r3, #1
 80019d0:	425b      	negs	r3, r3
 80019d2:	1979      	adds	r1, r7, r5
 80019d4:	4808      	ldr	r0, [pc, #32]	@ (80019f8 <LCD_DrawPixel+0xc8>)
 80019d6:	2202      	movs	r2, #2
 80019d8:	f002 faea 	bl	8003fb0 <HAL_SPI_Transmit>
#ifdef LCD_CS
  LCD_CS_Set();
 80019dc:	4b05      	ldr	r3, [pc, #20]	@ (80019f4 <LCD_DrawPixel+0xc4>)
 80019de:	2201      	movs	r2, #1
 80019e0:	2140      	movs	r1, #64	@ 0x40
 80019e2:	0018      	movs	r0, r3
 80019e4:	f000 fd1d 	bl	8002422 <HAL_GPIO_WritePin>
 80019e8:	e000      	b.n	80019ec <LCD_DrawPixel+0xbc>
    return;
 80019ea:	46c0      	nop			@ (mov r8, r8)
#endif
}
 80019ec:	46bd      	mov	sp, r7
 80019ee:	b004      	add	sp, #16
 80019f0:	bdb0      	pop	{r4, r5, r7, pc}
 80019f2:	46c0      	nop			@ (mov r8, r8)
 80019f4:	50000400 	.word	0x50000400
 80019f8:	200000e8 	.word	0x200000e8

080019fc <LCD_FillPixels>:
  fb[x+(y*LCD_WIDTH)] = color;
}
#endif

void LCD_FillPixels(uint32_t pixels, uint16_t color)
{
 80019fc:	b590      	push	{r4, r7, lr}
 80019fe:	b0a5      	sub	sp, #148	@ 0x94
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	000a      	movs	r2, r1
 8001a06:	1cbb      	adds	r3, r7, #2
 8001a08:	801a      	strh	r2, [r3, #0]
  if(pixels>DMA_min_Sz)
    LCD_WriteData((uint8_t*)&color, pixels);
  else{
#endif
    uint16_t fill[64];                                // Use a 64 pixel (128Byte) buffer for faster filling
    for(uint8_t t=0;t<(pixels<64 ? pixels : 64);t++){ // Fill the buffer with the color
 8001a0a:	238f      	movs	r3, #143	@ 0x8f
 8001a0c:	18fb      	adds	r3, r7, r3
 8001a0e:	2200      	movs	r2, #0
 8001a10:	701a      	strb	r2, [r3, #0]
 8001a12:	e00d      	b.n	8001a30 <LCD_FillPixels+0x34>
      fill[t]=color;
 8001a14:	208f      	movs	r0, #143	@ 0x8f
 8001a16:	183b      	adds	r3, r7, r0
 8001a18:	781a      	ldrb	r2, [r3, #0]
 8001a1a:	230c      	movs	r3, #12
 8001a1c:	18fb      	adds	r3, r7, r3
 8001a1e:	0052      	lsls	r2, r2, #1
 8001a20:	1cb9      	adds	r1, r7, #2
 8001a22:	8809      	ldrh	r1, [r1, #0]
 8001a24:	52d1      	strh	r1, [r2, r3]
    for(uint8_t t=0;t<(pixels<64 ? pixels : 64);t++){ // Fill the buffer with the color
 8001a26:	183b      	adds	r3, r7, r0
 8001a28:	781a      	ldrb	r2, [r3, #0]
 8001a2a:	183b      	adds	r3, r7, r0
 8001a2c:	3201      	adds	r2, #1
 8001a2e:	701a      	strb	r2, [r3, #0]
 8001a30:	238f      	movs	r3, #143	@ 0x8f
 8001a32:	18fb      	adds	r3, r7, r3
 8001a34:	781a      	ldrb	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2b40      	cmp	r3, #64	@ 0x40
 8001a3a:	d900      	bls.n	8001a3e <LCD_FillPixels+0x42>
 8001a3c:	2340      	movs	r3, #64	@ 0x40
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d3e8      	bcc.n	8001a14 <LCD_FillPixels+0x18>
    }
    while(pixels){                                    // Send 64 pixel blocks
 8001a42:	e013      	b.n	8001a6c <LCD_FillPixels+0x70>
      uint8_t sz = (pixels<64 ? pixels : 64);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b40      	cmp	r3, #64	@ 0x40
 8001a48:	d900      	bls.n	8001a4c <LCD_FillPixels+0x50>
 8001a4a:	2340      	movs	r3, #64	@ 0x40
 8001a4c:	248e      	movs	r4, #142	@ 0x8e
 8001a4e:	193a      	adds	r2, r7, r4
 8001a50:	7013      	strb	r3, [r2, #0]
      LCD_WriteData((uint8_t*)fill, sz);
 8001a52:	193b      	adds	r3, r7, r4
 8001a54:	781a      	ldrb	r2, [r3, #0]
 8001a56:	230c      	movs	r3, #12
 8001a58:	18fb      	adds	r3, r7, r3
 8001a5a:	0011      	movs	r1, r2
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f7ff fea3 	bl	80017a8 <LCD_WriteData>
      pixels-=sz;
 8001a62:	193b      	adds	r3, r7, r4
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	607b      	str	r3, [r7, #4]
    while(pixels){                                    // Send 64 pixel blocks
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1e8      	bne.n	8001a44 <LCD_FillPixels+0x48>
    }
#ifdef USE_DMA
  }
#endif
}
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	46c0      	nop			@ (mov r8, r8)
 8001a76:	46bd      	mov	sp, r7
 8001a78:	b025      	add	sp, #148	@ 0x94
 8001a7a:	bd90      	pop	{r4, r7, pc}

08001a7c <LCD_FillArea>:
 * @brief Set address of DisplayWindow and returns raw pixel draw for uGUI driver acceleration
 * @param xi&yi -> coordinates of window
 * @return none
 */
void(*LCD_FillArea(int16_t x0, int16_t y0, int16_t x1, int16_t y1))(uint16_t,uint16_t)
{
 8001a7c:	b5b0      	push	{r4, r5, r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	0005      	movs	r5, r0
 8001a84:	000c      	movs	r4, r1
 8001a86:	0010      	movs	r0, r2
 8001a88:	0019      	movs	r1, r3
 8001a8a:	1dbb      	adds	r3, r7, #6
 8001a8c:	1c2a      	adds	r2, r5, #0
 8001a8e:	801a      	strh	r2, [r3, #0]
 8001a90:	1d3b      	adds	r3, r7, #4
 8001a92:	1c22      	adds	r2, r4, #0
 8001a94:	801a      	strh	r2, [r3, #0]
 8001a96:	1cbb      	adds	r3, r7, #2
 8001a98:	1c02      	adds	r2, r0, #0
 8001a9a:	801a      	strh	r2, [r3, #0]
 8001a9c:	003b      	movs	r3, r7
 8001a9e:	1c0a      	adds	r2, r1, #0
 8001aa0:	801a      	strh	r2, [r3, #0]
  if(x0==-1){
 8001aa2:	1dbb      	adds	r3, r7, #6
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	5e9b      	ldrsh	r3, [r3, r2]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	d104      	bne.n	8001ab6 <LCD_FillArea+0x3a>
#ifdef USE_DMA
    setDMAMemMode(mem_increase, mode_8bit);
#else
    setSPI_Size(mode_8bit); // Set SPI to 8 bit
 8001aac:	2000      	movs	r0, #0
 8001aae:	f7ff fdf5 	bl	800169c <setSPI_Size>
#endif
    return NULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	e01a      	b.n	8001aec <LCD_FillArea+0x70>
  }
  LCD_SetAddressWindow(x0,y0,x1,y1);
 8001ab6:	003b      	movs	r3, r7
 8001ab8:	2400      	movs	r4, #0
 8001aba:	5f1c      	ldrsh	r4, [r3, r4]
 8001abc:	1cbb      	adds	r3, r7, #2
 8001abe:	2200      	movs	r2, #0
 8001ac0:	5e9a      	ldrsh	r2, [r3, r2]
 8001ac2:	1d3b      	adds	r3, r7, #4
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	5e59      	ldrsh	r1, [r3, r1]
 8001ac8:	1dbb      	adds	r3, r7, #6
 8001aca:	2000      	movs	r0, #0
 8001acc:	5e18      	ldrsh	r0, [r3, r0]
 8001ace:	0023      	movs	r3, r4
 8001ad0:	f7ff feb0 	bl	8001834 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
#else
    setSPI_Size(mode_16bit); // Set SPI to 16 bit
 8001ad4:	2001      	movs	r0, #1
 8001ad6:	f7ff fde1 	bl	800169c <setSPI_Size>
#endif
  LCD_DC_Set();
 8001ada:	2380      	movs	r3, #128	@ 0x80
 8001adc:	0099      	lsls	r1, r3, #2
 8001ade:	23a0      	movs	r3, #160	@ 0xa0
 8001ae0:	05db      	lsls	r3, r3, #23
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	f000 fc9c 	bl	8002422 <HAL_GPIO_WritePin>
  return LCD_FillPixels;
 8001aea:	4b02      	ldr	r3, [pc, #8]	@ (8001af4 <LCD_FillArea+0x78>)
}
 8001aec:	0018      	movs	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	b002      	add	sp, #8
 8001af2:	bdb0      	pop	{r4, r5, r7, pc}
 8001af4:	080019fd 	.word	0x080019fd

08001af8 <LCD_Fill>:
 * @param xEnd&yEnd -> coordinate of the end point
 * @param color -> color to Fill with
 * @return none
 */
int8_t LCD_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 8001af8:	b5b0      	push	{r4, r5, r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	0005      	movs	r5, r0
 8001b00:	000c      	movs	r4, r1
 8001b02:	0010      	movs	r0, r2
 8001b04:	0019      	movs	r1, r3
 8001b06:	1dbb      	adds	r3, r7, #6
 8001b08:	1c2a      	adds	r2, r5, #0
 8001b0a:	801a      	strh	r2, [r3, #0]
 8001b0c:	1d3b      	adds	r3, r7, #4
 8001b0e:	1c22      	adds	r2, r4, #0
 8001b10:	801a      	strh	r2, [r3, #0]
 8001b12:	1cbb      	adds	r3, r7, #2
 8001b14:	1c02      	adds	r2, r0, #0
 8001b16:	801a      	strh	r2, [r3, #0]
 8001b18:	003b      	movs	r3, r7
 8001b1a:	1c0a      	adds	r2, r1, #0
 8001b1c:	801a      	strh	r2, [r3, #0]
  // "pixels" was of type uint16_t, which is not enough to accommodate
  // screens of size 240x320 like I use because the maximum value of
  // uint16_t can only be 65535; so, here, "pixels" was getting truncated
  // and as a result, only a small portion of the display would end up being
  // filled; hence, I replaced it here with uint32_t;
  uint32_t pixels = (xEnd-xSta+1)*(yEnd-ySta+1);
 8001b1e:	1cbb      	adds	r3, r7, #2
 8001b20:	881a      	ldrh	r2, [r3, #0]
 8001b22:	1dbb      	adds	r3, r7, #6
 8001b24:	881b      	ldrh	r3, [r3, #0]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	3301      	adds	r3, #1
 8001b2a:	003a      	movs	r2, r7
 8001b2c:	8811      	ldrh	r1, [r2, #0]
 8001b2e:	1d3a      	adds	r2, r7, #4
 8001b30:	8812      	ldrh	r2, [r2, #0]
 8001b32:	1a8a      	subs	r2, r1, r2
 8001b34:	3201      	adds	r2, #1
 8001b36:	4353      	muls	r3, r2
 8001b38:	60fb      	str	r3, [r7, #12]
  LCD_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 8001b3a:	1dbb      	adds	r3, r7, #6
 8001b3c:	2000      	movs	r0, #0
 8001b3e:	5e18      	ldrsh	r0, [r3, r0]
 8001b40:	1d3b      	adds	r3, r7, #4
 8001b42:	2100      	movs	r1, #0
 8001b44:	5e59      	ldrsh	r1, [r3, r1]
 8001b46:	1cbb      	adds	r3, r7, #2
 8001b48:	2200      	movs	r2, #0
 8001b4a:	5e9a      	ldrsh	r2, [r3, r2]
 8001b4c:	003b      	movs	r3, r7
 8001b4e:	2400      	movs	r4, #0
 8001b50:	5f1b      	ldrsh	r3, [r3, r4]
 8001b52:	f7ff fe6f 	bl	8001834 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
#else
    setSPI_Size(mode_16bit);
 8001b56:	2001      	movs	r0, #1
 8001b58:	f7ff fda0 	bl	800169c <setSPI_Size>
#endif
  LCD_FillPixels(pixels, color);
 8001b5c:	2320      	movs	r3, #32
 8001b5e:	18fb      	adds	r3, r7, r3
 8001b60:	881a      	ldrh	r2, [r3, #0]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	0011      	movs	r1, r2
 8001b66:	0018      	movs	r0, r3
 8001b68:	f7ff ff48 	bl	80019fc <LCD_FillPixels>
#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);
#else
  setSPI_Size(mode_8bit);
 8001b6c:	2000      	movs	r0, #0
 8001b6e:	f7ff fd95 	bl	800169c <setSPI_Size>
#endif
  return UG_RESULT_OK;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	0018      	movs	r0, r3
 8001b76:	46bd      	mov	sp, r7
 8001b78:	b004      	add	sp, #16
 8001b7a:	bdb0      	pop	{r4, r5, r7, pc}

08001b7c <LCD_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void LCD_DrawImage(uint16_t x, uint16_t y, UG_BMP* bmp)
{
 8001b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	603a      	str	r2, [r7, #0]
 8001b84:	1dbb      	adds	r3, r7, #6
 8001b86:	1c02      	adds	r2, r0, #0
 8001b88:	801a      	strh	r2, [r3, #0]
 8001b8a:	1d3b      	adds	r3, r7, #4
 8001b8c:	1c0a      	adds	r2, r1, #0
 8001b8e:	801a      	strh	r2, [r3, #0]
  uint16_t w = bmp->width;
 8001b90:	250e      	movs	r5, #14
 8001b92:	197b      	adds	r3, r7, r5
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	8892      	ldrh	r2, [r2, #4]
 8001b98:	801a      	strh	r2, [r3, #0]
  uint16_t h = bmp->height;
 8001b9a:	260c      	movs	r6, #12
 8001b9c:	19bb      	adds	r3, r7, r6
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	88d2      	ldrh	r2, [r2, #6]
 8001ba2:	801a      	strh	r2, [r3, #0]
  if ((x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 8001ba4:	1dbb      	adds	r3, r7, #6
 8001ba6:	881b      	ldrh	r3, [r3, #0]
 8001ba8:	2bef      	cmp	r3, #239	@ 0xef
 8001baa:	d845      	bhi.n	8001c38 <LCD_DrawImage+0xbc>
 8001bac:	1d3b      	adds	r3, r7, #4
 8001bae:	881a      	ldrh	r2, [r3, #0]
 8001bb0:	23a0      	movs	r3, #160	@ 0xa0
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d23f      	bcs.n	8001c38 <LCD_DrawImage+0xbc>
    return;
  if ((x + w - 1) > LCD_WIDTH-1)
 8001bb8:	1dbb      	adds	r3, r7, #6
 8001bba:	881a      	ldrh	r2, [r3, #0]
 8001bbc:	197b      	adds	r3, r7, r5
 8001bbe:	881b      	ldrh	r3, [r3, #0]
 8001bc0:	18d3      	adds	r3, r2, r3
 8001bc2:	2bf0      	cmp	r3, #240	@ 0xf0
 8001bc4:	dc3a      	bgt.n	8001c3c <LCD_DrawImage+0xc0>
    return;
  if ((y + h - 1) > LCD_HEIGHT-1)
 8001bc6:	1d3b      	adds	r3, r7, #4
 8001bc8:	881a      	ldrh	r2, [r3, #0]
 8001bca:	19bb      	adds	r3, r7, r6
 8001bcc:	881b      	ldrh	r3, [r3, #0]
 8001bce:	18d2      	adds	r2, r2, r3
 8001bd0:	23a0      	movs	r3, #160	@ 0xa0
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	dc33      	bgt.n	8001c40 <LCD_DrawImage+0xc4>
    return;
  if(bmp->bpp!=BMP_BPP_16)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	7a1b      	ldrb	r3, [r3, #8]
 8001bdc:	2b10      	cmp	r3, #16
 8001bde:	d131      	bne.n	8001c44 <LCD_DrawImage+0xc8>
    return;
  LCD_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8001be0:	1dbb      	adds	r3, r7, #6
 8001be2:	2000      	movs	r0, #0
 8001be4:	5e18      	ldrsh	r0, [r3, r0]
 8001be6:	1d3b      	adds	r3, r7, #4
 8001be8:	2100      	movs	r1, #0
 8001bea:	5e59      	ldrsh	r1, [r3, r1]
 8001bec:	1dba      	adds	r2, r7, #6
 8001bee:	197b      	adds	r3, r7, r5
 8001bf0:	8812      	ldrh	r2, [r2, #0]
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	18d3      	adds	r3, r2, r3
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	b21c      	sxth	r4, r3
 8001bfe:	1d3a      	adds	r2, r7, #4
 8001c00:	19bb      	adds	r3, r7, r6
 8001c02:	8812      	ldrh	r2, [r2, #0]
 8001c04:	881b      	ldrh	r3, [r3, #0]
 8001c06:	18d3      	adds	r3, r2, r3
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	b21b      	sxth	r3, r3
 8001c10:	0022      	movs	r2, r4
 8001c12:	f7ff fe0f 	bl	8001834 <LCD_SetAddressWindow>

#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_16bit); // Set SPI and DMA to 16 bit, enable memory increase
#else
  setSPI_Size(mode_16bit);                 // Set SPI to 16 bit
 8001c16:	2001      	movs	r0, #1
 8001c18:	f7ff fd40 	bl	800169c <setSPI_Size>
#endif

  LCD_WriteData((uint8_t*)bmp->p, w*h);
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	6818      	ldr	r0, [r3, #0]
 8001c20:	197b      	adds	r3, r7, r5
 8001c22:	881b      	ldrh	r3, [r3, #0]
 8001c24:	19ba      	adds	r2, r7, r6
 8001c26:	8812      	ldrh	r2, [r2, #0]
 8001c28:	4353      	muls	r3, r2
 8001c2a:	0019      	movs	r1, r3
 8001c2c:	f7ff fdbc 	bl	80017a8 <LCD_WriteData>

#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);  // Set SPI and DMA to 16 bit, enable memory increase
#else
  setSPI_Size(mode_8bit);                  // Set SPI to 8 bit
 8001c30:	2000      	movs	r0, #0
 8001c32:	f7ff fd33 	bl	800169c <setSPI_Size>
 8001c36:	e006      	b.n	8001c46 <LCD_DrawImage+0xca>
    return;
 8001c38:	46c0      	nop			@ (mov r8, r8)
 8001c3a:	e004      	b.n	8001c46 <LCD_DrawImage+0xca>
    return;
 8001c3c:	46c0      	nop			@ (mov r8, r8)
 8001c3e:	e002      	b.n	8001c46 <LCD_DrawImage+0xca>
    return;
 8001c40:	46c0      	nop			@ (mov r8, r8)
 8001c42:	e000      	b.n	8001c46 <LCD_DrawImage+0xca>
    return;
 8001c44:	46c0      	nop			@ (mov r8, r8)
#endif
  }
 8001c46:	46bd      	mov	sp, r7
 8001c48:	b005      	add	sp, #20
 8001c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c4c <LCD_DrawLine>:
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
int8_t LCD_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color)
{
 8001c4c:	b5b0      	push	{r4, r5, r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af02      	add	r7, sp, #8
 8001c52:	0005      	movs	r5, r0
 8001c54:	000c      	movs	r4, r1
 8001c56:	0010      	movs	r0, r2
 8001c58:	0019      	movs	r1, r3
 8001c5a:	1dbb      	adds	r3, r7, #6
 8001c5c:	1c2a      	adds	r2, r5, #0
 8001c5e:	801a      	strh	r2, [r3, #0]
 8001c60:	1d3b      	adds	r3, r7, #4
 8001c62:	1c22      	adds	r2, r4, #0
 8001c64:	801a      	strh	r2, [r3, #0]
 8001c66:	1cbb      	adds	r3, r7, #2
 8001c68:	1c02      	adds	r2, r0, #0
 8001c6a:	801a      	strh	r2, [r3, #0]
 8001c6c:	003b      	movs	r3, r7
 8001c6e:	1c0a      	adds	r2, r1, #0
 8001c70:	801a      	strh	r2, [r3, #0]
  if(x0==x1){                               // If horizontal
 8001c72:	1dba      	adds	r2, r7, #6
 8001c74:	1cbb      	adds	r3, r7, #2
 8001c76:	8812      	ldrh	r2, [r2, #0]
 8001c78:	881b      	ldrh	r3, [r3, #0]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d113      	bne.n	8001ca6 <LCD_DrawLine+0x5a>
    if(y0>y1) swap(y0,y1);
 8001c7e:	1d3a      	adds	r2, r7, #4
 8001c80:	003b      	movs	r3, r7
 8001c82:	8812      	ldrh	r2, [r2, #0]
 8001c84:	881b      	ldrh	r3, [r3, #0]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d92a      	bls.n	8001ce0 <LCD_DrawLine+0x94>
 8001c8a:	210c      	movs	r1, #12
 8001c8c:	187b      	adds	r3, r7, r1
 8001c8e:	1d3a      	adds	r2, r7, #4
 8001c90:	8812      	ldrh	r2, [r2, #0]
 8001c92:	801a      	strh	r2, [r3, #0]
 8001c94:	1d3b      	adds	r3, r7, #4
 8001c96:	003a      	movs	r2, r7
 8001c98:	8812      	ldrh	r2, [r2, #0]
 8001c9a:	801a      	strh	r2, [r3, #0]
 8001c9c:	003b      	movs	r3, r7
 8001c9e:	187a      	adds	r2, r7, r1
 8001ca0:	8812      	ldrh	r2, [r2, #0]
 8001ca2:	801a      	strh	r2, [r3, #0]
 8001ca4:	e01c      	b.n	8001ce0 <LCD_DrawLine+0x94>
  } else if(y0==y1){                        // If vertical
 8001ca6:	1d3a      	adds	r2, r7, #4
 8001ca8:	003b      	movs	r3, r7
 8001caa:	8812      	ldrh	r2, [r2, #0]
 8001cac:	881b      	ldrh	r3, [r3, #0]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d113      	bne.n	8001cda <LCD_DrawLine+0x8e>
    if(x0>x1) swap(x0,x1);
 8001cb2:	1dba      	adds	r2, r7, #6
 8001cb4:	1cbb      	adds	r3, r7, #2
 8001cb6:	8812      	ldrh	r2, [r2, #0]
 8001cb8:	881b      	ldrh	r3, [r3, #0]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d910      	bls.n	8001ce0 <LCD_DrawLine+0x94>
 8001cbe:	210e      	movs	r1, #14
 8001cc0:	187b      	adds	r3, r7, r1
 8001cc2:	1dba      	adds	r2, r7, #6
 8001cc4:	8812      	ldrh	r2, [r2, #0]
 8001cc6:	801a      	strh	r2, [r3, #0]
 8001cc8:	1dbb      	adds	r3, r7, #6
 8001cca:	1cba      	adds	r2, r7, #2
 8001ccc:	8812      	ldrh	r2, [r2, #0]
 8001cce:	801a      	strh	r2, [r3, #0]
 8001cd0:	1cbb      	adds	r3, r7, #2
 8001cd2:	187a      	adds	r2, r7, r1
 8001cd4:	8812      	ldrh	r2, [r2, #0]
 8001cd6:	801a      	strh	r2, [r3, #0]
 8001cd8:	e002      	b.n	8001ce0 <LCD_DrawLine+0x94>
  } else{                                   // Else, return fail, draw using software
    return UG_RESULT_FAIL;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	425b      	negs	r3, r3
 8001cde:	e00f      	b.n	8001d00 <LCD_DrawLine+0xb4>
  }

  LCD_Fill(x0,y0,x1,y1,color);              // Draw using acceleration
 8001ce0:	003b      	movs	r3, r7
 8001ce2:	881c      	ldrh	r4, [r3, #0]
 8001ce4:	1cbb      	adds	r3, r7, #2
 8001ce6:	881a      	ldrh	r2, [r3, #0]
 8001ce8:	1d3b      	adds	r3, r7, #4
 8001cea:	8819      	ldrh	r1, [r3, #0]
 8001cec:	1dbb      	adds	r3, r7, #6
 8001cee:	8818      	ldrh	r0, [r3, #0]
 8001cf0:	2320      	movs	r3, #32
 8001cf2:	18fb      	adds	r3, r7, r3
 8001cf4:	881b      	ldrh	r3, [r3, #0]
 8001cf6:	9300      	str	r3, [sp, #0]
 8001cf8:	0023      	movs	r3, r4
 8001cfa:	f7ff fefd 	bl	8001af8 <LCD_Fill>
  return UG_RESULT_OK;
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	0018      	movs	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	b004      	add	sp, #16
 8001d06:	bdb0      	pop	{r4, r5, r7, pc}

08001d08 <LCD_PutStr>:
  UG_FontSelect(font);
  UG_PutChar(ch, x, y, color, bgcolor);
}

void LCD_PutStr(uint16_t x, uint16_t y,  char *str, UG_FONT* font, uint16_t color, uint16_t bgcolor)
{
 8001d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60ba      	str	r2, [r7, #8]
 8001d10:	607b      	str	r3, [r7, #4]
 8001d12:	240e      	movs	r4, #14
 8001d14:	193b      	adds	r3, r7, r4
 8001d16:	1c02      	adds	r2, r0, #0
 8001d18:	801a      	strh	r2, [r3, #0]
 8001d1a:	250c      	movs	r5, #12
 8001d1c:	197b      	adds	r3, r7, r5
 8001d1e:	1c0a      	adds	r2, r1, #0
 8001d20:	801a      	strh	r2, [r3, #0]
  UG_FontSelect(font);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	0018      	movs	r0, r3
 8001d26:	f003 f9d5 	bl	80050d4 <UG_FontSelect>
  UG_SetForecolor(color);
 8001d2a:	2318      	movs	r3, #24
 8001d2c:	2608      	movs	r6, #8
 8001d2e:	199b      	adds	r3, r3, r6
 8001d30:	2208      	movs	r2, #8
 8001d32:	4694      	mov	ip, r2
 8001d34:	44bc      	add	ip, r7
 8001d36:	4463      	add	r3, ip
 8001d38:	881b      	ldrh	r3, [r3, #0]
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	f003 fcc6 	bl	80056cc <UG_SetForecolor>
  UG_SetBackcolor(bgcolor);
 8001d40:	231c      	movs	r3, #28
 8001d42:	199b      	adds	r3, r3, r6
 8001d44:	2208      	movs	r2, #8
 8001d46:	4694      	mov	ip, r2
 8001d48:	44bc      	add	ip, r7
 8001d4a:	4463      	add	r3, ip
 8001d4c:	881b      	ldrh	r3, [r3, #0]
 8001d4e:	0018      	movs	r0, r3
 8001d50:	f003 fcce 	bl	80056f0 <UG_SetBackcolor>
  UG_PutString(x, y, str);
 8001d54:	193b      	adds	r3, r7, r4
 8001d56:	2000      	movs	r0, #0
 8001d58:	5e18      	ldrsh	r0, [r3, r0]
 8001d5a:	197b      	adds	r3, r7, r5
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	5e9b      	ldrsh	r3, [r3, r2]
 8001d60:	68ba      	ldr	r2, [r7, #8]
 8001d62:	0019      	movs	r1, r3
 8001d64:	f003 fbf2 	bl	800554c <UG_PutString>
}
 8001d68:	46c0      	nop			@ (mov r8, r8)
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	b005      	add	sp, #20
 8001d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d70 <LCD_Update>:
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
}


static void LCD_Update(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
#endif

#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);           // Set SPI and DMA to 16 bit, enable memory increase
#else
  setSPI_Size(mode_8bit);                           // Set SPI to 8 bit
 8001d74:	2000      	movs	r0, #0
 8001d76:	f7ff fc91 	bl	800169c <setSPI_Size>
#endif
}
 8001d7a:	46c0      	nop			@ (mov r8, r8)
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <LCD_init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void LCD_init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
#ifdef LCD_CS
  LCD_CS_Set();
 8001d86:	4b30      	ldr	r3, [pc, #192]	@ (8001e48 <LCD_init+0xc8>)
 8001d88:	2201      	movs	r2, #1
 8001d8a:	2140      	movs	r1, #64	@ 0x40
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	f000 fb48 	bl	8002422 <HAL_GPIO_WritePin>
#endif

#ifdef LCD_RST
  LCD_RST_Clr();
 8001d92:	4b2e      	ldr	r3, [pc, #184]	@ (8001e4c <LCD_init+0xcc>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	2180      	movs	r1, #128	@ 0x80
 8001d98:	0018      	movs	r0, r3
 8001d9a:	f000 fb42 	bl	8002422 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001d9e:	2001      	movs	r0, #1
 8001da0:	f000 f8d4 	bl	8001f4c <HAL_Delay>
  LCD_RST_Set();
 8001da4:	4b29      	ldr	r3, [pc, #164]	@ (8001e4c <LCD_init+0xcc>)
 8001da6:	2201      	movs	r2, #1
 8001da8:	2180      	movs	r1, #128	@ 0x80
 8001daa:	0018      	movs	r0, r3
 8001dac:	f000 fb39 	bl	8002422 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8001db0:	20c8      	movs	r0, #200	@ 0xc8
 8001db2:	f000 f8cb 	bl	8001f4c <HAL_Delay>
#endif

  UG_Init(&gui, &device);
 8001db6:	4a26      	ldr	r2, [pc, #152]	@ (8001e50 <LCD_init+0xd0>)
 8001db8:	4b26      	ldr	r3, [pc, #152]	@ (8001e54 <LCD_init+0xd4>)
 8001dba:	0011      	movs	r1, r2
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	f003 f8e5 	bl	8004f8c <UG_Init>

#ifndef LCD_LOCAL_FB
  UG_DriverRegister(DRIVER_DRAW_LINE, LCD_DrawLine);
 8001dc2:	4b25      	ldr	r3, [pc, #148]	@ (8001e58 <LCD_init+0xd8>)
 8001dc4:	0019      	movs	r1, r3
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	f004 ffc8 	bl	8006d5c <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_FRAME, LCD_Fill);
 8001dcc:	4b23      	ldr	r3, [pc, #140]	@ (8001e5c <LCD_init+0xdc>)
 8001dce:	0019      	movs	r1, r3
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	f004 ffc3 	bl	8006d5c <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_AREA, LCD_FillArea);
 8001dd6:	4b22      	ldr	r3, [pc, #136]	@ (8001e60 <LCD_init+0xe0>)
 8001dd8:	0019      	movs	r1, r3
 8001dda:	2002      	movs	r0, #2
 8001ddc:	f004 ffbe 	bl	8006d5c <UG_DriverRegister>
  UG_DriverRegister(DRIVER_DRAW_BMP, LCD_DrawImage);
 8001de0:	4b20      	ldr	r3, [pc, #128]	@ (8001e64 <LCD_init+0xe4>)
 8001de2:	0019      	movs	r1, r3
 8001de4:	2003      	movs	r0, #3
 8001de6:	f004 ffb9 	bl	8006d5c <UG_DriverRegister>
#endif
  UG_FontSetHSpace(0);
 8001dea:	2000      	movs	r0, #0
 8001dec:	f003 fc92 	bl	8005714 <UG_FontSetHSpace>
  UG_FontSetVSpace(0);
 8001df0:	2000      	movs	r0, #0
 8001df2:	f003 fca3 	bl	800573c <UG_FontSetVSpace>

  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8001df6:	1dbb      	adds	r3, r7, #6
 8001df8:	2200      	movs	r2, #0
 8001dfa:	801a      	strh	r2, [r3, #0]
 8001dfc:	e017      	b.n	8001e2e <LCD_init+0xae>
    LCD_WriteCommand((uint8_t*)&init_cmd[i+1], init_cmd[i]);
 8001dfe:	1dbb      	adds	r3, r7, #6
 8001e00:	881b      	ldrh	r3, [r3, #0]
 8001e02:	1c5a      	adds	r2, r3, #1
 8001e04:	4b18      	ldr	r3, [pc, #96]	@ (8001e68 <LCD_init+0xe8>)
 8001e06:	18d0      	adds	r0, r2, r3
 8001e08:	1dbb      	adds	r3, r7, #6
 8001e0a:	881b      	ldrh	r3, [r3, #0]
 8001e0c:	4a16      	ldr	r2, [pc, #88]	@ (8001e68 <LCD_init+0xe8>)
 8001e0e:	5cd3      	ldrb	r3, [r2, r3]
 8001e10:	0019      	movs	r1, r3
 8001e12:	f7ff fc85 	bl	8001720 <LCD_WriteCommand>
    i += init_cmd[i]+2;
 8001e16:	1dbb      	adds	r3, r7, #6
 8001e18:	881b      	ldrh	r3, [r3, #0]
 8001e1a:	4a13      	ldr	r2, [pc, #76]	@ (8001e68 <LCD_init+0xe8>)
 8001e1c:	5cd3      	ldrb	r3, [r2, r3]
 8001e1e:	001a      	movs	r2, r3
 8001e20:	1dbb      	adds	r3, r7, #6
 8001e22:	881b      	ldrh	r3, [r3, #0]
 8001e24:	18d3      	adds	r3, r2, r3
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	1dbb      	adds	r3, r7, #6
 8001e2a:	3202      	adds	r2, #2
 8001e2c:	801a      	strh	r2, [r3, #0]
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8001e2e:	1dbb      	adds	r3, r7, #6
 8001e30:	881b      	ldrh	r3, [r3, #0]
 8001e32:	2b4d      	cmp	r3, #77	@ 0x4d
 8001e34:	d9e3      	bls.n	8001dfe <LCD_init+0x7e>
  }

  UG_FillScreen(C_BLACK); // Clear screen
 8001e36:	2000      	movs	r0, #0
 8001e38:	f003 f95a 	bl	80050f0 <UG_FillScreen>
  UG_Update();
 8001e3c:	f004 ffb4 	bl	8006da8 <UG_Update>
}
 8001e40:	46c0      	nop			@ (mov r8, r8)
 8001e42:	46bd      	mov	sp, r7
 8001e44:	b002      	add	sp, #8
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	50000400 	.word	0x50000400
 8001e4c:	50000800 	.word	0x50000800
 8001e50:	20000008 	.word	0x20000008
 8001e54:	2000026c 	.word	0x2000026c
 8001e58:	08001c4d 	.word	0x08001c4d
 8001e5c:	08001af9 	.word	0x08001af9
 8001e60:	08001a7d 	.word	0x08001a7d
 8001e64:	08001b7d 	.word	0x08001b7d
 8001e68:	080088d4 	.word	0x080088d4

08001e6c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e72:	1dfb      	adds	r3, r7, #7
 8001e74:	2200      	movs	r2, #0
 8001e76:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001e78:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea8 <HAL_Init+0x3c>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea8 <HAL_Init+0x3c>)
 8001e7e:	2140      	movs	r1, #64	@ 0x40
 8001e80:	430a      	orrs	r2, r1
 8001e82:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e84:	2000      	movs	r0, #0
 8001e86:	f000 f811 	bl	8001eac <HAL_InitTick>
 8001e8a:	1e03      	subs	r3, r0, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001e8e:	1dfb      	adds	r3, r7, #7
 8001e90:	2201      	movs	r2, #1
 8001e92:	701a      	strb	r2, [r3, #0]
 8001e94:	e001      	b.n	8001e9a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e96:	f7ff f9f5 	bl	8001284 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e9a:	1dfb      	adds	r3, r7, #7
 8001e9c:	781b      	ldrb	r3, [r3, #0]
}
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	b002      	add	sp, #8
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	46c0      	nop			@ (mov r8, r8)
 8001ea8:	40022000 	.word	0x40022000

08001eac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eac:	b590      	push	{r4, r7, lr}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001eb4:	4b14      	ldr	r3, [pc, #80]	@ (8001f08 <HAL_InitTick+0x5c>)
 8001eb6:	681c      	ldr	r4, [r3, #0]
 8001eb8:	4b14      	ldr	r3, [pc, #80]	@ (8001f0c <HAL_InitTick+0x60>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	0019      	movs	r1, r3
 8001ebe:	23fa      	movs	r3, #250	@ 0xfa
 8001ec0:	0098      	lsls	r0, r3, #2
 8001ec2:	f7fe f92b 	bl	800011c <__udivsi3>
 8001ec6:	0003      	movs	r3, r0
 8001ec8:	0019      	movs	r1, r3
 8001eca:	0020      	movs	r0, r4
 8001ecc:	f7fe f926 	bl	800011c <__udivsi3>
 8001ed0:	0003      	movs	r3, r0
 8001ed2:	0018      	movs	r0, r3
 8001ed4:	f000 f905 	bl	80020e2 <HAL_SYSTICK_Config>
 8001ed8:	1e03      	subs	r3, r0, #0
 8001eda:	d001      	beq.n	8001ee0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e00f      	b.n	8001f00 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b03      	cmp	r3, #3
 8001ee4:	d80b      	bhi.n	8001efe <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ee6:	6879      	ldr	r1, [r7, #4]
 8001ee8:	2301      	movs	r3, #1
 8001eea:	425b      	negs	r3, r3
 8001eec:	2200      	movs	r2, #0
 8001eee:	0018      	movs	r0, r3
 8001ef0:	f000 f8e2 	bl	80020b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ef4:	4b06      	ldr	r3, [pc, #24]	@ (8001f10 <HAL_InitTick+0x64>)
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
 8001efc:	e000      	b.n	8001f00 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
}
 8001f00:	0018      	movs	r0, r3
 8001f02:	46bd      	mov	sp, r7
 8001f04:	b003      	add	sp, #12
 8001f06:	bd90      	pop	{r4, r7, pc}
 8001f08:	20000000 	.word	0x20000000
 8001f0c:	20000018 	.word	0x20000018
 8001f10:	20000014 	.word	0x20000014

08001f14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f18:	4b05      	ldr	r3, [pc, #20]	@ (8001f30 <HAL_IncTick+0x1c>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	001a      	movs	r2, r3
 8001f1e:	4b05      	ldr	r3, [pc, #20]	@ (8001f34 <HAL_IncTick+0x20>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	18d2      	adds	r2, r2, r3
 8001f24:	4b03      	ldr	r3, [pc, #12]	@ (8001f34 <HAL_IncTick+0x20>)
 8001f26:	601a      	str	r2, [r3, #0]
}
 8001f28:	46c0      	nop			@ (mov r8, r8)
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	46c0      	nop			@ (mov r8, r8)
 8001f30:	20000018 	.word	0x20000018
 8001f34:	200002e0 	.word	0x200002e0

08001f38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f3c:	4b02      	ldr	r3, [pc, #8]	@ (8001f48 <HAL_GetTick+0x10>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
}
 8001f40:	0018      	movs	r0, r3
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	46c0      	nop			@ (mov r8, r8)
 8001f48:	200002e0 	.word	0x200002e0

08001f4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f54:	f7ff fff0 	bl	8001f38 <HAL_GetTick>
 8001f58:	0003      	movs	r3, r0
 8001f5a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	3301      	adds	r3, #1
 8001f64:	d005      	beq.n	8001f72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f66:	4b0a      	ldr	r3, [pc, #40]	@ (8001f90 <HAL_Delay+0x44>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	001a      	movs	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	189b      	adds	r3, r3, r2
 8001f70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f72:	46c0      	nop			@ (mov r8, r8)
 8001f74:	f7ff ffe0 	bl	8001f38 <HAL_GetTick>
 8001f78:	0002      	movs	r2, r0
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d8f7      	bhi.n	8001f74 <HAL_Delay+0x28>
  {
  }
}
 8001f84:	46c0      	nop			@ (mov r8, r8)
 8001f86:	46c0      	nop			@ (mov r8, r8)
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	b004      	add	sp, #16
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	46c0      	nop			@ (mov r8, r8)
 8001f90:	20000018 	.word	0x20000018

08001f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f94:	b590      	push	{r4, r7, lr}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	0002      	movs	r2, r0
 8001f9c:	6039      	str	r1, [r7, #0]
 8001f9e:	1dfb      	adds	r3, r7, #7
 8001fa0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001fa2:	1dfb      	adds	r3, r7, #7
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	2b7f      	cmp	r3, #127	@ 0x7f
 8001fa8:	d828      	bhi.n	8001ffc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001faa:	4a2f      	ldr	r2, [pc, #188]	@ (8002068 <__NVIC_SetPriority+0xd4>)
 8001fac:	1dfb      	adds	r3, r7, #7
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	b25b      	sxtb	r3, r3
 8001fb2:	089b      	lsrs	r3, r3, #2
 8001fb4:	33c0      	adds	r3, #192	@ 0xc0
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	589b      	ldr	r3, [r3, r2]
 8001fba:	1dfa      	adds	r2, r7, #7
 8001fbc:	7812      	ldrb	r2, [r2, #0]
 8001fbe:	0011      	movs	r1, r2
 8001fc0:	2203      	movs	r2, #3
 8001fc2:	400a      	ands	r2, r1
 8001fc4:	00d2      	lsls	r2, r2, #3
 8001fc6:	21ff      	movs	r1, #255	@ 0xff
 8001fc8:	4091      	lsls	r1, r2
 8001fca:	000a      	movs	r2, r1
 8001fcc:	43d2      	mvns	r2, r2
 8001fce:	401a      	ands	r2, r3
 8001fd0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	019b      	lsls	r3, r3, #6
 8001fd6:	22ff      	movs	r2, #255	@ 0xff
 8001fd8:	401a      	ands	r2, r3
 8001fda:	1dfb      	adds	r3, r7, #7
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	0018      	movs	r0, r3
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	4003      	ands	r3, r0
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fe8:	481f      	ldr	r0, [pc, #124]	@ (8002068 <__NVIC_SetPriority+0xd4>)
 8001fea:	1dfb      	adds	r3, r7, #7
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	b25b      	sxtb	r3, r3
 8001ff0:	089b      	lsrs	r3, r3, #2
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	33c0      	adds	r3, #192	@ 0xc0
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001ffa:	e031      	b.n	8002060 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ffc:	4a1b      	ldr	r2, [pc, #108]	@ (800206c <__NVIC_SetPriority+0xd8>)
 8001ffe:	1dfb      	adds	r3, r7, #7
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	0019      	movs	r1, r3
 8002004:	230f      	movs	r3, #15
 8002006:	400b      	ands	r3, r1
 8002008:	3b08      	subs	r3, #8
 800200a:	089b      	lsrs	r3, r3, #2
 800200c:	3306      	adds	r3, #6
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	18d3      	adds	r3, r2, r3
 8002012:	3304      	adds	r3, #4
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	1dfa      	adds	r2, r7, #7
 8002018:	7812      	ldrb	r2, [r2, #0]
 800201a:	0011      	movs	r1, r2
 800201c:	2203      	movs	r2, #3
 800201e:	400a      	ands	r2, r1
 8002020:	00d2      	lsls	r2, r2, #3
 8002022:	21ff      	movs	r1, #255	@ 0xff
 8002024:	4091      	lsls	r1, r2
 8002026:	000a      	movs	r2, r1
 8002028:	43d2      	mvns	r2, r2
 800202a:	401a      	ands	r2, r3
 800202c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	019b      	lsls	r3, r3, #6
 8002032:	22ff      	movs	r2, #255	@ 0xff
 8002034:	401a      	ands	r2, r3
 8002036:	1dfb      	adds	r3, r7, #7
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	0018      	movs	r0, r3
 800203c:	2303      	movs	r3, #3
 800203e:	4003      	ands	r3, r0
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002044:	4809      	ldr	r0, [pc, #36]	@ (800206c <__NVIC_SetPriority+0xd8>)
 8002046:	1dfb      	adds	r3, r7, #7
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	001c      	movs	r4, r3
 800204c:	230f      	movs	r3, #15
 800204e:	4023      	ands	r3, r4
 8002050:	3b08      	subs	r3, #8
 8002052:	089b      	lsrs	r3, r3, #2
 8002054:	430a      	orrs	r2, r1
 8002056:	3306      	adds	r3, #6
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	18c3      	adds	r3, r0, r3
 800205c:	3304      	adds	r3, #4
 800205e:	601a      	str	r2, [r3, #0]
}
 8002060:	46c0      	nop			@ (mov r8, r8)
 8002062:	46bd      	mov	sp, r7
 8002064:	b003      	add	sp, #12
 8002066:	bd90      	pop	{r4, r7, pc}
 8002068:	e000e100 	.word	0xe000e100
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	1e5a      	subs	r2, r3, #1
 800207c:	2380      	movs	r3, #128	@ 0x80
 800207e:	045b      	lsls	r3, r3, #17
 8002080:	429a      	cmp	r2, r3
 8002082:	d301      	bcc.n	8002088 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002084:	2301      	movs	r3, #1
 8002086:	e010      	b.n	80020aa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002088:	4b0a      	ldr	r3, [pc, #40]	@ (80020b4 <SysTick_Config+0x44>)
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	3a01      	subs	r2, #1
 800208e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002090:	2301      	movs	r3, #1
 8002092:	425b      	negs	r3, r3
 8002094:	2103      	movs	r1, #3
 8002096:	0018      	movs	r0, r3
 8002098:	f7ff ff7c 	bl	8001f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800209c:	4b05      	ldr	r3, [pc, #20]	@ (80020b4 <SysTick_Config+0x44>)
 800209e:	2200      	movs	r2, #0
 80020a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020a2:	4b04      	ldr	r3, [pc, #16]	@ (80020b4 <SysTick_Config+0x44>)
 80020a4:	2207      	movs	r2, #7
 80020a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	0018      	movs	r0, r3
 80020ac:	46bd      	mov	sp, r7
 80020ae:	b002      	add	sp, #8
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	46c0      	nop			@ (mov r8, r8)
 80020b4:	e000e010 	.word	0xe000e010

080020b8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60b9      	str	r1, [r7, #8]
 80020c0:	607a      	str	r2, [r7, #4]
 80020c2:	210f      	movs	r1, #15
 80020c4:	187b      	adds	r3, r7, r1
 80020c6:	1c02      	adds	r2, r0, #0
 80020c8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80020ca:	68ba      	ldr	r2, [r7, #8]
 80020cc:	187b      	adds	r3, r7, r1
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	b25b      	sxtb	r3, r3
 80020d2:	0011      	movs	r1, r2
 80020d4:	0018      	movs	r0, r3
 80020d6:	f7ff ff5d 	bl	8001f94 <__NVIC_SetPriority>
}
 80020da:	46c0      	nop			@ (mov r8, r8)
 80020dc:	46bd      	mov	sp, r7
 80020de:	b004      	add	sp, #16
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b082      	sub	sp, #8
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	0018      	movs	r0, r3
 80020ee:	f7ff ffbf 	bl	8002070 <SysTick_Config>
 80020f2:	0003      	movs	r3, r0
}
 80020f4:	0018      	movs	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	b002      	add	sp, #8
 80020fa:	bd80      	pop	{r7, pc}

080020fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800210e:	2300      	movs	r3, #0
 8002110:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002112:	e14f      	b.n	80023b4 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2101      	movs	r1, #1
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	4091      	lsls	r1, r2
 800211e:	000a      	movs	r2, r1
 8002120:	4013      	ands	r3, r2
 8002122:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d100      	bne.n	800212c <HAL_GPIO_Init+0x30>
 800212a:	e140      	b.n	80023ae <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2203      	movs	r2, #3
 8002132:	4013      	ands	r3, r2
 8002134:	2b01      	cmp	r3, #1
 8002136:	d005      	beq.n	8002144 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2203      	movs	r2, #3
 800213e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002140:	2b02      	cmp	r3, #2
 8002142:	d130      	bne.n	80021a6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	2203      	movs	r2, #3
 8002150:	409a      	lsls	r2, r3
 8002152:	0013      	movs	r3, r2
 8002154:	43da      	mvns	r2, r3
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	4013      	ands	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	68da      	ldr	r2, [r3, #12]
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	409a      	lsls	r2, r3
 8002166:	0013      	movs	r3, r2
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	4313      	orrs	r3, r2
 800216c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800217a:	2201      	movs	r2, #1
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	409a      	lsls	r2, r3
 8002180:	0013      	movs	r3, r2
 8002182:	43da      	mvns	r2, r3
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	4013      	ands	r3, r2
 8002188:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	091b      	lsrs	r3, r3, #4
 8002190:	2201      	movs	r2, #1
 8002192:	401a      	ands	r2, r3
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	409a      	lsls	r2, r3
 8002198:	0013      	movs	r3, r2
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	4313      	orrs	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2203      	movs	r2, #3
 80021ac:	4013      	ands	r3, r2
 80021ae:	2b03      	cmp	r3, #3
 80021b0:	d017      	beq.n	80021e2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	2203      	movs	r2, #3
 80021be:	409a      	lsls	r2, r3
 80021c0:	0013      	movs	r3, r2
 80021c2:	43da      	mvns	r2, r3
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	4013      	ands	r3, r2
 80021c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	689a      	ldr	r2, [r3, #8]
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	409a      	lsls	r2, r3
 80021d4:	0013      	movs	r3, r2
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	4313      	orrs	r3, r2
 80021da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2203      	movs	r2, #3
 80021e8:	4013      	ands	r3, r2
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d123      	bne.n	8002236 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	08da      	lsrs	r2, r3, #3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3208      	adds	r2, #8
 80021f6:	0092      	lsls	r2, r2, #2
 80021f8:	58d3      	ldr	r3, [r2, r3]
 80021fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	2207      	movs	r2, #7
 8002200:	4013      	ands	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	220f      	movs	r2, #15
 8002206:	409a      	lsls	r2, r3
 8002208:	0013      	movs	r3, r2
 800220a:	43da      	mvns	r2, r3
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	4013      	ands	r3, r2
 8002210:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	691a      	ldr	r2, [r3, #16]
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	2107      	movs	r1, #7
 800221a:	400b      	ands	r3, r1
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	409a      	lsls	r2, r3
 8002220:	0013      	movs	r3, r2
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	4313      	orrs	r3, r2
 8002226:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	08da      	lsrs	r2, r3, #3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3208      	adds	r2, #8
 8002230:	0092      	lsls	r2, r2, #2
 8002232:	6939      	ldr	r1, [r7, #16]
 8002234:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	2203      	movs	r2, #3
 8002242:	409a      	lsls	r2, r3
 8002244:	0013      	movs	r3, r2
 8002246:	43da      	mvns	r2, r3
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	4013      	ands	r3, r2
 800224c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2203      	movs	r2, #3
 8002254:	401a      	ands	r2, r3
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	409a      	lsls	r2, r3
 800225c:	0013      	movs	r3, r2
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	4313      	orrs	r3, r2
 8002262:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	23c0      	movs	r3, #192	@ 0xc0
 8002270:	029b      	lsls	r3, r3, #10
 8002272:	4013      	ands	r3, r2
 8002274:	d100      	bne.n	8002278 <HAL_GPIO_Init+0x17c>
 8002276:	e09a      	b.n	80023ae <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002278:	4b54      	ldr	r3, [pc, #336]	@ (80023cc <HAL_GPIO_Init+0x2d0>)
 800227a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800227c:	4b53      	ldr	r3, [pc, #332]	@ (80023cc <HAL_GPIO_Init+0x2d0>)
 800227e:	2101      	movs	r1, #1
 8002280:	430a      	orrs	r2, r1
 8002282:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002284:	4a52      	ldr	r2, [pc, #328]	@ (80023d0 <HAL_GPIO_Init+0x2d4>)
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	089b      	lsrs	r3, r3, #2
 800228a:	3302      	adds	r3, #2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	589b      	ldr	r3, [r3, r2]
 8002290:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	2203      	movs	r2, #3
 8002296:	4013      	ands	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	220f      	movs	r2, #15
 800229c:	409a      	lsls	r2, r3
 800229e:	0013      	movs	r3, r2
 80022a0:	43da      	mvns	r2, r3
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	4013      	ands	r3, r2
 80022a6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	23a0      	movs	r3, #160	@ 0xa0
 80022ac:	05db      	lsls	r3, r3, #23
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d019      	beq.n	80022e6 <HAL_GPIO_Init+0x1ea>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a47      	ldr	r2, [pc, #284]	@ (80023d4 <HAL_GPIO_Init+0x2d8>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d013      	beq.n	80022e2 <HAL_GPIO_Init+0x1e6>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a46      	ldr	r2, [pc, #280]	@ (80023d8 <HAL_GPIO_Init+0x2dc>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d00d      	beq.n	80022de <HAL_GPIO_Init+0x1e2>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a45      	ldr	r2, [pc, #276]	@ (80023dc <HAL_GPIO_Init+0x2e0>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d007      	beq.n	80022da <HAL_GPIO_Init+0x1de>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a44      	ldr	r2, [pc, #272]	@ (80023e0 <HAL_GPIO_Init+0x2e4>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d101      	bne.n	80022d6 <HAL_GPIO_Init+0x1da>
 80022d2:	2305      	movs	r3, #5
 80022d4:	e008      	b.n	80022e8 <HAL_GPIO_Init+0x1ec>
 80022d6:	2306      	movs	r3, #6
 80022d8:	e006      	b.n	80022e8 <HAL_GPIO_Init+0x1ec>
 80022da:	2303      	movs	r3, #3
 80022dc:	e004      	b.n	80022e8 <HAL_GPIO_Init+0x1ec>
 80022de:	2302      	movs	r3, #2
 80022e0:	e002      	b.n	80022e8 <HAL_GPIO_Init+0x1ec>
 80022e2:	2301      	movs	r3, #1
 80022e4:	e000      	b.n	80022e8 <HAL_GPIO_Init+0x1ec>
 80022e6:	2300      	movs	r3, #0
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	2103      	movs	r1, #3
 80022ec:	400a      	ands	r2, r1
 80022ee:	0092      	lsls	r2, r2, #2
 80022f0:	4093      	lsls	r3, r2
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022f8:	4935      	ldr	r1, [pc, #212]	@ (80023d0 <HAL_GPIO_Init+0x2d4>)
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	089b      	lsrs	r3, r3, #2
 80022fe:	3302      	adds	r3, #2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002306:	4b37      	ldr	r3, [pc, #220]	@ (80023e4 <HAL_GPIO_Init+0x2e8>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	43da      	mvns	r2, r3
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	4013      	ands	r3, r2
 8002314:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685a      	ldr	r2, [r3, #4]
 800231a:	2380      	movs	r3, #128	@ 0x80
 800231c:	035b      	lsls	r3, r3, #13
 800231e:	4013      	ands	r3, r2
 8002320:	d003      	beq.n	800232a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4313      	orrs	r3, r2
 8002328:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800232a:	4b2e      	ldr	r3, [pc, #184]	@ (80023e4 <HAL_GPIO_Init+0x2e8>)
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002330:	4b2c      	ldr	r3, [pc, #176]	@ (80023e4 <HAL_GPIO_Init+0x2e8>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	43da      	mvns	r2, r3
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	4013      	ands	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685a      	ldr	r2, [r3, #4]
 8002344:	2380      	movs	r3, #128	@ 0x80
 8002346:	039b      	lsls	r3, r3, #14
 8002348:	4013      	ands	r3, r2
 800234a:	d003      	beq.n	8002354 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	4313      	orrs	r3, r2
 8002352:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002354:	4b23      	ldr	r3, [pc, #140]	@ (80023e4 <HAL_GPIO_Init+0x2e8>)
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800235a:	4b22      	ldr	r3, [pc, #136]	@ (80023e4 <HAL_GPIO_Init+0x2e8>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	43da      	mvns	r2, r3
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	4013      	ands	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	2380      	movs	r3, #128	@ 0x80
 8002370:	029b      	lsls	r3, r3, #10
 8002372:	4013      	ands	r3, r2
 8002374:	d003      	beq.n	800237e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	4313      	orrs	r3, r2
 800237c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800237e:	4b19      	ldr	r3, [pc, #100]	@ (80023e4 <HAL_GPIO_Init+0x2e8>)
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002384:	4b17      	ldr	r3, [pc, #92]	@ (80023e4 <HAL_GPIO_Init+0x2e8>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	43da      	mvns	r2, r3
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	4013      	ands	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	2380      	movs	r3, #128	@ 0x80
 800239a:	025b      	lsls	r3, r3, #9
 800239c:	4013      	ands	r3, r2
 800239e:	d003      	beq.n	80023a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80023a8:	4b0e      	ldr	r3, [pc, #56]	@ (80023e4 <HAL_GPIO_Init+0x2e8>)
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	3301      	adds	r3, #1
 80023b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	40da      	lsrs	r2, r3
 80023bc:	1e13      	subs	r3, r2, #0
 80023be:	d000      	beq.n	80023c2 <HAL_GPIO_Init+0x2c6>
 80023c0:	e6a8      	b.n	8002114 <HAL_GPIO_Init+0x18>
  }
}
 80023c2:	46c0      	nop			@ (mov r8, r8)
 80023c4:	46c0      	nop			@ (mov r8, r8)
 80023c6:	46bd      	mov	sp, r7
 80023c8:	b006      	add	sp, #24
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40021000 	.word	0x40021000
 80023d0:	40010000 	.word	0x40010000
 80023d4:	50000400 	.word	0x50000400
 80023d8:	50000800 	.word	0x50000800
 80023dc:	50000c00 	.word	0x50000c00
 80023e0:	50001c00 	.word	0x50001c00
 80023e4:	40010400 	.word	0x40010400

080023e8 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	000a      	movs	r2, r1
 80023f2:	1cbb      	adds	r3, r7, #2
 80023f4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	1cba      	adds	r2, r7, #2
 80023fc:	8812      	ldrh	r2, [r2, #0]
 80023fe:	4013      	ands	r3, r2
 8002400:	d004      	beq.n	800240c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002402:	230f      	movs	r3, #15
 8002404:	18fb      	adds	r3, r7, r3
 8002406:	2201      	movs	r2, #1
 8002408:	701a      	strb	r2, [r3, #0]
 800240a:	e003      	b.n	8002414 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800240c:	230f      	movs	r3, #15
 800240e:	18fb      	adds	r3, r7, r3
 8002410:	2200      	movs	r2, #0
 8002412:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002414:	230f      	movs	r3, #15
 8002416:	18fb      	adds	r3, r7, r3
 8002418:	781b      	ldrb	r3, [r3, #0]
}
 800241a:	0018      	movs	r0, r3
 800241c:	46bd      	mov	sp, r7
 800241e:	b004      	add	sp, #16
 8002420:	bd80      	pop	{r7, pc}

08002422 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b082      	sub	sp, #8
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
 800242a:	0008      	movs	r0, r1
 800242c:	0011      	movs	r1, r2
 800242e:	1cbb      	adds	r3, r7, #2
 8002430:	1c02      	adds	r2, r0, #0
 8002432:	801a      	strh	r2, [r3, #0]
 8002434:	1c7b      	adds	r3, r7, #1
 8002436:	1c0a      	adds	r2, r1, #0
 8002438:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800243a:	1c7b      	adds	r3, r7, #1
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d004      	beq.n	800244c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002442:	1cbb      	adds	r3, r7, #2
 8002444:	881a      	ldrh	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800244a:	e003      	b.n	8002454 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800244c:	1cbb      	adds	r3, r7, #2
 800244e:	881a      	ldrh	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002454:	46c0      	nop			@ (mov r8, r8)
 8002456:	46bd      	mov	sp, r7
 8002458:	b002      	add	sp, #8
 800245a:	bd80      	pop	{r7, pc}

0800245c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e082      	b.n	8002574 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2241      	movs	r2, #65	@ 0x41
 8002472:	5c9b      	ldrb	r3, [r3, r2]
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d107      	bne.n	800248a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2240      	movs	r2, #64	@ 0x40
 800247e:	2100      	movs	r1, #0
 8002480:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	0018      	movs	r0, r3
 8002486:	f7fe ff11 	bl	80012ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2241      	movs	r2, #65	@ 0x41
 800248e:	2124      	movs	r1, #36	@ 0x24
 8002490:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2101      	movs	r1, #1
 800249e:	438a      	bics	r2, r1
 80024a0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4934      	ldr	r1, [pc, #208]	@ (800257c <HAL_I2C_Init+0x120>)
 80024ac:	400a      	ands	r2, r1
 80024ae:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4931      	ldr	r1, [pc, #196]	@ (8002580 <HAL_I2C_Init+0x124>)
 80024bc:	400a      	ands	r2, r1
 80024be:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d108      	bne.n	80024da <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2180      	movs	r1, #128	@ 0x80
 80024d2:	0209      	lsls	r1, r1, #8
 80024d4:	430a      	orrs	r2, r1
 80024d6:	609a      	str	r2, [r3, #8]
 80024d8:	e007      	b.n	80024ea <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689a      	ldr	r2, [r3, #8]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2184      	movs	r1, #132	@ 0x84
 80024e4:	0209      	lsls	r1, r1, #8
 80024e6:	430a      	orrs	r2, r1
 80024e8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d104      	bne.n	80024fc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2280      	movs	r2, #128	@ 0x80
 80024f8:	0112      	lsls	r2, r2, #4
 80024fa:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	685a      	ldr	r2, [r3, #4]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	491f      	ldr	r1, [pc, #124]	@ (8002584 <HAL_I2C_Init+0x128>)
 8002508:	430a      	orrs	r2, r1
 800250a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68da      	ldr	r2, [r3, #12]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	491a      	ldr	r1, [pc, #104]	@ (8002580 <HAL_I2C_Init+0x124>)
 8002518:	400a      	ands	r2, r1
 800251a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	691a      	ldr	r2, [r3, #16]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	431a      	orrs	r2, r3
 8002526:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	430a      	orrs	r2, r1
 8002534:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69d9      	ldr	r1, [r3, #28]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a1a      	ldr	r2, [r3, #32]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	430a      	orrs	r2, r1
 8002544:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2101      	movs	r1, #1
 8002552:	430a      	orrs	r2, r1
 8002554:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2241      	movs	r2, #65	@ 0x41
 8002560:	2120      	movs	r1, #32
 8002562:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2242      	movs	r2, #66	@ 0x42
 800256e:	2100      	movs	r1, #0
 8002570:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	0018      	movs	r0, r3
 8002576:	46bd      	mov	sp, r7
 8002578:	b002      	add	sp, #8
 800257a:	bd80      	pop	{r7, pc}
 800257c:	f0ffffff 	.word	0xf0ffffff
 8002580:	ffff7fff 	.word	0xffff7fff
 8002584:	02008000 	.word	0x02008000

08002588 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002588:	b590      	push	{r4, r7, lr}
 800258a:	b089      	sub	sp, #36	@ 0x24
 800258c:	af02      	add	r7, sp, #8
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	0008      	movs	r0, r1
 8002592:	607a      	str	r2, [r7, #4]
 8002594:	0019      	movs	r1, r3
 8002596:	230a      	movs	r3, #10
 8002598:	18fb      	adds	r3, r7, r3
 800259a:	1c02      	adds	r2, r0, #0
 800259c:	801a      	strh	r2, [r3, #0]
 800259e:	2308      	movs	r3, #8
 80025a0:	18fb      	adds	r3, r7, r3
 80025a2:	1c0a      	adds	r2, r1, #0
 80025a4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2241      	movs	r2, #65	@ 0x41
 80025aa:	5c9b      	ldrb	r3, [r3, r2]
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b20      	cmp	r3, #32
 80025b0:	d000      	beq.n	80025b4 <HAL_I2C_Master_Transmit+0x2c>
 80025b2:	e0e7      	b.n	8002784 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2240      	movs	r2, #64	@ 0x40
 80025b8:	5c9b      	ldrb	r3, [r3, r2]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d101      	bne.n	80025c2 <HAL_I2C_Master_Transmit+0x3a>
 80025be:	2302      	movs	r3, #2
 80025c0:	e0e1      	b.n	8002786 <HAL_I2C_Master_Transmit+0x1fe>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2240      	movs	r2, #64	@ 0x40
 80025c6:	2101      	movs	r1, #1
 80025c8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025ca:	f7ff fcb5 	bl	8001f38 <HAL_GetTick>
 80025ce:	0003      	movs	r3, r0
 80025d0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025d2:	2380      	movs	r3, #128	@ 0x80
 80025d4:	0219      	lsls	r1, r3, #8
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	2319      	movs	r3, #25
 80025de:	2201      	movs	r2, #1
 80025e0:	f000 fa04 	bl	80029ec <I2C_WaitOnFlagUntilTimeout>
 80025e4:	1e03      	subs	r3, r0, #0
 80025e6:	d001      	beq.n	80025ec <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e0cc      	b.n	8002786 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2241      	movs	r2, #65	@ 0x41
 80025f0:	2121      	movs	r1, #33	@ 0x21
 80025f2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2242      	movs	r2, #66	@ 0x42
 80025f8:	2110      	movs	r1, #16
 80025fa:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2208      	movs	r2, #8
 800260c:	18ba      	adds	r2, r7, r2
 800260e:	8812      	ldrh	r2, [r2, #0]
 8002610:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800261c:	b29b      	uxth	r3, r3
 800261e:	2bff      	cmp	r3, #255	@ 0xff
 8002620:	d911      	bls.n	8002646 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	22ff      	movs	r2, #255	@ 0xff
 8002626:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800262c:	b2da      	uxtb	r2, r3
 800262e:	2380      	movs	r3, #128	@ 0x80
 8002630:	045c      	lsls	r4, r3, #17
 8002632:	230a      	movs	r3, #10
 8002634:	18fb      	adds	r3, r7, r3
 8002636:	8819      	ldrh	r1, [r3, #0]
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	4b55      	ldr	r3, [pc, #340]	@ (8002790 <HAL_I2C_Master_Transmit+0x208>)
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	0023      	movs	r3, r4
 8002640:	f000 fc26 	bl	8002e90 <I2C_TransferConfig>
 8002644:	e075      	b.n	8002732 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800264a:	b29a      	uxth	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002654:	b2da      	uxtb	r2, r3
 8002656:	2380      	movs	r3, #128	@ 0x80
 8002658:	049c      	lsls	r4, r3, #18
 800265a:	230a      	movs	r3, #10
 800265c:	18fb      	adds	r3, r7, r3
 800265e:	8819      	ldrh	r1, [r3, #0]
 8002660:	68f8      	ldr	r0, [r7, #12]
 8002662:	4b4b      	ldr	r3, [pc, #300]	@ (8002790 <HAL_I2C_Master_Transmit+0x208>)
 8002664:	9300      	str	r3, [sp, #0]
 8002666:	0023      	movs	r3, r4
 8002668:	f000 fc12 	bl	8002e90 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800266c:	e061      	b.n	8002732 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	0018      	movs	r0, r3
 8002676:	f000 fa07 	bl	8002a88 <I2C_WaitOnTXISFlagUntilTimeout>
 800267a:	1e03      	subs	r3, r0, #0
 800267c:	d001      	beq.n	8002682 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e081      	b.n	8002786 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002686:	781a      	ldrb	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002692:	1c5a      	adds	r2, r3, #1
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800269c:	b29b      	uxth	r3, r3
 800269e:	3b01      	subs	r3, #1
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026aa:	3b01      	subs	r3, #1
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d03a      	beq.n	8002732 <HAL_I2C_Master_Transmit+0x1aa>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d136      	bne.n	8002732 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	0013      	movs	r3, r2
 80026ce:	2200      	movs	r2, #0
 80026d0:	2180      	movs	r1, #128	@ 0x80
 80026d2:	f000 f98b 	bl	80029ec <I2C_WaitOnFlagUntilTimeout>
 80026d6:	1e03      	subs	r3, r0, #0
 80026d8:	d001      	beq.n	80026de <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e053      	b.n	8002786 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	2bff      	cmp	r3, #255	@ 0xff
 80026e6:	d911      	bls.n	800270c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	22ff      	movs	r2, #255	@ 0xff
 80026ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	2380      	movs	r3, #128	@ 0x80
 80026f6:	045c      	lsls	r4, r3, #17
 80026f8:	230a      	movs	r3, #10
 80026fa:	18fb      	adds	r3, r7, r3
 80026fc:	8819      	ldrh	r1, [r3, #0]
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	2300      	movs	r3, #0
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	0023      	movs	r3, r4
 8002706:	f000 fbc3 	bl	8002e90 <I2C_TransferConfig>
 800270a:	e012      	b.n	8002732 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002710:	b29a      	uxth	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800271a:	b2da      	uxtb	r2, r3
 800271c:	2380      	movs	r3, #128	@ 0x80
 800271e:	049c      	lsls	r4, r3, #18
 8002720:	230a      	movs	r3, #10
 8002722:	18fb      	adds	r3, r7, r3
 8002724:	8819      	ldrh	r1, [r3, #0]
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	2300      	movs	r3, #0
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	0023      	movs	r3, r4
 800272e:	f000 fbaf 	bl	8002e90 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002736:	b29b      	uxth	r3, r3
 8002738:	2b00      	cmp	r3, #0
 800273a:	d198      	bne.n	800266e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	0018      	movs	r0, r3
 8002744:	f000 f9e6 	bl	8002b14 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002748:	1e03      	subs	r3, r0, #0
 800274a:	d001      	beq.n	8002750 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e01a      	b.n	8002786 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2220      	movs	r2, #32
 8002756:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	490c      	ldr	r1, [pc, #48]	@ (8002794 <HAL_I2C_Master_Transmit+0x20c>)
 8002764:	400a      	ands	r2, r1
 8002766:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2241      	movs	r2, #65	@ 0x41
 800276c:	2120      	movs	r1, #32
 800276e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2242      	movs	r2, #66	@ 0x42
 8002774:	2100      	movs	r1, #0
 8002776:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2240      	movs	r2, #64	@ 0x40
 800277c:	2100      	movs	r1, #0
 800277e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002780:	2300      	movs	r3, #0
 8002782:	e000      	b.n	8002786 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8002784:	2302      	movs	r3, #2
  }
}
 8002786:	0018      	movs	r0, r3
 8002788:	46bd      	mov	sp, r7
 800278a:	b007      	add	sp, #28
 800278c:	bd90      	pop	{r4, r7, pc}
 800278e:	46c0      	nop			@ (mov r8, r8)
 8002790:	80002000 	.word	0x80002000
 8002794:	fe00e800 	.word	0xfe00e800

08002798 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002798:	b590      	push	{r4, r7, lr}
 800279a:	b089      	sub	sp, #36	@ 0x24
 800279c:	af02      	add	r7, sp, #8
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	0008      	movs	r0, r1
 80027a2:	607a      	str	r2, [r7, #4]
 80027a4:	0019      	movs	r1, r3
 80027a6:	230a      	movs	r3, #10
 80027a8:	18fb      	adds	r3, r7, r3
 80027aa:	1c02      	adds	r2, r0, #0
 80027ac:	801a      	strh	r2, [r3, #0]
 80027ae:	2308      	movs	r3, #8
 80027b0:	18fb      	adds	r3, r7, r3
 80027b2:	1c0a      	adds	r2, r1, #0
 80027b4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2241      	movs	r2, #65	@ 0x41
 80027ba:	5c9b      	ldrb	r3, [r3, r2]
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b20      	cmp	r3, #32
 80027c0:	d000      	beq.n	80027c4 <HAL_I2C_Master_Receive+0x2c>
 80027c2:	e0e8      	b.n	8002996 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2240      	movs	r2, #64	@ 0x40
 80027c8:	5c9b      	ldrb	r3, [r3, r2]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d101      	bne.n	80027d2 <HAL_I2C_Master_Receive+0x3a>
 80027ce:	2302      	movs	r3, #2
 80027d0:	e0e2      	b.n	8002998 <HAL_I2C_Master_Receive+0x200>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2240      	movs	r2, #64	@ 0x40
 80027d6:	2101      	movs	r1, #1
 80027d8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80027da:	f7ff fbad 	bl	8001f38 <HAL_GetTick>
 80027de:	0003      	movs	r3, r0
 80027e0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80027e2:	2380      	movs	r3, #128	@ 0x80
 80027e4:	0219      	lsls	r1, r3, #8
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	9300      	str	r3, [sp, #0]
 80027ec:	2319      	movs	r3, #25
 80027ee:	2201      	movs	r2, #1
 80027f0:	f000 f8fc 	bl	80029ec <I2C_WaitOnFlagUntilTimeout>
 80027f4:	1e03      	subs	r3, r0, #0
 80027f6:	d001      	beq.n	80027fc <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e0cd      	b.n	8002998 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2241      	movs	r2, #65	@ 0x41
 8002800:	2122      	movs	r1, #34	@ 0x22
 8002802:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2242      	movs	r2, #66	@ 0x42
 8002808:	2110      	movs	r1, #16
 800280a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2208      	movs	r2, #8
 800281c:	18ba      	adds	r2, r7, r2
 800281e:	8812      	ldrh	r2, [r2, #0]
 8002820:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800282c:	b29b      	uxth	r3, r3
 800282e:	2bff      	cmp	r3, #255	@ 0xff
 8002830:	d911      	bls.n	8002856 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	22ff      	movs	r2, #255	@ 0xff
 8002836:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800283c:	b2da      	uxtb	r2, r3
 800283e:	2380      	movs	r3, #128	@ 0x80
 8002840:	045c      	lsls	r4, r3, #17
 8002842:	230a      	movs	r3, #10
 8002844:	18fb      	adds	r3, r7, r3
 8002846:	8819      	ldrh	r1, [r3, #0]
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	4b55      	ldr	r3, [pc, #340]	@ (80029a0 <HAL_I2C_Master_Receive+0x208>)
 800284c:	9300      	str	r3, [sp, #0]
 800284e:	0023      	movs	r3, r4
 8002850:	f000 fb1e 	bl	8002e90 <I2C_TransferConfig>
 8002854:	e076      	b.n	8002944 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800285a:	b29a      	uxth	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002864:	b2da      	uxtb	r2, r3
 8002866:	2380      	movs	r3, #128	@ 0x80
 8002868:	049c      	lsls	r4, r3, #18
 800286a:	230a      	movs	r3, #10
 800286c:	18fb      	adds	r3, r7, r3
 800286e:	8819      	ldrh	r1, [r3, #0]
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	4b4b      	ldr	r3, [pc, #300]	@ (80029a0 <HAL_I2C_Master_Receive+0x208>)
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	0023      	movs	r3, r4
 8002878:	f000 fb0a 	bl	8002e90 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800287c:	e062      	b.n	8002944 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	0018      	movs	r0, r3
 8002886:	f000 f989 	bl	8002b9c <I2C_WaitOnRXNEFlagUntilTimeout>
 800288a:	1e03      	subs	r3, r0, #0
 800288c:	d001      	beq.n	8002892 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e082      	b.n	8002998 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a4:	1c5a      	adds	r2, r3, #1
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ae:	3b01      	subs	r3, #1
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	3b01      	subs	r3, #1
 80028be:	b29a      	uxth	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d03a      	beq.n	8002944 <HAL_I2C_Master_Receive+0x1ac>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d136      	bne.n	8002944 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	0013      	movs	r3, r2
 80028e0:	2200      	movs	r2, #0
 80028e2:	2180      	movs	r1, #128	@ 0x80
 80028e4:	f000 f882 	bl	80029ec <I2C_WaitOnFlagUntilTimeout>
 80028e8:	1e03      	subs	r3, r0, #0
 80028ea:	d001      	beq.n	80028f0 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e053      	b.n	8002998 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	2bff      	cmp	r3, #255	@ 0xff
 80028f8:	d911      	bls.n	800291e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	22ff      	movs	r2, #255	@ 0xff
 80028fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002904:	b2da      	uxtb	r2, r3
 8002906:	2380      	movs	r3, #128	@ 0x80
 8002908:	045c      	lsls	r4, r3, #17
 800290a:	230a      	movs	r3, #10
 800290c:	18fb      	adds	r3, r7, r3
 800290e:	8819      	ldrh	r1, [r3, #0]
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	2300      	movs	r3, #0
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	0023      	movs	r3, r4
 8002918:	f000 faba 	bl	8002e90 <I2C_TransferConfig>
 800291c:	e012      	b.n	8002944 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002922:	b29a      	uxth	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800292c:	b2da      	uxtb	r2, r3
 800292e:	2380      	movs	r3, #128	@ 0x80
 8002930:	049c      	lsls	r4, r3, #18
 8002932:	230a      	movs	r3, #10
 8002934:	18fb      	adds	r3, r7, r3
 8002936:	8819      	ldrh	r1, [r3, #0]
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	2300      	movs	r3, #0
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	0023      	movs	r3, r4
 8002940:	f000 faa6 	bl	8002e90 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002948:	b29b      	uxth	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d197      	bne.n	800287e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	0018      	movs	r0, r3
 8002956:	f000 f8dd 	bl	8002b14 <I2C_WaitOnSTOPFlagUntilTimeout>
 800295a:	1e03      	subs	r3, r0, #0
 800295c:	d001      	beq.n	8002962 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e01a      	b.n	8002998 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2220      	movs	r2, #32
 8002968:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	490b      	ldr	r1, [pc, #44]	@ (80029a4 <HAL_I2C_Master_Receive+0x20c>)
 8002976:	400a      	ands	r2, r1
 8002978:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2241      	movs	r2, #65	@ 0x41
 800297e:	2120      	movs	r1, #32
 8002980:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2242      	movs	r2, #66	@ 0x42
 8002986:	2100      	movs	r1, #0
 8002988:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2240      	movs	r2, #64	@ 0x40
 800298e:	2100      	movs	r1, #0
 8002990:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002992:	2300      	movs	r3, #0
 8002994:	e000      	b.n	8002998 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8002996:	2302      	movs	r3, #2
  }
}
 8002998:	0018      	movs	r0, r3
 800299a:	46bd      	mov	sp, r7
 800299c:	b007      	add	sp, #28
 800299e:	bd90      	pop	{r4, r7, pc}
 80029a0:	80002400 	.word	0x80002400
 80029a4:	fe00e800 	.word	0xfe00e800

080029a8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	2202      	movs	r2, #2
 80029b8:	4013      	ands	r3, r2
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d103      	bne.n	80029c6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2200      	movs	r2, #0
 80029c4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	2201      	movs	r2, #1
 80029ce:	4013      	ands	r3, r2
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d007      	beq.n	80029e4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	699a      	ldr	r2, [r3, #24]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2101      	movs	r1, #1
 80029e0:	430a      	orrs	r2, r1
 80029e2:	619a      	str	r2, [r3, #24]
  }
}
 80029e4:	46c0      	nop			@ (mov r8, r8)
 80029e6:	46bd      	mov	sp, r7
 80029e8:	b002      	add	sp, #8
 80029ea:	bd80      	pop	{r7, pc}

080029ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	603b      	str	r3, [r7, #0]
 80029f8:	1dfb      	adds	r3, r7, #7
 80029fa:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029fc:	e030      	b.n	8002a60 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	3301      	adds	r3, #1
 8002a02:	d02d      	beq.n	8002a60 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a04:	f7ff fa98 	bl	8001f38 <HAL_GetTick>
 8002a08:	0002      	movs	r2, r0
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d302      	bcc.n	8002a1a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d122      	bne.n	8002a60 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	68ba      	ldr	r2, [r7, #8]
 8002a22:	4013      	ands	r3, r2
 8002a24:	68ba      	ldr	r2, [r7, #8]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	425a      	negs	r2, r3
 8002a2a:	4153      	adcs	r3, r2
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	001a      	movs	r2, r3
 8002a30:	1dfb      	adds	r3, r7, #7
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d113      	bne.n	8002a60 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a3c:	2220      	movs	r2, #32
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2241      	movs	r2, #65	@ 0x41
 8002a48:	2120      	movs	r1, #32
 8002a4a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2242      	movs	r2, #66	@ 0x42
 8002a50:	2100      	movs	r1, #0
 8002a52:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2240      	movs	r2, #64	@ 0x40
 8002a58:	2100      	movs	r1, #0
 8002a5a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e00f      	b.n	8002a80 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	425a      	negs	r2, r3
 8002a70:	4153      	adcs	r3, r2
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	001a      	movs	r2, r3
 8002a76:	1dfb      	adds	r3, r7, #7
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d0bf      	beq.n	80029fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	0018      	movs	r0, r3
 8002a82:	46bd      	mov	sp, r7
 8002a84:	b004      	add	sp, #16
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a94:	e032      	b.n	8002afc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	68b9      	ldr	r1, [r7, #8]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	f000 f8ff 	bl	8002ca0 <I2C_IsErrorOccurred>
 8002aa2:	1e03      	subs	r3, r0, #0
 8002aa4:	d001      	beq.n	8002aaa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e030      	b.n	8002b0c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	3301      	adds	r3, #1
 8002aae:	d025      	beq.n	8002afc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ab0:	f7ff fa42 	bl	8001f38 <HAL_GetTick>
 8002ab4:	0002      	movs	r2, r0
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d302      	bcc.n	8002ac6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d11a      	bne.n	8002afc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	2202      	movs	r2, #2
 8002ace:	4013      	ands	r3, r2
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d013      	beq.n	8002afc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad8:	2220      	movs	r2, #32
 8002ada:	431a      	orrs	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2241      	movs	r2, #65	@ 0x41
 8002ae4:	2120      	movs	r1, #32
 8002ae6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2242      	movs	r2, #66	@ 0x42
 8002aec:	2100      	movs	r1, #0
 8002aee:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2240      	movs	r2, #64	@ 0x40
 8002af4:	2100      	movs	r1, #0
 8002af6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e007      	b.n	8002b0c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	2202      	movs	r2, #2
 8002b04:	4013      	ands	r3, r2
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d1c5      	bne.n	8002a96 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	b004      	add	sp, #16
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b20:	e02f      	b.n	8002b82 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	68b9      	ldr	r1, [r7, #8]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	0018      	movs	r0, r3
 8002b2a:	f000 f8b9 	bl	8002ca0 <I2C_IsErrorOccurred>
 8002b2e:	1e03      	subs	r3, r0, #0
 8002b30:	d001      	beq.n	8002b36 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e02d      	b.n	8002b92 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b36:	f7ff f9ff 	bl	8001f38 <HAL_GetTick>
 8002b3a:	0002      	movs	r2, r0
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	68ba      	ldr	r2, [r7, #8]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d302      	bcc.n	8002b4c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d11a      	bne.n	8002b82 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	2220      	movs	r2, #32
 8002b54:	4013      	ands	r3, r2
 8002b56:	2b20      	cmp	r3, #32
 8002b58:	d013      	beq.n	8002b82 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5e:	2220      	movs	r2, #32
 8002b60:	431a      	orrs	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2241      	movs	r2, #65	@ 0x41
 8002b6a:	2120      	movs	r1, #32
 8002b6c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2242      	movs	r2, #66	@ 0x42
 8002b72:	2100      	movs	r1, #0
 8002b74:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2240      	movs	r2, #64	@ 0x40
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e007      	b.n	8002b92 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	2220      	movs	r2, #32
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	2b20      	cmp	r3, #32
 8002b8e:	d1c8      	bne.n	8002b22 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	0018      	movs	r0, r3
 8002b94:	46bd      	mov	sp, r7
 8002b96:	b004      	add	sp, #16
 8002b98:	bd80      	pop	{r7, pc}
	...

08002b9c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ba8:	e06b      	b.n	8002c82 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	68b9      	ldr	r1, [r7, #8]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	f000 f875 	bl	8002ca0 <I2C_IsErrorOccurred>
 8002bb6:	1e03      	subs	r3, r0, #0
 8002bb8:	d001      	beq.n	8002bbe <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e069      	b.n	8002c92 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	2220      	movs	r2, #32
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	2b20      	cmp	r3, #32
 8002bca:	d138      	bne.n	8002c3e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	2204      	movs	r2, #4
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d105      	bne.n	8002be6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002be2:	2300      	movs	r3, #0
 8002be4:	e055      	b.n	8002c92 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	2210      	movs	r2, #16
 8002bee:	4013      	ands	r3, r2
 8002bf0:	2b10      	cmp	r3, #16
 8002bf2:	d107      	bne.n	8002c04 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2210      	movs	r2, #16
 8002bfa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2204      	movs	r2, #4
 8002c00:	645a      	str	r2, [r3, #68]	@ 0x44
 8002c02:	e002      	b.n	8002c0a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2220      	movs	r2, #32
 8002c10:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	685a      	ldr	r2, [r3, #4]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	491f      	ldr	r1, [pc, #124]	@ (8002c9c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8002c1e:	400a      	ands	r2, r1
 8002c20:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2241      	movs	r2, #65	@ 0x41
 8002c26:	2120      	movs	r1, #32
 8002c28:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2242      	movs	r2, #66	@ 0x42
 8002c2e:	2100      	movs	r1, #0
 8002c30:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2240      	movs	r2, #64	@ 0x40
 8002c36:	2100      	movs	r1, #0
 8002c38:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e029      	b.n	8002c92 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c3e:	f7ff f97b 	bl	8001f38 <HAL_GetTick>
 8002c42:	0002      	movs	r2, r0
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d302      	bcc.n	8002c54 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d116      	bne.n	8002c82 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	2204      	movs	r2, #4
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	d00f      	beq.n	8002c82 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c66:	2220      	movs	r2, #32
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2241      	movs	r2, #65	@ 0x41
 8002c72:	2120      	movs	r1, #32
 8002c74:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2240      	movs	r2, #64	@ 0x40
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e007      	b.n	8002c92 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	2204      	movs	r2, #4
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	2b04      	cmp	r3, #4
 8002c8e:	d18c      	bne.n	8002baa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	0018      	movs	r0, r3
 8002c94:	46bd      	mov	sp, r7
 8002c96:	b004      	add	sp, #16
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	46c0      	nop			@ (mov r8, r8)
 8002c9c:	fe00e800 	.word	0xfe00e800

08002ca0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08a      	sub	sp, #40	@ 0x28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cac:	2327      	movs	r3, #39	@ 0x27
 8002cae:	18fb      	adds	r3, r7, r3
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	2210      	movs	r2, #16
 8002cc8:	4013      	ands	r3, r2
 8002cca:	d100      	bne.n	8002cce <I2C_IsErrorOccurred+0x2e>
 8002ccc:	e079      	b.n	8002dc2 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2210      	movs	r2, #16
 8002cd4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002cd6:	e057      	b.n	8002d88 <I2C_IsErrorOccurred+0xe8>
 8002cd8:	2227      	movs	r2, #39	@ 0x27
 8002cda:	18bb      	adds	r3, r7, r2
 8002cdc:	18ba      	adds	r2, r7, r2
 8002cde:	7812      	ldrb	r2, [r2, #0]
 8002ce0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	d04f      	beq.n	8002d88 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ce8:	f7ff f926 	bl	8001f38 <HAL_GetTick>
 8002cec:	0002      	movs	r2, r0
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	68ba      	ldr	r2, [r7, #8]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d302      	bcc.n	8002cfe <I2C_IsErrorOccurred+0x5e>
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d144      	bne.n	8002d88 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	2380      	movs	r3, #128	@ 0x80
 8002d06:	01db      	lsls	r3, r3, #7
 8002d08:	4013      	ands	r3, r2
 8002d0a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002d0c:	2013      	movs	r0, #19
 8002d0e:	183b      	adds	r3, r7, r0
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	2142      	movs	r1, #66	@ 0x42
 8002d14:	5c52      	ldrb	r2, [r2, r1]
 8002d16:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	699a      	ldr	r2, [r3, #24]
 8002d1e:	2380      	movs	r3, #128	@ 0x80
 8002d20:	021b      	lsls	r3, r3, #8
 8002d22:	401a      	ands	r2, r3
 8002d24:	2380      	movs	r3, #128	@ 0x80
 8002d26:	021b      	lsls	r3, r3, #8
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d126      	bne.n	8002d7a <I2C_IsErrorOccurred+0xda>
 8002d2c:	697a      	ldr	r2, [r7, #20]
 8002d2e:	2380      	movs	r3, #128	@ 0x80
 8002d30:	01db      	lsls	r3, r3, #7
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d021      	beq.n	8002d7a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8002d36:	183b      	adds	r3, r7, r0
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b20      	cmp	r3, #32
 8002d3c:	d01d      	beq.n	8002d7a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2180      	movs	r1, #128	@ 0x80
 8002d4a:	01c9      	lsls	r1, r1, #7
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002d50:	f7ff f8f2 	bl	8001f38 <HAL_GetTick>
 8002d54:	0003      	movs	r3, r0
 8002d56:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d58:	e00f      	b.n	8002d7a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002d5a:	f7ff f8ed 	bl	8001f38 <HAL_GetTick>
 8002d5e:	0002      	movs	r2, r0
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b19      	cmp	r3, #25
 8002d66:	d908      	bls.n	8002d7a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002d68:	6a3b      	ldr	r3, [r7, #32]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002d70:	2327      	movs	r3, #39	@ 0x27
 8002d72:	18fb      	adds	r3, r7, r3
 8002d74:	2201      	movs	r2, #1
 8002d76:	701a      	strb	r2, [r3, #0]

              break;
 8002d78:	e006      	b.n	8002d88 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	2220      	movs	r2, #32
 8002d82:	4013      	ands	r3, r2
 8002d84:	2b20      	cmp	r3, #32
 8002d86:	d1e8      	bne.n	8002d5a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	2220      	movs	r2, #32
 8002d90:	4013      	ands	r3, r2
 8002d92:	2b20      	cmp	r3, #32
 8002d94:	d004      	beq.n	8002da0 <I2C_IsErrorOccurred+0x100>
 8002d96:	2327      	movs	r3, #39	@ 0x27
 8002d98:	18fb      	adds	r3, r7, r3
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d09b      	beq.n	8002cd8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002da0:	2327      	movs	r3, #39	@ 0x27
 8002da2:	18fb      	adds	r3, r7, r3
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d103      	bne.n	8002db2 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2220      	movs	r2, #32
 8002db0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002db2:	6a3b      	ldr	r3, [r7, #32]
 8002db4:	2204      	movs	r2, #4
 8002db6:	4313      	orrs	r3, r2
 8002db8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002dba:	2327      	movs	r3, #39	@ 0x27
 8002dbc:	18fb      	adds	r3, r7, r3
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	2380      	movs	r3, #128	@ 0x80
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	d00c      	beq.n	8002dee <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002dd4:	6a3b      	ldr	r3, [r7, #32]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2280      	movs	r2, #128	@ 0x80
 8002de2:	0052      	lsls	r2, r2, #1
 8002de4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002de6:	2327      	movs	r3, #39	@ 0x27
 8002de8:	18fb      	adds	r3, r7, r3
 8002dea:	2201      	movs	r2, #1
 8002dec:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	2380      	movs	r3, #128	@ 0x80
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	4013      	ands	r3, r2
 8002df6:	d00c      	beq.n	8002e12 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002df8:	6a3b      	ldr	r3, [r7, #32]
 8002dfa:	2208      	movs	r2, #8
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2280      	movs	r2, #128	@ 0x80
 8002e06:	00d2      	lsls	r2, r2, #3
 8002e08:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e0a:	2327      	movs	r3, #39	@ 0x27
 8002e0c:	18fb      	adds	r3, r7, r3
 8002e0e:	2201      	movs	r2, #1
 8002e10:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	2380      	movs	r3, #128	@ 0x80
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	4013      	ands	r3, r2
 8002e1a:	d00c      	beq.n	8002e36 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002e1c:	6a3b      	ldr	r3, [r7, #32]
 8002e1e:	2202      	movs	r2, #2
 8002e20:	4313      	orrs	r3, r2
 8002e22:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2280      	movs	r2, #128	@ 0x80
 8002e2a:	0092      	lsls	r2, r2, #2
 8002e2c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e2e:	2327      	movs	r3, #39	@ 0x27
 8002e30:	18fb      	adds	r3, r7, r3
 8002e32:	2201      	movs	r2, #1
 8002e34:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002e36:	2327      	movs	r3, #39	@ 0x27
 8002e38:	18fb      	adds	r3, r7, r3
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d01d      	beq.n	8002e7c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	0018      	movs	r0, r3
 8002e44:	f7ff fdb0 	bl	80029a8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	490e      	ldr	r1, [pc, #56]	@ (8002e8c <I2C_IsErrorOccurred+0x1ec>)
 8002e54:	400a      	ands	r2, r1
 8002e56:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e5c:	6a3b      	ldr	r3, [r7, #32]
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2241      	movs	r2, #65	@ 0x41
 8002e68:	2120      	movs	r1, #32
 8002e6a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2242      	movs	r2, #66	@ 0x42
 8002e70:	2100      	movs	r1, #0
 8002e72:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2240      	movs	r2, #64	@ 0x40
 8002e78:	2100      	movs	r1, #0
 8002e7a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002e7c:	2327      	movs	r3, #39	@ 0x27
 8002e7e:	18fb      	adds	r3, r7, r3
 8002e80:	781b      	ldrb	r3, [r3, #0]
}
 8002e82:	0018      	movs	r0, r3
 8002e84:	46bd      	mov	sp, r7
 8002e86:	b00a      	add	sp, #40	@ 0x28
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	46c0      	nop			@ (mov r8, r8)
 8002e8c:	fe00e800 	.word	0xfe00e800

08002e90 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002e90:	b590      	push	{r4, r7, lr}
 8002e92:	b087      	sub	sp, #28
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	0008      	movs	r0, r1
 8002e9a:	0011      	movs	r1, r2
 8002e9c:	607b      	str	r3, [r7, #4]
 8002e9e:	240a      	movs	r4, #10
 8002ea0:	193b      	adds	r3, r7, r4
 8002ea2:	1c02      	adds	r2, r0, #0
 8002ea4:	801a      	strh	r2, [r3, #0]
 8002ea6:	2009      	movs	r0, #9
 8002ea8:	183b      	adds	r3, r7, r0
 8002eaa:	1c0a      	adds	r2, r1, #0
 8002eac:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002eae:	193b      	adds	r3, r7, r4
 8002eb0:	881b      	ldrh	r3, [r3, #0]
 8002eb2:	059b      	lsls	r3, r3, #22
 8002eb4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002eb6:	183b      	adds	r3, r7, r0
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	0419      	lsls	r1, r3, #16
 8002ebc:	23ff      	movs	r3, #255	@ 0xff
 8002ebe:	041b      	lsls	r3, r3, #16
 8002ec0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ec2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	085b      	lsrs	r3, r3, #1
 8002ed0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002eda:	0d51      	lsrs	r1, r2, #21
 8002edc:	2280      	movs	r2, #128	@ 0x80
 8002ede:	00d2      	lsls	r2, r2, #3
 8002ee0:	400a      	ands	r2, r1
 8002ee2:	4907      	ldr	r1, [pc, #28]	@ (8002f00 <I2C_TransferConfig+0x70>)
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	43d2      	mvns	r2, r2
 8002ee8:	401a      	ands	r2, r3
 8002eea:	0011      	movs	r1, r2
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002ef6:	46c0      	nop			@ (mov r8, r8)
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	b007      	add	sp, #28
 8002efc:	bd90      	pop	{r4, r7, pc}
 8002efe:	46c0      	nop			@ (mov r8, r8)
 8002f00:	03ff63ff 	.word	0x03ff63ff

08002f04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2241      	movs	r2, #65	@ 0x41
 8002f12:	5c9b      	ldrb	r3, [r3, r2]
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b20      	cmp	r3, #32
 8002f18:	d138      	bne.n	8002f8c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2240      	movs	r2, #64	@ 0x40
 8002f1e:	5c9b      	ldrb	r3, [r3, r2]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d101      	bne.n	8002f28 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f24:	2302      	movs	r3, #2
 8002f26:	e032      	b.n	8002f8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2240      	movs	r2, #64	@ 0x40
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2241      	movs	r2, #65	@ 0x41
 8002f34:	2124      	movs	r1, #36	@ 0x24
 8002f36:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2101      	movs	r1, #1
 8002f44:	438a      	bics	r2, r1
 8002f46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4911      	ldr	r1, [pc, #68]	@ (8002f98 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002f54:	400a      	ands	r2, r1
 8002f56:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6819      	ldr	r1, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2101      	movs	r1, #1
 8002f74:	430a      	orrs	r2, r1
 8002f76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2241      	movs	r2, #65	@ 0x41
 8002f7c:	2120      	movs	r1, #32
 8002f7e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2240      	movs	r2, #64	@ 0x40
 8002f84:	2100      	movs	r1, #0
 8002f86:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	e000      	b.n	8002f8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f8c:	2302      	movs	r3, #2
  }
}
 8002f8e:	0018      	movs	r0, r3
 8002f90:	46bd      	mov	sp, r7
 8002f92:	b002      	add	sp, #8
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	46c0      	nop			@ (mov r8, r8)
 8002f98:	ffffefff 	.word	0xffffefff

08002f9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f9c:	b5b0      	push	{r4, r5, r7, lr}
 8002f9e:	b08a      	sub	sp, #40	@ 0x28
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d102      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	f000 fbaf 	bl	800370e <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fb0:	4bcf      	ldr	r3, [pc, #828]	@ (80032f0 <HAL_RCC_OscConfig+0x354>)
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	220c      	movs	r2, #12
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fba:	4bcd      	ldr	r3, [pc, #820]	@ (80032f0 <HAL_RCC_OscConfig+0x354>)
 8002fbc:	68da      	ldr	r2, [r3, #12]
 8002fbe:	2380      	movs	r3, #128	@ 0x80
 8002fc0:	025b      	lsls	r3, r3, #9
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	4013      	ands	r3, r2
 8002fce:	d100      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x36>
 8002fd0:	e07e      	b.n	80030d0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fd2:	6a3b      	ldr	r3, [r7, #32]
 8002fd4:	2b08      	cmp	r3, #8
 8002fd6:	d007      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002fd8:	6a3b      	ldr	r3, [r7, #32]
 8002fda:	2b0c      	cmp	r3, #12
 8002fdc:	d112      	bne.n	8003004 <HAL_RCC_OscConfig+0x68>
 8002fde:	69fa      	ldr	r2, [r7, #28]
 8002fe0:	2380      	movs	r3, #128	@ 0x80
 8002fe2:	025b      	lsls	r3, r3, #9
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d10d      	bne.n	8003004 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fe8:	4bc1      	ldr	r3, [pc, #772]	@ (80032f0 <HAL_RCC_OscConfig+0x354>)
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	2380      	movs	r3, #128	@ 0x80
 8002fee:	029b      	lsls	r3, r3, #10
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	d100      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x5a>
 8002ff4:	e06b      	b.n	80030ce <HAL_RCC_OscConfig+0x132>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d167      	bne.n	80030ce <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	f000 fb85 	bl	800370e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	2380      	movs	r3, #128	@ 0x80
 800300a:	025b      	lsls	r3, r3, #9
 800300c:	429a      	cmp	r2, r3
 800300e:	d107      	bne.n	8003020 <HAL_RCC_OscConfig+0x84>
 8003010:	4bb7      	ldr	r3, [pc, #732]	@ (80032f0 <HAL_RCC_OscConfig+0x354>)
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	4bb6      	ldr	r3, [pc, #728]	@ (80032f0 <HAL_RCC_OscConfig+0x354>)
 8003016:	2180      	movs	r1, #128	@ 0x80
 8003018:	0249      	lsls	r1, r1, #9
 800301a:	430a      	orrs	r2, r1
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	e027      	b.n	8003070 <HAL_RCC_OscConfig+0xd4>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	23a0      	movs	r3, #160	@ 0xa0
 8003026:	02db      	lsls	r3, r3, #11
 8003028:	429a      	cmp	r2, r3
 800302a:	d10e      	bne.n	800304a <HAL_RCC_OscConfig+0xae>
 800302c:	4bb0      	ldr	r3, [pc, #704]	@ (80032f0 <HAL_RCC_OscConfig+0x354>)
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	4baf      	ldr	r3, [pc, #700]	@ (80032f0 <HAL_RCC_OscConfig+0x354>)
 8003032:	2180      	movs	r1, #128	@ 0x80
 8003034:	02c9      	lsls	r1, r1, #11
 8003036:	430a      	orrs	r2, r1
 8003038:	601a      	str	r2, [r3, #0]
 800303a:	4bad      	ldr	r3, [pc, #692]	@ (80032f0 <HAL_RCC_OscConfig+0x354>)
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	4bac      	ldr	r3, [pc, #688]	@ (80032f0 <HAL_RCC_OscConfig+0x354>)
 8003040:	2180      	movs	r1, #128	@ 0x80
 8003042:	0249      	lsls	r1, r1, #9
 8003044:	430a      	orrs	r2, r1
 8003046:	601a      	str	r2, [r3, #0]
 8003048:	e012      	b.n	8003070 <HAL_RCC_OscConfig+0xd4>
 800304a:	4ba9      	ldr	r3, [pc, #676]	@ (80032f0 <HAL_RCC_OscConfig+0x354>)
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	4ba8      	ldr	r3, [pc, #672]	@ (80032f0 <HAL_RCC_OscConfig+0x354>)
 8003050:	49a8      	ldr	r1, [pc, #672]	@ (80032f4 <HAL_RCC_OscConfig+0x358>)
 8003052:	400a      	ands	r2, r1
 8003054:	601a      	str	r2, [r3, #0]
 8003056:	4ba6      	ldr	r3, [pc, #664]	@ (80032f0 <HAL_RCC_OscConfig+0x354>)
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	2380      	movs	r3, #128	@ 0x80
 800305c:	025b      	lsls	r3, r3, #9
 800305e:	4013      	ands	r3, r2
 8003060:	60fb      	str	r3, [r7, #12]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	4ba2      	ldr	r3, [pc, #648]	@ (80032f0 <HAL_RCC_OscConfig+0x354>)
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	4ba1      	ldr	r3, [pc, #644]	@ (80032f0 <HAL_RCC_OscConfig+0x354>)
 800306a:	49a3      	ldr	r1, [pc, #652]	@ (80032f8 <HAL_RCC_OscConfig+0x35c>)
 800306c:	400a      	ands	r2, r1
 800306e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d015      	beq.n	80030a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003078:	f7fe ff5e 	bl	8001f38 <HAL_GetTick>
 800307c:	0003      	movs	r3, r0
 800307e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003080:	e009      	b.n	8003096 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003082:	f7fe ff59 	bl	8001f38 <HAL_GetTick>
 8003086:	0002      	movs	r2, r0
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b64      	cmp	r3, #100	@ 0x64
 800308e:	d902      	bls.n	8003096 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	f000 fb3c 	bl	800370e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003096:	4b96      	ldr	r3, [pc, #600]	@ (80032f0 <HAL_RCC_OscConfig+0x354>)
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	2380      	movs	r3, #128	@ 0x80
 800309c:	029b      	lsls	r3, r3, #10
 800309e:	4013      	ands	r3, r2
 80030a0:	d0ef      	beq.n	8003082 <HAL_RCC_OscConfig+0xe6>
 80030a2:	e015      	b.n	80030d0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a4:	f7fe ff48 	bl	8001f38 <HAL_GetTick>
 80030a8:	0003      	movs	r3, r0
 80030aa:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80030ac:	e008      	b.n	80030c0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030ae:	f7fe ff43 	bl	8001f38 <HAL_GetTick>
 80030b2:	0002      	movs	r2, r0
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b64      	cmp	r3, #100	@ 0x64
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e326      	b.n	800370e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80030c0:	4b8b      	ldr	r3, [pc, #556]	@ (80032f0 <HAL_RCC_OscConfig+0x354>)
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	2380      	movs	r3, #128	@ 0x80
 80030c6:	029b      	lsls	r3, r3, #10
 80030c8:	4013      	ands	r3, r2
 80030ca:	d1f0      	bne.n	80030ae <HAL_RCC_OscConfig+0x112>
 80030cc:	e000      	b.n	80030d0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ce:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2202      	movs	r2, #2
 80030d6:	4013      	ands	r3, r2
 80030d8:	d100      	bne.n	80030dc <HAL_RCC_OscConfig+0x140>
 80030da:	e08b      	b.n	80031f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030e2:	6a3b      	ldr	r3, [r7, #32]
 80030e4:	2b04      	cmp	r3, #4
 80030e6:	d005      	beq.n	80030f4 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80030e8:	6a3b      	ldr	r3, [r7, #32]
 80030ea:	2b0c      	cmp	r3, #12
 80030ec:	d13e      	bne.n	800316c <HAL_RCC_OscConfig+0x1d0>
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d13b      	bne.n	800316c <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80030f4:	4b7e      	ldr	r3, [pc, #504]	@ (80032f0 <HAL_RCC_OscConfig+0x354>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2204      	movs	r2, #4
 80030fa:	4013      	ands	r3, r2
 80030fc:	d004      	beq.n	8003108 <HAL_RCC_OscConfig+0x16c>
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e302      	b.n	800370e <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003108:	4b79      	ldr	r3, [pc, #484]	@ (80032f0 <HAL_RCC_OscConfig+0x354>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	4a7b      	ldr	r2, [pc, #492]	@ (80032fc <HAL_RCC_OscConfig+0x360>)
 800310e:	4013      	ands	r3, r2
 8003110:	0019      	movs	r1, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	021a      	lsls	r2, r3, #8
 8003118:	4b75      	ldr	r3, [pc, #468]	@ (80032f0 <HAL_RCC_OscConfig+0x354>)
 800311a:	430a      	orrs	r2, r1
 800311c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800311e:	4b74      	ldr	r3, [pc, #464]	@ (80032f0 <HAL_RCC_OscConfig+0x354>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2209      	movs	r2, #9
 8003124:	4393      	bics	r3, r2
 8003126:	0019      	movs	r1, r3
 8003128:	4b71      	ldr	r3, [pc, #452]	@ (80032f0 <HAL_RCC_OscConfig+0x354>)
 800312a:	697a      	ldr	r2, [r7, #20]
 800312c:	430a      	orrs	r2, r1
 800312e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003130:	f000 fc40 	bl	80039b4 <HAL_RCC_GetSysClockFreq>
 8003134:	0001      	movs	r1, r0
 8003136:	4b6e      	ldr	r3, [pc, #440]	@ (80032f0 <HAL_RCC_OscConfig+0x354>)
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	091b      	lsrs	r3, r3, #4
 800313c:	220f      	movs	r2, #15
 800313e:	4013      	ands	r3, r2
 8003140:	4a6f      	ldr	r2, [pc, #444]	@ (8003300 <HAL_RCC_OscConfig+0x364>)
 8003142:	5cd3      	ldrb	r3, [r2, r3]
 8003144:	000a      	movs	r2, r1
 8003146:	40da      	lsrs	r2, r3
 8003148:	4b6e      	ldr	r3, [pc, #440]	@ (8003304 <HAL_RCC_OscConfig+0x368>)
 800314a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800314c:	4b6e      	ldr	r3, [pc, #440]	@ (8003308 <HAL_RCC_OscConfig+0x36c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2513      	movs	r5, #19
 8003152:	197c      	adds	r4, r7, r5
 8003154:	0018      	movs	r0, r3
 8003156:	f7fe fea9 	bl	8001eac <HAL_InitTick>
 800315a:	0003      	movs	r3, r0
 800315c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800315e:	197b      	adds	r3, r7, r5
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d046      	beq.n	80031f4 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8003166:	197b      	adds	r3, r7, r5
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	e2d0      	b.n	800370e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d027      	beq.n	80031c2 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003172:	4b5f      	ldr	r3, [pc, #380]	@ (80032f0 <HAL_RCC_OscConfig+0x354>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2209      	movs	r2, #9
 8003178:	4393      	bics	r3, r2
 800317a:	0019      	movs	r1, r3
 800317c:	4b5c      	ldr	r3, [pc, #368]	@ (80032f0 <HAL_RCC_OscConfig+0x354>)
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	430a      	orrs	r2, r1
 8003182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003184:	f7fe fed8 	bl	8001f38 <HAL_GetTick>
 8003188:	0003      	movs	r3, r0
 800318a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800318c:	e008      	b.n	80031a0 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800318e:	f7fe fed3 	bl	8001f38 <HAL_GetTick>
 8003192:	0002      	movs	r2, r0
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e2b6      	b.n	800370e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031a0:	4b53      	ldr	r3, [pc, #332]	@ (80032f0 <HAL_RCC_OscConfig+0x354>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2204      	movs	r2, #4
 80031a6:	4013      	ands	r3, r2
 80031a8:	d0f1      	beq.n	800318e <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031aa:	4b51      	ldr	r3, [pc, #324]	@ (80032f0 <HAL_RCC_OscConfig+0x354>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	4a53      	ldr	r2, [pc, #332]	@ (80032fc <HAL_RCC_OscConfig+0x360>)
 80031b0:	4013      	ands	r3, r2
 80031b2:	0019      	movs	r1, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	021a      	lsls	r2, r3, #8
 80031ba:	4b4d      	ldr	r3, [pc, #308]	@ (80032f0 <HAL_RCC_OscConfig+0x354>)
 80031bc:	430a      	orrs	r2, r1
 80031be:	605a      	str	r2, [r3, #4]
 80031c0:	e018      	b.n	80031f4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031c2:	4b4b      	ldr	r3, [pc, #300]	@ (80032f0 <HAL_RCC_OscConfig+0x354>)
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	4b4a      	ldr	r3, [pc, #296]	@ (80032f0 <HAL_RCC_OscConfig+0x354>)
 80031c8:	2101      	movs	r1, #1
 80031ca:	438a      	bics	r2, r1
 80031cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ce:	f7fe feb3 	bl	8001f38 <HAL_GetTick>
 80031d2:	0003      	movs	r3, r0
 80031d4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031d8:	f7fe feae 	bl	8001f38 <HAL_GetTick>
 80031dc:	0002      	movs	r2, r0
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e291      	b.n	800370e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80031ea:	4b41      	ldr	r3, [pc, #260]	@ (80032f0 <HAL_RCC_OscConfig+0x354>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2204      	movs	r2, #4
 80031f0:	4013      	ands	r3, r2
 80031f2:	d1f1      	bne.n	80031d8 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2210      	movs	r2, #16
 80031fa:	4013      	ands	r3, r2
 80031fc:	d100      	bne.n	8003200 <HAL_RCC_OscConfig+0x264>
 80031fe:	e0a1      	b.n	8003344 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003200:	6a3b      	ldr	r3, [r7, #32]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d140      	bne.n	8003288 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003206:	4b3a      	ldr	r3, [pc, #232]	@ (80032f0 <HAL_RCC_OscConfig+0x354>)
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	2380      	movs	r3, #128	@ 0x80
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	4013      	ands	r3, r2
 8003210:	d005      	beq.n	800321e <HAL_RCC_OscConfig+0x282>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e277      	b.n	800370e <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800321e:	4b34      	ldr	r3, [pc, #208]	@ (80032f0 <HAL_RCC_OscConfig+0x354>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	4a3a      	ldr	r2, [pc, #232]	@ (800330c <HAL_RCC_OscConfig+0x370>)
 8003224:	4013      	ands	r3, r2
 8003226:	0019      	movs	r1, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800322c:	4b30      	ldr	r3, [pc, #192]	@ (80032f0 <HAL_RCC_OscConfig+0x354>)
 800322e:	430a      	orrs	r2, r1
 8003230:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003232:	4b2f      	ldr	r3, [pc, #188]	@ (80032f0 <HAL_RCC_OscConfig+0x354>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	021b      	lsls	r3, r3, #8
 8003238:	0a19      	lsrs	r1, r3, #8
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	061a      	lsls	r2, r3, #24
 8003240:	4b2b      	ldr	r3, [pc, #172]	@ (80032f0 <HAL_RCC_OscConfig+0x354>)
 8003242:	430a      	orrs	r2, r1
 8003244:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324a:	0b5b      	lsrs	r3, r3, #13
 800324c:	3301      	adds	r3, #1
 800324e:	2280      	movs	r2, #128	@ 0x80
 8003250:	0212      	lsls	r2, r2, #8
 8003252:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003254:	4b26      	ldr	r3, [pc, #152]	@ (80032f0 <HAL_RCC_OscConfig+0x354>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	091b      	lsrs	r3, r3, #4
 800325a:	210f      	movs	r1, #15
 800325c:	400b      	ands	r3, r1
 800325e:	4928      	ldr	r1, [pc, #160]	@ (8003300 <HAL_RCC_OscConfig+0x364>)
 8003260:	5ccb      	ldrb	r3, [r1, r3]
 8003262:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003264:	4b27      	ldr	r3, [pc, #156]	@ (8003304 <HAL_RCC_OscConfig+0x368>)
 8003266:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8003268:	4b27      	ldr	r3, [pc, #156]	@ (8003308 <HAL_RCC_OscConfig+0x36c>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2513      	movs	r5, #19
 800326e:	197c      	adds	r4, r7, r5
 8003270:	0018      	movs	r0, r3
 8003272:	f7fe fe1b 	bl	8001eac <HAL_InitTick>
 8003276:	0003      	movs	r3, r0
 8003278:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800327a:	197b      	adds	r3, r7, r5
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d060      	beq.n	8003344 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8003282:	197b      	adds	r3, r7, r5
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	e242      	b.n	800370e <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	69db      	ldr	r3, [r3, #28]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d03f      	beq.n	8003310 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003290:	4b17      	ldr	r3, [pc, #92]	@ (80032f0 <HAL_RCC_OscConfig+0x354>)
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	4b16      	ldr	r3, [pc, #88]	@ (80032f0 <HAL_RCC_OscConfig+0x354>)
 8003296:	2180      	movs	r1, #128	@ 0x80
 8003298:	0049      	lsls	r1, r1, #1
 800329a:	430a      	orrs	r2, r1
 800329c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329e:	f7fe fe4b 	bl	8001f38 <HAL_GetTick>
 80032a2:	0003      	movs	r3, r0
 80032a4:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80032a6:	e008      	b.n	80032ba <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032a8:	f7fe fe46 	bl	8001f38 <HAL_GetTick>
 80032ac:	0002      	movs	r2, r0
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e229      	b.n	800370e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80032ba:	4b0d      	ldr	r3, [pc, #52]	@ (80032f0 <HAL_RCC_OscConfig+0x354>)
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	2380      	movs	r3, #128	@ 0x80
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4013      	ands	r3, r2
 80032c4:	d0f0      	beq.n	80032a8 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032c6:	4b0a      	ldr	r3, [pc, #40]	@ (80032f0 <HAL_RCC_OscConfig+0x354>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	4a10      	ldr	r2, [pc, #64]	@ (800330c <HAL_RCC_OscConfig+0x370>)
 80032cc:	4013      	ands	r3, r2
 80032ce:	0019      	movs	r1, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032d4:	4b06      	ldr	r3, [pc, #24]	@ (80032f0 <HAL_RCC_OscConfig+0x354>)
 80032d6:	430a      	orrs	r2, r1
 80032d8:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032da:	4b05      	ldr	r3, [pc, #20]	@ (80032f0 <HAL_RCC_OscConfig+0x354>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	021b      	lsls	r3, r3, #8
 80032e0:	0a19      	lsrs	r1, r3, #8
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a1b      	ldr	r3, [r3, #32]
 80032e6:	061a      	lsls	r2, r3, #24
 80032e8:	4b01      	ldr	r3, [pc, #4]	@ (80032f0 <HAL_RCC_OscConfig+0x354>)
 80032ea:	430a      	orrs	r2, r1
 80032ec:	605a      	str	r2, [r3, #4]
 80032ee:	e029      	b.n	8003344 <HAL_RCC_OscConfig+0x3a8>
 80032f0:	40021000 	.word	0x40021000
 80032f4:	fffeffff 	.word	0xfffeffff
 80032f8:	fffbffff 	.word	0xfffbffff
 80032fc:	ffffe0ff 	.word	0xffffe0ff
 8003300:	080088b0 	.word	0x080088b0
 8003304:	20000000 	.word	0x20000000
 8003308:	20000014 	.word	0x20000014
 800330c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003310:	4bbd      	ldr	r3, [pc, #756]	@ (8003608 <HAL_RCC_OscConfig+0x66c>)
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	4bbc      	ldr	r3, [pc, #752]	@ (8003608 <HAL_RCC_OscConfig+0x66c>)
 8003316:	49bd      	ldr	r1, [pc, #756]	@ (800360c <HAL_RCC_OscConfig+0x670>)
 8003318:	400a      	ands	r2, r1
 800331a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800331c:	f7fe fe0c 	bl	8001f38 <HAL_GetTick>
 8003320:	0003      	movs	r3, r0
 8003322:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003324:	e008      	b.n	8003338 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003326:	f7fe fe07 	bl	8001f38 <HAL_GetTick>
 800332a:	0002      	movs	r2, r0
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b02      	cmp	r3, #2
 8003332:	d901      	bls.n	8003338 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e1ea      	b.n	800370e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003338:	4bb3      	ldr	r3, [pc, #716]	@ (8003608 <HAL_RCC_OscConfig+0x66c>)
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	2380      	movs	r3, #128	@ 0x80
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4013      	ands	r3, r2
 8003342:	d1f0      	bne.n	8003326 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2208      	movs	r2, #8
 800334a:	4013      	ands	r3, r2
 800334c:	d036      	beq.n	80033bc <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d019      	beq.n	800338a <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003356:	4bac      	ldr	r3, [pc, #688]	@ (8003608 <HAL_RCC_OscConfig+0x66c>)
 8003358:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800335a:	4bab      	ldr	r3, [pc, #684]	@ (8003608 <HAL_RCC_OscConfig+0x66c>)
 800335c:	2101      	movs	r1, #1
 800335e:	430a      	orrs	r2, r1
 8003360:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003362:	f7fe fde9 	bl	8001f38 <HAL_GetTick>
 8003366:	0003      	movs	r3, r0
 8003368:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800336c:	f7fe fde4 	bl	8001f38 <HAL_GetTick>
 8003370:	0002      	movs	r2, r0
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e1c7      	b.n	800370e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800337e:	4ba2      	ldr	r3, [pc, #648]	@ (8003608 <HAL_RCC_OscConfig+0x66c>)
 8003380:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003382:	2202      	movs	r2, #2
 8003384:	4013      	ands	r3, r2
 8003386:	d0f1      	beq.n	800336c <HAL_RCC_OscConfig+0x3d0>
 8003388:	e018      	b.n	80033bc <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800338a:	4b9f      	ldr	r3, [pc, #636]	@ (8003608 <HAL_RCC_OscConfig+0x66c>)
 800338c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800338e:	4b9e      	ldr	r3, [pc, #632]	@ (8003608 <HAL_RCC_OscConfig+0x66c>)
 8003390:	2101      	movs	r1, #1
 8003392:	438a      	bics	r2, r1
 8003394:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003396:	f7fe fdcf 	bl	8001f38 <HAL_GetTick>
 800339a:	0003      	movs	r3, r0
 800339c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033a0:	f7fe fdca 	bl	8001f38 <HAL_GetTick>
 80033a4:	0002      	movs	r2, r0
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e1ad      	b.n	800370e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80033b2:	4b95      	ldr	r3, [pc, #596]	@ (8003608 <HAL_RCC_OscConfig+0x66c>)
 80033b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033b6:	2202      	movs	r2, #2
 80033b8:	4013      	ands	r3, r2
 80033ba:	d1f1      	bne.n	80033a0 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2204      	movs	r2, #4
 80033c2:	4013      	ands	r3, r2
 80033c4:	d100      	bne.n	80033c8 <HAL_RCC_OscConfig+0x42c>
 80033c6:	e0ae      	b.n	8003526 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033c8:	2027      	movs	r0, #39	@ 0x27
 80033ca:	183b      	adds	r3, r7, r0
 80033cc:	2200      	movs	r2, #0
 80033ce:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033d0:	4b8d      	ldr	r3, [pc, #564]	@ (8003608 <HAL_RCC_OscConfig+0x66c>)
 80033d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033d4:	2380      	movs	r3, #128	@ 0x80
 80033d6:	055b      	lsls	r3, r3, #21
 80033d8:	4013      	ands	r3, r2
 80033da:	d109      	bne.n	80033f0 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033dc:	4b8a      	ldr	r3, [pc, #552]	@ (8003608 <HAL_RCC_OscConfig+0x66c>)
 80033de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033e0:	4b89      	ldr	r3, [pc, #548]	@ (8003608 <HAL_RCC_OscConfig+0x66c>)
 80033e2:	2180      	movs	r1, #128	@ 0x80
 80033e4:	0549      	lsls	r1, r1, #21
 80033e6:	430a      	orrs	r2, r1
 80033e8:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80033ea:	183b      	adds	r3, r7, r0
 80033ec:	2201      	movs	r2, #1
 80033ee:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f0:	4b87      	ldr	r3, [pc, #540]	@ (8003610 <HAL_RCC_OscConfig+0x674>)
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	2380      	movs	r3, #128	@ 0x80
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	4013      	ands	r3, r2
 80033fa:	d11a      	bne.n	8003432 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033fc:	4b84      	ldr	r3, [pc, #528]	@ (8003610 <HAL_RCC_OscConfig+0x674>)
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	4b83      	ldr	r3, [pc, #524]	@ (8003610 <HAL_RCC_OscConfig+0x674>)
 8003402:	2180      	movs	r1, #128	@ 0x80
 8003404:	0049      	lsls	r1, r1, #1
 8003406:	430a      	orrs	r2, r1
 8003408:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800340a:	f7fe fd95 	bl	8001f38 <HAL_GetTick>
 800340e:	0003      	movs	r3, r0
 8003410:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003414:	f7fe fd90 	bl	8001f38 <HAL_GetTick>
 8003418:	0002      	movs	r2, r0
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b64      	cmp	r3, #100	@ 0x64
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e173      	b.n	800370e <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003426:	4b7a      	ldr	r3, [pc, #488]	@ (8003610 <HAL_RCC_OscConfig+0x674>)
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	2380      	movs	r3, #128	@ 0x80
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	4013      	ands	r3, r2
 8003430:	d0f0      	beq.n	8003414 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689a      	ldr	r2, [r3, #8]
 8003436:	2380      	movs	r3, #128	@ 0x80
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	429a      	cmp	r2, r3
 800343c:	d107      	bne.n	800344e <HAL_RCC_OscConfig+0x4b2>
 800343e:	4b72      	ldr	r3, [pc, #456]	@ (8003608 <HAL_RCC_OscConfig+0x66c>)
 8003440:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003442:	4b71      	ldr	r3, [pc, #452]	@ (8003608 <HAL_RCC_OscConfig+0x66c>)
 8003444:	2180      	movs	r1, #128	@ 0x80
 8003446:	0049      	lsls	r1, r1, #1
 8003448:	430a      	orrs	r2, r1
 800344a:	651a      	str	r2, [r3, #80]	@ 0x50
 800344c:	e031      	b.n	80034b2 <HAL_RCC_OscConfig+0x516>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10c      	bne.n	8003470 <HAL_RCC_OscConfig+0x4d4>
 8003456:	4b6c      	ldr	r3, [pc, #432]	@ (8003608 <HAL_RCC_OscConfig+0x66c>)
 8003458:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800345a:	4b6b      	ldr	r3, [pc, #428]	@ (8003608 <HAL_RCC_OscConfig+0x66c>)
 800345c:	496b      	ldr	r1, [pc, #428]	@ (800360c <HAL_RCC_OscConfig+0x670>)
 800345e:	400a      	ands	r2, r1
 8003460:	651a      	str	r2, [r3, #80]	@ 0x50
 8003462:	4b69      	ldr	r3, [pc, #420]	@ (8003608 <HAL_RCC_OscConfig+0x66c>)
 8003464:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003466:	4b68      	ldr	r3, [pc, #416]	@ (8003608 <HAL_RCC_OscConfig+0x66c>)
 8003468:	496a      	ldr	r1, [pc, #424]	@ (8003614 <HAL_RCC_OscConfig+0x678>)
 800346a:	400a      	ands	r2, r1
 800346c:	651a      	str	r2, [r3, #80]	@ 0x50
 800346e:	e020      	b.n	80034b2 <HAL_RCC_OscConfig+0x516>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	23a0      	movs	r3, #160	@ 0xa0
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	429a      	cmp	r2, r3
 800347a:	d10e      	bne.n	800349a <HAL_RCC_OscConfig+0x4fe>
 800347c:	4b62      	ldr	r3, [pc, #392]	@ (8003608 <HAL_RCC_OscConfig+0x66c>)
 800347e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003480:	4b61      	ldr	r3, [pc, #388]	@ (8003608 <HAL_RCC_OscConfig+0x66c>)
 8003482:	2180      	movs	r1, #128	@ 0x80
 8003484:	00c9      	lsls	r1, r1, #3
 8003486:	430a      	orrs	r2, r1
 8003488:	651a      	str	r2, [r3, #80]	@ 0x50
 800348a:	4b5f      	ldr	r3, [pc, #380]	@ (8003608 <HAL_RCC_OscConfig+0x66c>)
 800348c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800348e:	4b5e      	ldr	r3, [pc, #376]	@ (8003608 <HAL_RCC_OscConfig+0x66c>)
 8003490:	2180      	movs	r1, #128	@ 0x80
 8003492:	0049      	lsls	r1, r1, #1
 8003494:	430a      	orrs	r2, r1
 8003496:	651a      	str	r2, [r3, #80]	@ 0x50
 8003498:	e00b      	b.n	80034b2 <HAL_RCC_OscConfig+0x516>
 800349a:	4b5b      	ldr	r3, [pc, #364]	@ (8003608 <HAL_RCC_OscConfig+0x66c>)
 800349c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800349e:	4b5a      	ldr	r3, [pc, #360]	@ (8003608 <HAL_RCC_OscConfig+0x66c>)
 80034a0:	495a      	ldr	r1, [pc, #360]	@ (800360c <HAL_RCC_OscConfig+0x670>)
 80034a2:	400a      	ands	r2, r1
 80034a4:	651a      	str	r2, [r3, #80]	@ 0x50
 80034a6:	4b58      	ldr	r3, [pc, #352]	@ (8003608 <HAL_RCC_OscConfig+0x66c>)
 80034a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80034aa:	4b57      	ldr	r3, [pc, #348]	@ (8003608 <HAL_RCC_OscConfig+0x66c>)
 80034ac:	4959      	ldr	r1, [pc, #356]	@ (8003614 <HAL_RCC_OscConfig+0x678>)
 80034ae:	400a      	ands	r2, r1
 80034b0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d015      	beq.n	80034e6 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ba:	f7fe fd3d 	bl	8001f38 <HAL_GetTick>
 80034be:	0003      	movs	r3, r0
 80034c0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034c2:	e009      	b.n	80034d8 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034c4:	f7fe fd38 	bl	8001f38 <HAL_GetTick>
 80034c8:	0002      	movs	r2, r0
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	4a52      	ldr	r2, [pc, #328]	@ (8003618 <HAL_RCC_OscConfig+0x67c>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e11a      	b.n	800370e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034d8:	4b4b      	ldr	r3, [pc, #300]	@ (8003608 <HAL_RCC_OscConfig+0x66c>)
 80034da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80034dc:	2380      	movs	r3, #128	@ 0x80
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4013      	ands	r3, r2
 80034e2:	d0ef      	beq.n	80034c4 <HAL_RCC_OscConfig+0x528>
 80034e4:	e014      	b.n	8003510 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e6:	f7fe fd27 	bl	8001f38 <HAL_GetTick>
 80034ea:	0003      	movs	r3, r0
 80034ec:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80034ee:	e009      	b.n	8003504 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034f0:	f7fe fd22 	bl	8001f38 <HAL_GetTick>
 80034f4:	0002      	movs	r2, r0
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	4a47      	ldr	r2, [pc, #284]	@ (8003618 <HAL_RCC_OscConfig+0x67c>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e104      	b.n	800370e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003504:	4b40      	ldr	r3, [pc, #256]	@ (8003608 <HAL_RCC_OscConfig+0x66c>)
 8003506:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003508:	2380      	movs	r3, #128	@ 0x80
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4013      	ands	r3, r2
 800350e:	d1ef      	bne.n	80034f0 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003510:	2327      	movs	r3, #39	@ 0x27
 8003512:	18fb      	adds	r3, r7, r3
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d105      	bne.n	8003526 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800351a:	4b3b      	ldr	r3, [pc, #236]	@ (8003608 <HAL_RCC_OscConfig+0x66c>)
 800351c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800351e:	4b3a      	ldr	r3, [pc, #232]	@ (8003608 <HAL_RCC_OscConfig+0x66c>)
 8003520:	493e      	ldr	r1, [pc, #248]	@ (800361c <HAL_RCC_OscConfig+0x680>)
 8003522:	400a      	ands	r2, r1
 8003524:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2220      	movs	r2, #32
 800352c:	4013      	ands	r3, r2
 800352e:	d049      	beq.n	80035c4 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d026      	beq.n	8003586 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003538:	4b33      	ldr	r3, [pc, #204]	@ (8003608 <HAL_RCC_OscConfig+0x66c>)
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	4b32      	ldr	r3, [pc, #200]	@ (8003608 <HAL_RCC_OscConfig+0x66c>)
 800353e:	2101      	movs	r1, #1
 8003540:	430a      	orrs	r2, r1
 8003542:	609a      	str	r2, [r3, #8]
 8003544:	4b30      	ldr	r3, [pc, #192]	@ (8003608 <HAL_RCC_OscConfig+0x66c>)
 8003546:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003548:	4b2f      	ldr	r3, [pc, #188]	@ (8003608 <HAL_RCC_OscConfig+0x66c>)
 800354a:	2101      	movs	r1, #1
 800354c:	430a      	orrs	r2, r1
 800354e:	635a      	str	r2, [r3, #52]	@ 0x34
 8003550:	4b33      	ldr	r3, [pc, #204]	@ (8003620 <HAL_RCC_OscConfig+0x684>)
 8003552:	6a1a      	ldr	r2, [r3, #32]
 8003554:	4b32      	ldr	r3, [pc, #200]	@ (8003620 <HAL_RCC_OscConfig+0x684>)
 8003556:	2180      	movs	r1, #128	@ 0x80
 8003558:	0189      	lsls	r1, r1, #6
 800355a:	430a      	orrs	r2, r1
 800355c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800355e:	f7fe fceb 	bl	8001f38 <HAL_GetTick>
 8003562:	0003      	movs	r3, r0
 8003564:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003568:	f7fe fce6 	bl	8001f38 <HAL_GetTick>
 800356c:	0002      	movs	r2, r0
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e0c9      	b.n	800370e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800357a:	4b23      	ldr	r3, [pc, #140]	@ (8003608 <HAL_RCC_OscConfig+0x66c>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	2202      	movs	r2, #2
 8003580:	4013      	ands	r3, r2
 8003582:	d0f1      	beq.n	8003568 <HAL_RCC_OscConfig+0x5cc>
 8003584:	e01e      	b.n	80035c4 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003586:	4b20      	ldr	r3, [pc, #128]	@ (8003608 <HAL_RCC_OscConfig+0x66c>)
 8003588:	689a      	ldr	r2, [r3, #8]
 800358a:	4b1f      	ldr	r3, [pc, #124]	@ (8003608 <HAL_RCC_OscConfig+0x66c>)
 800358c:	2101      	movs	r1, #1
 800358e:	438a      	bics	r2, r1
 8003590:	609a      	str	r2, [r3, #8]
 8003592:	4b23      	ldr	r3, [pc, #140]	@ (8003620 <HAL_RCC_OscConfig+0x684>)
 8003594:	6a1a      	ldr	r2, [r3, #32]
 8003596:	4b22      	ldr	r3, [pc, #136]	@ (8003620 <HAL_RCC_OscConfig+0x684>)
 8003598:	4922      	ldr	r1, [pc, #136]	@ (8003624 <HAL_RCC_OscConfig+0x688>)
 800359a:	400a      	ands	r2, r1
 800359c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359e:	f7fe fccb 	bl	8001f38 <HAL_GetTick>
 80035a2:	0003      	movs	r3, r0
 80035a4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035a8:	f7fe fcc6 	bl	8001f38 <HAL_GetTick>
 80035ac:	0002      	movs	r2, r0
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e0a9      	b.n	800370e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80035ba:	4b13      	ldr	r3, [pc, #76]	@ (8003608 <HAL_RCC_OscConfig+0x66c>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	2202      	movs	r2, #2
 80035c0:	4013      	ands	r3, r2
 80035c2:	d1f1      	bne.n	80035a8 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d100      	bne.n	80035ce <HAL_RCC_OscConfig+0x632>
 80035cc:	e09e      	b.n	800370c <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035ce:	6a3b      	ldr	r3, [r7, #32]
 80035d0:	2b0c      	cmp	r3, #12
 80035d2:	d100      	bne.n	80035d6 <HAL_RCC_OscConfig+0x63a>
 80035d4:	e077      	b.n	80036c6 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d158      	bne.n	8003690 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035de:	4b0a      	ldr	r3, [pc, #40]	@ (8003608 <HAL_RCC_OscConfig+0x66c>)
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	4b09      	ldr	r3, [pc, #36]	@ (8003608 <HAL_RCC_OscConfig+0x66c>)
 80035e4:	4910      	ldr	r1, [pc, #64]	@ (8003628 <HAL_RCC_OscConfig+0x68c>)
 80035e6:	400a      	ands	r2, r1
 80035e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ea:	f7fe fca5 	bl	8001f38 <HAL_GetTick>
 80035ee:	0003      	movs	r3, r0
 80035f0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80035f2:	e01b      	b.n	800362c <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035f4:	f7fe fca0 	bl	8001f38 <HAL_GetTick>
 80035f8:	0002      	movs	r2, r0
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d914      	bls.n	800362c <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e083      	b.n	800370e <HAL_RCC_OscConfig+0x772>
 8003606:	46c0      	nop			@ (mov r8, r8)
 8003608:	40021000 	.word	0x40021000
 800360c:	fffffeff 	.word	0xfffffeff
 8003610:	40007000 	.word	0x40007000
 8003614:	fffffbff 	.word	0xfffffbff
 8003618:	00001388 	.word	0x00001388
 800361c:	efffffff 	.word	0xefffffff
 8003620:	40010000 	.word	0x40010000
 8003624:	ffffdfff 	.word	0xffffdfff
 8003628:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800362c:	4b3a      	ldr	r3, [pc, #232]	@ (8003718 <HAL_RCC_OscConfig+0x77c>)
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	2380      	movs	r3, #128	@ 0x80
 8003632:	049b      	lsls	r3, r3, #18
 8003634:	4013      	ands	r3, r2
 8003636:	d1dd      	bne.n	80035f4 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003638:	4b37      	ldr	r3, [pc, #220]	@ (8003718 <HAL_RCC_OscConfig+0x77c>)
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	4a37      	ldr	r2, [pc, #220]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 800363e:	4013      	ands	r3, r2
 8003640:	0019      	movs	r1, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800364a:	431a      	orrs	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003650:	431a      	orrs	r2, r3
 8003652:	4b31      	ldr	r3, [pc, #196]	@ (8003718 <HAL_RCC_OscConfig+0x77c>)
 8003654:	430a      	orrs	r2, r1
 8003656:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003658:	4b2f      	ldr	r3, [pc, #188]	@ (8003718 <HAL_RCC_OscConfig+0x77c>)
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	4b2e      	ldr	r3, [pc, #184]	@ (8003718 <HAL_RCC_OscConfig+0x77c>)
 800365e:	2180      	movs	r1, #128	@ 0x80
 8003660:	0449      	lsls	r1, r1, #17
 8003662:	430a      	orrs	r2, r1
 8003664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003666:	f7fe fc67 	bl	8001f38 <HAL_GetTick>
 800366a:	0003      	movs	r3, r0
 800366c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003670:	f7fe fc62 	bl	8001f38 <HAL_GetTick>
 8003674:	0002      	movs	r2, r0
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e045      	b.n	800370e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003682:	4b25      	ldr	r3, [pc, #148]	@ (8003718 <HAL_RCC_OscConfig+0x77c>)
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	2380      	movs	r3, #128	@ 0x80
 8003688:	049b      	lsls	r3, r3, #18
 800368a:	4013      	ands	r3, r2
 800368c:	d0f0      	beq.n	8003670 <HAL_RCC_OscConfig+0x6d4>
 800368e:	e03d      	b.n	800370c <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003690:	4b21      	ldr	r3, [pc, #132]	@ (8003718 <HAL_RCC_OscConfig+0x77c>)
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	4b20      	ldr	r3, [pc, #128]	@ (8003718 <HAL_RCC_OscConfig+0x77c>)
 8003696:	4922      	ldr	r1, [pc, #136]	@ (8003720 <HAL_RCC_OscConfig+0x784>)
 8003698:	400a      	ands	r2, r1
 800369a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800369c:	f7fe fc4c 	bl	8001f38 <HAL_GetTick>
 80036a0:	0003      	movs	r3, r0
 80036a2:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80036a4:	e008      	b.n	80036b8 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036a6:	f7fe fc47 	bl	8001f38 <HAL_GetTick>
 80036aa:	0002      	movs	r2, r0
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d901      	bls.n	80036b8 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e02a      	b.n	800370e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80036b8:	4b17      	ldr	r3, [pc, #92]	@ (8003718 <HAL_RCC_OscConfig+0x77c>)
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	2380      	movs	r3, #128	@ 0x80
 80036be:	049b      	lsls	r3, r3, #18
 80036c0:	4013      	ands	r3, r2
 80036c2:	d1f0      	bne.n	80036a6 <HAL_RCC_OscConfig+0x70a>
 80036c4:	e022      	b.n	800370c <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d101      	bne.n	80036d2 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e01d      	b.n	800370e <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036d2:	4b11      	ldr	r3, [pc, #68]	@ (8003718 <HAL_RCC_OscConfig+0x77c>)
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036d8:	69fa      	ldr	r2, [r7, #28]
 80036da:	2380      	movs	r3, #128	@ 0x80
 80036dc:	025b      	lsls	r3, r3, #9
 80036de:	401a      	ands	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d10f      	bne.n	8003708 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80036e8:	69fa      	ldr	r2, [r7, #28]
 80036ea:	23f0      	movs	r3, #240	@ 0xf0
 80036ec:	039b      	lsls	r3, r3, #14
 80036ee:	401a      	ands	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d107      	bne.n	8003708 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80036f8:	69fa      	ldr	r2, [r7, #28]
 80036fa:	23c0      	movs	r3, #192	@ 0xc0
 80036fc:	041b      	lsls	r3, r3, #16
 80036fe:	401a      	ands	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003704:	429a      	cmp	r2, r3
 8003706:	d001      	beq.n	800370c <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e000      	b.n	800370e <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	0018      	movs	r0, r3
 8003710:	46bd      	mov	sp, r7
 8003712:	b00a      	add	sp, #40	@ 0x28
 8003714:	bdb0      	pop	{r4, r5, r7, pc}
 8003716:	46c0      	nop			@ (mov r8, r8)
 8003718:	40021000 	.word	0x40021000
 800371c:	ff02ffff 	.word	0xff02ffff
 8003720:	feffffff 	.word	0xfeffffff

08003724 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003724:	b5b0      	push	{r4, r5, r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e128      	b.n	800398a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003738:	4b96      	ldr	r3, [pc, #600]	@ (8003994 <HAL_RCC_ClockConfig+0x270>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2201      	movs	r2, #1
 800373e:	4013      	ands	r3, r2
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	429a      	cmp	r2, r3
 8003744:	d91e      	bls.n	8003784 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003746:	4b93      	ldr	r3, [pc, #588]	@ (8003994 <HAL_RCC_ClockConfig+0x270>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2201      	movs	r2, #1
 800374c:	4393      	bics	r3, r2
 800374e:	0019      	movs	r1, r3
 8003750:	4b90      	ldr	r3, [pc, #576]	@ (8003994 <HAL_RCC_ClockConfig+0x270>)
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	430a      	orrs	r2, r1
 8003756:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003758:	f7fe fbee 	bl	8001f38 <HAL_GetTick>
 800375c:	0003      	movs	r3, r0
 800375e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003760:	e009      	b.n	8003776 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003762:	f7fe fbe9 	bl	8001f38 <HAL_GetTick>
 8003766:	0002      	movs	r2, r0
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	4a8a      	ldr	r2, [pc, #552]	@ (8003998 <HAL_RCC_ClockConfig+0x274>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e109      	b.n	800398a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003776:	4b87      	ldr	r3, [pc, #540]	@ (8003994 <HAL_RCC_ClockConfig+0x270>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2201      	movs	r2, #1
 800377c:	4013      	ands	r3, r2
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	429a      	cmp	r2, r3
 8003782:	d1ee      	bne.n	8003762 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2202      	movs	r2, #2
 800378a:	4013      	ands	r3, r2
 800378c:	d009      	beq.n	80037a2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800378e:	4b83      	ldr	r3, [pc, #524]	@ (800399c <HAL_RCC_ClockConfig+0x278>)
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	22f0      	movs	r2, #240	@ 0xf0
 8003794:	4393      	bics	r3, r2
 8003796:	0019      	movs	r1, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689a      	ldr	r2, [r3, #8]
 800379c:	4b7f      	ldr	r3, [pc, #508]	@ (800399c <HAL_RCC_ClockConfig+0x278>)
 800379e:	430a      	orrs	r2, r1
 80037a0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2201      	movs	r2, #1
 80037a8:	4013      	ands	r3, r2
 80037aa:	d100      	bne.n	80037ae <HAL_RCC_ClockConfig+0x8a>
 80037ac:	e089      	b.n	80038c2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d107      	bne.n	80037c6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037b6:	4b79      	ldr	r3, [pc, #484]	@ (800399c <HAL_RCC_ClockConfig+0x278>)
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	2380      	movs	r3, #128	@ 0x80
 80037bc:	029b      	lsls	r3, r3, #10
 80037be:	4013      	ands	r3, r2
 80037c0:	d120      	bne.n	8003804 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e0e1      	b.n	800398a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	2b03      	cmp	r3, #3
 80037cc:	d107      	bne.n	80037de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037ce:	4b73      	ldr	r3, [pc, #460]	@ (800399c <HAL_RCC_ClockConfig+0x278>)
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	2380      	movs	r3, #128	@ 0x80
 80037d4:	049b      	lsls	r3, r3, #18
 80037d6:	4013      	ands	r3, r2
 80037d8:	d114      	bne.n	8003804 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e0d5      	b.n	800398a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d106      	bne.n	80037f4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037e6:	4b6d      	ldr	r3, [pc, #436]	@ (800399c <HAL_RCC_ClockConfig+0x278>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2204      	movs	r2, #4
 80037ec:	4013      	ands	r3, r2
 80037ee:	d109      	bne.n	8003804 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e0ca      	b.n	800398a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80037f4:	4b69      	ldr	r3, [pc, #420]	@ (800399c <HAL_RCC_ClockConfig+0x278>)
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	2380      	movs	r3, #128	@ 0x80
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4013      	ands	r3, r2
 80037fe:	d101      	bne.n	8003804 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e0c2      	b.n	800398a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003804:	4b65      	ldr	r3, [pc, #404]	@ (800399c <HAL_RCC_ClockConfig+0x278>)
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	2203      	movs	r2, #3
 800380a:	4393      	bics	r3, r2
 800380c:	0019      	movs	r1, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685a      	ldr	r2, [r3, #4]
 8003812:	4b62      	ldr	r3, [pc, #392]	@ (800399c <HAL_RCC_ClockConfig+0x278>)
 8003814:	430a      	orrs	r2, r1
 8003816:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003818:	f7fe fb8e 	bl	8001f38 <HAL_GetTick>
 800381c:	0003      	movs	r3, r0
 800381e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	2b02      	cmp	r3, #2
 8003826:	d111      	bne.n	800384c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003828:	e009      	b.n	800383e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800382a:	f7fe fb85 	bl	8001f38 <HAL_GetTick>
 800382e:	0002      	movs	r2, r0
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	4a58      	ldr	r2, [pc, #352]	@ (8003998 <HAL_RCC_ClockConfig+0x274>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d901      	bls.n	800383e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e0a5      	b.n	800398a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800383e:	4b57      	ldr	r3, [pc, #348]	@ (800399c <HAL_RCC_ClockConfig+0x278>)
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	220c      	movs	r2, #12
 8003844:	4013      	ands	r3, r2
 8003846:	2b08      	cmp	r3, #8
 8003848:	d1ef      	bne.n	800382a <HAL_RCC_ClockConfig+0x106>
 800384a:	e03a      	b.n	80038c2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	2b03      	cmp	r3, #3
 8003852:	d111      	bne.n	8003878 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003854:	e009      	b.n	800386a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003856:	f7fe fb6f 	bl	8001f38 <HAL_GetTick>
 800385a:	0002      	movs	r2, r0
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	4a4d      	ldr	r2, [pc, #308]	@ (8003998 <HAL_RCC_ClockConfig+0x274>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d901      	bls.n	800386a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e08f      	b.n	800398a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800386a:	4b4c      	ldr	r3, [pc, #304]	@ (800399c <HAL_RCC_ClockConfig+0x278>)
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	220c      	movs	r2, #12
 8003870:	4013      	ands	r3, r2
 8003872:	2b0c      	cmp	r3, #12
 8003874:	d1ef      	bne.n	8003856 <HAL_RCC_ClockConfig+0x132>
 8003876:	e024      	b.n	80038c2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d11b      	bne.n	80038b8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003880:	e009      	b.n	8003896 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003882:	f7fe fb59 	bl	8001f38 <HAL_GetTick>
 8003886:	0002      	movs	r2, r0
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	4a42      	ldr	r2, [pc, #264]	@ (8003998 <HAL_RCC_ClockConfig+0x274>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e079      	b.n	800398a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003896:	4b41      	ldr	r3, [pc, #260]	@ (800399c <HAL_RCC_ClockConfig+0x278>)
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	220c      	movs	r2, #12
 800389c:	4013      	ands	r3, r2
 800389e:	2b04      	cmp	r3, #4
 80038a0:	d1ef      	bne.n	8003882 <HAL_RCC_ClockConfig+0x15e>
 80038a2:	e00e      	b.n	80038c2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038a4:	f7fe fb48 	bl	8001f38 <HAL_GetTick>
 80038a8:	0002      	movs	r2, r0
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	4a3a      	ldr	r2, [pc, #232]	@ (8003998 <HAL_RCC_ClockConfig+0x274>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e068      	b.n	800398a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80038b8:	4b38      	ldr	r3, [pc, #224]	@ (800399c <HAL_RCC_ClockConfig+0x278>)
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	220c      	movs	r2, #12
 80038be:	4013      	ands	r3, r2
 80038c0:	d1f0      	bne.n	80038a4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038c2:	4b34      	ldr	r3, [pc, #208]	@ (8003994 <HAL_RCC_ClockConfig+0x270>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2201      	movs	r2, #1
 80038c8:	4013      	ands	r3, r2
 80038ca:	683a      	ldr	r2, [r7, #0]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d21e      	bcs.n	800390e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038d0:	4b30      	ldr	r3, [pc, #192]	@ (8003994 <HAL_RCC_ClockConfig+0x270>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2201      	movs	r2, #1
 80038d6:	4393      	bics	r3, r2
 80038d8:	0019      	movs	r1, r3
 80038da:	4b2e      	ldr	r3, [pc, #184]	@ (8003994 <HAL_RCC_ClockConfig+0x270>)
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80038e2:	f7fe fb29 	bl	8001f38 <HAL_GetTick>
 80038e6:	0003      	movs	r3, r0
 80038e8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ea:	e009      	b.n	8003900 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038ec:	f7fe fb24 	bl	8001f38 <HAL_GetTick>
 80038f0:	0002      	movs	r2, r0
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	4a28      	ldr	r2, [pc, #160]	@ (8003998 <HAL_RCC_ClockConfig+0x274>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e044      	b.n	800398a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003900:	4b24      	ldr	r3, [pc, #144]	@ (8003994 <HAL_RCC_ClockConfig+0x270>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2201      	movs	r2, #1
 8003906:	4013      	ands	r3, r2
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	429a      	cmp	r2, r3
 800390c:	d1ee      	bne.n	80038ec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2204      	movs	r2, #4
 8003914:	4013      	ands	r3, r2
 8003916:	d009      	beq.n	800392c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003918:	4b20      	ldr	r3, [pc, #128]	@ (800399c <HAL_RCC_ClockConfig+0x278>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	4a20      	ldr	r2, [pc, #128]	@ (80039a0 <HAL_RCC_ClockConfig+0x27c>)
 800391e:	4013      	ands	r3, r2
 8003920:	0019      	movs	r1, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68da      	ldr	r2, [r3, #12]
 8003926:	4b1d      	ldr	r3, [pc, #116]	@ (800399c <HAL_RCC_ClockConfig+0x278>)
 8003928:	430a      	orrs	r2, r1
 800392a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2208      	movs	r2, #8
 8003932:	4013      	ands	r3, r2
 8003934:	d00a      	beq.n	800394c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003936:	4b19      	ldr	r3, [pc, #100]	@ (800399c <HAL_RCC_ClockConfig+0x278>)
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	4a1a      	ldr	r2, [pc, #104]	@ (80039a4 <HAL_RCC_ClockConfig+0x280>)
 800393c:	4013      	ands	r3, r2
 800393e:	0019      	movs	r1, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	00da      	lsls	r2, r3, #3
 8003946:	4b15      	ldr	r3, [pc, #84]	@ (800399c <HAL_RCC_ClockConfig+0x278>)
 8003948:	430a      	orrs	r2, r1
 800394a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800394c:	f000 f832 	bl	80039b4 <HAL_RCC_GetSysClockFreq>
 8003950:	0001      	movs	r1, r0
 8003952:	4b12      	ldr	r3, [pc, #72]	@ (800399c <HAL_RCC_ClockConfig+0x278>)
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	091b      	lsrs	r3, r3, #4
 8003958:	220f      	movs	r2, #15
 800395a:	4013      	ands	r3, r2
 800395c:	4a12      	ldr	r2, [pc, #72]	@ (80039a8 <HAL_RCC_ClockConfig+0x284>)
 800395e:	5cd3      	ldrb	r3, [r2, r3]
 8003960:	000a      	movs	r2, r1
 8003962:	40da      	lsrs	r2, r3
 8003964:	4b11      	ldr	r3, [pc, #68]	@ (80039ac <HAL_RCC_ClockConfig+0x288>)
 8003966:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003968:	4b11      	ldr	r3, [pc, #68]	@ (80039b0 <HAL_RCC_ClockConfig+0x28c>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	250b      	movs	r5, #11
 800396e:	197c      	adds	r4, r7, r5
 8003970:	0018      	movs	r0, r3
 8003972:	f7fe fa9b 	bl	8001eac <HAL_InitTick>
 8003976:	0003      	movs	r3, r0
 8003978:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800397a:	197b      	adds	r3, r7, r5
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003982:	197b      	adds	r3, r7, r5
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	e000      	b.n	800398a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	0018      	movs	r0, r3
 800398c:	46bd      	mov	sp, r7
 800398e:	b004      	add	sp, #16
 8003990:	bdb0      	pop	{r4, r5, r7, pc}
 8003992:	46c0      	nop			@ (mov r8, r8)
 8003994:	40022000 	.word	0x40022000
 8003998:	00001388 	.word	0x00001388
 800399c:	40021000 	.word	0x40021000
 80039a0:	fffff8ff 	.word	0xfffff8ff
 80039a4:	ffffc7ff 	.word	0xffffc7ff
 80039a8:	080088b0 	.word	0x080088b0
 80039ac:	20000000 	.word	0x20000000
 80039b0:	20000014 	.word	0x20000014

080039b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039b4:	b5b0      	push	{r4, r5, r7, lr}
 80039b6:	b08e      	sub	sp, #56	@ 0x38
 80039b8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80039ba:	4b4c      	ldr	r3, [pc, #304]	@ (8003aec <HAL_RCC_GetSysClockFreq+0x138>)
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039c2:	230c      	movs	r3, #12
 80039c4:	4013      	ands	r3, r2
 80039c6:	2b0c      	cmp	r3, #12
 80039c8:	d014      	beq.n	80039f4 <HAL_RCC_GetSysClockFreq+0x40>
 80039ca:	d900      	bls.n	80039ce <HAL_RCC_GetSysClockFreq+0x1a>
 80039cc:	e07b      	b.n	8003ac6 <HAL_RCC_GetSysClockFreq+0x112>
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d002      	beq.n	80039d8 <HAL_RCC_GetSysClockFreq+0x24>
 80039d2:	2b08      	cmp	r3, #8
 80039d4:	d00b      	beq.n	80039ee <HAL_RCC_GetSysClockFreq+0x3a>
 80039d6:	e076      	b.n	8003ac6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80039d8:	4b44      	ldr	r3, [pc, #272]	@ (8003aec <HAL_RCC_GetSysClockFreq+0x138>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2210      	movs	r2, #16
 80039de:	4013      	ands	r3, r2
 80039e0:	d002      	beq.n	80039e8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80039e2:	4b43      	ldr	r3, [pc, #268]	@ (8003af0 <HAL_RCC_GetSysClockFreq+0x13c>)
 80039e4:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80039e6:	e07c      	b.n	8003ae2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80039e8:	4b42      	ldr	r3, [pc, #264]	@ (8003af4 <HAL_RCC_GetSysClockFreq+0x140>)
 80039ea:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80039ec:	e079      	b.n	8003ae2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039ee:	4b42      	ldr	r3, [pc, #264]	@ (8003af8 <HAL_RCC_GetSysClockFreq+0x144>)
 80039f0:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80039f2:	e076      	b.n	8003ae2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80039f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039f6:	0c9a      	lsrs	r2, r3, #18
 80039f8:	230f      	movs	r3, #15
 80039fa:	401a      	ands	r2, r3
 80039fc:	4b3f      	ldr	r3, [pc, #252]	@ (8003afc <HAL_RCC_GetSysClockFreq+0x148>)
 80039fe:	5c9b      	ldrb	r3, [r3, r2]
 8003a00:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a04:	0d9a      	lsrs	r2, r3, #22
 8003a06:	2303      	movs	r3, #3
 8003a08:	4013      	ands	r3, r2
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a0e:	4b37      	ldr	r3, [pc, #220]	@ (8003aec <HAL_RCC_GetSysClockFreq+0x138>)
 8003a10:	68da      	ldr	r2, [r3, #12]
 8003a12:	2380      	movs	r3, #128	@ 0x80
 8003a14:	025b      	lsls	r3, r3, #9
 8003a16:	4013      	ands	r3, r2
 8003a18:	d01a      	beq.n	8003a50 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a1c:	61bb      	str	r3, [r7, #24]
 8003a1e:	2300      	movs	r3, #0
 8003a20:	61fb      	str	r3, [r7, #28]
 8003a22:	4a35      	ldr	r2, [pc, #212]	@ (8003af8 <HAL_RCC_GetSysClockFreq+0x144>)
 8003a24:	2300      	movs	r3, #0
 8003a26:	69b8      	ldr	r0, [r7, #24]
 8003a28:	69f9      	ldr	r1, [r7, #28]
 8003a2a:	f7fc fd0d 	bl	8000448 <__aeabi_lmul>
 8003a2e:	0002      	movs	r2, r0
 8003a30:	000b      	movs	r3, r1
 8003a32:	0010      	movs	r0, r2
 8003a34:	0019      	movs	r1, r3
 8003a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a38:	613b      	str	r3, [r7, #16]
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	617b      	str	r3, [r7, #20]
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	f7fc fce1 	bl	8000408 <__aeabi_uldivmod>
 8003a46:	0002      	movs	r2, r0
 8003a48:	000b      	movs	r3, r1
 8003a4a:	0013      	movs	r3, r2
 8003a4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a4e:	e037      	b.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003a50:	4b26      	ldr	r3, [pc, #152]	@ (8003aec <HAL_RCC_GetSysClockFreq+0x138>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2210      	movs	r2, #16
 8003a56:	4013      	ands	r3, r2
 8003a58:	d01a      	beq.n	8003a90 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a5c:	60bb      	str	r3, [r7, #8]
 8003a5e:	2300      	movs	r3, #0
 8003a60:	60fb      	str	r3, [r7, #12]
 8003a62:	4a23      	ldr	r2, [pc, #140]	@ (8003af0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003a64:	2300      	movs	r3, #0
 8003a66:	68b8      	ldr	r0, [r7, #8]
 8003a68:	68f9      	ldr	r1, [r7, #12]
 8003a6a:	f7fc fced 	bl	8000448 <__aeabi_lmul>
 8003a6e:	0002      	movs	r2, r0
 8003a70:	000b      	movs	r3, r1
 8003a72:	0010      	movs	r0, r2
 8003a74:	0019      	movs	r1, r3
 8003a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a78:	603b      	str	r3, [r7, #0]
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	607b      	str	r3, [r7, #4]
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f7fc fcc1 	bl	8000408 <__aeabi_uldivmod>
 8003a86:	0002      	movs	r2, r0
 8003a88:	000b      	movs	r3, r1
 8003a8a:	0013      	movs	r3, r2
 8003a8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a8e:	e017      	b.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a92:	0018      	movs	r0, r3
 8003a94:	2300      	movs	r3, #0
 8003a96:	0019      	movs	r1, r3
 8003a98:	4a16      	ldr	r2, [pc, #88]	@ (8003af4 <HAL_RCC_GetSysClockFreq+0x140>)
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	f7fc fcd4 	bl	8000448 <__aeabi_lmul>
 8003aa0:	0002      	movs	r2, r0
 8003aa2:	000b      	movs	r3, r1
 8003aa4:	0010      	movs	r0, r2
 8003aa6:	0019      	movs	r1, r3
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aaa:	001c      	movs	r4, r3
 8003aac:	2300      	movs	r3, #0
 8003aae:	001d      	movs	r5, r3
 8003ab0:	0022      	movs	r2, r4
 8003ab2:	002b      	movs	r3, r5
 8003ab4:	f7fc fca8 	bl	8000408 <__aeabi_uldivmod>
 8003ab8:	0002      	movs	r2, r0
 8003aba:	000b      	movs	r3, r1
 8003abc:	0013      	movs	r3, r2
 8003abe:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8003ac0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ac2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003ac4:	e00d      	b.n	8003ae2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003ac6:	4b09      	ldr	r3, [pc, #36]	@ (8003aec <HAL_RCC_GetSysClockFreq+0x138>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	0b5b      	lsrs	r3, r3, #13
 8003acc:	2207      	movs	r2, #7
 8003ace:	4013      	ands	r3, r2
 8003ad0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003ad2:	6a3b      	ldr	r3, [r7, #32]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	2280      	movs	r2, #128	@ 0x80
 8003ad8:	0212      	lsls	r2, r2, #8
 8003ada:	409a      	lsls	r2, r3
 8003adc:	0013      	movs	r3, r2
 8003ade:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003ae0:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8003ae4:	0018      	movs	r0, r3
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	b00e      	add	sp, #56	@ 0x38
 8003aea:	bdb0      	pop	{r4, r5, r7, pc}
 8003aec:	40021000 	.word	0x40021000
 8003af0:	003d0900 	.word	0x003d0900
 8003af4:	00f42400 	.word	0x00f42400
 8003af8:	007a1200 	.word	0x007a1200
 8003afc:	080088c8 	.word	0x080088c8

08003b00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b04:	4b02      	ldr	r3, [pc, #8]	@ (8003b10 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b06:	681b      	ldr	r3, [r3, #0]
}
 8003b08:	0018      	movs	r0, r3
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	46c0      	nop			@ (mov r8, r8)
 8003b10:	20000000 	.word	0x20000000

08003b14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b18:	f7ff fff2 	bl	8003b00 <HAL_RCC_GetHCLKFreq>
 8003b1c:	0001      	movs	r1, r0
 8003b1e:	4b06      	ldr	r3, [pc, #24]	@ (8003b38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	0a1b      	lsrs	r3, r3, #8
 8003b24:	2207      	movs	r2, #7
 8003b26:	4013      	ands	r3, r2
 8003b28:	4a04      	ldr	r2, [pc, #16]	@ (8003b3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b2a:	5cd3      	ldrb	r3, [r2, r3]
 8003b2c:	40d9      	lsrs	r1, r3
 8003b2e:	000b      	movs	r3, r1
}
 8003b30:	0018      	movs	r0, r3
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	46c0      	nop			@ (mov r8, r8)
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	080088c0 	.word	0x080088c0

08003b40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b44:	f7ff ffdc 	bl	8003b00 <HAL_RCC_GetHCLKFreq>
 8003b48:	0001      	movs	r1, r0
 8003b4a:	4b06      	ldr	r3, [pc, #24]	@ (8003b64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	0adb      	lsrs	r3, r3, #11
 8003b50:	2207      	movs	r2, #7
 8003b52:	4013      	ands	r3, r2
 8003b54:	4a04      	ldr	r2, [pc, #16]	@ (8003b68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b56:	5cd3      	ldrb	r3, [r2, r3]
 8003b58:	40d9      	lsrs	r1, r3
 8003b5a:	000b      	movs	r3, r1
}
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	46c0      	nop			@ (mov r8, r8)
 8003b64:	40021000 	.word	0x40021000
 8003b68:	080088c0 	.word	0x080088c0

08003b6c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003b74:	2317      	movs	r3, #23
 8003b76:	18fb      	adds	r3, r7, r3
 8003b78:	2200      	movs	r2, #0
 8003b7a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2220      	movs	r2, #32
 8003b82:	4013      	ands	r3, r2
 8003b84:	d106      	bne.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	2380      	movs	r3, #128	@ 0x80
 8003b8c:	011b      	lsls	r3, r3, #4
 8003b8e:	4013      	ands	r3, r2
 8003b90:	d100      	bne.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8003b92:	e104      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b94:	4bb1      	ldr	r3, [pc, #708]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003b96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b98:	2380      	movs	r3, #128	@ 0x80
 8003b9a:	055b      	lsls	r3, r3, #21
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	d10a      	bne.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ba0:	4bae      	ldr	r3, [pc, #696]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003ba2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ba4:	4bad      	ldr	r3, [pc, #692]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003ba6:	2180      	movs	r1, #128	@ 0x80
 8003ba8:	0549      	lsls	r1, r1, #21
 8003baa:	430a      	orrs	r2, r1
 8003bac:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8003bae:	2317      	movs	r3, #23
 8003bb0:	18fb      	adds	r3, r7, r3
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb6:	4baa      	ldr	r3, [pc, #680]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	2380      	movs	r3, #128	@ 0x80
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	d11a      	bne.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bc2:	4ba7      	ldr	r3, [pc, #668]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	4ba6      	ldr	r3, [pc, #664]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bc8:	2180      	movs	r1, #128	@ 0x80
 8003bca:	0049      	lsls	r1, r1, #1
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bd0:	f7fe f9b2 	bl	8001f38 <HAL_GetTick>
 8003bd4:	0003      	movs	r3, r0
 8003bd6:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd8:	e008      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bda:	f7fe f9ad 	bl	8001f38 <HAL_GetTick>
 8003bde:	0002      	movs	r2, r0
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b64      	cmp	r3, #100	@ 0x64
 8003be6:	d901      	bls.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e133      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bec:	4b9c      	ldr	r3, [pc, #624]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	2380      	movs	r3, #128	@ 0x80
 8003bf2:	005b      	lsls	r3, r3, #1
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	d0f0      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003bf8:	4b98      	ldr	r3, [pc, #608]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	23c0      	movs	r3, #192	@ 0xc0
 8003bfe:	039b      	lsls	r3, r3, #14
 8003c00:	4013      	ands	r3, r2
 8003c02:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	23c0      	movs	r3, #192	@ 0xc0
 8003c0a:	039b      	lsls	r3, r3, #14
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d107      	bne.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689a      	ldr	r2, [r3, #8]
 8003c18:	23c0      	movs	r3, #192	@ 0xc0
 8003c1a:	039b      	lsls	r3, r3, #14
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d013      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685a      	ldr	r2, [r3, #4]
 8003c28:	23c0      	movs	r3, #192	@ 0xc0
 8003c2a:	029b      	lsls	r3, r3, #10
 8003c2c:	401a      	ands	r2, r3
 8003c2e:	23c0      	movs	r3, #192	@ 0xc0
 8003c30:	029b      	lsls	r3, r3, #10
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d10a      	bne.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003c36:	4b89      	ldr	r3, [pc, #548]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	2380      	movs	r3, #128	@ 0x80
 8003c3c:	029b      	lsls	r3, r3, #10
 8003c3e:	401a      	ands	r2, r3
 8003c40:	2380      	movs	r3, #128	@ 0x80
 8003c42:	029b      	lsls	r3, r3, #10
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d101      	bne.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e103      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003c4c:	4b83      	ldr	r3, [pc, #524]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c4e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003c50:	23c0      	movs	r3, #192	@ 0xc0
 8003c52:	029b      	lsls	r3, r3, #10
 8003c54:	4013      	ands	r3, r2
 8003c56:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d049      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685a      	ldr	r2, [r3, #4]
 8003c62:	23c0      	movs	r3, #192	@ 0xc0
 8003c64:	029b      	lsls	r3, r3, #10
 8003c66:	4013      	ands	r3, r2
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d004      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2220      	movs	r2, #32
 8003c74:	4013      	ands	r3, r2
 8003c76:	d10d      	bne.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	23c0      	movs	r3, #192	@ 0xc0
 8003c7e:	029b      	lsls	r3, r3, #10
 8003c80:	4013      	ands	r3, r2
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d034      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	2380      	movs	r3, #128	@ 0x80
 8003c8e:	011b      	lsls	r3, r3, #4
 8003c90:	4013      	ands	r3, r2
 8003c92:	d02e      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003c94:	4b71      	ldr	r3, [pc, #452]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c98:	4a72      	ldr	r2, [pc, #456]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c9e:	4b6f      	ldr	r3, [pc, #444]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003ca0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003ca2:	4b6e      	ldr	r3, [pc, #440]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003ca4:	2180      	movs	r1, #128	@ 0x80
 8003ca6:	0309      	lsls	r1, r1, #12
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cac:	4b6b      	ldr	r3, [pc, #428]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003cae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003cb0:	4b6a      	ldr	r3, [pc, #424]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003cb2:	496d      	ldr	r1, [pc, #436]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003cb4:	400a      	ands	r2, r1
 8003cb6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003cb8:	4b68      	ldr	r3, [pc, #416]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	2380      	movs	r3, #128	@ 0x80
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	d014      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc8:	f7fe f936 	bl	8001f38 <HAL_GetTick>
 8003ccc:	0003      	movs	r3, r0
 8003cce:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cd0:	e009      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cd2:	f7fe f931 	bl	8001f38 <HAL_GetTick>
 8003cd6:	0002      	movs	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	4a63      	ldr	r2, [pc, #396]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e0b6      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ce6:	4b5d      	ldr	r3, [pc, #372]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003ce8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003cea:	2380      	movs	r3, #128	@ 0x80
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	4013      	ands	r3, r2
 8003cf0:	d0ef      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	2380      	movs	r3, #128	@ 0x80
 8003cf8:	011b      	lsls	r3, r3, #4
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	d01f      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	689a      	ldr	r2, [r3, #8]
 8003d02:	23c0      	movs	r3, #192	@ 0xc0
 8003d04:	029b      	lsls	r3, r3, #10
 8003d06:	401a      	ands	r2, r3
 8003d08:	23c0      	movs	r3, #192	@ 0xc0
 8003d0a:	029b      	lsls	r3, r3, #10
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d10c      	bne.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003d10:	4b52      	ldr	r3, [pc, #328]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a56      	ldr	r2, [pc, #344]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d16:	4013      	ands	r3, r2
 8003d18:	0019      	movs	r1, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	689a      	ldr	r2, [r3, #8]
 8003d1e:	23c0      	movs	r3, #192	@ 0xc0
 8003d20:	039b      	lsls	r3, r3, #14
 8003d22:	401a      	ands	r2, r3
 8003d24:	4b4d      	ldr	r3, [pc, #308]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d26:	430a      	orrs	r2, r1
 8003d28:	601a      	str	r2, [r3, #0]
 8003d2a:	4b4c      	ldr	r3, [pc, #304]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d2c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689a      	ldr	r2, [r3, #8]
 8003d32:	23c0      	movs	r3, #192	@ 0xc0
 8003d34:	029b      	lsls	r3, r3, #10
 8003d36:	401a      	ands	r2, r3
 8003d38:	4b48      	ldr	r3, [pc, #288]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2220      	movs	r2, #32
 8003d44:	4013      	ands	r3, r2
 8003d46:	d01f      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685a      	ldr	r2, [r3, #4]
 8003d4c:	23c0      	movs	r3, #192	@ 0xc0
 8003d4e:	029b      	lsls	r3, r3, #10
 8003d50:	401a      	ands	r2, r3
 8003d52:	23c0      	movs	r3, #192	@ 0xc0
 8003d54:	029b      	lsls	r3, r3, #10
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d10c      	bne.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003d5a:	4b40      	ldr	r3, [pc, #256]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a44      	ldr	r2, [pc, #272]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d60:	4013      	ands	r3, r2
 8003d62:	0019      	movs	r1, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	23c0      	movs	r3, #192	@ 0xc0
 8003d6a:	039b      	lsls	r3, r3, #14
 8003d6c:	401a      	ands	r2, r3
 8003d6e:	4b3b      	ldr	r3, [pc, #236]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d70:	430a      	orrs	r2, r1
 8003d72:	601a      	str	r2, [r3, #0]
 8003d74:	4b39      	ldr	r3, [pc, #228]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d76:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	23c0      	movs	r3, #192	@ 0xc0
 8003d7e:	029b      	lsls	r3, r3, #10
 8003d80:	401a      	ands	r2, r3
 8003d82:	4b36      	ldr	r3, [pc, #216]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d84:	430a      	orrs	r2, r1
 8003d86:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d88:	2317      	movs	r3, #23
 8003d8a:	18fb      	adds	r3, r7, r3
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d105      	bne.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d92:	4b32      	ldr	r3, [pc, #200]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d96:	4b31      	ldr	r3, [pc, #196]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d98:	4936      	ldr	r1, [pc, #216]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003d9a:	400a      	ands	r2, r1
 8003d9c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2201      	movs	r2, #1
 8003da4:	4013      	ands	r3, r2
 8003da6:	d009      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003da8:	4b2c      	ldr	r3, [pc, #176]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003daa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dac:	2203      	movs	r2, #3
 8003dae:	4393      	bics	r3, r2
 8003db0:	0019      	movs	r1, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	68da      	ldr	r2, [r3, #12]
 8003db6:	4b29      	ldr	r3, [pc, #164]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003db8:	430a      	orrs	r2, r1
 8003dba:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	d009      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003dc6:	4b25      	ldr	r3, [pc, #148]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dca:	220c      	movs	r2, #12
 8003dcc:	4393      	bics	r3, r2
 8003dce:	0019      	movs	r1, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691a      	ldr	r2, [r3, #16]
 8003dd4:	4b21      	ldr	r3, [pc, #132]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2204      	movs	r2, #4
 8003de0:	4013      	ands	r3, r2
 8003de2:	d009      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003de4:	4b1d      	ldr	r3, [pc, #116]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003de6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003de8:	4a23      	ldr	r2, [pc, #140]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8003dea:	4013      	ands	r3, r2
 8003dec:	0019      	movs	r1, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	695a      	ldr	r2, [r3, #20]
 8003df2:	4b1a      	ldr	r3, [pc, #104]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003df4:	430a      	orrs	r2, r1
 8003df6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2208      	movs	r2, #8
 8003dfe:	4013      	ands	r3, r2
 8003e00:	d009      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e02:	4b16      	ldr	r3, [pc, #88]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e06:	4a1d      	ldr	r2, [pc, #116]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e08:	4013      	ands	r3, r2
 8003e0a:	0019      	movs	r1, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	699a      	ldr	r2, [r3, #24]
 8003e10:	4b12      	ldr	r3, [pc, #72]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e12:	430a      	orrs	r2, r1
 8003e14:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2240      	movs	r2, #64	@ 0x40
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	d009      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e20:	4b0e      	ldr	r3, [pc, #56]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e24:	4a16      	ldr	r2, [pc, #88]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003e26:	4013      	ands	r3, r2
 8003e28:	0019      	movs	r1, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a1a      	ldr	r2, [r3, #32]
 8003e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e30:	430a      	orrs	r2, r1
 8003e32:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2280      	movs	r2, #128	@ 0x80
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	d009      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003e3e:	4b07      	ldr	r3, [pc, #28]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e42:	4a10      	ldr	r2, [pc, #64]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003e44:	4013      	ands	r3, r2
 8003e46:	0019      	movs	r1, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	69da      	ldr	r2, [r3, #28]
 8003e4c:	4b03      	ldr	r3, [pc, #12]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	0018      	movs	r0, r3
 8003e56:	46bd      	mov	sp, r7
 8003e58:	b006      	add	sp, #24
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	40007000 	.word	0x40007000
 8003e64:	fffcffff 	.word	0xfffcffff
 8003e68:	fff7ffff 	.word	0xfff7ffff
 8003e6c:	00001388 	.word	0x00001388
 8003e70:	ffcfffff 	.word	0xffcfffff
 8003e74:	efffffff 	.word	0xefffffff
 8003e78:	fffff3ff 	.word	0xfffff3ff
 8003e7c:	ffffcfff 	.word	0xffffcfff
 8003e80:	fbffffff 	.word	0xfbffffff
 8003e84:	fff3ffff 	.word	0xfff3ffff

08003e88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e083      	b.n	8003fa2 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d109      	bne.n	8003eb6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	2382      	movs	r3, #130	@ 0x82
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d009      	beq.n	8003ec2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	61da      	str	r2, [r3, #28]
 8003eb4:	e005      	b.n	8003ec2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2251      	movs	r2, #81	@ 0x51
 8003ecc:	5c9b      	ldrb	r3, [r3, r2]
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d107      	bne.n	8003ee4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2250      	movs	r2, #80	@ 0x50
 8003ed8:	2100      	movs	r1, #0
 8003eda:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	0018      	movs	r0, r3
 8003ee0:	f7fd fa2a 	bl	8001338 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2251      	movs	r2, #81	@ 0x51
 8003ee8:	2102      	movs	r1, #2
 8003eea:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2140      	movs	r1, #64	@ 0x40
 8003ef8:	438a      	bics	r2, r1
 8003efa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685a      	ldr	r2, [r3, #4]
 8003f00:	2382      	movs	r3, #130	@ 0x82
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	401a      	ands	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6899      	ldr	r1, [r3, #8]
 8003f0a:	2384      	movs	r3, #132	@ 0x84
 8003f0c:	021b      	lsls	r3, r3, #8
 8003f0e:	400b      	ands	r3, r1
 8003f10:	431a      	orrs	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68d9      	ldr	r1, [r3, #12]
 8003f16:	2380      	movs	r3, #128	@ 0x80
 8003f18:	011b      	lsls	r3, r3, #4
 8003f1a:	400b      	ands	r3, r1
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	2102      	movs	r1, #2
 8003f24:	400b      	ands	r3, r1
 8003f26:	431a      	orrs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	695b      	ldr	r3, [r3, #20]
 8003f2c:	2101      	movs	r1, #1
 8003f2e:	400b      	ands	r3, r1
 8003f30:	431a      	orrs	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6999      	ldr	r1, [r3, #24]
 8003f36:	2380      	movs	r3, #128	@ 0x80
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	400b      	ands	r3, r1
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	2138      	movs	r1, #56	@ 0x38
 8003f44:	400b      	ands	r3, r1
 8003f46:	431a      	orrs	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a1b      	ldr	r3, [r3, #32]
 8003f4c:	2180      	movs	r1, #128	@ 0x80
 8003f4e:	400b      	ands	r3, r1
 8003f50:	431a      	orrs	r2, r3
 8003f52:	0011      	movs	r1, r2
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f58:	2380      	movs	r3, #128	@ 0x80
 8003f5a:	019b      	lsls	r3, r3, #6
 8003f5c:	401a      	ands	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	430a      	orrs	r2, r1
 8003f64:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	0c1b      	lsrs	r3, r3, #16
 8003f6c:	2204      	movs	r2, #4
 8003f6e:	4013      	ands	r3, r2
 8003f70:	0019      	movs	r1, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f76:	2210      	movs	r2, #16
 8003f78:	401a      	ands	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	69da      	ldr	r2, [r3, #28]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4907      	ldr	r1, [pc, #28]	@ (8003fac <HAL_SPI_Init+0x124>)
 8003f8e:	400a      	ands	r2, r1
 8003f90:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2251      	movs	r2, #81	@ 0x51
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	0018      	movs	r0, r3
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	b002      	add	sp, #8
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	46c0      	nop			@ (mov r8, r8)
 8003fac:	fffff7ff 	.word	0xfffff7ff

08003fb0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b088      	sub	sp, #32
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	603b      	str	r3, [r7, #0]
 8003fbc:	1dbb      	adds	r3, r7, #6
 8003fbe:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003fc0:	231f      	movs	r3, #31
 8003fc2:	18fb      	adds	r3, r7, r3
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2250      	movs	r2, #80	@ 0x50
 8003fcc:	5c9b      	ldrb	r3, [r3, r2]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d101      	bne.n	8003fd6 <HAL_SPI_Transmit+0x26>
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	e145      	b.n	8004262 <HAL_SPI_Transmit+0x2b2>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2250      	movs	r2, #80	@ 0x50
 8003fda:	2101      	movs	r1, #1
 8003fdc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fde:	f7fd ffab 	bl	8001f38 <HAL_GetTick>
 8003fe2:	0003      	movs	r3, r0
 8003fe4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003fe6:	2316      	movs	r3, #22
 8003fe8:	18fb      	adds	r3, r7, r3
 8003fea:	1dba      	adds	r2, r7, #6
 8003fec:	8812      	ldrh	r2, [r2, #0]
 8003fee:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2251      	movs	r2, #81	@ 0x51
 8003ff4:	5c9b      	ldrb	r3, [r3, r2]
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d004      	beq.n	8004006 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003ffc:	231f      	movs	r3, #31
 8003ffe:	18fb      	adds	r3, r7, r3
 8004000:	2202      	movs	r2, #2
 8004002:	701a      	strb	r2, [r3, #0]
    goto error;
 8004004:	e126      	b.n	8004254 <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d003      	beq.n	8004014 <HAL_SPI_Transmit+0x64>
 800400c:	1dbb      	adds	r3, r7, #6
 800400e:	881b      	ldrh	r3, [r3, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d104      	bne.n	800401e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8004014:	231f      	movs	r3, #31
 8004016:	18fb      	adds	r3, r7, r3
 8004018:	2201      	movs	r2, #1
 800401a:	701a      	strb	r2, [r3, #0]
    goto error;
 800401c:	e11a      	b.n	8004254 <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2251      	movs	r2, #81	@ 0x51
 8004022:	2103      	movs	r1, #3
 8004024:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	1dba      	adds	r2, r7, #6
 8004036:	8812      	ldrh	r2, [r2, #0]
 8004038:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	1dba      	adds	r2, r7, #6
 800403e:	8812      	ldrh	r2, [r2, #0]
 8004040:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	2380      	movs	r3, #128	@ 0x80
 8004066:	021b      	lsls	r3, r3, #8
 8004068:	429a      	cmp	r2, r3
 800406a:	d110      	bne.n	800408e <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2140      	movs	r1, #64	@ 0x40
 8004078:	438a      	bics	r2, r1
 800407a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2180      	movs	r1, #128	@ 0x80
 8004088:	01c9      	lsls	r1, r1, #7
 800408a:	430a      	orrs	r2, r1
 800408c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2240      	movs	r2, #64	@ 0x40
 8004096:	4013      	ands	r3, r2
 8004098:	2b40      	cmp	r3, #64	@ 0x40
 800409a:	d007      	beq.n	80040ac <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2140      	movs	r1, #64	@ 0x40
 80040a8:	430a      	orrs	r2, r1
 80040aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	68da      	ldr	r2, [r3, #12]
 80040b0:	2380      	movs	r3, #128	@ 0x80
 80040b2:	011b      	lsls	r3, r3, #4
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d152      	bne.n	800415e <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d004      	beq.n	80040ca <HAL_SPI_Transmit+0x11a>
 80040c0:	2316      	movs	r3, #22
 80040c2:	18fb      	adds	r3, r7, r3
 80040c4:	881b      	ldrh	r3, [r3, #0]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d143      	bne.n	8004152 <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ce:	881a      	ldrh	r2, [r3, #0]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040da:	1c9a      	adds	r2, r3, #2
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	3b01      	subs	r3, #1
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80040ee:	e030      	b.n	8004152 <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	2202      	movs	r2, #2
 80040f8:	4013      	ands	r3, r2
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d112      	bne.n	8004124 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004102:	881a      	ldrh	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800410e:	1c9a      	adds	r2, r3, #2
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004118:	b29b      	uxth	r3, r3
 800411a:	3b01      	subs	r3, #1
 800411c:	b29a      	uxth	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004122:	e016      	b.n	8004152 <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004124:	f7fd ff08 	bl	8001f38 <HAL_GetTick>
 8004128:	0002      	movs	r2, r0
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	683a      	ldr	r2, [r7, #0]
 8004130:	429a      	cmp	r2, r3
 8004132:	d802      	bhi.n	800413a <HAL_SPI_Transmit+0x18a>
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	3301      	adds	r3, #1
 8004138:	d102      	bne.n	8004140 <HAL_SPI_Transmit+0x190>
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d108      	bne.n	8004152 <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8004140:	231f      	movs	r3, #31
 8004142:	18fb      	adds	r3, r7, r3
 8004144:	2203      	movs	r2, #3
 8004146:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2251      	movs	r2, #81	@ 0x51
 800414c:	2101      	movs	r1, #1
 800414e:	5499      	strb	r1, [r3, r2]
          goto error;
 8004150:	e080      	b.n	8004254 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004156:	b29b      	uxth	r3, r3
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1c9      	bne.n	80040f0 <HAL_SPI_Transmit+0x140>
 800415c:	e053      	b.n	8004206 <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d004      	beq.n	8004170 <HAL_SPI_Transmit+0x1c0>
 8004166:	2316      	movs	r3, #22
 8004168:	18fb      	adds	r3, r7, r3
 800416a:	881b      	ldrh	r3, [r3, #0]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d145      	bne.n	80041fc <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	330c      	adds	r3, #12
 800417a:	7812      	ldrb	r2, [r2, #0]
 800417c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004182:	1c5a      	adds	r2, r3, #1
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800418c:	b29b      	uxth	r3, r3
 800418e:	3b01      	subs	r3, #1
 8004190:	b29a      	uxth	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004196:	e031      	b.n	80041fc <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	2202      	movs	r2, #2
 80041a0:	4013      	ands	r3, r2
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d113      	bne.n	80041ce <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	330c      	adds	r3, #12
 80041b0:	7812      	ldrb	r2, [r2, #0]
 80041b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b8:	1c5a      	adds	r2, r3, #1
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	3b01      	subs	r3, #1
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	86da      	strh	r2, [r3, #54]	@ 0x36
 80041cc:	e016      	b.n	80041fc <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041ce:	f7fd feb3 	bl	8001f38 <HAL_GetTick>
 80041d2:	0002      	movs	r2, r0
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	683a      	ldr	r2, [r7, #0]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d802      	bhi.n	80041e4 <HAL_SPI_Transmit+0x234>
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	3301      	adds	r3, #1
 80041e2:	d102      	bne.n	80041ea <HAL_SPI_Transmit+0x23a>
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d108      	bne.n	80041fc <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 80041ea:	231f      	movs	r3, #31
 80041ec:	18fb      	adds	r3, r7, r3
 80041ee:	2203      	movs	r2, #3
 80041f0:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2251      	movs	r2, #81	@ 0x51
 80041f6:	2101      	movs	r1, #1
 80041f8:	5499      	strb	r1, [r3, r2]
          goto error;
 80041fa:	e02b      	b.n	8004254 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004200:	b29b      	uxth	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1c8      	bne.n	8004198 <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004206:	69ba      	ldr	r2, [r7, #24]
 8004208:	6839      	ldr	r1, [r7, #0]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	0018      	movs	r0, r3
 800420e:	f000 f8bb 	bl	8004388 <SPI_EndRxTxTransaction>
 8004212:	1e03      	subs	r3, r0, #0
 8004214:	d002      	beq.n	800421c <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2220      	movs	r2, #32
 800421a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d10a      	bne.n	800423a <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004224:	2300      	movs	r3, #0
 8004226:	613b      	str	r3, [r7, #16]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	613b      	str	r3, [r7, #16]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	613b      	str	r3, [r7, #16]
 8004238:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800423e:	2b00      	cmp	r3, #0
 8004240:	d004      	beq.n	800424c <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 8004242:	231f      	movs	r3, #31
 8004244:	18fb      	adds	r3, r7, r3
 8004246:	2201      	movs	r2, #1
 8004248:	701a      	strb	r2, [r3, #0]
 800424a:	e003      	b.n	8004254 <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2251      	movs	r2, #81	@ 0x51
 8004250:	2101      	movs	r1, #1
 8004252:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2250      	movs	r2, #80	@ 0x50
 8004258:	2100      	movs	r1, #0
 800425a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800425c:	231f      	movs	r3, #31
 800425e:	18fb      	adds	r3, r7, r3
 8004260:	781b      	ldrb	r3, [r3, #0]
}
 8004262:	0018      	movs	r0, r3
 8004264:	46bd      	mov	sp, r7
 8004266:	b008      	add	sp, #32
 8004268:	bd80      	pop	{r7, pc}
	...

0800426c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b088      	sub	sp, #32
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	603b      	str	r3, [r7, #0]
 8004278:	1dfb      	adds	r3, r7, #7
 800427a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800427c:	f7fd fe5c 	bl	8001f38 <HAL_GetTick>
 8004280:	0002      	movs	r2, r0
 8004282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004284:	1a9b      	subs	r3, r3, r2
 8004286:	683a      	ldr	r2, [r7, #0]
 8004288:	18d3      	adds	r3, r2, r3
 800428a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800428c:	f7fd fe54 	bl	8001f38 <HAL_GetTick>
 8004290:	0003      	movs	r3, r0
 8004292:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004294:	4b3a      	ldr	r3, [pc, #232]	@ (8004380 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	015b      	lsls	r3, r3, #5
 800429a:	0d1b      	lsrs	r3, r3, #20
 800429c:	69fa      	ldr	r2, [r7, #28]
 800429e:	4353      	muls	r3, r2
 80042a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042a2:	e058      	b.n	8004356 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	3301      	adds	r3, #1
 80042a8:	d055      	beq.n	8004356 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042aa:	f7fd fe45 	bl	8001f38 <HAL_GetTick>
 80042ae:	0002      	movs	r2, r0
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	69fa      	ldr	r2, [r7, #28]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d902      	bls.n	80042c0 <SPI_WaitFlagStateUntilTimeout+0x54>
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d142      	bne.n	8004346 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	21e0      	movs	r1, #224	@ 0xe0
 80042cc:	438a      	bics	r2, r1
 80042ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	685a      	ldr	r2, [r3, #4]
 80042d4:	2382      	movs	r3, #130	@ 0x82
 80042d6:	005b      	lsls	r3, r3, #1
 80042d8:	429a      	cmp	r2, r3
 80042da:	d113      	bne.n	8004304 <SPI_WaitFlagStateUntilTimeout+0x98>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	689a      	ldr	r2, [r3, #8]
 80042e0:	2380      	movs	r3, #128	@ 0x80
 80042e2:	021b      	lsls	r3, r3, #8
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d005      	beq.n	80042f4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	2380      	movs	r3, #128	@ 0x80
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d107      	bne.n	8004304 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2140      	movs	r1, #64	@ 0x40
 8004300:	438a      	bics	r2, r1
 8004302:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004308:	2380      	movs	r3, #128	@ 0x80
 800430a:	019b      	lsls	r3, r3, #6
 800430c:	429a      	cmp	r2, r3
 800430e:	d110      	bne.n	8004332 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	491a      	ldr	r1, [pc, #104]	@ (8004384 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800431c:	400a      	ands	r2, r1
 800431e:	601a      	str	r2, [r3, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2180      	movs	r1, #128	@ 0x80
 800432c:	0189      	lsls	r1, r1, #6
 800432e:	430a      	orrs	r2, r1
 8004330:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2251      	movs	r2, #81	@ 0x51
 8004336:	2101      	movs	r1, #1
 8004338:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2250      	movs	r2, #80	@ 0x50
 800433e:	2100      	movs	r1, #0
 8004340:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e017      	b.n	8004376 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d101      	bne.n	8004350 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800434c:	2300      	movs	r3, #0
 800434e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	3b01      	subs	r3, #1
 8004354:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	4013      	ands	r3, r2
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	425a      	negs	r2, r3
 8004366:	4153      	adcs	r3, r2
 8004368:	b2db      	uxtb	r3, r3
 800436a:	001a      	movs	r2, r3
 800436c:	1dfb      	adds	r3, r7, #7
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	429a      	cmp	r2, r3
 8004372:	d197      	bne.n	80042a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	0018      	movs	r0, r3
 8004378:	46bd      	mov	sp, r7
 800437a:	b008      	add	sp, #32
 800437c:	bd80      	pop	{r7, pc}
 800437e:	46c0      	nop			@ (mov r8, r8)
 8004380:	20000000 	.word	0x20000000
 8004384:	ffffdfff 	.word	0xffffdfff

08004388 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b088      	sub	sp, #32
 800438c:	af02      	add	r7, sp, #8
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004394:	4b1d      	ldr	r3, [pc, #116]	@ (800440c <SPI_EndRxTxTransaction+0x84>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	491d      	ldr	r1, [pc, #116]	@ (8004410 <SPI_EndRxTxTransaction+0x88>)
 800439a:	0018      	movs	r0, r3
 800439c:	f7fb febe 	bl	800011c <__udivsi3>
 80043a0:	0003      	movs	r3, r0
 80043a2:	001a      	movs	r2, r3
 80043a4:	0013      	movs	r3, r2
 80043a6:	015b      	lsls	r3, r3, #5
 80043a8:	1a9b      	subs	r3, r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	189b      	adds	r3, r3, r2
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	685a      	ldr	r2, [r3, #4]
 80043b6:	2382      	movs	r3, #130	@ 0x82
 80043b8:	005b      	lsls	r3, r3, #1
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d112      	bne.n	80043e4 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	9300      	str	r3, [sp, #0]
 80043c6:	0013      	movs	r3, r2
 80043c8:	2200      	movs	r2, #0
 80043ca:	2180      	movs	r1, #128	@ 0x80
 80043cc:	f7ff ff4e 	bl	800426c <SPI_WaitFlagStateUntilTimeout>
 80043d0:	1e03      	subs	r3, r0, #0
 80043d2:	d016      	beq.n	8004402 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043d8:	2220      	movs	r2, #32
 80043da:	431a      	orrs	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e00f      	b.n	8004404 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00a      	beq.n	8004400 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	3b01      	subs	r3, #1
 80043ee:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	2280      	movs	r2, #128	@ 0x80
 80043f8:	4013      	ands	r3, r2
 80043fa:	2b80      	cmp	r3, #128	@ 0x80
 80043fc:	d0f2      	beq.n	80043e4 <SPI_EndRxTxTransaction+0x5c>
 80043fe:	e000      	b.n	8004402 <SPI_EndRxTxTransaction+0x7a>
        break;
 8004400:	46c0      	nop			@ (mov r8, r8)
  }

  return HAL_OK;
 8004402:	2300      	movs	r3, #0
}
 8004404:	0018      	movs	r0, r3
 8004406:	46bd      	mov	sp, r7
 8004408:	b006      	add	sp, #24
 800440a:	bd80      	pop	{r7, pc}
 800440c:	20000000 	.word	0x20000000
 8004410:	016e3600 	.word	0x016e3600

08004414 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e044      	b.n	80044b0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800442a:	2b00      	cmp	r3, #0
 800442c:	d107      	bne.n	800443e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2278      	movs	r2, #120	@ 0x78
 8004432:	2100      	movs	r1, #0
 8004434:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	0018      	movs	r0, r3
 800443a:	f7fc ffe3 	bl	8001404 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2224      	movs	r2, #36	@ 0x24
 8004442:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2101      	movs	r1, #1
 8004450:	438a      	bics	r2, r1
 8004452:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	0018      	movs	r0, r3
 8004458:	f000 f8d0 	bl	80045fc <UART_SetConfig>
 800445c:	0003      	movs	r3, r0
 800445e:	2b01      	cmp	r3, #1
 8004460:	d101      	bne.n	8004466 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e024      	b.n	80044b0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	0018      	movs	r0, r3
 8004472:	f000 fb47 	bl	8004b04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	490d      	ldr	r1, [pc, #52]	@ (80044b8 <HAL_UART_Init+0xa4>)
 8004482:	400a      	ands	r2, r1
 8004484:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	689a      	ldr	r2, [r3, #8]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	212a      	movs	r1, #42	@ 0x2a
 8004492:	438a      	bics	r2, r1
 8004494:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2101      	movs	r1, #1
 80044a2:	430a      	orrs	r2, r1
 80044a4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	0018      	movs	r0, r3
 80044aa:	f000 fbdf 	bl	8004c6c <UART_CheckIdleState>
 80044ae:	0003      	movs	r3, r0
}
 80044b0:	0018      	movs	r0, r3
 80044b2:	46bd      	mov	sp, r7
 80044b4:	b002      	add	sp, #8
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	ffffb7ff 	.word	0xffffb7ff

080044bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b08a      	sub	sp, #40	@ 0x28
 80044c0:	af02      	add	r7, sp, #8
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	603b      	str	r3, [r7, #0]
 80044c8:	1dbb      	adds	r3, r7, #6
 80044ca:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044d0:	2b20      	cmp	r3, #32
 80044d2:	d000      	beq.n	80044d6 <HAL_UART_Transmit+0x1a>
 80044d4:	e08c      	b.n	80045f0 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d003      	beq.n	80044e4 <HAL_UART_Transmit+0x28>
 80044dc:	1dbb      	adds	r3, r7, #6
 80044de:	881b      	ldrh	r3, [r3, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e084      	b.n	80045f2 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	689a      	ldr	r2, [r3, #8]
 80044ec:	2380      	movs	r3, #128	@ 0x80
 80044ee:	015b      	lsls	r3, r3, #5
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d109      	bne.n	8004508 <HAL_UART_Transmit+0x4c>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d105      	bne.n	8004508 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	2201      	movs	r2, #1
 8004500:	4013      	ands	r3, r2
 8004502:	d001      	beq.n	8004508 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e074      	b.n	80045f2 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2284      	movs	r2, #132	@ 0x84
 800450c:	2100      	movs	r1, #0
 800450e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2221      	movs	r2, #33	@ 0x21
 8004514:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004516:	f7fd fd0f 	bl	8001f38 <HAL_GetTick>
 800451a:	0003      	movs	r3, r0
 800451c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	1dba      	adds	r2, r7, #6
 8004522:	2150      	movs	r1, #80	@ 0x50
 8004524:	8812      	ldrh	r2, [r2, #0]
 8004526:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	1dba      	adds	r2, r7, #6
 800452c:	2152      	movs	r1, #82	@ 0x52
 800452e:	8812      	ldrh	r2, [r2, #0]
 8004530:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	689a      	ldr	r2, [r3, #8]
 8004536:	2380      	movs	r3, #128	@ 0x80
 8004538:	015b      	lsls	r3, r3, #5
 800453a:	429a      	cmp	r2, r3
 800453c:	d108      	bne.n	8004550 <HAL_UART_Transmit+0x94>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d104      	bne.n	8004550 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8004546:	2300      	movs	r3, #0
 8004548:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	61bb      	str	r3, [r7, #24]
 800454e:	e003      	b.n	8004558 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004554:	2300      	movs	r3, #0
 8004556:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004558:	e02f      	b.n	80045ba <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	9300      	str	r3, [sp, #0]
 8004562:	0013      	movs	r3, r2
 8004564:	2200      	movs	r2, #0
 8004566:	2180      	movs	r1, #128	@ 0x80
 8004568:	f000 fc28 	bl	8004dbc <UART_WaitOnFlagUntilTimeout>
 800456c:	1e03      	subs	r3, r0, #0
 800456e:	d004      	beq.n	800457a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2220      	movs	r2, #32
 8004574:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e03b      	b.n	80045f2 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d10b      	bne.n	8004598 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	881b      	ldrh	r3, [r3, #0]
 8004584:	001a      	movs	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	05d2      	lsls	r2, r2, #23
 800458c:	0dd2      	lsrs	r2, r2, #23
 800458e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	3302      	adds	r3, #2
 8004594:	61bb      	str	r3, [r7, #24]
 8004596:	e007      	b.n	80045a8 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	781a      	ldrb	r2, [r3, #0]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	3301      	adds	r3, #1
 80045a6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2252      	movs	r2, #82	@ 0x52
 80045ac:	5a9b      	ldrh	r3, [r3, r2]
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	3b01      	subs	r3, #1
 80045b2:	b299      	uxth	r1, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2252      	movs	r2, #82	@ 0x52
 80045b8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2252      	movs	r2, #82	@ 0x52
 80045be:	5a9b      	ldrh	r3, [r3, r2]
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1c9      	bne.n	800455a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	9300      	str	r3, [sp, #0]
 80045ce:	0013      	movs	r3, r2
 80045d0:	2200      	movs	r2, #0
 80045d2:	2140      	movs	r1, #64	@ 0x40
 80045d4:	f000 fbf2 	bl	8004dbc <UART_WaitOnFlagUntilTimeout>
 80045d8:	1e03      	subs	r3, r0, #0
 80045da:	d004      	beq.n	80045e6 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2220      	movs	r2, #32
 80045e0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e005      	b.n	80045f2 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2220      	movs	r2, #32
 80045ea:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80045ec:	2300      	movs	r3, #0
 80045ee:	e000      	b.n	80045f2 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80045f0:	2302      	movs	r3, #2
  }
}
 80045f2:	0018      	movs	r0, r3
 80045f4:	46bd      	mov	sp, r7
 80045f6:	b008      	add	sp, #32
 80045f8:	bd80      	pop	{r7, pc}
	...

080045fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045fc:	b5b0      	push	{r4, r5, r7, lr}
 80045fe:	b08e      	sub	sp, #56	@ 0x38
 8004600:	af00      	add	r7, sp, #0
 8004602:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004604:	231a      	movs	r3, #26
 8004606:	2218      	movs	r2, #24
 8004608:	189b      	adds	r3, r3, r2
 800460a:	19db      	adds	r3, r3, r7
 800460c:	2200      	movs	r2, #0
 800460e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	689a      	ldr	r2, [r3, #8]
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	431a      	orrs	r2, r3
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	431a      	orrs	r2, r3
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	69db      	ldr	r3, [r3, #28]
 8004624:	4313      	orrs	r3, r2
 8004626:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4ac6      	ldr	r2, [pc, #792]	@ (8004948 <UART_SetConfig+0x34c>)
 8004630:	4013      	ands	r3, r2
 8004632:	0019      	movs	r1, r3
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800463a:	430a      	orrs	r2, r1
 800463c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	4ac1      	ldr	r2, [pc, #772]	@ (800494c <UART_SetConfig+0x350>)
 8004646:	4013      	ands	r3, r2
 8004648:	0019      	movs	r1, r3
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	68da      	ldr	r2, [r3, #12]
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	430a      	orrs	r2, r1
 8004654:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4abb      	ldr	r2, [pc, #748]	@ (8004950 <UART_SetConfig+0x354>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d004      	beq.n	8004670 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800466c:	4313      	orrs	r3, r2
 800466e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	4ab7      	ldr	r2, [pc, #732]	@ (8004954 <UART_SetConfig+0x358>)
 8004678:	4013      	ands	r3, r2
 800467a:	0019      	movs	r1, r3
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004682:	430a      	orrs	r2, r1
 8004684:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4ab3      	ldr	r2, [pc, #716]	@ (8004958 <UART_SetConfig+0x35c>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d131      	bne.n	80046f4 <UART_SetConfig+0xf8>
 8004690:	4bb2      	ldr	r3, [pc, #712]	@ (800495c <UART_SetConfig+0x360>)
 8004692:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004694:	2203      	movs	r2, #3
 8004696:	4013      	ands	r3, r2
 8004698:	2b03      	cmp	r3, #3
 800469a:	d01d      	beq.n	80046d8 <UART_SetConfig+0xdc>
 800469c:	d823      	bhi.n	80046e6 <UART_SetConfig+0xea>
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d00c      	beq.n	80046bc <UART_SetConfig+0xc0>
 80046a2:	d820      	bhi.n	80046e6 <UART_SetConfig+0xea>
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d002      	beq.n	80046ae <UART_SetConfig+0xb2>
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d00e      	beq.n	80046ca <UART_SetConfig+0xce>
 80046ac:	e01b      	b.n	80046e6 <UART_SetConfig+0xea>
 80046ae:	231b      	movs	r3, #27
 80046b0:	2218      	movs	r2, #24
 80046b2:	189b      	adds	r3, r3, r2
 80046b4:	19db      	adds	r3, r3, r7
 80046b6:	2201      	movs	r2, #1
 80046b8:	701a      	strb	r2, [r3, #0]
 80046ba:	e09c      	b.n	80047f6 <UART_SetConfig+0x1fa>
 80046bc:	231b      	movs	r3, #27
 80046be:	2218      	movs	r2, #24
 80046c0:	189b      	adds	r3, r3, r2
 80046c2:	19db      	adds	r3, r3, r7
 80046c4:	2202      	movs	r2, #2
 80046c6:	701a      	strb	r2, [r3, #0]
 80046c8:	e095      	b.n	80047f6 <UART_SetConfig+0x1fa>
 80046ca:	231b      	movs	r3, #27
 80046cc:	2218      	movs	r2, #24
 80046ce:	189b      	adds	r3, r3, r2
 80046d0:	19db      	adds	r3, r3, r7
 80046d2:	2204      	movs	r2, #4
 80046d4:	701a      	strb	r2, [r3, #0]
 80046d6:	e08e      	b.n	80047f6 <UART_SetConfig+0x1fa>
 80046d8:	231b      	movs	r3, #27
 80046da:	2218      	movs	r2, #24
 80046dc:	189b      	adds	r3, r3, r2
 80046de:	19db      	adds	r3, r3, r7
 80046e0:	2208      	movs	r2, #8
 80046e2:	701a      	strb	r2, [r3, #0]
 80046e4:	e087      	b.n	80047f6 <UART_SetConfig+0x1fa>
 80046e6:	231b      	movs	r3, #27
 80046e8:	2218      	movs	r2, #24
 80046ea:	189b      	adds	r3, r3, r2
 80046ec:	19db      	adds	r3, r3, r7
 80046ee:	2210      	movs	r2, #16
 80046f0:	701a      	strb	r2, [r3, #0]
 80046f2:	e080      	b.n	80047f6 <UART_SetConfig+0x1fa>
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a99      	ldr	r2, [pc, #612]	@ (8004960 <UART_SetConfig+0x364>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d131      	bne.n	8004762 <UART_SetConfig+0x166>
 80046fe:	4b97      	ldr	r3, [pc, #604]	@ (800495c <UART_SetConfig+0x360>)
 8004700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004702:	220c      	movs	r2, #12
 8004704:	4013      	ands	r3, r2
 8004706:	2b0c      	cmp	r3, #12
 8004708:	d01d      	beq.n	8004746 <UART_SetConfig+0x14a>
 800470a:	d823      	bhi.n	8004754 <UART_SetConfig+0x158>
 800470c:	2b08      	cmp	r3, #8
 800470e:	d00c      	beq.n	800472a <UART_SetConfig+0x12e>
 8004710:	d820      	bhi.n	8004754 <UART_SetConfig+0x158>
 8004712:	2b00      	cmp	r3, #0
 8004714:	d002      	beq.n	800471c <UART_SetConfig+0x120>
 8004716:	2b04      	cmp	r3, #4
 8004718:	d00e      	beq.n	8004738 <UART_SetConfig+0x13c>
 800471a:	e01b      	b.n	8004754 <UART_SetConfig+0x158>
 800471c:	231b      	movs	r3, #27
 800471e:	2218      	movs	r2, #24
 8004720:	189b      	adds	r3, r3, r2
 8004722:	19db      	adds	r3, r3, r7
 8004724:	2200      	movs	r2, #0
 8004726:	701a      	strb	r2, [r3, #0]
 8004728:	e065      	b.n	80047f6 <UART_SetConfig+0x1fa>
 800472a:	231b      	movs	r3, #27
 800472c:	2218      	movs	r2, #24
 800472e:	189b      	adds	r3, r3, r2
 8004730:	19db      	adds	r3, r3, r7
 8004732:	2202      	movs	r2, #2
 8004734:	701a      	strb	r2, [r3, #0]
 8004736:	e05e      	b.n	80047f6 <UART_SetConfig+0x1fa>
 8004738:	231b      	movs	r3, #27
 800473a:	2218      	movs	r2, #24
 800473c:	189b      	adds	r3, r3, r2
 800473e:	19db      	adds	r3, r3, r7
 8004740:	2204      	movs	r2, #4
 8004742:	701a      	strb	r2, [r3, #0]
 8004744:	e057      	b.n	80047f6 <UART_SetConfig+0x1fa>
 8004746:	231b      	movs	r3, #27
 8004748:	2218      	movs	r2, #24
 800474a:	189b      	adds	r3, r3, r2
 800474c:	19db      	adds	r3, r3, r7
 800474e:	2208      	movs	r2, #8
 8004750:	701a      	strb	r2, [r3, #0]
 8004752:	e050      	b.n	80047f6 <UART_SetConfig+0x1fa>
 8004754:	231b      	movs	r3, #27
 8004756:	2218      	movs	r2, #24
 8004758:	189b      	adds	r3, r3, r2
 800475a:	19db      	adds	r3, r3, r7
 800475c:	2210      	movs	r2, #16
 800475e:	701a      	strb	r2, [r3, #0]
 8004760:	e049      	b.n	80047f6 <UART_SetConfig+0x1fa>
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a7a      	ldr	r2, [pc, #488]	@ (8004950 <UART_SetConfig+0x354>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d13e      	bne.n	80047ea <UART_SetConfig+0x1ee>
 800476c:	4b7b      	ldr	r3, [pc, #492]	@ (800495c <UART_SetConfig+0x360>)
 800476e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004770:	23c0      	movs	r3, #192	@ 0xc0
 8004772:	011b      	lsls	r3, r3, #4
 8004774:	4013      	ands	r3, r2
 8004776:	22c0      	movs	r2, #192	@ 0xc0
 8004778:	0112      	lsls	r2, r2, #4
 800477a:	4293      	cmp	r3, r2
 800477c:	d027      	beq.n	80047ce <UART_SetConfig+0x1d2>
 800477e:	22c0      	movs	r2, #192	@ 0xc0
 8004780:	0112      	lsls	r2, r2, #4
 8004782:	4293      	cmp	r3, r2
 8004784:	d82a      	bhi.n	80047dc <UART_SetConfig+0x1e0>
 8004786:	2280      	movs	r2, #128	@ 0x80
 8004788:	0112      	lsls	r2, r2, #4
 800478a:	4293      	cmp	r3, r2
 800478c:	d011      	beq.n	80047b2 <UART_SetConfig+0x1b6>
 800478e:	2280      	movs	r2, #128	@ 0x80
 8004790:	0112      	lsls	r2, r2, #4
 8004792:	4293      	cmp	r3, r2
 8004794:	d822      	bhi.n	80047dc <UART_SetConfig+0x1e0>
 8004796:	2b00      	cmp	r3, #0
 8004798:	d004      	beq.n	80047a4 <UART_SetConfig+0x1a8>
 800479a:	2280      	movs	r2, #128	@ 0x80
 800479c:	00d2      	lsls	r2, r2, #3
 800479e:	4293      	cmp	r3, r2
 80047a0:	d00e      	beq.n	80047c0 <UART_SetConfig+0x1c4>
 80047a2:	e01b      	b.n	80047dc <UART_SetConfig+0x1e0>
 80047a4:	231b      	movs	r3, #27
 80047a6:	2218      	movs	r2, #24
 80047a8:	189b      	adds	r3, r3, r2
 80047aa:	19db      	adds	r3, r3, r7
 80047ac:	2200      	movs	r2, #0
 80047ae:	701a      	strb	r2, [r3, #0]
 80047b0:	e021      	b.n	80047f6 <UART_SetConfig+0x1fa>
 80047b2:	231b      	movs	r3, #27
 80047b4:	2218      	movs	r2, #24
 80047b6:	189b      	adds	r3, r3, r2
 80047b8:	19db      	adds	r3, r3, r7
 80047ba:	2202      	movs	r2, #2
 80047bc:	701a      	strb	r2, [r3, #0]
 80047be:	e01a      	b.n	80047f6 <UART_SetConfig+0x1fa>
 80047c0:	231b      	movs	r3, #27
 80047c2:	2218      	movs	r2, #24
 80047c4:	189b      	adds	r3, r3, r2
 80047c6:	19db      	adds	r3, r3, r7
 80047c8:	2204      	movs	r2, #4
 80047ca:	701a      	strb	r2, [r3, #0]
 80047cc:	e013      	b.n	80047f6 <UART_SetConfig+0x1fa>
 80047ce:	231b      	movs	r3, #27
 80047d0:	2218      	movs	r2, #24
 80047d2:	189b      	adds	r3, r3, r2
 80047d4:	19db      	adds	r3, r3, r7
 80047d6:	2208      	movs	r2, #8
 80047d8:	701a      	strb	r2, [r3, #0]
 80047da:	e00c      	b.n	80047f6 <UART_SetConfig+0x1fa>
 80047dc:	231b      	movs	r3, #27
 80047de:	2218      	movs	r2, #24
 80047e0:	189b      	adds	r3, r3, r2
 80047e2:	19db      	adds	r3, r3, r7
 80047e4:	2210      	movs	r2, #16
 80047e6:	701a      	strb	r2, [r3, #0]
 80047e8:	e005      	b.n	80047f6 <UART_SetConfig+0x1fa>
 80047ea:	231b      	movs	r3, #27
 80047ec:	2218      	movs	r2, #24
 80047ee:	189b      	adds	r3, r3, r2
 80047f0:	19db      	adds	r3, r3, r7
 80047f2:	2210      	movs	r2, #16
 80047f4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a55      	ldr	r2, [pc, #340]	@ (8004950 <UART_SetConfig+0x354>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d000      	beq.n	8004802 <UART_SetConfig+0x206>
 8004800:	e084      	b.n	800490c <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004802:	231b      	movs	r3, #27
 8004804:	2218      	movs	r2, #24
 8004806:	189b      	adds	r3, r3, r2
 8004808:	19db      	adds	r3, r3, r7
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	2b08      	cmp	r3, #8
 800480e:	d01d      	beq.n	800484c <UART_SetConfig+0x250>
 8004810:	dc20      	bgt.n	8004854 <UART_SetConfig+0x258>
 8004812:	2b04      	cmp	r3, #4
 8004814:	d015      	beq.n	8004842 <UART_SetConfig+0x246>
 8004816:	dc1d      	bgt.n	8004854 <UART_SetConfig+0x258>
 8004818:	2b00      	cmp	r3, #0
 800481a:	d002      	beq.n	8004822 <UART_SetConfig+0x226>
 800481c:	2b02      	cmp	r3, #2
 800481e:	d005      	beq.n	800482c <UART_SetConfig+0x230>
 8004820:	e018      	b.n	8004854 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004822:	f7ff f977 	bl	8003b14 <HAL_RCC_GetPCLK1Freq>
 8004826:	0003      	movs	r3, r0
 8004828:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800482a:	e01c      	b.n	8004866 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800482c:	4b4b      	ldr	r3, [pc, #300]	@ (800495c <UART_SetConfig+0x360>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2210      	movs	r2, #16
 8004832:	4013      	ands	r3, r2
 8004834:	d002      	beq.n	800483c <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004836:	4b4b      	ldr	r3, [pc, #300]	@ (8004964 <UART_SetConfig+0x368>)
 8004838:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800483a:	e014      	b.n	8004866 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 800483c:	4b4a      	ldr	r3, [pc, #296]	@ (8004968 <UART_SetConfig+0x36c>)
 800483e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004840:	e011      	b.n	8004866 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004842:	f7ff f8b7 	bl	80039b4 <HAL_RCC_GetSysClockFreq>
 8004846:	0003      	movs	r3, r0
 8004848:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800484a:	e00c      	b.n	8004866 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800484c:	2380      	movs	r3, #128	@ 0x80
 800484e:	021b      	lsls	r3, r3, #8
 8004850:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004852:	e008      	b.n	8004866 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8004854:	2300      	movs	r3, #0
 8004856:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004858:	231a      	movs	r3, #26
 800485a:	2218      	movs	r2, #24
 800485c:	189b      	adds	r3, r3, r2
 800485e:	19db      	adds	r3, r3, r7
 8004860:	2201      	movs	r2, #1
 8004862:	701a      	strb	r2, [r3, #0]
        break;
 8004864:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004868:	2b00      	cmp	r3, #0
 800486a:	d100      	bne.n	800486e <UART_SetConfig+0x272>
 800486c:	e132      	b.n	8004ad4 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	0013      	movs	r3, r2
 8004874:	005b      	lsls	r3, r3, #1
 8004876:	189b      	adds	r3, r3, r2
 8004878:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800487a:	429a      	cmp	r2, r3
 800487c:	d305      	bcc.n	800488a <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004884:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004886:	429a      	cmp	r2, r3
 8004888:	d906      	bls.n	8004898 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 800488a:	231a      	movs	r3, #26
 800488c:	2218      	movs	r2, #24
 800488e:	189b      	adds	r3, r3, r2
 8004890:	19db      	adds	r3, r3, r7
 8004892:	2201      	movs	r2, #1
 8004894:	701a      	strb	r2, [r3, #0]
 8004896:	e11d      	b.n	8004ad4 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800489a:	613b      	str	r3, [r7, #16]
 800489c:	2300      	movs	r3, #0
 800489e:	617b      	str	r3, [r7, #20]
 80048a0:	6939      	ldr	r1, [r7, #16]
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	000b      	movs	r3, r1
 80048a6:	0e1b      	lsrs	r3, r3, #24
 80048a8:	0010      	movs	r0, r2
 80048aa:	0205      	lsls	r5, r0, #8
 80048ac:	431d      	orrs	r5, r3
 80048ae:	000b      	movs	r3, r1
 80048b0:	021c      	lsls	r4, r3, #8
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	085b      	lsrs	r3, r3, #1
 80048b8:	60bb      	str	r3, [r7, #8]
 80048ba:	2300      	movs	r3, #0
 80048bc:	60fb      	str	r3, [r7, #12]
 80048be:	68b8      	ldr	r0, [r7, #8]
 80048c0:	68f9      	ldr	r1, [r7, #12]
 80048c2:	1900      	adds	r0, r0, r4
 80048c4:	4169      	adcs	r1, r5
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	603b      	str	r3, [r7, #0]
 80048cc:	2300      	movs	r3, #0
 80048ce:	607b      	str	r3, [r7, #4]
 80048d0:	683a      	ldr	r2, [r7, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f7fb fd98 	bl	8000408 <__aeabi_uldivmod>
 80048d8:	0002      	movs	r2, r0
 80048da:	000b      	movs	r3, r1
 80048dc:	0013      	movs	r3, r2
 80048de:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80048e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048e2:	23c0      	movs	r3, #192	@ 0xc0
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d309      	bcc.n	80048fe <UART_SetConfig+0x302>
 80048ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048ec:	2380      	movs	r3, #128	@ 0x80
 80048ee:	035b      	lsls	r3, r3, #13
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d204      	bcs.n	80048fe <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048fa:	60da      	str	r2, [r3, #12]
 80048fc:	e0ea      	b.n	8004ad4 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 80048fe:	231a      	movs	r3, #26
 8004900:	2218      	movs	r2, #24
 8004902:	189b      	adds	r3, r3, r2
 8004904:	19db      	adds	r3, r3, r7
 8004906:	2201      	movs	r2, #1
 8004908:	701a      	strb	r2, [r3, #0]
 800490a:	e0e3      	b.n	8004ad4 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	69da      	ldr	r2, [r3, #28]
 8004910:	2380      	movs	r3, #128	@ 0x80
 8004912:	021b      	lsls	r3, r3, #8
 8004914:	429a      	cmp	r2, r3
 8004916:	d000      	beq.n	800491a <UART_SetConfig+0x31e>
 8004918:	e085      	b.n	8004a26 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 800491a:	231b      	movs	r3, #27
 800491c:	2218      	movs	r2, #24
 800491e:	189b      	adds	r3, r3, r2
 8004920:	19db      	adds	r3, r3, r7
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	2b08      	cmp	r3, #8
 8004926:	d837      	bhi.n	8004998 <UART_SetConfig+0x39c>
 8004928:	009a      	lsls	r2, r3, #2
 800492a:	4b10      	ldr	r3, [pc, #64]	@ (800496c <UART_SetConfig+0x370>)
 800492c:	18d3      	adds	r3, r2, r3
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004932:	f7ff f8ef 	bl	8003b14 <HAL_RCC_GetPCLK1Freq>
 8004936:	0003      	movs	r3, r0
 8004938:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800493a:	e036      	b.n	80049aa <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800493c:	f7ff f900 	bl	8003b40 <HAL_RCC_GetPCLK2Freq>
 8004940:	0003      	movs	r3, r0
 8004942:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004944:	e031      	b.n	80049aa <UART_SetConfig+0x3ae>
 8004946:	46c0      	nop			@ (mov r8, r8)
 8004948:	efff69f3 	.word	0xefff69f3
 800494c:	ffffcfff 	.word	0xffffcfff
 8004950:	40004800 	.word	0x40004800
 8004954:	fffff4ff 	.word	0xfffff4ff
 8004958:	40013800 	.word	0x40013800
 800495c:	40021000 	.word	0x40021000
 8004960:	40004400 	.word	0x40004400
 8004964:	003d0900 	.word	0x003d0900
 8004968:	00f42400 	.word	0x00f42400
 800496c:	08008924 	.word	0x08008924
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004970:	4b60      	ldr	r3, [pc, #384]	@ (8004af4 <UART_SetConfig+0x4f8>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2210      	movs	r2, #16
 8004976:	4013      	ands	r3, r2
 8004978:	d002      	beq.n	8004980 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800497a:	4b5f      	ldr	r3, [pc, #380]	@ (8004af8 <UART_SetConfig+0x4fc>)
 800497c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800497e:	e014      	b.n	80049aa <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8004980:	4b5e      	ldr	r3, [pc, #376]	@ (8004afc <UART_SetConfig+0x500>)
 8004982:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004984:	e011      	b.n	80049aa <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004986:	f7ff f815 	bl	80039b4 <HAL_RCC_GetSysClockFreq>
 800498a:	0003      	movs	r3, r0
 800498c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800498e:	e00c      	b.n	80049aa <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004990:	2380      	movs	r3, #128	@ 0x80
 8004992:	021b      	lsls	r3, r3, #8
 8004994:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004996:	e008      	b.n	80049aa <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8004998:	2300      	movs	r3, #0
 800499a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800499c:	231a      	movs	r3, #26
 800499e:	2218      	movs	r2, #24
 80049a0:	189b      	adds	r3, r3, r2
 80049a2:	19db      	adds	r3, r3, r7
 80049a4:	2201      	movs	r2, #1
 80049a6:	701a      	strb	r2, [r3, #0]
        break;
 80049a8:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d100      	bne.n	80049b2 <UART_SetConfig+0x3b6>
 80049b0:	e090      	b.n	8004ad4 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80049b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049b4:	005a      	lsls	r2, r3, #1
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	085b      	lsrs	r3, r3, #1
 80049bc:	18d2      	adds	r2, r2, r3
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	0019      	movs	r1, r3
 80049c4:	0010      	movs	r0, r2
 80049c6:	f7fb fba9 	bl	800011c <__udivsi3>
 80049ca:	0003      	movs	r3, r0
 80049cc:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d0:	2b0f      	cmp	r3, #15
 80049d2:	d921      	bls.n	8004a18 <UART_SetConfig+0x41c>
 80049d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80049d6:	2380      	movs	r3, #128	@ 0x80
 80049d8:	025b      	lsls	r3, r3, #9
 80049da:	429a      	cmp	r2, r3
 80049dc:	d21c      	bcs.n	8004a18 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	200e      	movs	r0, #14
 80049e4:	2418      	movs	r4, #24
 80049e6:	1903      	adds	r3, r0, r4
 80049e8:	19db      	adds	r3, r3, r7
 80049ea:	210f      	movs	r1, #15
 80049ec:	438a      	bics	r2, r1
 80049ee:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f2:	085b      	lsrs	r3, r3, #1
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	2207      	movs	r2, #7
 80049f8:	4013      	ands	r3, r2
 80049fa:	b299      	uxth	r1, r3
 80049fc:	1903      	adds	r3, r0, r4
 80049fe:	19db      	adds	r3, r3, r7
 8004a00:	1902      	adds	r2, r0, r4
 8004a02:	19d2      	adds	r2, r2, r7
 8004a04:	8812      	ldrh	r2, [r2, #0]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	1902      	adds	r2, r0, r4
 8004a10:	19d2      	adds	r2, r2, r7
 8004a12:	8812      	ldrh	r2, [r2, #0]
 8004a14:	60da      	str	r2, [r3, #12]
 8004a16:	e05d      	b.n	8004ad4 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8004a18:	231a      	movs	r3, #26
 8004a1a:	2218      	movs	r2, #24
 8004a1c:	189b      	adds	r3, r3, r2
 8004a1e:	19db      	adds	r3, r3, r7
 8004a20:	2201      	movs	r2, #1
 8004a22:	701a      	strb	r2, [r3, #0]
 8004a24:	e056      	b.n	8004ad4 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a26:	231b      	movs	r3, #27
 8004a28:	2218      	movs	r2, #24
 8004a2a:	189b      	adds	r3, r3, r2
 8004a2c:	19db      	adds	r3, r3, r7
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	2b08      	cmp	r3, #8
 8004a32:	d822      	bhi.n	8004a7a <UART_SetConfig+0x47e>
 8004a34:	009a      	lsls	r2, r3, #2
 8004a36:	4b32      	ldr	r3, [pc, #200]	@ (8004b00 <UART_SetConfig+0x504>)
 8004a38:	18d3      	adds	r3, r2, r3
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a3e:	f7ff f869 	bl	8003b14 <HAL_RCC_GetPCLK1Freq>
 8004a42:	0003      	movs	r3, r0
 8004a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004a46:	e021      	b.n	8004a8c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a48:	f7ff f87a 	bl	8003b40 <HAL_RCC_GetPCLK2Freq>
 8004a4c:	0003      	movs	r3, r0
 8004a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004a50:	e01c      	b.n	8004a8c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a52:	4b28      	ldr	r3, [pc, #160]	@ (8004af4 <UART_SetConfig+0x4f8>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2210      	movs	r2, #16
 8004a58:	4013      	ands	r3, r2
 8004a5a:	d002      	beq.n	8004a62 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004a5c:	4b26      	ldr	r3, [pc, #152]	@ (8004af8 <UART_SetConfig+0x4fc>)
 8004a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004a60:	e014      	b.n	8004a8c <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8004a62:	4b26      	ldr	r3, [pc, #152]	@ (8004afc <UART_SetConfig+0x500>)
 8004a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004a66:	e011      	b.n	8004a8c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a68:	f7fe ffa4 	bl	80039b4 <HAL_RCC_GetSysClockFreq>
 8004a6c:	0003      	movs	r3, r0
 8004a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004a70:	e00c      	b.n	8004a8c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a72:	2380      	movs	r3, #128	@ 0x80
 8004a74:	021b      	lsls	r3, r3, #8
 8004a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004a78:	e008      	b.n	8004a8c <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004a7e:	231a      	movs	r3, #26
 8004a80:	2218      	movs	r2, #24
 8004a82:	189b      	adds	r3, r3, r2
 8004a84:	19db      	adds	r3, r3, r7
 8004a86:	2201      	movs	r2, #1
 8004a88:	701a      	strb	r2, [r3, #0]
        break;
 8004a8a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d020      	beq.n	8004ad4 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	085a      	lsrs	r2, r3, #1
 8004a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a9a:	18d2      	adds	r2, r2, r3
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	0019      	movs	r1, r3
 8004aa2:	0010      	movs	r0, r2
 8004aa4:	f7fb fb3a 	bl	800011c <__udivsi3>
 8004aa8:	0003      	movs	r3, r0
 8004aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aae:	2b0f      	cmp	r3, #15
 8004ab0:	d90a      	bls.n	8004ac8 <UART_SetConfig+0x4cc>
 8004ab2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ab4:	2380      	movs	r3, #128	@ 0x80
 8004ab6:	025b      	lsls	r3, r3, #9
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d205      	bcs.n	8004ac8 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	60da      	str	r2, [r3, #12]
 8004ac6:	e005      	b.n	8004ad4 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8004ac8:	231a      	movs	r3, #26
 8004aca:	2218      	movs	r2, #24
 8004acc:	189b      	adds	r3, r3, r2
 8004ace:	19db      	adds	r3, r3, r7
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	2200      	movs	r2, #0
 8004ade:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004ae0:	231a      	movs	r3, #26
 8004ae2:	2218      	movs	r2, #24
 8004ae4:	189b      	adds	r3, r3, r2
 8004ae6:	19db      	adds	r3, r3, r7
 8004ae8:	781b      	ldrb	r3, [r3, #0]
}
 8004aea:	0018      	movs	r0, r3
 8004aec:	46bd      	mov	sp, r7
 8004aee:	b00e      	add	sp, #56	@ 0x38
 8004af0:	bdb0      	pop	{r4, r5, r7, pc}
 8004af2:	46c0      	nop			@ (mov r8, r8)
 8004af4:	40021000 	.word	0x40021000
 8004af8:	003d0900 	.word	0x003d0900
 8004afc:	00f42400 	.word	0x00f42400
 8004b00:	08008948 	.word	0x08008948

08004b04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b10:	2201      	movs	r2, #1
 8004b12:	4013      	ands	r3, r2
 8004b14:	d00b      	beq.n	8004b2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	4a4a      	ldr	r2, [pc, #296]	@ (8004c48 <UART_AdvFeatureConfig+0x144>)
 8004b1e:	4013      	ands	r3, r2
 8004b20:	0019      	movs	r1, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b32:	2202      	movs	r2, #2
 8004b34:	4013      	ands	r3, r2
 8004b36:	d00b      	beq.n	8004b50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	4a43      	ldr	r2, [pc, #268]	@ (8004c4c <UART_AdvFeatureConfig+0x148>)
 8004b40:	4013      	ands	r3, r2
 8004b42:	0019      	movs	r1, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b54:	2204      	movs	r2, #4
 8004b56:	4013      	ands	r3, r2
 8004b58:	d00b      	beq.n	8004b72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	4a3b      	ldr	r2, [pc, #236]	@ (8004c50 <UART_AdvFeatureConfig+0x14c>)
 8004b62:	4013      	ands	r3, r2
 8004b64:	0019      	movs	r1, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b76:	2208      	movs	r2, #8
 8004b78:	4013      	ands	r3, r2
 8004b7a:	d00b      	beq.n	8004b94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	4a34      	ldr	r2, [pc, #208]	@ (8004c54 <UART_AdvFeatureConfig+0x150>)
 8004b84:	4013      	ands	r3, r2
 8004b86:	0019      	movs	r1, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	430a      	orrs	r2, r1
 8004b92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b98:	2210      	movs	r2, #16
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	d00b      	beq.n	8004bb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	4a2c      	ldr	r2, [pc, #176]	@ (8004c58 <UART_AdvFeatureConfig+0x154>)
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	0019      	movs	r1, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bba:	2220      	movs	r2, #32
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	d00b      	beq.n	8004bd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	4a25      	ldr	r2, [pc, #148]	@ (8004c5c <UART_AdvFeatureConfig+0x158>)
 8004bc8:	4013      	ands	r3, r2
 8004bca:	0019      	movs	r1, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bdc:	2240      	movs	r2, #64	@ 0x40
 8004bde:	4013      	ands	r3, r2
 8004be0:	d01d      	beq.n	8004c1e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	4a1d      	ldr	r2, [pc, #116]	@ (8004c60 <UART_AdvFeatureConfig+0x15c>)
 8004bea:	4013      	ands	r3, r2
 8004bec:	0019      	movs	r1, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004bfe:	2380      	movs	r3, #128	@ 0x80
 8004c00:	035b      	lsls	r3, r3, #13
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d10b      	bne.n	8004c1e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	4a15      	ldr	r2, [pc, #84]	@ (8004c64 <UART_AdvFeatureConfig+0x160>)
 8004c0e:	4013      	ands	r3, r2
 8004c10:	0019      	movs	r1, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c22:	2280      	movs	r2, #128	@ 0x80
 8004c24:	4013      	ands	r3, r2
 8004c26:	d00b      	beq.n	8004c40 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	4a0e      	ldr	r2, [pc, #56]	@ (8004c68 <UART_AdvFeatureConfig+0x164>)
 8004c30:	4013      	ands	r3, r2
 8004c32:	0019      	movs	r1, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	605a      	str	r2, [r3, #4]
  }
}
 8004c40:	46c0      	nop			@ (mov r8, r8)
 8004c42:	46bd      	mov	sp, r7
 8004c44:	b002      	add	sp, #8
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	fffdffff 	.word	0xfffdffff
 8004c4c:	fffeffff 	.word	0xfffeffff
 8004c50:	fffbffff 	.word	0xfffbffff
 8004c54:	ffff7fff 	.word	0xffff7fff
 8004c58:	ffffefff 	.word	0xffffefff
 8004c5c:	ffffdfff 	.word	0xffffdfff
 8004c60:	ffefffff 	.word	0xffefffff
 8004c64:	ff9fffff 	.word	0xff9fffff
 8004c68:	fff7ffff 	.word	0xfff7ffff

08004c6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b092      	sub	sp, #72	@ 0x48
 8004c70:	af02      	add	r7, sp, #8
 8004c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2284      	movs	r2, #132	@ 0x84
 8004c78:	2100      	movs	r1, #0
 8004c7a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c7c:	f7fd f95c 	bl	8001f38 <HAL_GetTick>
 8004c80:	0003      	movs	r3, r0
 8004c82:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2208      	movs	r2, #8
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	2b08      	cmp	r3, #8
 8004c90:	d12c      	bne.n	8004cec <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c94:	2280      	movs	r2, #128	@ 0x80
 8004c96:	0391      	lsls	r1, r2, #14
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	4a46      	ldr	r2, [pc, #280]	@ (8004db4 <UART_CheckIdleState+0x148>)
 8004c9c:	9200      	str	r2, [sp, #0]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f000 f88c 	bl	8004dbc <UART_WaitOnFlagUntilTimeout>
 8004ca4:	1e03      	subs	r3, r0, #0
 8004ca6:	d021      	beq.n	8004cec <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ca8:	f3ef 8310 	mrs	r3, PRIMASK
 8004cac:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004cb0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb8:	f383 8810 	msr	PRIMASK, r3
}
 8004cbc:	46c0      	nop			@ (mov r8, r8)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2180      	movs	r1, #128	@ 0x80
 8004cca:	438a      	bics	r2, r1
 8004ccc:	601a      	str	r2, [r3, #0]
 8004cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cd4:	f383 8810 	msr	PRIMASK, r3
}
 8004cd8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2220      	movs	r2, #32
 8004cde:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2278      	movs	r2, #120	@ 0x78
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e05f      	b.n	8004dac <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2204      	movs	r2, #4
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	2b04      	cmp	r3, #4
 8004cf8:	d146      	bne.n	8004d88 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cfc:	2280      	movs	r2, #128	@ 0x80
 8004cfe:	03d1      	lsls	r1, r2, #15
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	4a2c      	ldr	r2, [pc, #176]	@ (8004db4 <UART_CheckIdleState+0x148>)
 8004d04:	9200      	str	r2, [sp, #0]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f000 f858 	bl	8004dbc <UART_WaitOnFlagUntilTimeout>
 8004d0c:	1e03      	subs	r3, r0, #0
 8004d0e:	d03b      	beq.n	8004d88 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d10:	f3ef 8310 	mrs	r3, PRIMASK
 8004d14:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d16:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d18:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	f383 8810 	msr	PRIMASK, r3
}
 8004d24:	46c0      	nop			@ (mov r8, r8)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4921      	ldr	r1, [pc, #132]	@ (8004db8 <UART_CheckIdleState+0x14c>)
 8004d32:	400a      	ands	r2, r1
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d38:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	f383 8810 	msr	PRIMASK, r3
}
 8004d40:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d42:	f3ef 8310 	mrs	r3, PRIMASK
 8004d46:	61bb      	str	r3, [r7, #24]
  return(result);
 8004d48:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d4a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	f383 8810 	msr	PRIMASK, r3
}
 8004d56:	46c0      	nop			@ (mov r8, r8)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689a      	ldr	r2, [r3, #8]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2101      	movs	r1, #1
 8004d64:	438a      	bics	r2, r1
 8004d66:	609a      	str	r2, [r3, #8]
 8004d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d6a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d6c:	6a3b      	ldr	r3, [r7, #32]
 8004d6e:	f383 8810 	msr	PRIMASK, r3
}
 8004d72:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2280      	movs	r2, #128	@ 0x80
 8004d78:	2120      	movs	r1, #32
 8004d7a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2278      	movs	r2, #120	@ 0x78
 8004d80:	2100      	movs	r1, #0
 8004d82:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e011      	b.n	8004dac <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2220      	movs	r2, #32
 8004d8c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2280      	movs	r2, #128	@ 0x80
 8004d92:	2120      	movs	r1, #32
 8004d94:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2278      	movs	r2, #120	@ 0x78
 8004da6:	2100      	movs	r1, #0
 8004da8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	0018      	movs	r0, r3
 8004dae:	46bd      	mov	sp, r7
 8004db0:	b010      	add	sp, #64	@ 0x40
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	01ffffff 	.word	0x01ffffff
 8004db8:	fffffedf 	.word	0xfffffedf

08004dbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	603b      	str	r3, [r7, #0]
 8004dc8:	1dfb      	adds	r3, r7, #7
 8004dca:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dcc:	e04b      	b.n	8004e66 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	d048      	beq.n	8004e66 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dd4:	f7fd f8b0 	bl	8001f38 <HAL_GetTick>
 8004dd8:	0002      	movs	r2, r0
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	69ba      	ldr	r2, [r7, #24]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d302      	bcc.n	8004dea <UART_WaitOnFlagUntilTimeout+0x2e>
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e04b      	b.n	8004e86 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2204      	movs	r2, #4
 8004df6:	4013      	ands	r3, r2
 8004df8:	d035      	beq.n	8004e66 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	69db      	ldr	r3, [r3, #28]
 8004e00:	2208      	movs	r2, #8
 8004e02:	4013      	ands	r3, r2
 8004e04:	2b08      	cmp	r3, #8
 8004e06:	d111      	bne.n	8004e2c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2208      	movs	r2, #8
 8004e0e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	0018      	movs	r0, r3
 8004e14:	f000 f83c 	bl	8004e90 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2284      	movs	r2, #132	@ 0x84
 8004e1c:	2108      	movs	r1, #8
 8004e1e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2278      	movs	r2, #120	@ 0x78
 8004e24:	2100      	movs	r1, #0
 8004e26:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e02c      	b.n	8004e86 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	69da      	ldr	r2, [r3, #28]
 8004e32:	2380      	movs	r3, #128	@ 0x80
 8004e34:	011b      	lsls	r3, r3, #4
 8004e36:	401a      	ands	r2, r3
 8004e38:	2380      	movs	r3, #128	@ 0x80
 8004e3a:	011b      	lsls	r3, r3, #4
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d112      	bne.n	8004e66 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2280      	movs	r2, #128	@ 0x80
 8004e46:	0112      	lsls	r2, r2, #4
 8004e48:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	0018      	movs	r0, r3
 8004e4e:	f000 f81f 	bl	8004e90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2284      	movs	r2, #132	@ 0x84
 8004e56:	2120      	movs	r1, #32
 8004e58:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2278      	movs	r2, #120	@ 0x78
 8004e5e:	2100      	movs	r1, #0
 8004e60:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e00f      	b.n	8004e86 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	69db      	ldr	r3, [r3, #28]
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	4013      	ands	r3, r2
 8004e70:	68ba      	ldr	r2, [r7, #8]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	425a      	negs	r2, r3
 8004e76:	4153      	adcs	r3, r2
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	001a      	movs	r2, r3
 8004e7c:	1dfb      	adds	r3, r7, #7
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d0a4      	beq.n	8004dce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	0018      	movs	r0, r3
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	b004      	add	sp, #16
 8004e8c:	bd80      	pop	{r7, pc}
	...

08004e90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b08e      	sub	sp, #56	@ 0x38
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e98:	f3ef 8310 	mrs	r3, PRIMASK
 8004e9c:	617b      	str	r3, [r7, #20]
  return(result);
 8004e9e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ea0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	f383 8810 	msr	PRIMASK, r3
}
 8004eac:	46c0      	nop			@ (mov r8, r8)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4926      	ldr	r1, [pc, #152]	@ (8004f54 <UART_EndRxTransfer+0xc4>)
 8004eba:	400a      	ands	r2, r1
 8004ebc:	601a      	str	r2, [r3, #0]
 8004ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ec0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	f383 8810 	msr	PRIMASK, r3
}
 8004ec8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eca:	f3ef 8310 	mrs	r3, PRIMASK
 8004ece:	623b      	str	r3, [r7, #32]
  return(result);
 8004ed0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ed2:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eda:	f383 8810 	msr	PRIMASK, r3
}
 8004ede:	46c0      	nop			@ (mov r8, r8)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	689a      	ldr	r2, [r3, #8]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2101      	movs	r1, #1
 8004eec:	438a      	bics	r2, r1
 8004eee:	609a      	str	r2, [r3, #8]
 8004ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ef6:	f383 8810 	msr	PRIMASK, r3
}
 8004efa:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d118      	bne.n	8004f36 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f04:	f3ef 8310 	mrs	r3, PRIMASK
 8004f08:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f0a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f0e:	2301      	movs	r3, #1
 8004f10:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f383 8810 	msr	PRIMASK, r3
}
 8004f18:	46c0      	nop			@ (mov r8, r8)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2110      	movs	r1, #16
 8004f26:	438a      	bics	r2, r1
 8004f28:	601a      	str	r2, [r3, #0]
 8004f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	f383 8810 	msr	PRIMASK, r3
}
 8004f34:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2280      	movs	r2, #128	@ 0x80
 8004f3a:	2120      	movs	r1, #32
 8004f3c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004f4a:	46c0      	nop			@ (mov r8, r8)
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	b00e      	add	sp, #56	@ 0x38
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	46c0      	nop			@ (mov r8, r8)
 8004f54:	fffffedf 	.word	0xfffffedf

08004f58 <ptr_8to16>:
static UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p);
#ifdef UGUI_USE_UTF8
static UG_U16 _UG_DecodeUTF8(char **str);
#endif

static UG_U16 ptr_8to16(const UG_U8* p){
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  UG_U16 d = *p++;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	1c5a      	adds	r2, r3, #1
 8004f64:	607a      	str	r2, [r7, #4]
 8004f66:	781a      	ldrb	r2, [r3, #0]
 8004f68:	210e      	movs	r1, #14
 8004f6a:	187b      	adds	r3, r7, r1
 8004f6c:	801a      	strh	r2, [r3, #0]
  return ((d<<8) | *p);
 8004f6e:	187b      	adds	r3, r7, r1
 8004f70:	881b      	ldrh	r3, [r3, #0]
 8004f72:	021b      	lsls	r3, r3, #8
 8004f74:	b21a      	sxth	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	b21b      	sxth	r3, r3
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	b21b      	sxth	r3, r3
 8004f80:	b29b      	uxth	r3, r3
}
 8004f82:	0018      	movs	r0, r3
 8004f84:	46bd      	mov	sp, r7
 8004f86:	b004      	add	sp, #16
 8004f88:	bd80      	pop	{r7, pc}
	...

08004f8c <UG_Init>:

/* Pointer to the gui */
static UG_GUI* gui;

UG_S16 UG_Init( UG_GUI* g, UG_DEVICE *device )
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
   UG_U8 i;

   g->device = device;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	683a      	ldr	r2, [r7, #0]
 8004f9a:	601a      	str	r2, [r3, #0]
#if defined(UGUI_USE_CONSOLE)
   g->console.x_start = 4;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2204      	movs	r2, #4
 8004fa0:	839a      	strh	r2, [r3, #28]
   g->console.y_start = 4;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2204      	movs	r2, #4
 8004fa6:	83da      	strh	r2, [r3, #30]
   g->console.x_end = g->device->x_dim - g->console.x_start-1;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2200      	movs	r2, #0
 8004fae:	5e9b      	ldrsh	r3, [r3, r2]
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	211c      	movs	r1, #28
 8004fb6:	5e5b      	ldrsh	r3, [r3, r1]
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	b21a      	sxth	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	841a      	strh	r2, [r3, #32]
   g->console.y_end = g->device->y_dim - g->console.x_start-1;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2202      	movs	r2, #2
 8004fce:	5e9b      	ldrsh	r3, [r3, r2]
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	211c      	movs	r1, #28
 8004fd6:	5e5b      	ldrsh	r3, [r3, r1]
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	b21a      	sxth	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	845a      	strh	r2, [r3, #34]	@ 0x22
   g->console.x_pos = g->console.x_end;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2220      	movs	r2, #32
 8004fec:	5e9a      	ldrsh	r2, [r3, r2]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	831a      	strh	r2, [r3, #24]
   g->console.y_pos = g->console.y_end;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2222      	movs	r2, #34	@ 0x22
 8004ff6:	5e9a      	ldrsh	r2, [r3, r2]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	835a      	strh	r2, [r3, #26]
#endif
   g->char_h_space = 1;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2249      	movs	r2, #73	@ 0x49
 8005000:	2101      	movs	r1, #1
 8005002:	5499      	strb	r1, [r3, r2]
   g->char_v_space = 1;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	224a      	movs	r2, #74	@ 0x4a
 8005008:	2101      	movs	r1, #1
 800500a:	5499      	strb	r1, [r3, r2]
   g->font=NULL;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	629a      	str	r2, [r3, #40]	@ 0x28
   g->currentFont.bytes_per_char = 0;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	861a      	strh	r2, [r3, #48]	@ 0x30
   g->currentFont.char_height = 0;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	222f      	movs	r2, #47	@ 0x2f
 800501c:	2100      	movs	r1, #0
 800501e:	5499      	strb	r1, [r3, r2]
   g->currentFont.char_width = 0;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	222e      	movs	r2, #46	@ 0x2e
 8005024:	2100      	movs	r1, #0
 8005026:	5499      	strb	r1, [r3, r2]
   g->currentFont.number_of_chars = 0;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	865a      	strh	r2, [r3, #50]	@ 0x32
   g->currentFont.number_of_offsets = 0;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	869a      	strh	r2, [r3, #52]	@ 0x34
   g->currentFont.widths = NULL;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	639a      	str	r2, [r3, #56]	@ 0x38
   g->currentFont.offsets = NULL;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	63da      	str	r2, [r3, #60]	@ 0x3c
   g->currentFont.data = NULL;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	641a      	str	r2, [r3, #64]	@ 0x40
   g->currentFont.font = NULL;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	645a      	str	r2, [r3, #68]	@ 0x44
   g->desktop_color = C_DESKTOP_COLOR;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2250      	movs	r2, #80	@ 0x50
 8005050:	491e      	ldr	r1, [pc, #120]	@ (80050cc <UG_Init+0x140>)
 8005052:	5299      	strh	r1, [r3, r2]
   g->fore_color = C_WHITE;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	224c      	movs	r2, #76	@ 0x4c
 8005058:	2101      	movs	r1, #1
 800505a:	4249      	negs	r1, r1
 800505c:	5299      	strh	r1, [r3, r2]
   g->back_color = C_BLACK;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	224e      	movs	r2, #78	@ 0x4e
 8005062:	2100      	movs	r1, #0
 8005064:	5299      	strh	r1, [r3, r2]
   g->next_window = NULL;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	60da      	str	r2, [r3, #12]
   g->active_window = NULL;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	611a      	str	r2, [r3, #16]
   g->last_window = NULL;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	615a      	str	r2, [r3, #20]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8005078:	230f      	movs	r3, #15
 800507a:	18fb      	adds	r3, r7, r3
 800507c:	2200      	movs	r2, #0
 800507e:	701a      	strb	r2, [r3, #0]
 8005080:	e017      	b.n	80050b2 <UG_Init+0x126>
   {
      g->driver[i].driver = NULL;
 8005082:	210f      	movs	r1, #15
 8005084:	187b      	adds	r3, r7, r1
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	330a      	adds	r3, #10
 800508c:	00db      	lsls	r3, r3, #3
 800508e:	18d3      	adds	r3, r2, r3
 8005090:	3304      	adds	r3, #4
 8005092:	2200      	movs	r2, #0
 8005094:	601a      	str	r2, [r3, #0]
      g->driver[i].state = 0;
 8005096:	187b      	adds	r3, r7, r1
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	330a      	adds	r3, #10
 800509e:	00db      	lsls	r3, r3, #3
 80050a0:	18d3      	adds	r3, r2, r3
 80050a2:	3308      	adds	r3, #8
 80050a4:	2200      	movs	r2, #0
 80050a6:	701a      	strb	r2, [r3, #0]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 80050a8:	187b      	adds	r3, r7, r1
 80050aa:	781a      	ldrb	r2, [r3, #0]
 80050ac:	187b      	adds	r3, r7, r1
 80050ae:	3201      	adds	r2, #1
 80050b0:	701a      	strb	r2, [r3, #0]
 80050b2:	230f      	movs	r3, #15
 80050b4:	18fb      	adds	r3, r7, r3
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	2b03      	cmp	r3, #3
 80050ba:	d9e2      	bls.n	8005082 <UG_Init+0xf6>
   }

   gui = g;
 80050bc:	4b04      	ldr	r3, [pc, #16]	@ (80050d0 <UG_Init+0x144>)
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	601a      	str	r2, [r3, #0]
   return 1;
 80050c2:	2301      	movs	r3, #1
}
 80050c4:	0018      	movs	r0, r3
 80050c6:	46bd      	mov	sp, r7
 80050c8:	b004      	add	sp, #16
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	00005c5d 	.word	0x00005c5d
 80050d0:	200002e4 	.word	0x200002e4

080050d4 <UG_FontSelect>:

/*
 * Sets the GUI font
 */
void UG_FontSelect( UG_FONT* font )
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  gui->font = font;
 80050dc:	4b03      	ldr	r3, [pc, #12]	@ (80050ec <UG_FontSelect+0x18>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80050e4:	46c0      	nop			@ (mov r8, r8)
 80050e6:	46bd      	mov	sp, r7
 80050e8:	b002      	add	sp, #8
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	200002e4 	.word	0x200002e4

080050f0 <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af02      	add	r7, sp, #8
 80050f6:	0002      	movs	r2, r0
 80050f8:	1dbb      	adds	r3, r7, #6
 80050fa:	801a      	strh	r2, [r3, #0]
   UG_FillFrame(0,0,gui->device->x_dim-1,gui->device->y_dim-1,c);
 80050fc:	4b0e      	ldr	r3, [pc, #56]	@ (8005138 <UG_FillScreen+0x48>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2200      	movs	r2, #0
 8005104:	5e9b      	ldrsh	r3, [r3, r2]
 8005106:	b29b      	uxth	r3, r3
 8005108:	3b01      	subs	r3, #1
 800510a:	b29b      	uxth	r3, r3
 800510c:	b21a      	sxth	r2, r3
 800510e:	4b0a      	ldr	r3, [pc, #40]	@ (8005138 <UG_FillScreen+0x48>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2102      	movs	r1, #2
 8005116:	5e5b      	ldrsh	r3, [r3, r1]
 8005118:	b29b      	uxth	r3, r3
 800511a:	3b01      	subs	r3, #1
 800511c:	b29b      	uxth	r3, r3
 800511e:	b219      	sxth	r1, r3
 8005120:	1dbb      	adds	r3, r7, #6
 8005122:	881b      	ldrh	r3, [r3, #0]
 8005124:	9300      	str	r3, [sp, #0]
 8005126:	000b      	movs	r3, r1
 8005128:	2100      	movs	r1, #0
 800512a:	2000      	movs	r0, #0
 800512c:	f000 f806 	bl	800513c <UG_FillFrame>
}
 8005130:	46c0      	nop			@ (mov r8, r8)
 8005132:	46bd      	mov	sp, r7
 8005134:	b002      	add	sp, #8
 8005136:	bd80      	pop	{r7, pc}
 8005138:	200002e4 	.word	0x200002e4

0800513c <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 800513c:	b5b0      	push	{r4, r5, r7, lr}
 800513e:	b086      	sub	sp, #24
 8005140:	af02      	add	r7, sp, #8
 8005142:	0005      	movs	r5, r0
 8005144:	000c      	movs	r4, r1
 8005146:	0010      	movs	r0, r2
 8005148:	0019      	movs	r1, r3
 800514a:	1dbb      	adds	r3, r7, #6
 800514c:	1c2a      	adds	r2, r5, #0
 800514e:	801a      	strh	r2, [r3, #0]
 8005150:	1d3b      	adds	r3, r7, #4
 8005152:	1c22      	adds	r2, r4, #0
 8005154:	801a      	strh	r2, [r3, #0]
 8005156:	1cbb      	adds	r3, r7, #2
 8005158:	1c02      	adds	r2, r0, #0
 800515a:	801a      	strh	r2, [r3, #0]
 800515c:	003b      	movs	r3, r7
 800515e:	1c0a      	adds	r2, r1, #0
 8005160:	801a      	strh	r2, [r3, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 8005162:	1cba      	adds	r2, r7, #2
 8005164:	1dbb      	adds	r3, r7, #6
 8005166:	2100      	movs	r1, #0
 8005168:	5e52      	ldrsh	r2, [r2, r1]
 800516a:	2100      	movs	r1, #0
 800516c:	5e5b      	ldrsh	r3, [r3, r1]
 800516e:	429a      	cmp	r2, r3
 8005170:	da0c      	bge.n	800518c <UG_FillFrame+0x50>
     swap(x1,x2);
 8005172:	210a      	movs	r1, #10
 8005174:	187b      	adds	r3, r7, r1
 8005176:	1dba      	adds	r2, r7, #6
 8005178:	8812      	ldrh	r2, [r2, #0]
 800517a:	801a      	strh	r2, [r3, #0]
 800517c:	1dbb      	adds	r3, r7, #6
 800517e:	1cba      	adds	r2, r7, #2
 8005180:	8812      	ldrh	r2, [r2, #0]
 8005182:	801a      	strh	r2, [r3, #0]
 8005184:	1cbb      	adds	r3, r7, #2
 8005186:	187a      	adds	r2, r7, r1
 8005188:	8812      	ldrh	r2, [r2, #0]
 800518a:	801a      	strh	r2, [r3, #0]
   if ( y2 < y1 )
 800518c:	003a      	movs	r2, r7
 800518e:	1d3b      	adds	r3, r7, #4
 8005190:	2100      	movs	r1, #0
 8005192:	5e52      	ldrsh	r2, [r2, r1]
 8005194:	2100      	movs	r1, #0
 8005196:	5e5b      	ldrsh	r3, [r3, r1]
 8005198:	429a      	cmp	r2, r3
 800519a:	da0c      	bge.n	80051b6 <UG_FillFrame+0x7a>
     swap(y1,y2);
 800519c:	2108      	movs	r1, #8
 800519e:	187b      	adds	r3, r7, r1
 80051a0:	1d3a      	adds	r2, r7, #4
 80051a2:	8812      	ldrh	r2, [r2, #0]
 80051a4:	801a      	strh	r2, [r3, #0]
 80051a6:	1d3b      	adds	r3, r7, #4
 80051a8:	003a      	movs	r2, r7
 80051aa:	8812      	ldrh	r2, [r2, #0]
 80051ac:	801a      	strh	r2, [r3, #0]
 80051ae:	003b      	movs	r3, r7
 80051b0:	187a      	adds	r2, r7, r1
 80051b2:	8812      	ldrh	r2, [r2, #0]
 80051b4:	801a      	strh	r2, [r3, #0]

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 80051b6:	4b33      	ldr	r3, [pc, #204]	@ (8005284 <UG_FillFrame+0x148>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2260      	movs	r2, #96	@ 0x60
 80051bc:	5c9b      	ldrb	r3, [r3, r2]
 80051be:	001a      	movs	r2, r3
 80051c0:	2302      	movs	r3, #2
 80051c2:	4013      	ands	r3, r2
 80051c4:	d017      	beq.n	80051f6 <UG_FillFrame+0xba>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 80051c6:	4b2f      	ldr	r3, [pc, #188]	@ (8005284 <UG_FillFrame+0x148>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051cc:	001d      	movs	r5, r3
 80051ce:	003b      	movs	r3, r7
 80051d0:	2400      	movs	r4, #0
 80051d2:	5f1c      	ldrsh	r4, [r3, r4]
 80051d4:	1cbb      	adds	r3, r7, #2
 80051d6:	2200      	movs	r2, #0
 80051d8:	5e9a      	ldrsh	r2, [r3, r2]
 80051da:	1d3b      	adds	r3, r7, #4
 80051dc:	2100      	movs	r1, #0
 80051de:	5e59      	ldrsh	r1, [r3, r1]
 80051e0:	1dbb      	adds	r3, r7, #6
 80051e2:	2000      	movs	r0, #0
 80051e4:	5e18      	ldrsh	r0, [r3, r0]
 80051e6:	2320      	movs	r3, #32
 80051e8:	18fb      	adds	r3, r7, r3
 80051ea:	881b      	ldrh	r3, [r3, #0]
 80051ec:	9300      	str	r3, [sp, #0]
 80051ee:	0023      	movs	r3, r4
 80051f0:	47a8      	blx	r5
 80051f2:	1e03      	subs	r3, r0, #0
 80051f4:	d041      	beq.n	800527a <UG_FillFrame+0x13e>
   }

   for( m=y1; m<=y2; m++ )
 80051f6:	230c      	movs	r3, #12
 80051f8:	18fb      	adds	r3, r7, r3
 80051fa:	1d3a      	adds	r2, r7, #4
 80051fc:	8812      	ldrh	r2, [r2, #0]
 80051fe:	801a      	strh	r2, [r3, #0]
 8005200:	e031      	b.n	8005266 <UG_FillFrame+0x12a>
   {
      for( n=x1; n<=x2; n++ )
 8005202:	230e      	movs	r3, #14
 8005204:	18fb      	adds	r3, r7, r3
 8005206:	1dba      	adds	r2, r7, #6
 8005208:	8812      	ldrh	r2, [r2, #0]
 800520a:	801a      	strh	r2, [r3, #0]
 800520c:	e019      	b.n	8005242 <UG_FillFrame+0x106>
      {
         gui->device->pset(n,m,c);
 800520e:	4b1d      	ldr	r3, [pc, #116]	@ (8005284 <UG_FillFrame+0x148>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	685c      	ldr	r4, [r3, #4]
 8005216:	2320      	movs	r3, #32
 8005218:	18fb      	adds	r3, r7, r3
 800521a:	881a      	ldrh	r2, [r3, #0]
 800521c:	230c      	movs	r3, #12
 800521e:	18fb      	adds	r3, r7, r3
 8005220:	2100      	movs	r1, #0
 8005222:	5e59      	ldrsh	r1, [r3, r1]
 8005224:	250e      	movs	r5, #14
 8005226:	197b      	adds	r3, r7, r5
 8005228:	2000      	movs	r0, #0
 800522a:	5e1b      	ldrsh	r3, [r3, r0]
 800522c:	0018      	movs	r0, r3
 800522e:	47a0      	blx	r4
      for( n=x1; n<=x2; n++ )
 8005230:	0029      	movs	r1, r5
 8005232:	187b      	adds	r3, r7, r1
 8005234:	2200      	movs	r2, #0
 8005236:	5e9b      	ldrsh	r3, [r3, r2]
 8005238:	b29b      	uxth	r3, r3
 800523a:	3301      	adds	r3, #1
 800523c:	b29a      	uxth	r2, r3
 800523e:	187b      	adds	r3, r7, r1
 8005240:	801a      	strh	r2, [r3, #0]
 8005242:	230e      	movs	r3, #14
 8005244:	18fa      	adds	r2, r7, r3
 8005246:	1cbb      	adds	r3, r7, #2
 8005248:	2100      	movs	r1, #0
 800524a:	5e52      	ldrsh	r2, [r2, r1]
 800524c:	2100      	movs	r1, #0
 800524e:	5e5b      	ldrsh	r3, [r3, r1]
 8005250:	429a      	cmp	r2, r3
 8005252:	dddc      	ble.n	800520e <UG_FillFrame+0xd2>
   for( m=y1; m<=y2; m++ )
 8005254:	210c      	movs	r1, #12
 8005256:	187b      	adds	r3, r7, r1
 8005258:	2200      	movs	r2, #0
 800525a:	5e9b      	ldrsh	r3, [r3, r2]
 800525c:	b29b      	uxth	r3, r3
 800525e:	3301      	adds	r3, #1
 8005260:	b29a      	uxth	r2, r3
 8005262:	187b      	adds	r3, r7, r1
 8005264:	801a      	strh	r2, [r3, #0]
 8005266:	230c      	movs	r3, #12
 8005268:	18fa      	adds	r2, r7, r3
 800526a:	003b      	movs	r3, r7
 800526c:	2100      	movs	r1, #0
 800526e:	5e52      	ldrsh	r2, [r2, r1]
 8005270:	2100      	movs	r1, #0
 8005272:	5e5b      	ldrsh	r3, [r3, r1]
 8005274:	429a      	cmp	r2, r3
 8005276:	ddc4      	ble.n	8005202 <UG_FillFrame+0xc6>
 8005278:	e000      	b.n	800527c <UG_FillFrame+0x140>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800527a:	46c0      	nop			@ (mov r8, r8)
      }
   }
}
 800527c:	46bd      	mov	sp, r7
 800527e:	b004      	add	sp, #16
 8005280:	bdb0      	pop	{r4, r5, r7, pc}
 8005282:	46c0      	nop			@ (mov r8, r8)
 8005284:	200002e4 	.word	0x200002e4

08005288 <UG_DrawLine>:
      }
   }
}

void UG_DrawLine( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8005288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800528a:	b08b      	sub	sp, #44	@ 0x2c
 800528c:	af02      	add	r7, sp, #8
 800528e:	0005      	movs	r5, r0
 8005290:	000c      	movs	r4, r1
 8005292:	0010      	movs	r0, r2
 8005294:	0019      	movs	r1, r3
 8005296:	1dbb      	adds	r3, r7, #6
 8005298:	1c2a      	adds	r2, r5, #0
 800529a:	801a      	strh	r2, [r3, #0]
 800529c:	1d3b      	adds	r3, r7, #4
 800529e:	1c22      	adds	r2, r4, #0
 80052a0:	801a      	strh	r2, [r3, #0]
 80052a2:	1cbb      	adds	r3, r7, #2
 80052a4:	1c02      	adds	r2, r0, #0
 80052a6:	801a      	strh	r2, [r3, #0]
 80052a8:	003b      	movs	r3, r7
 80052aa:	1c0a      	adds	r2, r1, #0
 80052ac:	801a      	strh	r2, [r3, #0]
   UG_S16 n, dx, dy, sgndx, sgndy, dxabs, dyabs, x, y, drawx, drawy;

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 80052ae:	4ba6      	ldr	r3, [pc, #664]	@ (8005548 <UG_DrawLine+0x2c0>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2258      	movs	r2, #88	@ 0x58
 80052b4:	5c9b      	ldrb	r3, [r3, r2]
 80052b6:	001a      	movs	r2, r3
 80052b8:	2302      	movs	r3, #2
 80052ba:	4013      	ands	r3, r2
 80052bc:	d01a      	beq.n	80052f4 <UG_DrawLine+0x6c>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 80052be:	4ba2      	ldr	r3, [pc, #648]	@ (8005548 <UG_DrawLine+0x2c0>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052c4:	001d      	movs	r5, r3
 80052c6:	003b      	movs	r3, r7
 80052c8:	2400      	movs	r4, #0
 80052ca:	5f1c      	ldrsh	r4, [r3, r4]
 80052cc:	1cbb      	adds	r3, r7, #2
 80052ce:	2200      	movs	r2, #0
 80052d0:	5e9a      	ldrsh	r2, [r3, r2]
 80052d2:	1d3b      	adds	r3, r7, #4
 80052d4:	2100      	movs	r1, #0
 80052d6:	5e59      	ldrsh	r1, [r3, r1]
 80052d8:	1dbb      	adds	r3, r7, #6
 80052da:	2000      	movs	r0, #0
 80052dc:	5e18      	ldrsh	r0, [r3, r0]
 80052de:	2330      	movs	r3, #48	@ 0x30
 80052e0:	2608      	movs	r6, #8
 80052e2:	199b      	adds	r3, r3, r6
 80052e4:	19db      	adds	r3, r3, r7
 80052e6:	881b      	ldrh	r3, [r3, #0]
 80052e8:	9300      	str	r3, [sp, #0]
 80052ea:	0023      	movs	r3, r4
 80052ec:	47a8      	blx	r5
 80052ee:	1e03      	subs	r3, r0, #0
 80052f0:	d100      	bne.n	80052f4 <UG_DrawLine+0x6c>
 80052f2:	e125      	b.n	8005540 <UG_DrawLine+0x2b8>
   }

   dx = x2 - x1;
 80052f4:	1cbb      	adds	r3, r7, #2
 80052f6:	881a      	ldrh	r2, [r3, #0]
 80052f8:	1dbb      	adds	r3, r7, #6
 80052fa:	881b      	ldrh	r3, [r3, #0]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	b29a      	uxth	r2, r3
 8005300:	2114      	movs	r1, #20
 8005302:	187b      	adds	r3, r7, r1
 8005304:	801a      	strh	r2, [r3, #0]
   dy = y2 - y1;
 8005306:	003b      	movs	r3, r7
 8005308:	881a      	ldrh	r2, [r3, #0]
 800530a:	1d3b      	adds	r3, r7, #4
 800530c:	881b      	ldrh	r3, [r3, #0]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	b29a      	uxth	r2, r3
 8005312:	2012      	movs	r0, #18
 8005314:	183b      	adds	r3, r7, r0
 8005316:	801a      	strh	r2, [r3, #0]
   dxabs = (dx>0)?dx:-dx;
 8005318:	187b      	adds	r3, r7, r1
 800531a:	2200      	movs	r2, #0
 800531c:	5e9b      	ldrsh	r3, [r3, r2]
 800531e:	17da      	asrs	r2, r3, #31
 8005320:	189b      	adds	r3, r3, r2
 8005322:	4053      	eors	r3, r2
 8005324:	b29a      	uxth	r2, r3
 8005326:	2310      	movs	r3, #16
 8005328:	18fb      	adds	r3, r7, r3
 800532a:	801a      	strh	r2, [r3, #0]
   dyabs = (dy>0)?dy:-dy;
 800532c:	183b      	adds	r3, r7, r0
 800532e:	2200      	movs	r2, #0
 8005330:	5e9b      	ldrsh	r3, [r3, r2]
 8005332:	17da      	asrs	r2, r3, #31
 8005334:	189b      	adds	r3, r3, r2
 8005336:	4053      	eors	r3, r2
 8005338:	b29a      	uxth	r2, r3
 800533a:	230e      	movs	r3, #14
 800533c:	18fb      	adds	r3, r7, r3
 800533e:	801a      	strh	r2, [r3, #0]
   sgndx = (dx>0)?1:-1;
 8005340:	187b      	adds	r3, r7, r1
 8005342:	2200      	movs	r2, #0
 8005344:	5e9b      	ldrsh	r3, [r3, r2]
 8005346:	2b00      	cmp	r3, #0
 8005348:	dd01      	ble.n	800534e <UG_DrawLine+0xc6>
 800534a:	2201      	movs	r2, #1
 800534c:	e001      	b.n	8005352 <UG_DrawLine+0xca>
 800534e:	2301      	movs	r3, #1
 8005350:	425a      	negs	r2, r3
 8005352:	230c      	movs	r3, #12
 8005354:	18fb      	adds	r3, r7, r3
 8005356:	801a      	strh	r2, [r3, #0]
   sgndy = (dy>0)?1:-1;
 8005358:	2312      	movs	r3, #18
 800535a:	18fb      	adds	r3, r7, r3
 800535c:	2200      	movs	r2, #0
 800535e:	5e9b      	ldrsh	r3, [r3, r2]
 8005360:	2b00      	cmp	r3, #0
 8005362:	dd01      	ble.n	8005368 <UG_DrawLine+0xe0>
 8005364:	2201      	movs	r2, #1
 8005366:	e001      	b.n	800536c <UG_DrawLine+0xe4>
 8005368:	2301      	movs	r3, #1
 800536a:	425a      	negs	r2, r3
 800536c:	230a      	movs	r3, #10
 800536e:	18fb      	adds	r3, r7, r3
 8005370:	801a      	strh	r2, [r3, #0]
   x = dyabs >> 1;
 8005372:	231c      	movs	r3, #28
 8005374:	18fb      	adds	r3, r7, r3
 8005376:	250e      	movs	r5, #14
 8005378:	197a      	adds	r2, r7, r5
 800537a:	2100      	movs	r1, #0
 800537c:	5e52      	ldrsh	r2, [r2, r1]
 800537e:	1052      	asrs	r2, r2, #1
 8005380:	801a      	strh	r2, [r3, #0]
   y = dxabs >> 1;
 8005382:	231a      	movs	r3, #26
 8005384:	18fb      	adds	r3, r7, r3
 8005386:	2610      	movs	r6, #16
 8005388:	19ba      	adds	r2, r7, r6
 800538a:	2100      	movs	r1, #0
 800538c:	5e52      	ldrsh	r2, [r2, r1]
 800538e:	1052      	asrs	r2, r2, #1
 8005390:	801a      	strh	r2, [r3, #0]
   drawx = x1;
 8005392:	2018      	movs	r0, #24
 8005394:	183b      	adds	r3, r7, r0
 8005396:	1dba      	adds	r2, r7, #6
 8005398:	8812      	ldrh	r2, [r2, #0]
 800539a:	801a      	strh	r2, [r3, #0]
   drawy = y1;
 800539c:	2116      	movs	r1, #22
 800539e:	187b      	adds	r3, r7, r1
 80053a0:	1d3a      	adds	r2, r7, #4
 80053a2:	8812      	ldrh	r2, [r2, #0]
 80053a4:	801a      	strh	r2, [r3, #0]

   gui->device->pset(drawx, drawy,c);
 80053a6:	4b68      	ldr	r3, [pc, #416]	@ (8005548 <UG_DrawLine+0x2c0>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	685c      	ldr	r4, [r3, #4]
 80053ae:	2330      	movs	r3, #48	@ 0x30
 80053b0:	2208      	movs	r2, #8
 80053b2:	189b      	adds	r3, r3, r2
 80053b4:	19db      	adds	r3, r3, r7
 80053b6:	881a      	ldrh	r2, [r3, #0]
 80053b8:	187b      	adds	r3, r7, r1
 80053ba:	2100      	movs	r1, #0
 80053bc:	5e59      	ldrsh	r1, [r3, r1]
 80053be:	183b      	adds	r3, r7, r0
 80053c0:	2000      	movs	r0, #0
 80053c2:	5e1b      	ldrsh	r3, [r3, r0]
 80053c4:	0018      	movs	r0, r3
 80053c6:	47a0      	blx	r4

   if( dxabs >= dyabs )
 80053c8:	19ba      	adds	r2, r7, r6
 80053ca:	197b      	adds	r3, r7, r5
 80053cc:	2100      	movs	r1, #0
 80053ce:	5e52      	ldrsh	r2, [r2, r1]
 80053d0:	2100      	movs	r1, #0
 80053d2:	5e5b      	ldrsh	r3, [r3, r1]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	db59      	blt.n	800548c <UG_DrawLine+0x204>
   {
      for( n=0; n<dxabs; n++ )
 80053d8:	231e      	movs	r3, #30
 80053da:	18fb      	adds	r3, r7, r3
 80053dc:	2200      	movs	r2, #0
 80053de:	801a      	strh	r2, [r3, #0]
 80053e0:	e049      	b.n	8005476 <UG_DrawLine+0x1ee>
      {
         y += dyabs;
 80053e2:	211a      	movs	r1, #26
 80053e4:	187b      	adds	r3, r7, r1
 80053e6:	881a      	ldrh	r2, [r3, #0]
 80053e8:	230e      	movs	r3, #14
 80053ea:	18fb      	adds	r3, r7, r3
 80053ec:	881b      	ldrh	r3, [r3, #0]
 80053ee:	18d3      	adds	r3, r2, r3
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	187b      	adds	r3, r7, r1
 80053f4:	801a      	strh	r2, [r3, #0]
         if( y >= dxabs )
 80053f6:	187a      	adds	r2, r7, r1
 80053f8:	2010      	movs	r0, #16
 80053fa:	183b      	adds	r3, r7, r0
 80053fc:	2400      	movs	r4, #0
 80053fe:	5f12      	ldrsh	r2, [r2, r4]
 8005400:	2400      	movs	r4, #0
 8005402:	5f1b      	ldrsh	r3, [r3, r4]
 8005404:	429a      	cmp	r2, r3
 8005406:	db11      	blt.n	800542c <UG_DrawLine+0x1a4>
         {
            y -= dxabs;
 8005408:	187b      	adds	r3, r7, r1
 800540a:	881a      	ldrh	r2, [r3, #0]
 800540c:	183b      	adds	r3, r7, r0
 800540e:	881b      	ldrh	r3, [r3, #0]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	b29a      	uxth	r2, r3
 8005414:	187b      	adds	r3, r7, r1
 8005416:	801a      	strh	r2, [r3, #0]
            drawy += sgndy;
 8005418:	2116      	movs	r1, #22
 800541a:	187b      	adds	r3, r7, r1
 800541c:	881a      	ldrh	r2, [r3, #0]
 800541e:	230a      	movs	r3, #10
 8005420:	18fb      	adds	r3, r7, r3
 8005422:	881b      	ldrh	r3, [r3, #0]
 8005424:	18d3      	adds	r3, r2, r3
 8005426:	b29a      	uxth	r2, r3
 8005428:	187b      	adds	r3, r7, r1
 800542a:	801a      	strh	r2, [r3, #0]
         }
         drawx += sgndx;
 800542c:	2018      	movs	r0, #24
 800542e:	183b      	adds	r3, r7, r0
 8005430:	881a      	ldrh	r2, [r3, #0]
 8005432:	230c      	movs	r3, #12
 8005434:	18fb      	adds	r3, r7, r3
 8005436:	881b      	ldrh	r3, [r3, #0]
 8005438:	18d3      	adds	r3, r2, r3
 800543a:	b29a      	uxth	r2, r3
 800543c:	183b      	adds	r3, r7, r0
 800543e:	801a      	strh	r2, [r3, #0]
         gui->device->pset(drawx, drawy,c);
 8005440:	4b41      	ldr	r3, [pc, #260]	@ (8005548 <UG_DrawLine+0x2c0>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	685c      	ldr	r4, [r3, #4]
 8005448:	2330      	movs	r3, #48	@ 0x30
 800544a:	2208      	movs	r2, #8
 800544c:	189b      	adds	r3, r3, r2
 800544e:	19db      	adds	r3, r3, r7
 8005450:	881a      	ldrh	r2, [r3, #0]
 8005452:	2316      	movs	r3, #22
 8005454:	18fb      	adds	r3, r7, r3
 8005456:	2100      	movs	r1, #0
 8005458:	5e59      	ldrsh	r1, [r3, r1]
 800545a:	183b      	adds	r3, r7, r0
 800545c:	2000      	movs	r0, #0
 800545e:	5e1b      	ldrsh	r3, [r3, r0]
 8005460:	0018      	movs	r0, r3
 8005462:	47a0      	blx	r4
      for( n=0; n<dxabs; n++ )
 8005464:	211e      	movs	r1, #30
 8005466:	187b      	adds	r3, r7, r1
 8005468:	2200      	movs	r2, #0
 800546a:	5e9b      	ldrsh	r3, [r3, r2]
 800546c:	b29b      	uxth	r3, r3
 800546e:	3301      	adds	r3, #1
 8005470:	b29a      	uxth	r2, r3
 8005472:	187b      	adds	r3, r7, r1
 8005474:	801a      	strh	r2, [r3, #0]
 8005476:	231e      	movs	r3, #30
 8005478:	18fa      	adds	r2, r7, r3
 800547a:	2310      	movs	r3, #16
 800547c:	18fb      	adds	r3, r7, r3
 800547e:	2100      	movs	r1, #0
 8005480:	5e52      	ldrsh	r2, [r2, r1]
 8005482:	2100      	movs	r1, #0
 8005484:	5e5b      	ldrsh	r3, [r3, r1]
 8005486:	429a      	cmp	r2, r3
 8005488:	dbab      	blt.n	80053e2 <UG_DrawLine+0x15a>
 800548a:	e05a      	b.n	8005542 <UG_DrawLine+0x2ba>
      }
   }
   else
   {
      for( n=0; n<dyabs; n++ )
 800548c:	231e      	movs	r3, #30
 800548e:	18fb      	adds	r3, r7, r3
 8005490:	2200      	movs	r2, #0
 8005492:	801a      	strh	r2, [r3, #0]
 8005494:	e049      	b.n	800552a <UG_DrawLine+0x2a2>
      {
         x += dxabs;
 8005496:	211c      	movs	r1, #28
 8005498:	187b      	adds	r3, r7, r1
 800549a:	881a      	ldrh	r2, [r3, #0]
 800549c:	2310      	movs	r3, #16
 800549e:	18fb      	adds	r3, r7, r3
 80054a0:	881b      	ldrh	r3, [r3, #0]
 80054a2:	18d3      	adds	r3, r2, r3
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	187b      	adds	r3, r7, r1
 80054a8:	801a      	strh	r2, [r3, #0]
         if( x >= dyabs )
 80054aa:	187a      	adds	r2, r7, r1
 80054ac:	200e      	movs	r0, #14
 80054ae:	183b      	adds	r3, r7, r0
 80054b0:	2400      	movs	r4, #0
 80054b2:	5f12      	ldrsh	r2, [r2, r4]
 80054b4:	2400      	movs	r4, #0
 80054b6:	5f1b      	ldrsh	r3, [r3, r4]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	db11      	blt.n	80054e0 <UG_DrawLine+0x258>
         {
            x -= dyabs;
 80054bc:	187b      	adds	r3, r7, r1
 80054be:	881a      	ldrh	r2, [r3, #0]
 80054c0:	183b      	adds	r3, r7, r0
 80054c2:	881b      	ldrh	r3, [r3, #0]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	187b      	adds	r3, r7, r1
 80054ca:	801a      	strh	r2, [r3, #0]
            drawx += sgndx;
 80054cc:	2118      	movs	r1, #24
 80054ce:	187b      	adds	r3, r7, r1
 80054d0:	881a      	ldrh	r2, [r3, #0]
 80054d2:	230c      	movs	r3, #12
 80054d4:	18fb      	adds	r3, r7, r3
 80054d6:	881b      	ldrh	r3, [r3, #0]
 80054d8:	18d3      	adds	r3, r2, r3
 80054da:	b29a      	uxth	r2, r3
 80054dc:	187b      	adds	r3, r7, r1
 80054de:	801a      	strh	r2, [r3, #0]
         }
         drawy += sgndy;
 80054e0:	2116      	movs	r1, #22
 80054e2:	187b      	adds	r3, r7, r1
 80054e4:	881a      	ldrh	r2, [r3, #0]
 80054e6:	230a      	movs	r3, #10
 80054e8:	18fb      	adds	r3, r7, r3
 80054ea:	881b      	ldrh	r3, [r3, #0]
 80054ec:	18d3      	adds	r3, r2, r3
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	187b      	adds	r3, r7, r1
 80054f2:	801a      	strh	r2, [r3, #0]
         gui->device->pset(drawx, drawy,c);
 80054f4:	4b14      	ldr	r3, [pc, #80]	@ (8005548 <UG_DrawLine+0x2c0>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	685c      	ldr	r4, [r3, #4]
 80054fc:	2330      	movs	r3, #48	@ 0x30
 80054fe:	2208      	movs	r2, #8
 8005500:	189b      	adds	r3, r3, r2
 8005502:	19db      	adds	r3, r3, r7
 8005504:	881a      	ldrh	r2, [r3, #0]
 8005506:	187b      	adds	r3, r7, r1
 8005508:	2100      	movs	r1, #0
 800550a:	5e59      	ldrsh	r1, [r3, r1]
 800550c:	2318      	movs	r3, #24
 800550e:	18fb      	adds	r3, r7, r3
 8005510:	2000      	movs	r0, #0
 8005512:	5e1b      	ldrsh	r3, [r3, r0]
 8005514:	0018      	movs	r0, r3
 8005516:	47a0      	blx	r4
      for( n=0; n<dyabs; n++ )
 8005518:	211e      	movs	r1, #30
 800551a:	187b      	adds	r3, r7, r1
 800551c:	2200      	movs	r2, #0
 800551e:	5e9b      	ldrsh	r3, [r3, r2]
 8005520:	b29b      	uxth	r3, r3
 8005522:	3301      	adds	r3, #1
 8005524:	b29a      	uxth	r2, r3
 8005526:	187b      	adds	r3, r7, r1
 8005528:	801a      	strh	r2, [r3, #0]
 800552a:	231e      	movs	r3, #30
 800552c:	18fa      	adds	r2, r7, r3
 800552e:	230e      	movs	r3, #14
 8005530:	18fb      	adds	r3, r7, r3
 8005532:	2100      	movs	r1, #0
 8005534:	5e52      	ldrsh	r2, [r2, r1]
 8005536:	2100      	movs	r1, #0
 8005538:	5e5b      	ldrsh	r3, [r3, r1]
 800553a:	429a      	cmp	r2, r3
 800553c:	dbab      	blt.n	8005496 <UG_DrawLine+0x20e>
 800553e:	e000      	b.n	8005542 <UG_DrawLine+0x2ba>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8005540:	46c0      	nop			@ (mov r8, r8)
      }
   }  
}
 8005542:	46bd      	mov	sp, r7
 8005544:	b009      	add	sp, #36	@ 0x24
 8005546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005548:	200002e4 	.word	0x200002e4

0800554c <UG_PutString>:
    UG_DrawLine(a, y, b + 1, y, c);
  }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 800554c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800554e:	b087      	sub	sp, #28
 8005550:	af02      	add	r7, sp, #8
 8005552:	603a      	str	r2, [r7, #0]
 8005554:	1dbb      	adds	r3, r7, #6
 8005556:	1c02      	adds	r2, r0, #0
 8005558:	801a      	strh	r2, [r3, #0]
 800555a:	1d3b      	adds	r3, r7, #4
 800555c:	1c0a      	adds	r2, r1, #0
 800555e:	801a      	strh	r2, [r3, #0]
   UG_S16 xp,yp,cw;
   UG_CHAR chr;

   xp=x;
 8005560:	230e      	movs	r3, #14
 8005562:	18fb      	adds	r3, r7, r3
 8005564:	1dba      	adds	r2, r7, #6
 8005566:	8812      	ldrh	r2, [r2, #0]
 8005568:	801a      	strh	r2, [r3, #0]
   yp=y;
 800556a:	230c      	movs	r3, #12
 800556c:	18fb      	adds	r3, r7, r3
 800556e:	1d3a      	adds	r2, r7, #4
 8005570:	8812      	ldrh	r2, [r2, #0]
 8005572:	801a      	strh	r2, [r3, #0]

   _UG_FontSelect(gui->font);
 8005574:	4b54      	ldr	r3, [pc, #336]	@ (80056c8 <UG_PutString+0x17c>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800557a:	0018      	movs	r0, r3
 800557c:	f000 faf0 	bl	8005b60 <_UG_FontSelect>
   while ( *str != 0 )
 8005580:	e084      	b.n	800568c <UG_PutString+0x140>
   {
      #ifdef UGUI_USE_UTF8
      if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8005582:	4b51      	ldr	r3, [pc, #324]	@ (80056c8 <UG_PutString+0x17c>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	222d      	movs	r2, #45	@ 0x2d
 8005588:	5c9b      	ldrb	r3, [r3, r2]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d108      	bne.n	80055a0 <UG_PutString+0x54>
         chr = _UG_DecodeUTF8(&str);
 800558e:	230a      	movs	r3, #10
 8005590:	18fc      	adds	r4, r7, r3
 8005592:	003b      	movs	r3, r7
 8005594:	0018      	movs	r0, r3
 8005596:	f000 f8e5 	bl	8005764 <_UG_DecodeUTF8>
 800559a:	0003      	movs	r3, r0
 800559c:	8023      	strh	r3, [r4, #0]
 800559e:	e006      	b.n	80055ae <UG_PutString+0x62>
      }
      else{
         chr = *str++;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	1c5a      	adds	r2, r3, #1
 80055a4:	603a      	str	r2, [r7, #0]
 80055a6:	781a      	ldrb	r2, [r3, #0]
 80055a8:	230a      	movs	r3, #10
 80055aa:	18fb      	adds	r3, r7, r3
 80055ac:	801a      	strh	r2, [r3, #0]
      }
      #else
      chr = *str++;
      #endif

      if ( chr == '\n' )
 80055ae:	230a      	movs	r3, #10
 80055b0:	18fb      	adds	r3, r7, r3
 80055b2:	881b      	ldrh	r3, [r3, #0]
 80055b4:	2b0a      	cmp	r3, #10
 80055b6:	d107      	bne.n	80055c8 <UG_PutString+0x7c>
      {
         xp = gui->device->x_dim;
 80055b8:	4b43      	ldr	r3, [pc, #268]	@ (80056c8 <UG_PutString+0x17c>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	230e      	movs	r3, #14
 80055c0:	18fb      	adds	r3, r7, r3
 80055c2:	8812      	ldrh	r2, [r2, #0]
 80055c4:	801a      	strh	r2, [r3, #0]
         continue;
 80055c6:	e061      	b.n	800568c <UG_PutString+0x140>
      }
      cw = _UG_GetCharData(chr,NULL);
 80055c8:	2508      	movs	r5, #8
 80055ca:	197c      	adds	r4, r7, r5
 80055cc:	230a      	movs	r3, #10
 80055ce:	18fb      	adds	r3, r7, r3
 80055d0:	881b      	ldrh	r3, [r3, #0]
 80055d2:	2100      	movs	r1, #0
 80055d4:	0018      	movs	r0, r3
 80055d6:	f000 f973 	bl	80058c0 <_UG_GetCharData>
 80055da:	0003      	movs	r3, r0
 80055dc:	8023      	strh	r3, [r4, #0]
      if(cw==-1) continue;
 80055de:	0028      	movs	r0, r5
 80055e0:	183b      	adds	r3, r7, r0
 80055e2:	2200      	movs	r2, #0
 80055e4:	5e9b      	ldrsh	r3, [r3, r2]
 80055e6:	3301      	adds	r3, #1
 80055e8:	d04f      	beq.n	800568a <UG_PutString+0x13e>
      if ( xp + cw > gui->device->x_dim - 1 )
 80055ea:	4b37      	ldr	r3, [pc, #220]	@ (80056c8 <UG_PutString+0x17c>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2200      	movs	r2, #0
 80055f2:	5e9b      	ldrsh	r3, [r3, r2]
 80055f4:	0019      	movs	r1, r3
 80055f6:	240e      	movs	r4, #14
 80055f8:	193b      	adds	r3, r7, r4
 80055fa:	2200      	movs	r2, #0
 80055fc:	5e9a      	ldrsh	r2, [r3, r2]
 80055fe:	183b      	adds	r3, r7, r0
 8005600:	2000      	movs	r0, #0
 8005602:	5e1b      	ldrsh	r3, [r3, r0]
 8005604:	18d3      	adds	r3, r2, r3
 8005606:	4299      	cmp	r1, r3
 8005608:	dc16      	bgt.n	8005638 <UG_PutString+0xec>
      {
         xp = x;
 800560a:	193b      	adds	r3, r7, r4
 800560c:	1dba      	adds	r2, r7, #6
 800560e:	8812      	ldrh	r2, [r2, #0]
 8005610:	801a      	strh	r2, [r3, #0]
         yp +=  gui->currentFont.char_height+gui->char_v_space;
 8005612:	4b2d      	ldr	r3, [pc, #180]	@ (80056c8 <UG_PutString+0x17c>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	222f      	movs	r2, #47	@ 0x2f
 8005618:	5c9b      	ldrb	r3, [r3, r2]
 800561a:	b21a      	sxth	r2, r3
 800561c:	4b2a      	ldr	r3, [pc, #168]	@ (80056c8 <UG_PutString+0x17c>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	214a      	movs	r1, #74	@ 0x4a
 8005622:	565b      	ldrsb	r3, [r3, r1]
 8005624:	18d3      	adds	r3, r2, r3
 8005626:	b21b      	sxth	r3, r3
 8005628:	b29a      	uxth	r2, r3
 800562a:	210c      	movs	r1, #12
 800562c:	187b      	adds	r3, r7, r1
 800562e:	881b      	ldrh	r3, [r3, #0]
 8005630:	18d3      	adds	r3, r2, r3
 8005632:	b29a      	uxth	r2, r3
 8005634:	187b      	adds	r3, r7, r1
 8005636:	801a      	strh	r2, [r3, #0]
      }

      _UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 8005638:	4b23      	ldr	r3, [pc, #140]	@ (80056c8 <UG_PutString+0x17c>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	224c      	movs	r2, #76	@ 0x4c
 800563e:	5a9d      	ldrh	r5, [r3, r2]
 8005640:	4b21      	ldr	r3, [pc, #132]	@ (80056c8 <UG_PutString+0x17c>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	224e      	movs	r2, #78	@ 0x4e
 8005646:	5a9b      	ldrh	r3, [r3, r2]
 8005648:	220c      	movs	r2, #12
 800564a:	18ba      	adds	r2, r7, r2
 800564c:	2400      	movs	r4, #0
 800564e:	5f14      	ldrsh	r4, [r2, r4]
 8005650:	260e      	movs	r6, #14
 8005652:	19ba      	adds	r2, r7, r6
 8005654:	2100      	movs	r1, #0
 8005656:	5e51      	ldrsh	r1, [r2, r1]
 8005658:	220a      	movs	r2, #10
 800565a:	18ba      	adds	r2, r7, r2
 800565c:	8810      	ldrh	r0, [r2, #0]
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	002b      	movs	r3, r5
 8005662:	0022      	movs	r2, r4
 8005664:	f000 fb00 	bl	8005c68 <_UG_PutChar>

      xp += cw + gui->char_h_space;
 8005668:	4b17      	ldr	r3, [pc, #92]	@ (80056c8 <UG_PutString+0x17c>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2249      	movs	r2, #73	@ 0x49
 800566e:	569b      	ldrsb	r3, [r3, r2]
 8005670:	b29a      	uxth	r2, r3
 8005672:	2308      	movs	r3, #8
 8005674:	18fb      	adds	r3, r7, r3
 8005676:	881b      	ldrh	r3, [r3, #0]
 8005678:	18d3      	adds	r3, r2, r3
 800567a:	b29a      	uxth	r2, r3
 800567c:	19bb      	adds	r3, r7, r6
 800567e:	881b      	ldrh	r3, [r3, #0]
 8005680:	18d3      	adds	r3, r2, r3
 8005682:	b29a      	uxth	r2, r3
 8005684:	19bb      	adds	r3, r7, r6
 8005686:	801a      	strh	r2, [r3, #0]
 8005688:	e000      	b.n	800568c <UG_PutString+0x140>
      if(cw==-1) continue;
 800568a:	46c0      	nop			@ (mov r8, r8)
   while ( *str != 0 )
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d000      	beq.n	8005696 <UG_PutString+0x14a>
 8005694:	e775      	b.n	8005582 <UG_PutString+0x36>
   }
   if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 8005696:	4b0c      	ldr	r3, [pc, #48]	@ (80056c8 <UG_PutString+0x17c>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2268      	movs	r2, #104	@ 0x68
 800569c:	5c9b      	ldrb	r3, [r3, r2]
 800569e:	001a      	movs	r2, r3
 80056a0:	2302      	movs	r3, #2
 80056a2:	4013      	ands	r3, r2
 80056a4:	d00c      	beq.n	80056c0 <UG_PutString+0x174>
     ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 80056a6:	4b08      	ldr	r3, [pc, #32]	@ (80056c8 <UG_PutString+0x17c>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056ac:	001c      	movs	r4, r3
 80056ae:	2301      	movs	r3, #1
 80056b0:	425b      	negs	r3, r3
 80056b2:	2201      	movs	r2, #1
 80056b4:	4252      	negs	r2, r2
 80056b6:	2101      	movs	r1, #1
 80056b8:	4249      	negs	r1, r1
 80056ba:	2001      	movs	r0, #1
 80056bc:	4240      	negs	r0, r0
 80056be:	47a0      	blx	r4
}
 80056c0:	46c0      	nop			@ (mov r8, r8)
 80056c2:	46bd      	mov	sp, r7
 80056c4:	b005      	add	sp, #20
 80056c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056c8:	200002e4 	.word	0x200002e4

080056cc <UG_SetForecolor>:
   gui->console.back_color = c;
}
#endif

void UG_SetForecolor( UG_COLOR c )
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	0002      	movs	r2, r0
 80056d4:	1dbb      	adds	r3, r7, #6
 80056d6:	801a      	strh	r2, [r3, #0]
   gui->fore_color = c;
 80056d8:	4b04      	ldr	r3, [pc, #16]	@ (80056ec <UG_SetForecolor+0x20>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	1dba      	adds	r2, r7, #6
 80056de:	214c      	movs	r1, #76	@ 0x4c
 80056e0:	8812      	ldrh	r2, [r2, #0]
 80056e2:	525a      	strh	r2, [r3, r1]
}
 80056e4:	46c0      	nop			@ (mov r8, r8)
 80056e6:	46bd      	mov	sp, r7
 80056e8:	b002      	add	sp, #8
 80056ea:	bd80      	pop	{r7, pc}
 80056ec:	200002e4 	.word	0x200002e4

080056f0 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	0002      	movs	r2, r0
 80056f8:	1dbb      	adds	r3, r7, #6
 80056fa:	801a      	strh	r2, [r3, #0]
   gui->back_color = c;
 80056fc:	4b04      	ldr	r3, [pc, #16]	@ (8005710 <UG_SetBackcolor+0x20>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	1dba      	adds	r2, r7, #6
 8005702:	214e      	movs	r1, #78	@ 0x4e
 8005704:	8812      	ldrh	r2, [r2, #0]
 8005706:	525a      	strh	r2, [r3, r1]
}
 8005708:	46c0      	nop			@ (mov r8, r8)
 800570a:	46bd      	mov	sp, r7
 800570c:	b002      	add	sp, #8
 800570e:	bd80      	pop	{r7, pc}
 8005710:	200002e4 	.word	0x200002e4

08005714 <UG_FontSetHSpace>:
{
   return gui->device->y_dim;
}

void UG_FontSetHSpace( UG_U16 s )
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	0002      	movs	r2, r0
 800571c:	1dbb      	adds	r3, r7, #6
 800571e:	801a      	strh	r2, [r3, #0]
   gui->char_h_space = s;
 8005720:	4b05      	ldr	r3, [pc, #20]	@ (8005738 <UG_FontSetHSpace+0x24>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	1dba      	adds	r2, r7, #6
 8005726:	8812      	ldrh	r2, [r2, #0]
 8005728:	b251      	sxtb	r1, r2
 800572a:	2249      	movs	r2, #73	@ 0x49
 800572c:	5499      	strb	r1, [r3, r2]
}
 800572e:	46c0      	nop			@ (mov r8, r8)
 8005730:	46bd      	mov	sp, r7
 8005732:	b002      	add	sp, #8
 8005734:	bd80      	pop	{r7, pc}
 8005736:	46c0      	nop			@ (mov r8, r8)
 8005738:	200002e4 	.word	0x200002e4

0800573c <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	0002      	movs	r2, r0
 8005744:	1dbb      	adds	r3, r7, #6
 8005746:	801a      	strh	r2, [r3, #0]
   gui->char_v_space = s;
 8005748:	4b05      	ldr	r3, [pc, #20]	@ (8005760 <UG_FontSetVSpace+0x24>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	1dba      	adds	r2, r7, #6
 800574e:	8812      	ldrh	r2, [r2, #0]
 8005750:	b251      	sxtb	r1, r2
 8005752:	224a      	movs	r2, #74	@ 0x4a
 8005754:	5499      	strb	r1, [r3, r2]
}
 8005756:	46c0      	nop			@ (mov r8, r8)
 8005758:	46bd      	mov	sp, r7
 800575a:	b002      	add	sp, #8
 800575c:	bd80      	pop	{r7, pc}
 800575e:	46c0      	nop			@ (mov r8, r8)
 8005760:	200002e4 	.word	0x200002e4

08005764 <_UG_DecodeUTF8>:
 *
 * Based on https://github.com/olikraus/u8g2/blob/master/csrc/u8x8_8x8.c
 *
 */
 #ifdef UGUI_USE_UTF8
UG_CHAR _UG_DecodeUTF8(char **str) {
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]

  char c=**str;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	210f      	movs	r1, #15
 8005772:	187b      	adds	r3, r7, r1
 8005774:	7812      	ldrb	r2, [r2, #0]
 8005776:	701a      	strb	r2, [r3, #0]

  if ( c < 0x80 )                 // Fast detection for simple ASCII
 8005778:	187b      	adds	r3, r7, r1
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	b25b      	sxtb	r3, r3
 800577e:	2b00      	cmp	r3, #0
 8005780:	db08      	blt.n	8005794 <_UG_DecodeUTF8+0x30>
  {
    *str = *str+1;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	1c5a      	adds	r2, r3, #1
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	601a      	str	r2, [r3, #0]
    return c;
 800578c:	187b      	adds	r3, r7, r1
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	b29b      	uxth	r3, r3
 8005792:	e091      	b.n	80058b8 <_UG_DecodeUTF8+0x154>
  }

  UG_U8 bytes_left=0;
 8005794:	230e      	movs	r3, #14
 8005796:	18fb      	adds	r3, r7, r3
 8005798:	2200      	movs	r2, #0
 800579a:	701a      	strb	r2, [r3, #0]
  UG_CHAR encoding=0;
 800579c:	230c      	movs	r3, #12
 800579e:	18fb      	adds	r3, r7, r3
 80057a0:	2200      	movs	r2, #0
 80057a2:	801a      	strh	r2, [r3, #0]

  while(**str)
 80057a4:	e07d      	b.n	80058a2 <_UG_DecodeUTF8+0x13e>
  {
    c=**str;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	210f      	movs	r1, #15
 80057ac:	187b      	adds	r3, r7, r1
 80057ae:	7812      	ldrb	r2, [r2, #0]
 80057b0:	701a      	strb	r2, [r3, #0]
    *str = *str+1;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	1c5a      	adds	r2, r3, #1
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	601a      	str	r2, [r3, #0]
    if ( bytes_left == 0 )
 80057bc:	220e      	movs	r2, #14
 80057be:	18bb      	adds	r3, r7, r2
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d14f      	bne.n	8005866 <_UG_DecodeUTF8+0x102>
    {
      if ( c < 0xe0 )             // 2 byte sequence
 80057c6:	187b      	adds	r3, r7, r1
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	2bdf      	cmp	r3, #223	@ 0xdf
 80057cc:	d809      	bhi.n	80057e2 <_UG_DecodeUTF8+0x7e>
      {
        bytes_left = 1;
 80057ce:	18bb      	adds	r3, r7, r2
 80057d0:	2201      	movs	r2, #1
 80057d2:	701a      	strb	r2, [r3, #0]
        c &= 0x01f;
 80057d4:	187b      	adds	r3, r7, r1
 80057d6:	187a      	adds	r2, r7, r1
 80057d8:	7812      	ldrb	r2, [r2, #0]
 80057da:	211f      	movs	r1, #31
 80057dc:	400a      	ands	r2, r1
 80057de:	701a      	strb	r2, [r3, #0]
 80057e0:	e03a      	b.n	8005858 <_UG_DecodeUTF8+0xf4>
      }
      else if ( c < 0xf0 )        // 3 byte sequence
 80057e2:	210f      	movs	r1, #15
 80057e4:	187b      	adds	r3, r7, r1
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	2bef      	cmp	r3, #239	@ 0xef
 80057ea:	d80a      	bhi.n	8005802 <_UG_DecodeUTF8+0x9e>
      {
        bytes_left = 2;
 80057ec:	230e      	movs	r3, #14
 80057ee:	18fb      	adds	r3, r7, r3
 80057f0:	2202      	movs	r2, #2
 80057f2:	701a      	strb	r2, [r3, #0]
        c &= 15;
 80057f4:	187b      	adds	r3, r7, r1
 80057f6:	187a      	adds	r2, r7, r1
 80057f8:	7812      	ldrb	r2, [r2, #0]
 80057fa:	210f      	movs	r1, #15
 80057fc:	400a      	ands	r2, r1
 80057fe:	701a      	strb	r2, [r3, #0]
 8005800:	e02a      	b.n	8005858 <_UG_DecodeUTF8+0xf4>
      }
      else if ( c < 0xf8 )        // 4 byte sequence
 8005802:	210f      	movs	r1, #15
 8005804:	187b      	adds	r3, r7, r1
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	2bf7      	cmp	r3, #247	@ 0xf7
 800580a:	d80a      	bhi.n	8005822 <_UG_DecodeUTF8+0xbe>
      {
        bytes_left = 3;
 800580c:	230e      	movs	r3, #14
 800580e:	18fb      	adds	r3, r7, r3
 8005810:	2203      	movs	r2, #3
 8005812:	701a      	strb	r2, [r3, #0]
        c &= 7;
 8005814:	187b      	adds	r3, r7, r1
 8005816:	187a      	adds	r2, r7, r1
 8005818:	7812      	ldrb	r2, [r2, #0]
 800581a:	2107      	movs	r1, #7
 800581c:	400a      	ands	r2, r1
 800581e:	701a      	strb	r2, [r3, #0]
 8005820:	e01a      	b.n	8005858 <_UG_DecodeUTF8+0xf4>
      }
      else if ( c < 0xfc )        // 5 byte sequence
 8005822:	210f      	movs	r1, #15
 8005824:	187b      	adds	r3, r7, r1
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	2bfb      	cmp	r3, #251	@ 0xfb
 800582a:	d80a      	bhi.n	8005842 <_UG_DecodeUTF8+0xde>
      {
        bytes_left = 4;
 800582c:	230e      	movs	r3, #14
 800582e:	18fb      	adds	r3, r7, r3
 8005830:	2204      	movs	r2, #4
 8005832:	701a      	strb	r2, [r3, #0]
        c &= 3;
 8005834:	187b      	adds	r3, r7, r1
 8005836:	187a      	adds	r2, r7, r1
 8005838:	7812      	ldrb	r2, [r2, #0]
 800583a:	2103      	movs	r1, #3
 800583c:	400a      	ands	r2, r1
 800583e:	701a      	strb	r2, [r3, #0]
 8005840:	e00a      	b.n	8005858 <_UG_DecodeUTF8+0xf4>
      }
      else                        // 6 byte sequence
      {
        bytes_left = 5;
 8005842:	230e      	movs	r3, #14
 8005844:	18fb      	adds	r3, r7, r3
 8005846:	2205      	movs	r2, #5
 8005848:	701a      	strb	r2, [r3, #0]
        c &= 1;
 800584a:	220f      	movs	r2, #15
 800584c:	18bb      	adds	r3, r7, r2
 800584e:	18ba      	adds	r2, r7, r2
 8005850:	7812      	ldrb	r2, [r2, #0]
 8005852:	2101      	movs	r1, #1
 8005854:	400a      	ands	r2, r1
 8005856:	701a      	strb	r2, [r3, #0]
      }
      encoding = c;
 8005858:	230c      	movs	r3, #12
 800585a:	18fb      	adds	r3, r7, r3
 800585c:	220f      	movs	r2, #15
 800585e:	18ba      	adds	r2, r7, r2
 8005860:	7812      	ldrb	r2, [r2, #0]
 8005862:	801a      	strh	r2, [r3, #0]
 8005864:	e01d      	b.n	80058a2 <_UG_DecodeUTF8+0x13e>
    }
    else
    {
      encoding<<=6;
 8005866:	210c      	movs	r1, #12
 8005868:	187b      	adds	r3, r7, r1
 800586a:	187a      	adds	r2, r7, r1
 800586c:	8812      	ldrh	r2, [r2, #0]
 800586e:	0192      	lsls	r2, r2, #6
 8005870:	801a      	strh	r2, [r3, #0]
      encoding |= (c & 0x3F);
 8005872:	230f      	movs	r3, #15
 8005874:	18fb      	adds	r3, r7, r3
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	b21b      	sxth	r3, r3
 800587a:	223f      	movs	r2, #63	@ 0x3f
 800587c:	4013      	ands	r3, r2
 800587e:	b21a      	sxth	r2, r3
 8005880:	187b      	adds	r3, r7, r1
 8005882:	2000      	movs	r0, #0
 8005884:	5e1b      	ldrsh	r3, [r3, r0]
 8005886:	4313      	orrs	r3, r2
 8005888:	b21a      	sxth	r2, r3
 800588a:	187b      	adds	r3, r7, r1
 800588c:	801a      	strh	r2, [r3, #0]
      if ( --bytes_left == 0 )
 800588e:	210e      	movs	r1, #14
 8005890:	187b      	adds	r3, r7, r1
 8005892:	187a      	adds	r2, r7, r1
 8005894:	7812      	ldrb	r2, [r2, #0]
 8005896:	3a01      	subs	r2, #1
 8005898:	701a      	strb	r2, [r3, #0]
 800589a:	187b      	adds	r3, r7, r1
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d006      	beq.n	80058b0 <_UG_DecodeUTF8+0x14c>
  while(**str)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d000      	beq.n	80058ae <_UG_DecodeUTF8+0x14a>
 80058ac:	e77b      	b.n	80057a6 <_UG_DecodeUTF8+0x42>
 80058ae:	e000      	b.n	80058b2 <_UG_DecodeUTF8+0x14e>
        break;
 80058b0:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return encoding;
 80058b2:	230c      	movs	r3, #12
 80058b4:	18fb      	adds	r3, r7, r3
 80058b6:	881b      	ldrh	r3, [r3, #0]
}
 80058b8:	0018      	movs	r0, r3
 80058ba:	46bd      	mov	sp, r7
 80058bc:	b004      	add	sp, #16
 80058be:	bd80      	pop	{r7, pc}

080058c0 <_UG_GetCharData>:
#endif

/*
 *  Load char bitmap address into p, return the font width
 */
UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p){
 80058c0:	b5b0      	push	{r4, r5, r7, lr}
 80058c2:	b086      	sub	sp, #24
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	0002      	movs	r2, r0
 80058c8:	6039      	str	r1, [r7, #0]
 80058ca:	1dbb      	adds	r3, r7, #6
 80058cc:	801a      	strh	r2, [r3, #0]
  static UG_CHAR last_encoding;
  static UG_S16 last_width;
  static const UG_U8 * last_p;
  static UG_FONT * last_font;
  UG_U16 start=0;
 80058ce:	2316      	movs	r3, #22
 80058d0:	18fb      	adds	r3, r7, r3
 80058d2:	2200      	movs	r2, #0
 80058d4:	801a      	strh	r2, [r3, #0]
  UG_U16 skip=0;
 80058d6:	2314      	movs	r3, #20
 80058d8:	18fb      	adds	r3, r7, r3
 80058da:	2200      	movs	r2, #0
 80058dc:	801a      	strh	r2, [r3, #0]
  UG_U16 t=0;
 80058de:	2312      	movs	r3, #18
 80058e0:	18fb      	adds	r3, r7, r3
 80058e2:	2200      	movs	r2, #0
 80058e4:	801a      	strh	r2, [r3, #0]
  UG_U8 range=0;
 80058e6:	2311      	movs	r3, #17
 80058e8:	18fb      	adds	r3, r7, r3
 80058ea:	2200      	movs	r2, #0
 80058ec:	701a      	strb	r2, [r3, #0]
  UG_U8 found=0;
 80058ee:	2310      	movs	r3, #16
 80058f0:	18fb      	adds	r3, r7, r3
 80058f2:	2200      	movs	r2, #0
 80058f4:	701a      	strb	r2, [r3, #0]

  if( gui->currentFont.font==last_font && encoding==last_encoding){       // If called with the same arguments, return cached data
 80058f6:	4b94      	ldr	r3, [pc, #592]	@ (8005b48 <_UG_GetCharData+0x288>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058fc:	4b93      	ldr	r3, [pc, #588]	@ (8005b4c <_UG_GetCharData+0x28c>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	429a      	cmp	r2, r3
 8005902:	d110      	bne.n	8005926 <_UG_GetCharData+0x66>
 8005904:	4b92      	ldr	r3, [pc, #584]	@ (8005b50 <_UG_GetCharData+0x290>)
 8005906:	881b      	ldrh	r3, [r3, #0]
 8005908:	1dba      	adds	r2, r7, #6
 800590a:	8812      	ldrh	r2, [r2, #0]
 800590c:	429a      	cmp	r2, r3
 800590e:	d10a      	bne.n	8005926 <_UG_GetCharData+0x66>
    if(p){
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d003      	beq.n	800591e <_UG_GetCharData+0x5e>
      *p=last_p;                                                    // Load char bitmap address
 8005916:	4b8f      	ldr	r3, [pc, #572]	@ (8005b54 <_UG_GetCharData+0x294>)
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	601a      	str	r2, [r3, #0]
    }
    return last_width;
 800591e:	4b8e      	ldr	r3, [pc, #568]	@ (8005b58 <_UG_GetCharData+0x298>)
 8005920:	2200      	movs	r2, #0
 8005922:	5e9b      	ldrsh	r3, [r3, r2]
 8005924:	e10b      	b.n	8005b3e <_UG_GetCharData+0x27e>
  }

  if( gui->currentFont.is_old_font){                                      // Compatibility with old fonts charset
 8005926:	4b88      	ldr	r3, [pc, #544]	@ (8005b48 <_UG_GetCharData+0x288>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	222d      	movs	r2, #45	@ 0x2d
 800592c:	5c9b      	ldrb	r3, [r3, r2]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d100      	bne.n	8005934 <_UG_GetCharData+0x74>
 8005932:	e0b8      	b.n	8005aa6 <_UG_GetCharData+0x1e6>
    switch ( encoding )
 8005934:	1dbb      	adds	r3, r7, #6
 8005936:	881b      	ldrh	r3, [r3, #0]
 8005938:	2bfc      	cmp	r3, #252	@ 0xfc
 800593a:	dd00      	ble.n	800593e <_UG_GetCharData+0x7e>
 800593c:	e0b3      	b.n	8005aa6 <_UG_GetCharData+0x1e6>
 800593e:	2bd6      	cmp	r3, #214	@ 0xd6
 8005940:	da08      	bge.n	8005954 <_UG_GetCharData+0x94>
 8005942:	2bc4      	cmp	r3, #196	@ 0xc4
 8005944:	d023      	beq.n	800598e <_UG_GetCharData+0xce>
 8005946:	dd00      	ble.n	800594a <_UG_GetCharData+0x8a>
 8005948:	e0ad      	b.n	8005aa6 <_UG_GetCharData+0x1e6>
 800594a:	2bb0      	cmp	r3, #176	@ 0xb0
 800594c:	d027      	beq.n	800599e <_UG_GetCharData+0xde>
 800594e:	2bb5      	cmp	r3, #181	@ 0xb5
 8005950:	d021      	beq.n	8005996 <_UG_GetCharData+0xd6>
 8005952:	e028      	b.n	80059a6 <_UG_GetCharData+0xe6>
 8005954:	3bd6      	subs	r3, #214	@ 0xd6
 8005956:	2b26      	cmp	r3, #38	@ 0x26
 8005958:	d900      	bls.n	800595c <_UG_GetCharData+0x9c>
 800595a:	e0a4      	b.n	8005aa6 <_UG_GetCharData+0x1e6>
 800595c:	009a      	lsls	r2, r3, #2
 800595e:	4b7f      	ldr	r3, [pc, #508]	@ (8005b5c <_UG_GetCharData+0x29c>)
 8005960:	18d3      	adds	r3, r2, r3
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	469f      	mov	pc, r3
    {
       case 0xF6: encoding = 0x94; break; // ö
 8005966:	1dbb      	adds	r3, r7, #6
 8005968:	2294      	movs	r2, #148	@ 0x94
 800596a:	801a      	strh	r2, [r3, #0]
 800596c:	e01b      	b.n	80059a6 <_UG_GetCharData+0xe6>
       case 0xD6: encoding = 0x99; break; // Ö
 800596e:	1dbb      	adds	r3, r7, #6
 8005970:	2299      	movs	r2, #153	@ 0x99
 8005972:	801a      	strh	r2, [r3, #0]
 8005974:	e017      	b.n	80059a6 <_UG_GetCharData+0xe6>
       case 0xFC: encoding = 0x81; break; // ü
 8005976:	1dbb      	adds	r3, r7, #6
 8005978:	2281      	movs	r2, #129	@ 0x81
 800597a:	801a      	strh	r2, [r3, #0]
 800597c:	e013      	b.n	80059a6 <_UG_GetCharData+0xe6>
       case 0xDC: encoding = 0x9A; break; // Ü
 800597e:	1dbb      	adds	r3, r7, #6
 8005980:	229a      	movs	r2, #154	@ 0x9a
 8005982:	801a      	strh	r2, [r3, #0]
 8005984:	e00f      	b.n	80059a6 <_UG_GetCharData+0xe6>
       case 0xE4: encoding = 0x84; break; // ä
 8005986:	1dbb      	adds	r3, r7, #6
 8005988:	2284      	movs	r2, #132	@ 0x84
 800598a:	801a      	strh	r2, [r3, #0]
 800598c:	e00b      	b.n	80059a6 <_UG_GetCharData+0xe6>
       case 0xC4: encoding = 0x8E; break; // Ä
 800598e:	1dbb      	adds	r3, r7, #6
 8005990:	228e      	movs	r2, #142	@ 0x8e
 8005992:	801a      	strh	r2, [r3, #0]
 8005994:	e007      	b.n	80059a6 <_UG_GetCharData+0xe6>
       case 0xB5: encoding = 0xE6; break; // µ
 8005996:	1dbb      	adds	r3, r7, #6
 8005998:	22e6      	movs	r2, #230	@ 0xe6
 800599a:	801a      	strh	r2, [r3, #0]
 800599c:	e003      	b.n	80059a6 <_UG_GetCharData+0xe6>
       case 0xB0: encoding = 0xF8; break; // °
 800599e:	1dbb      	adds	r3, r7, #6
 80059a0:	22f8      	movs	r2, #248	@ 0xf8
 80059a2:	801a      	strh	r2, [r3, #0]
 80059a4:	46c0      	nop			@ (mov r8, r8)
    }
  }

  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 80059a6:	e07e      	b.n	8005aa6 <_UG_GetCharData+0x1e6>
  {
    UG_U16 curr_offset = ptr_8to16( gui->currentFont.offsets+(t*2));    // Offsets are 16-bit, splitted in 2 byte values
 80059a8:	4b67      	ldr	r3, [pc, #412]	@ (8005b48 <_UG_GetCharData+0x288>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ae:	2212      	movs	r2, #18
 80059b0:	18ba      	adds	r2, r7, r2
 80059b2:	8812      	ldrh	r2, [r2, #0]
 80059b4:	0052      	lsls	r2, r2, #1
 80059b6:	189b      	adds	r3, r3, r2
 80059b8:	250e      	movs	r5, #14
 80059ba:	197c      	adds	r4, r7, r5
 80059bc:	0018      	movs	r0, r3
 80059be:	f7ff facb 	bl	8004f58 <ptr_8to16>
 80059c2:	0003      	movs	r3, r0
 80059c4:	8023      	strh	r3, [r4, #0]

    if(curr_offset&0x8000)                                          // If the offset has the MSB bit set, it means it's the a range start
 80059c6:	002a      	movs	r2, r5
 80059c8:	18bb      	adds	r3, r7, r2
 80059ca:	2100      	movs	r1, #0
 80059cc:	5e5b      	ldrsh	r3, [r3, r1]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	da0b      	bge.n	80059ea <_UG_GetCharData+0x12a>
    {
      start=curr_offset&0x7FFF;                                     // Store range start
 80059d2:	2316      	movs	r3, #22
 80059d4:	18fb      	adds	r3, r7, r3
 80059d6:	18ba      	adds	r2, r7, r2
 80059d8:	8812      	ldrh	r2, [r2, #0]
 80059da:	0452      	lsls	r2, r2, #17
 80059dc:	0c52      	lsrs	r2, r2, #17
 80059de:	801a      	strh	r2, [r3, #0]
      range=1;                                                      // Set flag
 80059e0:	2311      	movs	r3, #17
 80059e2:	18fb      	adds	r3, r7, r3
 80059e4:	2201      	movs	r2, #1
 80059e6:	701a      	strb	r2, [r3, #0]
 80059e8:	e057      	b.n	8005a9a <_UG_GetCharData+0x1da>
    }
    else if(range)                                                  // If range previously set, this is the range end
 80059ea:	2311      	movs	r3, #17
 80059ec:	18fb      	adds	r3, r7, r3
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d039      	beq.n	8005a68 <_UG_GetCharData+0x1a8>
    {
      if(encoding>=start && encoding<=curr_offset)            // If the encoding is between the range
 80059f4:	1dba      	adds	r2, r7, #6
 80059f6:	2116      	movs	r1, #22
 80059f8:	187b      	adds	r3, r7, r1
 80059fa:	8812      	ldrh	r2, [r2, #0]
 80059fc:	881b      	ldrh	r3, [r3, #0]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d317      	bcc.n	8005a32 <_UG_GetCharData+0x172>
 8005a02:	1dba      	adds	r2, r7, #6
 8005a04:	230e      	movs	r3, #14
 8005a06:	18fb      	adds	r3, r7, r3
 8005a08:	8812      	ldrh	r2, [r2, #0]
 8005a0a:	881b      	ldrh	r3, [r3, #0]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d810      	bhi.n	8005a32 <_UG_GetCharData+0x172>
      {
        skip += (encoding-start);                             // Calculate the skip value
 8005a10:	1dba      	adds	r2, r7, #6
 8005a12:	187b      	adds	r3, r7, r1
 8005a14:	8812      	ldrh	r2, [r2, #0]
 8005a16:	881b      	ldrh	r3, [r3, #0]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	b299      	uxth	r1, r3
 8005a1c:	2214      	movs	r2, #20
 8005a1e:	18bb      	adds	r3, r7, r2
 8005a20:	18ba      	adds	r2, r7, r2
 8005a22:	8812      	ldrh	r2, [r2, #0]
 8005a24:	188a      	adds	r2, r1, r2
 8005a26:	801a      	strh	r2, [r3, #0]
        found=1;
 8005a28:	2310      	movs	r3, #16
 8005a2a:	18fb      	adds	r3, r7, r3
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	701a      	strb	r2, [r3, #0]
        break;
 8005a30:	e046      	b.n	8005ac0 <_UG_GetCharData+0x200>
      }
      else if(encoding<start)                                 // If the encoding is lower than current range start, the char is not in the font
 8005a32:	1dba      	adds	r2, r7, #6
 8005a34:	2116      	movs	r1, #22
 8005a36:	187b      	adds	r3, r7, r1
 8005a38:	8812      	ldrh	r2, [r2, #0]
 8005a3a:	881b      	ldrh	r3, [r3, #0]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d33c      	bcc.n	8005aba <_UG_GetCharData+0x1fa>
        break;

      skip += ((curr_offset-start)+1);                        // Encoding not found in the current range, increase skip size and clear range flasg
 8005a40:	230e      	movs	r3, #14
 8005a42:	18fa      	adds	r2, r7, r3
 8005a44:	187b      	adds	r3, r7, r1
 8005a46:	8812      	ldrh	r2, [r2, #0]
 8005a48:	881b      	ldrh	r3, [r3, #0]
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	2114      	movs	r1, #20
 8005a50:	187b      	adds	r3, r7, r1
 8005a52:	881b      	ldrh	r3, [r3, #0]
 8005a54:	18d3      	adds	r3, r2, r3
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	187b      	adds	r3, r7, r1
 8005a5a:	3201      	adds	r2, #1
 8005a5c:	801a      	strh	r2, [r3, #0]
      range=0;
 8005a5e:	2311      	movs	r3, #17
 8005a60:	18fb      	adds	r3, r7, r3
 8005a62:	2200      	movs	r2, #0
 8005a64:	701a      	strb	r2, [r3, #0]
 8005a66:	e018      	b.n	8005a9a <_UG_GetCharData+0x1da>
    }
    else                                                            // Range not set, this is a single char offset
    {
      if(encoding==curr_offset)                                     // If matching the current offset char
 8005a68:	1dba      	adds	r2, r7, #6
 8005a6a:	230e      	movs	r3, #14
 8005a6c:	18fb      	adds	r3, r7, r3
 8005a6e:	8812      	ldrh	r2, [r2, #0]
 8005a70:	881b      	ldrh	r3, [r3, #0]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d104      	bne.n	8005a80 <_UG_GetCharData+0x1c0>
      {
        found=1;
 8005a76:	2310      	movs	r3, #16
 8005a78:	18fb      	adds	r3, r7, r3
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	701a      	strb	r2, [r3, #0]
        break;
 8005a7e:	e01f      	b.n	8005ac0 <_UG_GetCharData+0x200>
      }
      else if (encoding<curr_offset)                                // If the encoding is lower than current range, the char is not in the font
 8005a80:	1dba      	adds	r2, r7, #6
 8005a82:	230e      	movs	r3, #14
 8005a84:	18fb      	adds	r3, r7, r3
 8005a86:	8812      	ldrh	r2, [r2, #0]
 8005a88:	881b      	ldrh	r3, [r3, #0]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d317      	bcc.n	8005abe <_UG_GetCharData+0x1fe>
      {
        break;
      }
      skip++;                                                       // Else, increase skip and keep searching
 8005a8e:	2114      	movs	r1, #20
 8005a90:	187b      	adds	r3, r7, r1
 8005a92:	881a      	ldrh	r2, [r3, #0]
 8005a94:	187b      	adds	r3, r7, r1
 8005a96:	3201      	adds	r2, #1
 8005a98:	801a      	strh	r2, [r3, #0]
  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 8005a9a:	2112      	movs	r1, #18
 8005a9c:	187b      	adds	r3, r7, r1
 8005a9e:	881a      	ldrh	r2, [r3, #0]
 8005aa0:	187b      	adds	r3, r7, r1
 8005aa2:	3201      	adds	r2, #1
 8005aa4:	801a      	strh	r2, [r3, #0]
 8005aa6:	4b28      	ldr	r3, [pc, #160]	@ (8005b48 <_UG_GetCharData+0x288>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8005aac:	2212      	movs	r2, #18
 8005aae:	18ba      	adds	r2, r7, r2
 8005ab0:	8812      	ldrh	r2, [r2, #0]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d200      	bcs.n	8005ab8 <_UG_GetCharData+0x1f8>
 8005ab6:	e777      	b.n	80059a8 <_UG_GetCharData+0xe8>
 8005ab8:	e002      	b.n	8005ac0 <_UG_GetCharData+0x200>
        break;
 8005aba:	46c0      	nop			@ (mov r8, r8)
 8005abc:	e000      	b.n	8005ac0 <_UG_GetCharData+0x200>
        break;
 8005abe:	46c0      	nop			@ (mov r8, r8)
    }
  }

  if(found)                                                         // If char found
 8005ac0:	2310      	movs	r3, #16
 8005ac2:	18fb      	adds	r3, r7, r3
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d037      	beq.n	8005b3a <_UG_GetCharData+0x27a>
  {
    last_font =  gui->currentFont.font;                                     // Update cached data
 8005aca:	4b1f      	ldr	r3, [pc, #124]	@ (8005b48 <_UG_GetCharData+0x288>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ad0:	4b1e      	ldr	r3, [pc, #120]	@ (8005b4c <_UG_GetCharData+0x28c>)
 8005ad2:	601a      	str	r2, [r3, #0]
    last_encoding = encoding;
 8005ad4:	4b1e      	ldr	r3, [pc, #120]	@ (8005b50 <_UG_GetCharData+0x290>)
 8005ad6:	1dba      	adds	r2, r7, #6
 8005ad8:	8812      	ldrh	r2, [r2, #0]
 8005ada:	801a      	strh	r2, [r3, #0]
    last_p = ( gui->currentFont.data+(skip* gui->currentFont.bytes_per_char));
 8005adc:	4b1a      	ldr	r3, [pc, #104]	@ (8005b48 <_UG_GetCharData+0x288>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005ae2:	2014      	movs	r0, #20
 8005ae4:	183b      	adds	r3, r7, r0
 8005ae6:	8819      	ldrh	r1, [r3, #0]
 8005ae8:	4b17      	ldr	r3, [pc, #92]	@ (8005b48 <_UG_GetCharData+0x288>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8005aee:	434b      	muls	r3, r1
 8005af0:	18d2      	adds	r2, r2, r3
 8005af2:	4b18      	ldr	r3, [pc, #96]	@ (8005b54 <_UG_GetCharData+0x294>)
 8005af4:	601a      	str	r2, [r3, #0]
    if( gui->currentFont.widths){                                                // If width table available
 8005af6:	4b14      	ldr	r3, [pc, #80]	@ (8005b48 <_UG_GetCharData+0x288>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00a      	beq.n	8005b16 <_UG_GetCharData+0x256>
      last_width = *( gui->currentFont.widths+skip);                        // Use width from table
 8005b00:	4b11      	ldr	r3, [pc, #68]	@ (8005b48 <_UG_GetCharData+0x288>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b06:	183b      	adds	r3, r7, r0
 8005b08:	881b      	ldrh	r3, [r3, #0]
 8005b0a:	18d3      	adds	r3, r2, r3
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	b21a      	sxth	r2, r3
 8005b10:	4b11      	ldr	r3, [pc, #68]	@ (8005b58 <_UG_GetCharData+0x298>)
 8005b12:	801a      	strh	r2, [r3, #0]
 8005b14:	e006      	b.n	8005b24 <_UG_GetCharData+0x264>
    }
    else{
      last_width =  gui->currentFont.char_width;                            // Else use width from char width
 8005b16:	4b0c      	ldr	r3, [pc, #48]	@ (8005b48 <_UG_GetCharData+0x288>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	222e      	movs	r2, #46	@ 0x2e
 8005b1c:	5c9b      	ldrb	r3, [r3, r2]
 8005b1e:	b21a      	sxth	r2, r3
 8005b20:	4b0d      	ldr	r3, [pc, #52]	@ (8005b58 <_UG_GetCharData+0x298>)
 8005b22:	801a      	strh	r2, [r3, #0]
    }


    if(p){
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d003      	beq.n	8005b32 <_UG_GetCharData+0x272>
      *p=last_p;                                                    // Load char bitmap address
 8005b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8005b54 <_UG_GetCharData+0x294>)
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	601a      	str	r2, [r3, #0]
    }
    return(last_width);                                             // Return char width
 8005b32:	4b09      	ldr	r3, [pc, #36]	@ (8005b58 <_UG_GetCharData+0x298>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	5e9b      	ldrsh	r3, [r3, r2]
 8005b38:	e001      	b.n	8005b3e <_UG_GetCharData+0x27e>
  }
  return -1;                                                        // -1 = char not found
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	425b      	negs	r3, r3
}
 8005b3e:	0018      	movs	r0, r3
 8005b40:	46bd      	mov	sp, r7
 8005b42:	b006      	add	sp, #24
 8005b44:	bdb0      	pop	{r4, r5, r7, pc}
 8005b46:	46c0      	nop			@ (mov r8, r8)
 8005b48:	200002e4 	.word	0x200002e4
 8005b4c:	200002e8 	.word	0x200002e8
 8005b50:	200002ec 	.word	0x200002ec
 8005b54:	200002f0 	.word	0x200002f0
 8005b58:	200002f4 	.word	0x200002f4
 8005b5c:	08009194 	.word	0x08009194

08005b60 <_UG_FontSelect>:

/*
 * Updates the current font data
 */
void _UG_FontSelect( UG_FONT *font){
 8005b60:	b590      	push	{r4, r7, lr}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  if( gui->currentFont.font==font)
 8005b68:	4b3e      	ldr	r3, [pc, #248]	@ (8005c64 <_UG_FontSelect+0x104>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d073      	beq.n	8005c5c <_UG_FontSelect+0xfc>
    return;
   gui->currentFont.font = font;                          // Save Font pointer
 8005b74:	4b3b      	ldr	r3, [pc, #236]	@ (8005c64 <_UG_FontSelect+0x104>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	645a      	str	r2, [r3, #68]	@ 0x44
   gui->currentFont.font_type = 0x7F & *font;             // Byte    0: Font_type
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	781a      	ldrb	r2, [r3, #0]
 8005b80:	4b38      	ldr	r3, [pc, #224]	@ (8005c64 <_UG_FontSelect+0x104>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	217f      	movs	r1, #127	@ 0x7f
 8005b86:	400a      	ands	r2, r1
 8005b88:	b2d1      	uxtb	r1, r2
 8005b8a:	222c      	movs	r2, #44	@ 0x2c
 8005b8c:	5499      	strb	r1, [r3, r2]
   gui->currentFont.is_old_font = (0x80 & *font++)&&1;    // Byte    0: Bit 7 indicates old or new font type. 1=old font, 0=new font
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	1c5a      	adds	r2, r3, #1
 8005b92:	607a      	str	r2, [r7, #4]
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	b25b      	sxtb	r3, r3
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	da01      	bge.n	8005ba0 <_UG_FontSelect+0x40>
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	e000      	b.n	8005ba2 <_UG_FontSelect+0x42>
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	4b30      	ldr	r3, [pc, #192]	@ (8005c64 <_UG_FontSelect+0x104>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	b2d1      	uxtb	r1, r2
 8005ba8:	222d      	movs	r2, #45	@ 0x2d
 8005baa:	5499      	strb	r1, [r3, r2]
   gui->currentFont.char_width = *font++;                 // Byte    1: Char width
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	1c5a      	adds	r2, r3, #1
 8005bb0:	607a      	str	r2, [r7, #4]
 8005bb2:	4a2c      	ldr	r2, [pc, #176]	@ (8005c64 <_UG_FontSelect+0x104>)
 8005bb4:	6812      	ldr	r2, [r2, #0]
 8005bb6:	7819      	ldrb	r1, [r3, #0]
 8005bb8:	232e      	movs	r3, #46	@ 0x2e
 8005bba:	54d1      	strb	r1, [r2, r3]
   gui->currentFont.char_height = *font++;                // Byte    2: Char height
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	1c5a      	adds	r2, r3, #1
 8005bc0:	607a      	str	r2, [r7, #4]
 8005bc2:	4a28      	ldr	r2, [pc, #160]	@ (8005c64 <_UG_FontSelect+0x104>)
 8005bc4:	6812      	ldr	r2, [r2, #0]
 8005bc6:	7819      	ldrb	r1, [r3, #0]
 8005bc8:	232f      	movs	r3, #47	@ 0x2f
 8005bca:	54d1      	strb	r1, [r2, r3]
   gui->currentFont.number_of_chars = ptr_8to16(font);    // Bytes 3+4: Number of chars
 8005bcc:	4b25      	ldr	r3, [pc, #148]	@ (8005c64 <_UG_FontSelect+0x104>)
 8005bce:	681c      	ldr	r4, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	0018      	movs	r0, r3
 8005bd4:	f7ff f9c0 	bl	8004f58 <ptr_8to16>
 8005bd8:	0003      	movs	r3, r0
 8005bda:	8663      	strh	r3, [r4, #50]	@ 0x32
  font+=2;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	3302      	adds	r3, #2
 8005be0:	607b      	str	r3, [r7, #4]
   gui->currentFont.number_of_offsets = ptr_8to16(font);  // Bytes 5+6: Number of offsets
 8005be2:	4b20      	ldr	r3, [pc, #128]	@ (8005c64 <_UG_FontSelect+0x104>)
 8005be4:	681c      	ldr	r4, [r3, #0]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	0018      	movs	r0, r3
 8005bea:	f7ff f9b5 	bl	8004f58 <ptr_8to16>
 8005bee:	0003      	movs	r3, r0
 8005bf0:	86a3      	strh	r3, [r4, #52]	@ 0x34
  font+=2;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	3302      	adds	r3, #2
 8005bf6:	607b      	str	r3, [r7, #4]
   gui->currentFont.bytes_per_char = ptr_8to16(font);     // Bytes 7+8: Bytes per char
 8005bf8:	4b1a      	ldr	r3, [pc, #104]	@ (8005c64 <_UG_FontSelect+0x104>)
 8005bfa:	681c      	ldr	r4, [r3, #0]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	0018      	movs	r0, r3
 8005c00:	f7ff f9aa 	bl	8004f58 <ptr_8to16>
 8005c04:	0003      	movs	r3, r0
 8005c06:	8623      	strh	r3, [r4, #48]	@ 0x30
  font+=2;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	3302      	adds	r3, #2
 8005c0c:	607b      	str	r3, [r7, #4]
  if(*font++){                                    // Byte 9: 1=Width table present, 0=not present
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	1c5a      	adds	r2, r3, #1
 8005c12:	607a      	str	r2, [r7, #4]
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00b      	beq.n	8005c32 <_UG_FontSelect+0xd2>
     gui->currentFont.widths = font;                      // Save pointer to width table
 8005c1a:	4b12      	ldr	r3, [pc, #72]	@ (8005c64 <_UG_FontSelect+0x104>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	639a      	str	r2, [r3, #56]	@ 0x38
    font+= gui->currentFont.number_of_chars;              // Increase number of chars
 8005c22:	4b10      	ldr	r3, [pc, #64]	@ (8005c64 <_UG_FontSelect+0x104>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005c28:	001a      	movs	r2, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	189b      	adds	r3, r3, r2
 8005c2e:	607b      	str	r3, [r7, #4]
 8005c30:	e003      	b.n	8005c3a <_UG_FontSelect+0xda>
  }
  else{
     gui->currentFont.widths = NULL;                      // No width table
 8005c32:	4b0c      	ldr	r3, [pc, #48]	@ (8005c64 <_UG_FontSelect+0x104>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2200      	movs	r2, #0
 8005c38:	639a      	str	r2, [r3, #56]	@ 0x38
  }
   gui->currentFont.offsets = font;                       // Save pointer to offset table
 8005c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8005c64 <_UG_FontSelect+0x104>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	63da      	str	r2, [r3, #60]	@ 0x3c
  font += ( gui->currentFont.number_of_offsets*2);        // Increase pointer by number of offsets*2 (2-byte values)
 8005c42:	4b08      	ldr	r3, [pc, #32]	@ (8005c64 <_UG_FontSelect+0x104>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8005c48:	005b      	lsls	r3, r3, #1
 8005c4a:	001a      	movs	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	189b      	adds	r3, r3, r2
 8005c50:	607b      	str	r3, [r7, #4]
   gui->currentFont.data = font;                          // Save pointer to bitmap data
 8005c52:	4b04      	ldr	r3, [pc, #16]	@ (8005c64 <_UG_FontSelect+0x104>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	641a      	str	r2, [r3, #64]	@ 0x40
 8005c5a:	e000      	b.n	8005c5e <_UG_FontSelect+0xfe>
    return;
 8005c5c:	46c0      	nop			@ (mov r8, r8)
}
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	b003      	add	sp, #12
 8005c62:	bd90      	pop	{r4, r7, pc}
 8005c64:	200002e4 	.word	0x200002e4

08005c68 <_UG_PutChar>:

UG_S16 _UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc)
{
 8005c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c6a:	46c6      	mov	lr, r8
 8005c6c:	b500      	push	{lr}
 8005c6e:	b08c      	sub	sp, #48	@ 0x30
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	0005      	movs	r5, r0
 8005c74:	000c      	movs	r4, r1
 8005c76:	0010      	movs	r0, r2
 8005c78:	0019      	movs	r1, r3
 8005c7a:	1dbb      	adds	r3, r7, #6
 8005c7c:	1c2a      	adds	r2, r5, #0
 8005c7e:	801a      	strh	r2, [r3, #0]
 8005c80:	1d3b      	adds	r3, r7, #4
 8005c82:	1c22      	adds	r2, r4, #0
 8005c84:	801a      	strh	r2, [r3, #0]
 8005c86:	1cbb      	adds	r3, r7, #2
 8005c88:	1c02      	adds	r2, r0, #0
 8005c8a:	801a      	strh	r2, [r3, #0]
 8005c8c:	003b      	movs	r3, r7
 8005c8e:	1c0a      	adds	r2, r1, #0
 8005c90:	801a      	strh	r2, [r3, #0]
   UG_U16 x0=0,y0=0,i,j,k,bn,fpixels=0,bpixels=0;
 8005c92:	232e      	movs	r3, #46	@ 0x2e
 8005c94:	18fb      	adds	r3, r7, r3
 8005c96:	2200      	movs	r2, #0
 8005c98:	801a      	strh	r2, [r3, #0]
 8005c9a:	232c      	movs	r3, #44	@ 0x2c
 8005c9c:	18fb      	adds	r3, r7, r3
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	801a      	strh	r2, [r3, #0]
 8005ca2:	2322      	movs	r3, #34	@ 0x22
 8005ca4:	18fb      	adds	r3, r7, r3
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	801a      	strh	r2, [r3, #0]
 8005caa:	2320      	movs	r3, #32
 8005cac:	18fb      	adds	r3, r7, r3
 8005cae:	2200      	movs	r2, #0
 8005cb0:	801a      	strh	r2, [r3, #0]
   UG_S16 c;
   UG_U8 b,trans=gui->transparent_font,driver=(gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED);
 8005cb2:	4bd3      	ldr	r3, [pc, #844]	@ (8006000 <_UG_PutChar+0x398>)
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	2317      	movs	r3, #23
 8005cb8:	18fb      	adds	r3, r7, r3
 8005cba:	2148      	movs	r1, #72	@ 0x48
 8005cbc:	5c52      	ldrb	r2, [r2, r1]
 8005cbe:	701a      	strb	r2, [r3, #0]
 8005cc0:	4bcf      	ldr	r3, [pc, #828]	@ (8006000 <_UG_PutChar+0x398>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2268      	movs	r2, #104	@ 0x68
 8005cc6:	5c9a      	ldrb	r2, [r3, r2]
 8005cc8:	2316      	movs	r3, #22
 8005cca:	18fb      	adds	r3, r7, r3
 8005ccc:	2102      	movs	r1, #2
 8005cce:	400a      	ands	r2, r1
 8005cd0:	701a      	strb	r2, [r3, #0]
   const UG_U8 * data;                              // Pointer to current char bitmap
   UG_COLOR color;
   void(*push_pixels)(UG_U16, UG_COLOR) = NULL;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	61bb      	str	r3, [r7, #24]

   UG_S16 actual_char_width = _UG_GetCharData(chr, &data);
 8005cd6:	2514      	movs	r5, #20
 8005cd8:	197c      	adds	r4, r7, r5
 8005cda:	2308      	movs	r3, #8
 8005cdc:	18fa      	adds	r2, r7, r3
 8005cde:	1dbb      	adds	r3, r7, #6
 8005ce0:	881b      	ldrh	r3, [r3, #0]
 8005ce2:	0011      	movs	r1, r2
 8005ce4:	0018      	movs	r0, r3
 8005ce6:	f7ff fdeb 	bl	80058c0 <_UG_GetCharData>
 8005cea:	0003      	movs	r3, r0
 8005cec:	8023      	strh	r3, [r4, #0]
   if(actual_char_width==-1)
 8005cee:	197b      	adds	r3, r7, r5
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	5e9b      	ldrsh	r3, [r3, r2]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	d102      	bne.n	8005cfe <_UG_PutChar+0x96>
        return -1;                                     // Char not presnt in the font
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	425b      	negs	r3, r3
 8005cfc:	e34d      	b.n	800639a <_UG_PutChar+0x732>

   bn =  gui->currentFont.char_width;
 8005cfe:	4bc0      	ldr	r3, [pc, #768]	@ (8006000 <_UG_PutChar+0x398>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	222e      	movs	r2, #46	@ 0x2e
 8005d04:	5c9a      	ldrb	r2, [r3, r2]
 8005d06:	2124      	movs	r1, #36	@ 0x24
 8005d08:	187b      	adds	r3, r7, r1
 8005d0a:	801a      	strh	r2, [r3, #0]
   if ( !bn ){
 8005d0c:	187b      	adds	r3, r7, r1
 8005d0e:	881b      	ldrh	r3, [r3, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d101      	bne.n	8005d18 <_UG_PutChar+0xb0>
     return 0;
 8005d14:	2300      	movs	r3, #0
 8005d16:	e340      	b.n	800639a <_UG_PutChar+0x732>
   }
   bn >>= 3;
 8005d18:	2124      	movs	r1, #36	@ 0x24
 8005d1a:	187b      	adds	r3, r7, r1
 8005d1c:	187a      	adds	r2, r7, r1
 8005d1e:	8812      	ldrh	r2, [r2, #0]
 8005d20:	08d2      	lsrs	r2, r2, #3
 8005d22:	801a      	strh	r2, [r3, #0]
   if (  gui->currentFont.char_width % 8 ) bn++;
 8005d24:	4bb6      	ldr	r3, [pc, #728]	@ (8006000 <_UG_PutChar+0x398>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	222e      	movs	r2, #46	@ 0x2e
 8005d2a:	5c9b      	ldrb	r3, [r3, r2]
 8005d2c:	2207      	movs	r2, #7
 8005d2e:	4013      	ands	r3, r2
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d004      	beq.n	8005d40 <_UG_PutChar+0xd8>
 8005d36:	187b      	adds	r3, r7, r1
 8005d38:	881a      	ldrh	r2, [r3, #0]
 8005d3a:	187b      	adds	r3, r7, r1
 8005d3c:	3201      	adds	r2, #1
 8005d3e:	801a      	strh	r2, [r3, #0]

   /* Is hardware acceleration available? */
   if (driver)
 8005d40:	2316      	movs	r3, #22
 8005d42:	18fb      	adds	r3, r7, r3
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d023      	beq.n	8005d92 <_UG_PutChar+0x12a>
   {
     push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+ gui->currentFont.char_height-1);
 8005d4a:	4bad      	ldr	r3, [pc, #692]	@ (8006000 <_UG_PutChar+0x398>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d50:	001d      	movs	r5, r3
 8005d52:	1d3b      	adds	r3, r7, #4
 8005d54:	881a      	ldrh	r2, [r3, #0]
 8005d56:	2314      	movs	r3, #20
 8005d58:	18fb      	adds	r3, r7, r3
 8005d5a:	881b      	ldrh	r3, [r3, #0]
 8005d5c:	18d3      	adds	r3, r2, r3
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	3b01      	subs	r3, #1
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	b21a      	sxth	r2, r3
 8005d66:	4ba6      	ldr	r3, [pc, #664]	@ (8006000 <_UG_PutChar+0x398>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	212f      	movs	r1, #47	@ 0x2f
 8005d6c:	5c5b      	ldrb	r3, [r3, r1]
 8005d6e:	0019      	movs	r1, r3
 8005d70:	1cbb      	adds	r3, r7, #2
 8005d72:	881b      	ldrh	r3, [r3, #0]
 8005d74:	18cb      	adds	r3, r1, r3
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	b21c      	sxth	r4, r3
 8005d7e:	1cbb      	adds	r3, r7, #2
 8005d80:	2100      	movs	r1, #0
 8005d82:	5e59      	ldrsh	r1, [r3, r1]
 8005d84:	1d3b      	adds	r3, r7, #4
 8005d86:	2000      	movs	r0, #0
 8005d88:	5e18      	ldrsh	r0, [r3, r0]
 8005d8a:	0023      	movs	r3, r4
 8005d8c:	47a8      	blx	r5
 8005d8e:	0003      	movs	r3, r0
 8005d90:	61bb      	str	r3, [r7, #24]
   }

   if ( gui->currentFont.font_type == FONT_TYPE_1BPP)
 8005d92:	4b9b      	ldr	r3, [pc, #620]	@ (8006000 <_UG_PutChar+0x398>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	222c      	movs	r2, #44	@ 0x2c
 8005d98:	5c9b      	ldrb	r3, [r3, r2]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d000      	beq.n	8005da0 <_UG_PutChar+0x138>
 8005d9e:	e256      	b.n	800624e <_UG_PutChar+0x5e6>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8005da0:	2328      	movs	r3, #40	@ 0x28
 8005da2:	18fb      	adds	r3, r7, r3
 8005da4:	2200      	movs	r2, #0
 8005da6:	801a      	strh	r2, [r3, #0]
 8005da8:	e184      	b.n	80060b4 <_UG_PutChar+0x44c>
     {
       c=0;
 8005daa:	231e      	movs	r3, #30
 8005dac:	18fb      	adds	r3, r7, r3
 8005dae:	2200      	movs	r2, #0
 8005db0:	801a      	strh	r2, [r3, #0]
       for( i=0;i<bn;i++ )
 8005db2:	232a      	movs	r3, #42	@ 0x2a
 8005db4:	18fb      	adds	r3, r7, r3
 8005db6:	2200      	movs	r2, #0
 8005db8:	801a      	strh	r2, [r3, #0]
 8005dba:	e16c      	b.n	8006096 <_UG_PutChar+0x42e>
       {
         b = *data++;
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	1c5a      	adds	r2, r3, #1
 8005dc0:	60ba      	str	r2, [r7, #8]
 8005dc2:	221d      	movs	r2, #29
 8005dc4:	18ba      	adds	r2, r7, r2
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	7013      	strb	r3, [r2, #0]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8005dca:	2326      	movs	r3, #38	@ 0x26
 8005dcc:	18fb      	adds	r3, r7, r3
 8005dce:	2200      	movs	r2, #0
 8005dd0:	801a      	strh	r2, [r3, #0]
 8005dd2:	e14a      	b.n	800606a <_UG_PutChar+0x402>
         {
           if(b & 0x01 )                    // Foreground pixel detected
 8005dd4:	231d      	movs	r3, #29
 8005dd6:	18fb      	adds	r3, r7, r3
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	4013      	ands	r3, r2
 8005dde:	d055      	beq.n	8005e8c <_UG_PutChar+0x224>
           {
             if(driver)
 8005de0:	2316      	movs	r3, #22
 8005de2:	18fb      	adds	r3, r7, r3
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d038      	beq.n	8005e5c <_UG_PutChar+0x1f4>
             {                              // Accelerated output
               if(bpixels && !trans)        // Draw accumulated background pixels, only if transparent mode disabled
 8005dea:	2220      	movs	r2, #32
 8005dec:	18bb      	adds	r3, r7, r2
 8005dee:	881b      	ldrh	r3, [r3, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d010      	beq.n	8005e16 <_UG_PutChar+0x1ae>
 8005df4:	2317      	movs	r3, #23
 8005df6:	18fb      	adds	r3, r7, r3
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d10b      	bne.n	8005e16 <_UG_PutChar+0x1ae>
               {
                 push_pixels(bpixels,bc);   // Drawing accumulated pixels removes a lot of overhead, drawing speed is at least 3x faster
 8005dfe:	2348      	movs	r3, #72	@ 0x48
 8005e00:	18fb      	adds	r3, r7, r3
 8005e02:	8819      	ldrh	r1, [r3, #0]
 8005e04:	0014      	movs	r4, r2
 8005e06:	18bb      	adds	r3, r7, r2
 8005e08:	881a      	ldrh	r2, [r3, #0]
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	0010      	movs	r0, r2
 8005e0e:	4798      	blx	r3
                 bpixels=0;
 8005e10:	193b      	adds	r3, r7, r4
 8005e12:	2200      	movs	r2, #0
 8005e14:	801a      	strh	r2, [r3, #0]
               }
               if(!fpixels && trans)        // Store first foreground pixel position for transparent drawing
 8005e16:	2322      	movs	r3, #34	@ 0x22
 8005e18:	18fb      	adds	r3, r7, r3
 8005e1a:	881b      	ldrh	r3, [r3, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d116      	bne.n	8005e4e <_UG_PutChar+0x1e6>
 8005e20:	2317      	movs	r3, #23
 8005e22:	18fb      	adds	r3, r7, r3
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d011      	beq.n	8005e4e <_UG_PutChar+0x1e6>
               {
                 x0=x+c;
 8005e2a:	1d3b      	adds	r3, r7, #4
 8005e2c:	8819      	ldrh	r1, [r3, #0]
 8005e2e:	231e      	movs	r3, #30
 8005e30:	18fb      	adds	r3, r7, r3
 8005e32:	881a      	ldrh	r2, [r3, #0]
 8005e34:	232e      	movs	r3, #46	@ 0x2e
 8005e36:	18fb      	adds	r3, r7, r3
 8005e38:	188a      	adds	r2, r1, r2
 8005e3a:	801a      	strh	r2, [r3, #0]
                 y0=y+j;
 8005e3c:	1cbb      	adds	r3, r7, #2
 8005e3e:	8819      	ldrh	r1, [r3, #0]
 8005e40:	232c      	movs	r3, #44	@ 0x2c
 8005e42:	18fb      	adds	r3, r7, r3
 8005e44:	2228      	movs	r2, #40	@ 0x28
 8005e46:	18ba      	adds	r2, r7, r2
 8005e48:	8812      	ldrh	r2, [r2, #0]
 8005e4a:	188a      	adds	r2, r1, r2
 8005e4c:	801a      	strh	r2, [r3, #0]
               }
               fpixels++;                   // Instead writing every pixel, count consecutive pixels, then send accumulated pixels in a single transaction
 8005e4e:	2122      	movs	r1, #34	@ 0x22
 8005e50:	187b      	adds	r3, r7, r1
 8005e52:	881a      	ldrh	r2, [r3, #0]
 8005e54:	187b      	adds	r3, r7, r1
 8005e56:	3201      	adds	r2, #1
 8005e58:	801a      	strh	r2, [r3, #0]
 8005e5a:	e0f1      	b.n	8006040 <_UG_PutChar+0x3d8>
             }
             else
             {                              // Not accelerated output
               gui->device->pset(x+c,y+j,fc);
 8005e5c:	4b68      	ldr	r3, [pc, #416]	@ (8006000 <_UG_PutChar+0x398>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	1d3a      	adds	r2, r7, #4
 8005e66:	8811      	ldrh	r1, [r2, #0]
 8005e68:	221e      	movs	r2, #30
 8005e6a:	18ba      	adds	r2, r7, r2
 8005e6c:	8812      	ldrh	r2, [r2, #0]
 8005e6e:	188a      	adds	r2, r1, r2
 8005e70:	b292      	uxth	r2, r2
 8005e72:	b210      	sxth	r0, r2
 8005e74:	1cba      	adds	r2, r7, #2
 8005e76:	8811      	ldrh	r1, [r2, #0]
 8005e78:	2228      	movs	r2, #40	@ 0x28
 8005e7a:	18ba      	adds	r2, r7, r2
 8005e7c:	8812      	ldrh	r2, [r2, #0]
 8005e7e:	188a      	adds	r2, r1, r2
 8005e80:	b292      	uxth	r2, r2
 8005e82:	b211      	sxth	r1, r2
 8005e84:	003a      	movs	r2, r7
 8005e86:	8812      	ldrh	r2, [r2, #0]
 8005e88:	4798      	blx	r3
 8005e8a:	e0d9      	b.n	8006040 <_UG_PutChar+0x3d8>
             }
           }
           else                             // Background pixel detected
           {
             if(driver)
 8005e8c:	2316      	movs	r3, #22
 8005e8e:	18fb      	adds	r3, r7, r3
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d100      	bne.n	8005e98 <_UG_PutChar+0x230>
 8005e96:	e0b5      	b.n	8006004 <_UG_PutChar+0x39c>
             {                              // Accelerated output
               if(fpixels)                  // Draw accumulated foreground pixels
 8005e98:	2222      	movs	r2, #34	@ 0x22
 8005e9a:	18bb      	adds	r3, r7, r2
 8005e9c:	881b      	ldrh	r3, [r3, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d100      	bne.n	8005ea4 <_UG_PutChar+0x23c>
 8005ea2:	e0a5      	b.n	8005ff0 <_UG_PutChar+0x388>
               {
                 if(!trans)                 // In transparent mode, we don't need to address pixel areas, so just keep pushing pixels
 8005ea4:	2317      	movs	r3, #23
 8005ea6:	18fb      	adds	r3, r7, r3
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d000      	beq.n	8005eb0 <_UG_PutChar+0x248>
 8005eae:	e099      	b.n	8005fe4 <_UG_PutChar+0x37c>
                 {
                   push_pixels(fpixels,fc);
 8005eb0:	003b      	movs	r3, r7
 8005eb2:	8819      	ldrh	r1, [r3, #0]
 8005eb4:	0014      	movs	r4, r2
 8005eb6:	18bb      	adds	r3, r7, r2
 8005eb8:	881a      	ldrh	r2, [r3, #0]
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	0010      	movs	r0, r2
 8005ebe:	4798      	blx	r3
                   fpixels=0;
 8005ec0:	193b      	adds	r3, r7, r4
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	801a      	strh	r2, [r3, #0]
 8005ec6:	e093      	b.n	8005ff0 <_UG_PutChar+0x388>
                 }
                 else{                                // In transparent mode, drawing needs to be broken in smaller parts, avoiding the background areas
                   while(fpixels)
                   {
                     UG_U16 width = (x+actual_char_width)-x0;         // Detect available pixels in the current row from current x position
 8005ec8:	1d3b      	adds	r3, r7, #4
 8005eca:	881a      	ldrh	r2, [r3, #0]
 8005ecc:	2314      	movs	r3, #20
 8005ece:	18fb      	adds	r3, r7, r3
 8005ed0:	881b      	ldrh	r3, [r3, #0]
 8005ed2:	18d3      	adds	r3, r2, r3
 8005ed4:	b299      	uxth	r1, r3
 8005ed6:	200e      	movs	r0, #14
 8005ed8:	183b      	adds	r3, r7, r0
 8005eda:	242e      	movs	r4, #46	@ 0x2e
 8005edc:	193a      	adds	r2, r7, r4
 8005ede:	8812      	ldrh	r2, [r2, #0]
 8005ee0:	1a8a      	subs	r2, r1, r2
 8005ee2:	801a      	strh	r2, [r3, #0]
                     if(x0==x || fpixels<width)                       // If pixel draw count is lower than available pixels, or drawing at start of the row, drawn as-is
 8005ee4:	193b      	adds	r3, r7, r4
 8005ee6:	881a      	ldrh	r2, [r3, #0]
 8005ee8:	1d3b      	adds	r3, r7, #4
 8005eea:	2100      	movs	r1, #0
 8005eec:	5e5b      	ldrsh	r3, [r3, r1]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d006      	beq.n	8005f00 <_UG_PutChar+0x298>
 8005ef2:	2322      	movs	r3, #34	@ 0x22
 8005ef4:	18fa      	adds	r2, r7, r3
 8005ef6:	183b      	adds	r3, r7, r0
 8005ef8:	8812      	ldrh	r2, [r2, #0]
 8005efa:	881b      	ldrh	r3, [r3, #0]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d23a      	bcs.n	8005f76 <_UG_PutChar+0x30e>
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8005f00:	4b3f      	ldr	r3, [pc, #252]	@ (8006000 <_UG_PutChar+0x398>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f06:	4698      	mov	r8, r3
 8005f08:	222e      	movs	r2, #46	@ 0x2e
 8005f0a:	18bb      	adds	r3, r7, r2
 8005f0c:	2400      	movs	r4, #0
 8005f0e:	5f1c      	ldrsh	r4, [r3, r4]
 8005f10:	232c      	movs	r3, #44	@ 0x2c
 8005f12:	18fb      	adds	r3, r7, r3
 8005f14:	2000      	movs	r0, #0
 8005f16:	5e1d      	ldrsh	r5, [r3, r0]
 8005f18:	18ba      	adds	r2, r7, r2
 8005f1a:	200e      	movs	r0, #14
 8005f1c:	183b      	adds	r3, r7, r0
 8005f1e:	8812      	ldrh	r2, [r2, #0]
 8005f20:	881b      	ldrh	r3, [r3, #0]
 8005f22:	18d3      	adds	r3, r2, r3
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	3b01      	subs	r3, #1
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	b21e      	sxth	r6, r3
 8005f2c:	2322      	movs	r3, #34	@ 0x22
 8005f2e:	18fb      	adds	r3, r7, r3
 8005f30:	881a      	ldrh	r2, [r3, #0]
 8005f32:	2014      	movs	r0, #20
 8005f34:	183b      	adds	r3, r7, r0
 8005f36:	2000      	movs	r0, #0
 8005f38:	5e1b      	ldrsh	r3, [r3, r0]
 8005f3a:	0019      	movs	r1, r3
 8005f3c:	0010      	movs	r0, r2
 8005f3e:	f7fa f977 	bl	8000230 <__divsi3>
 8005f42:	0003      	movs	r3, r0
 8005f44:	b29a      	uxth	r2, r3
 8005f46:	212c      	movs	r1, #44	@ 0x2c
 8005f48:	187b      	adds	r3, r7, r1
 8005f4a:	881b      	ldrh	r3, [r3, #0]
 8005f4c:	18d3      	adds	r3, r2, r3
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	b21b      	sxth	r3, r3
 8005f52:	0032      	movs	r2, r6
 8005f54:	0029      	movs	r1, r5
 8005f56:	0020      	movs	r0, r4
 8005f58:	47c0      	blx	r8
 8005f5a:	0003      	movs	r3, r0
 8005f5c:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8005f5e:	003b      	movs	r3, r7
 8005f60:	8819      	ldrh	r1, [r3, #0]
 8005f62:	2422      	movs	r4, #34	@ 0x22
 8005f64:	193b      	adds	r3, r7, r4
 8005f66:	881a      	ldrh	r2, [r3, #0]
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	0010      	movs	r0, r2
 8005f6c:	4798      	blx	r3
                       fpixels=0;
 8005f6e:	193b      	adds	r3, r7, r4
 8005f70:	2200      	movs	r2, #0
 8005f72:	801a      	strh	r2, [r3, #0]
 8005f74:	e036      	b.n	8005fe4 <_UG_PutChar+0x37c>
                     }
                     else                                             // If  pixel draw count is higher than available pixels, there's at least second line, drawn this row first
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8005f76:	4b22      	ldr	r3, [pc, #136]	@ (8006000 <_UG_PutChar+0x398>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f7c:	001c      	movs	r4, r3
 8005f7e:	262e      	movs	r6, #46	@ 0x2e
 8005f80:	19bb      	adds	r3, r7, r6
 8005f82:	2000      	movs	r0, #0
 8005f84:	5e18      	ldrsh	r0, [r3, r0]
 8005f86:	252c      	movs	r5, #44	@ 0x2c
 8005f88:	197b      	adds	r3, r7, r5
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	5e9a      	ldrsh	r2, [r3, r2]
 8005f8e:	4694      	mov	ip, r2
 8005f90:	19ba      	adds	r2, r7, r6
 8005f92:	230e      	movs	r3, #14
 8005f94:	18fb      	adds	r3, r7, r3
 8005f96:	8812      	ldrh	r2, [r2, #0]
 8005f98:	881b      	ldrh	r3, [r3, #0]
 8005f9a:	18d3      	adds	r3, r2, r3
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	b21a      	sxth	r2, r3
 8005fa4:	197b      	adds	r3, r7, r5
 8005fa6:	2100      	movs	r1, #0
 8005fa8:	5e5b      	ldrsh	r3, [r3, r1]
 8005faa:	4661      	mov	r1, ip
 8005fac:	47a0      	blx	r4
 8005fae:	0003      	movs	r3, r0
 8005fb0:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8005fb2:	003b      	movs	r3, r7
 8005fb4:	8819      	ldrh	r1, [r3, #0]
 8005fb6:	2422      	movs	r4, #34	@ 0x22
 8005fb8:	193b      	adds	r3, r7, r4
 8005fba:	881a      	ldrh	r2, [r3, #0]
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	0010      	movs	r0, r2
 8005fc0:	4798      	blx	r3
                       fpixels -= width;
 8005fc2:	193b      	adds	r3, r7, r4
 8005fc4:	1939      	adds	r1, r7, r4
 8005fc6:	220e      	movs	r2, #14
 8005fc8:	18ba      	adds	r2, r7, r2
 8005fca:	8809      	ldrh	r1, [r1, #0]
 8005fcc:	8812      	ldrh	r2, [r2, #0]
 8005fce:	1a8a      	subs	r2, r1, r2
 8005fd0:	801a      	strh	r2, [r3, #0]
                       x0=x;
 8005fd2:	19bb      	adds	r3, r7, r6
 8005fd4:	1d3a      	adds	r2, r7, #4
 8005fd6:	8812      	ldrh	r2, [r2, #0]
 8005fd8:	801a      	strh	r2, [r3, #0]
                       y0++;
 8005fda:	197b      	adds	r3, r7, r5
 8005fdc:	881a      	ldrh	r2, [r3, #0]
 8005fde:	197b      	adds	r3, r7, r5
 8005fe0:	3201      	adds	r2, #1
 8005fe2:	801a      	strh	r2, [r3, #0]
                   while(fpixels)
 8005fe4:	2322      	movs	r3, #34	@ 0x22
 8005fe6:	18fb      	adds	r3, r7, r3
 8005fe8:	881b      	ldrh	r3, [r3, #0]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d000      	beq.n	8005ff0 <_UG_PutChar+0x388>
 8005fee:	e76b      	b.n	8005ec8 <_UG_PutChar+0x260>
                     }
                   }
                 }
               }
               bpixels++;
 8005ff0:	2120      	movs	r1, #32
 8005ff2:	187b      	adds	r3, r7, r1
 8005ff4:	881a      	ldrh	r2, [r3, #0]
 8005ff6:	187b      	adds	r3, r7, r1
 8005ff8:	3201      	adds	r2, #1
 8005ffa:	801a      	strh	r2, [r3, #0]
 8005ffc:	e020      	b.n	8006040 <_UG_PutChar+0x3d8>
 8005ffe:	46c0      	nop			@ (mov r8, r8)
 8006000:	200002e4 	.word	0x200002e4
             }
             else if(!trans)                           // Not accelerated output
 8006004:	2317      	movs	r3, #23
 8006006:	18fb      	adds	r3, r7, r3
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d118      	bne.n	8006040 <_UG_PutChar+0x3d8>
             {
               gui->device->pset(x+c,y+j,bc);
 800600e:	4bbd      	ldr	r3, [pc, #756]	@ (8006304 <_UG_PutChar+0x69c>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	685c      	ldr	r4, [r3, #4]
 8006016:	1d3b      	adds	r3, r7, #4
 8006018:	881a      	ldrh	r2, [r3, #0]
 800601a:	231e      	movs	r3, #30
 800601c:	18fb      	adds	r3, r7, r3
 800601e:	881b      	ldrh	r3, [r3, #0]
 8006020:	18d3      	adds	r3, r2, r3
 8006022:	b29b      	uxth	r3, r3
 8006024:	b218      	sxth	r0, r3
 8006026:	1cbb      	adds	r3, r7, #2
 8006028:	881a      	ldrh	r2, [r3, #0]
 800602a:	2328      	movs	r3, #40	@ 0x28
 800602c:	18fb      	adds	r3, r7, r3
 800602e:	881b      	ldrh	r3, [r3, #0]
 8006030:	18d3      	adds	r3, r2, r3
 8006032:	b29b      	uxth	r3, r3
 8006034:	b219      	sxth	r1, r3
 8006036:	2348      	movs	r3, #72	@ 0x48
 8006038:	18fb      	adds	r3, r7, r3
 800603a:	881b      	ldrh	r3, [r3, #0]
 800603c:	001a      	movs	r2, r3
 800603e:	47a0      	blx	r4
             }
           }
           b >>= 1;
 8006040:	221d      	movs	r2, #29
 8006042:	18bb      	adds	r3, r7, r2
 8006044:	18ba      	adds	r2, r7, r2
 8006046:	7812      	ldrb	r2, [r2, #0]
 8006048:	0852      	lsrs	r2, r2, #1
 800604a:	701a      	strb	r2, [r3, #0]
           c++;
 800604c:	211e      	movs	r1, #30
 800604e:	187b      	adds	r3, r7, r1
 8006050:	2200      	movs	r2, #0
 8006052:	5e9b      	ldrsh	r3, [r3, r2]
 8006054:	b29b      	uxth	r3, r3
 8006056:	3301      	adds	r3, #1
 8006058:	b29a      	uxth	r2, r3
 800605a:	187b      	adds	r3, r7, r1
 800605c:	801a      	strh	r2, [r3, #0]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 800605e:	2126      	movs	r1, #38	@ 0x26
 8006060:	187b      	adds	r3, r7, r1
 8006062:	881a      	ldrh	r2, [r3, #0]
 8006064:	187b      	adds	r3, r7, r1
 8006066:	3201      	adds	r2, #1
 8006068:	801a      	strh	r2, [r3, #0]
 800606a:	2326      	movs	r3, #38	@ 0x26
 800606c:	18fb      	adds	r3, r7, r3
 800606e:	881b      	ldrh	r3, [r3, #0]
 8006070:	2b07      	cmp	r3, #7
 8006072:	d80a      	bhi.n	800608a <_UG_PutChar+0x422>
 8006074:	231e      	movs	r3, #30
 8006076:	18fa      	adds	r2, r7, r3
 8006078:	2314      	movs	r3, #20
 800607a:	18fb      	adds	r3, r7, r3
 800607c:	2100      	movs	r1, #0
 800607e:	5e52      	ldrsh	r2, [r2, r1]
 8006080:	2100      	movs	r1, #0
 8006082:	5e5b      	ldrsh	r3, [r3, r1]
 8006084:	429a      	cmp	r2, r3
 8006086:	da00      	bge.n	800608a <_UG_PutChar+0x422>
 8006088:	e6a4      	b.n	8005dd4 <_UG_PutChar+0x16c>
       for( i=0;i<bn;i++ )
 800608a:	212a      	movs	r1, #42	@ 0x2a
 800608c:	187b      	adds	r3, r7, r1
 800608e:	881a      	ldrh	r2, [r3, #0]
 8006090:	187b      	adds	r3, r7, r1
 8006092:	3201      	adds	r2, #1
 8006094:	801a      	strh	r2, [r3, #0]
 8006096:	232a      	movs	r3, #42	@ 0x2a
 8006098:	18fa      	adds	r2, r7, r3
 800609a:	2324      	movs	r3, #36	@ 0x24
 800609c:	18fb      	adds	r3, r7, r3
 800609e:	8812      	ldrh	r2, [r2, #0]
 80060a0:	881b      	ldrh	r3, [r3, #0]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d200      	bcs.n	80060a8 <_UG_PutChar+0x440>
 80060a6:	e689      	b.n	8005dbc <_UG_PutChar+0x154>
     for( j=0;j< gui->currentFont.char_height;j++ )
 80060a8:	2128      	movs	r1, #40	@ 0x28
 80060aa:	187b      	adds	r3, r7, r1
 80060ac:	881a      	ldrh	r2, [r3, #0]
 80060ae:	187b      	adds	r3, r7, r1
 80060b0:	3201      	adds	r2, #1
 80060b2:	801a      	strh	r2, [r3, #0]
 80060b4:	4b93      	ldr	r3, [pc, #588]	@ (8006304 <_UG_PutChar+0x69c>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	222f      	movs	r2, #47	@ 0x2f
 80060ba:	5c9b      	ldrb	r3, [r3, r2]
 80060bc:	001a      	movs	r2, r3
 80060be:	2328      	movs	r3, #40	@ 0x28
 80060c0:	18fb      	adds	r3, r7, r3
 80060c2:	881b      	ldrh	r3, [r3, #0]
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d200      	bcs.n	80060ca <_UG_PutChar+0x462>
 80060c8:	e66f      	b.n	8005daa <_UG_PutChar+0x142>
        }
       }
     }
     if(driver){                                            // After finishing, ensure there're no remaining pixels left, make another pass
 80060ca:	2316      	movs	r3, #22
 80060cc:	18fb      	adds	r3, r7, r3
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d100      	bne.n	80060d6 <_UG_PutChar+0x46e>
 80060d4:	e15d      	b.n	8006392 <_UG_PutChar+0x72a>
       if(bpixels && !trans)
 80060d6:	2220      	movs	r2, #32
 80060d8:	18bb      	adds	r3, r7, r2
 80060da:	881b      	ldrh	r3, [r3, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d00d      	beq.n	80060fc <_UG_PutChar+0x494>
 80060e0:	2317      	movs	r3, #23
 80060e2:	18fb      	adds	r3, r7, r3
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d108      	bne.n	80060fc <_UG_PutChar+0x494>
       {
         push_pixels(bpixels,bc);
 80060ea:	2348      	movs	r3, #72	@ 0x48
 80060ec:	18fb      	adds	r3, r7, r3
 80060ee:	8819      	ldrh	r1, [r3, #0]
 80060f0:	18bb      	adds	r3, r7, r2
 80060f2:	881a      	ldrh	r2, [r3, #0]
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	0010      	movs	r0, r2
 80060f8:	4798      	blx	r3
 80060fa:	e14a      	b.n	8006392 <_UG_PutChar+0x72a>
       }
       else if(fpixels)
 80060fc:	2222      	movs	r2, #34	@ 0x22
 80060fe:	18bb      	adds	r3, r7, r2
 8006100:	881b      	ldrh	r3, [r3, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d100      	bne.n	8006108 <_UG_PutChar+0x4a0>
 8006106:	e144      	b.n	8006392 <_UG_PutChar+0x72a>
       {
         if(!trans)
 8006108:	2317      	movs	r3, #23
 800610a:	18fb      	adds	r3, r7, r3
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d000      	beq.n	8006114 <_UG_PutChar+0x4ac>
 8006112:	e095      	b.n	8006240 <_UG_PutChar+0x5d8>
         {
           push_pixels(fpixels,fc);
 8006114:	003b      	movs	r3, r7
 8006116:	8819      	ldrh	r1, [r3, #0]
 8006118:	18bb      	adds	r3, r7, r2
 800611a:	881a      	ldrh	r2, [r3, #0]
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	0010      	movs	r0, r2
 8006120:	4798      	blx	r3
 8006122:	e136      	b.n	8006392 <_UG_PutChar+0x72a>
         }
         else
         {
           while(fpixels)
           {
             UG_U16 width = (x+actual_char_width)-x0;
 8006124:	1d3b      	adds	r3, r7, #4
 8006126:	881a      	ldrh	r2, [r3, #0]
 8006128:	2314      	movs	r3, #20
 800612a:	18fb      	adds	r3, r7, r3
 800612c:	881b      	ldrh	r3, [r3, #0]
 800612e:	18d3      	adds	r3, r2, r3
 8006130:	b299      	uxth	r1, r3
 8006132:	2010      	movs	r0, #16
 8006134:	183b      	adds	r3, r7, r0
 8006136:	242e      	movs	r4, #46	@ 0x2e
 8006138:	193a      	adds	r2, r7, r4
 800613a:	8812      	ldrh	r2, [r2, #0]
 800613c:	1a8a      	subs	r2, r1, r2
 800613e:	801a      	strh	r2, [r3, #0]
             if(x0==x || fpixels<width)
 8006140:	193b      	adds	r3, r7, r4
 8006142:	881a      	ldrh	r2, [r3, #0]
 8006144:	1d3b      	adds	r3, r7, #4
 8006146:	2100      	movs	r1, #0
 8006148:	5e5b      	ldrsh	r3, [r3, r1]
 800614a:	429a      	cmp	r2, r3
 800614c:	d006      	beq.n	800615c <_UG_PutChar+0x4f4>
 800614e:	2322      	movs	r3, #34	@ 0x22
 8006150:	18fa      	adds	r2, r7, r3
 8006152:	183b      	adds	r3, r7, r0
 8006154:	8812      	ldrh	r2, [r2, #0]
 8006156:	881b      	ldrh	r3, [r3, #0]
 8006158:	429a      	cmp	r2, r3
 800615a:	d23a      	bcs.n	80061d2 <_UG_PutChar+0x56a>
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 800615c:	4b69      	ldr	r3, [pc, #420]	@ (8006304 <_UG_PutChar+0x69c>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006162:	4698      	mov	r8, r3
 8006164:	222e      	movs	r2, #46	@ 0x2e
 8006166:	18bb      	adds	r3, r7, r2
 8006168:	2400      	movs	r4, #0
 800616a:	5f1c      	ldrsh	r4, [r3, r4]
 800616c:	232c      	movs	r3, #44	@ 0x2c
 800616e:	18fb      	adds	r3, r7, r3
 8006170:	2000      	movs	r0, #0
 8006172:	5e1d      	ldrsh	r5, [r3, r0]
 8006174:	18ba      	adds	r2, r7, r2
 8006176:	2010      	movs	r0, #16
 8006178:	183b      	adds	r3, r7, r0
 800617a:	8812      	ldrh	r2, [r2, #0]
 800617c:	881b      	ldrh	r3, [r3, #0]
 800617e:	18d3      	adds	r3, r2, r3
 8006180:	b29b      	uxth	r3, r3
 8006182:	3b01      	subs	r3, #1
 8006184:	b29b      	uxth	r3, r3
 8006186:	b21e      	sxth	r6, r3
 8006188:	2322      	movs	r3, #34	@ 0x22
 800618a:	18fb      	adds	r3, r7, r3
 800618c:	881a      	ldrh	r2, [r3, #0]
 800618e:	2014      	movs	r0, #20
 8006190:	183b      	adds	r3, r7, r0
 8006192:	2000      	movs	r0, #0
 8006194:	5e1b      	ldrsh	r3, [r3, r0]
 8006196:	0019      	movs	r1, r3
 8006198:	0010      	movs	r0, r2
 800619a:	f7fa f849 	bl	8000230 <__divsi3>
 800619e:	0003      	movs	r3, r0
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	212c      	movs	r1, #44	@ 0x2c
 80061a4:	187b      	adds	r3, r7, r1
 80061a6:	881b      	ldrh	r3, [r3, #0]
 80061a8:	18d3      	adds	r3, r2, r3
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	b21b      	sxth	r3, r3
 80061ae:	0032      	movs	r2, r6
 80061b0:	0029      	movs	r1, r5
 80061b2:	0020      	movs	r0, r4
 80061b4:	47c0      	blx	r8
 80061b6:	0003      	movs	r3, r0
 80061b8:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 80061ba:	003b      	movs	r3, r7
 80061bc:	8819      	ldrh	r1, [r3, #0]
 80061be:	2422      	movs	r4, #34	@ 0x22
 80061c0:	193b      	adds	r3, r7, r4
 80061c2:	881a      	ldrh	r2, [r3, #0]
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	0010      	movs	r0, r2
 80061c8:	4798      	blx	r3
               fpixels=0;
 80061ca:	193b      	adds	r3, r7, r4
 80061cc:	2200      	movs	r2, #0
 80061ce:	801a      	strh	r2, [r3, #0]
 80061d0:	e036      	b.n	8006240 <_UG_PutChar+0x5d8>
             }
             else
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 80061d2:	4b4c      	ldr	r3, [pc, #304]	@ (8006304 <_UG_PutChar+0x69c>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061d8:	001c      	movs	r4, r3
 80061da:	262e      	movs	r6, #46	@ 0x2e
 80061dc:	19bb      	adds	r3, r7, r6
 80061de:	2000      	movs	r0, #0
 80061e0:	5e18      	ldrsh	r0, [r3, r0]
 80061e2:	252c      	movs	r5, #44	@ 0x2c
 80061e4:	197b      	adds	r3, r7, r5
 80061e6:	2200      	movs	r2, #0
 80061e8:	5e9a      	ldrsh	r2, [r3, r2]
 80061ea:	4694      	mov	ip, r2
 80061ec:	19ba      	adds	r2, r7, r6
 80061ee:	2310      	movs	r3, #16
 80061f0:	18fb      	adds	r3, r7, r3
 80061f2:	8812      	ldrh	r2, [r2, #0]
 80061f4:	881b      	ldrh	r3, [r3, #0]
 80061f6:	18d3      	adds	r3, r2, r3
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	3b01      	subs	r3, #1
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	b21a      	sxth	r2, r3
 8006200:	197b      	adds	r3, r7, r5
 8006202:	2100      	movs	r1, #0
 8006204:	5e5b      	ldrsh	r3, [r3, r1]
 8006206:	4661      	mov	r1, ip
 8006208:	47a0      	blx	r4
 800620a:	0003      	movs	r3, r0
 800620c:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 800620e:	003b      	movs	r3, r7
 8006210:	8819      	ldrh	r1, [r3, #0]
 8006212:	2422      	movs	r4, #34	@ 0x22
 8006214:	193b      	adds	r3, r7, r4
 8006216:	881a      	ldrh	r2, [r3, #0]
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	0010      	movs	r0, r2
 800621c:	4798      	blx	r3
               fpixels -= width;
 800621e:	193b      	adds	r3, r7, r4
 8006220:	1939      	adds	r1, r7, r4
 8006222:	2210      	movs	r2, #16
 8006224:	18ba      	adds	r2, r7, r2
 8006226:	8809      	ldrh	r1, [r1, #0]
 8006228:	8812      	ldrh	r2, [r2, #0]
 800622a:	1a8a      	subs	r2, r1, r2
 800622c:	801a      	strh	r2, [r3, #0]
               x0=x;
 800622e:	19bb      	adds	r3, r7, r6
 8006230:	1d3a      	adds	r2, r7, #4
 8006232:	8812      	ldrh	r2, [r2, #0]
 8006234:	801a      	strh	r2, [r3, #0]
               y0++;
 8006236:	197b      	adds	r3, r7, r5
 8006238:	881a      	ldrh	r2, [r3, #0]
 800623a:	197b      	adds	r3, r7, r5
 800623c:	3201      	adds	r2, #1
 800623e:	801a      	strh	r2, [r3, #0]
           while(fpixels)
 8006240:	2322      	movs	r3, #34	@ 0x22
 8006242:	18fb      	adds	r3, r7, r3
 8006244:	881b      	ldrh	r3, [r3, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d000      	beq.n	800624c <_UG_PutChar+0x5e4>
 800624a:	e76b      	b.n	8006124 <_UG_PutChar+0x4bc>
 800624c:	e0a1      	b.n	8006392 <_UG_PutChar+0x72a>
         }
       }
     }
   }
   #if defined(UGUI_USE_COLOR_RGB888) || defined(UGUI_USE_COLOR_RGB565)
   else if ( gui->currentFont.font_type == FONT_TYPE_8BPP)
 800624e:	4b2d      	ldr	r3, [pc, #180]	@ (8006304 <_UG_PutChar+0x69c>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	222c      	movs	r2, #44	@ 0x2c
 8006254:	5c9b      	ldrb	r3, [r3, r2]
 8006256:	2b01      	cmp	r3, #1
 8006258:	d000      	beq.n	800625c <_UG_PutChar+0x5f4>
 800625a:	e09a      	b.n	8006392 <_UG_PutChar+0x72a>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 800625c:	2328      	movs	r3, #40	@ 0x28
 800625e:	18fb      	adds	r3, r7, r3
 8006260:	2200      	movs	r2, #0
 8006262:	801a      	strh	r2, [r3, #0]
 8006264:	e08a      	b.n	800637c <_UG_PutChar+0x714>
     {
       for( i=0;i<actual_char_width;i++ )
 8006266:	232a      	movs	r3, #42	@ 0x2a
 8006268:	18fb      	adds	r3, r7, r3
 800626a:	2200      	movs	r2, #0
 800626c:	801a      	strh	r2, [r3, #0]
 800626e:	e069      	b.n	8006344 <_UG_PutChar+0x6dc>
       {
         b = *data++;
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	1c5a      	adds	r2, r3, #1
 8006274:	60ba      	str	r2, [r7, #8]
 8006276:	241d      	movs	r4, #29
 8006278:	193a      	adds	r2, r7, r4
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	7013      	strb	r3, [r2, #0]
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 800627e:	003b      	movs	r3, r7
 8006280:	881b      	ldrh	r3, [r3, #0]
 8006282:	22ff      	movs	r2, #255	@ 0xff
 8006284:	4013      	ands	r3, r2
 8006286:	193a      	adds	r2, r7, r4
 8006288:	7812      	ldrb	r2, [r2, #0]
 800628a:	435a      	muls	r2, r3
 800628c:	2548      	movs	r5, #72	@ 0x48
 800628e:	197b      	adds	r3, r7, r5
 8006290:	881b      	ldrh	r3, [r3, #0]
 8006292:	21ff      	movs	r1, #255	@ 0xff
 8006294:	400b      	ands	r3, r1
 8006296:	1939      	adds	r1, r7, r4
 8006298:	7809      	ldrb	r1, [r1, #0]
 800629a:	2080      	movs	r0, #128	@ 0x80
 800629c:	0040      	lsls	r0, r0, #1
 800629e:	1a41      	subs	r1, r0, r1
 80062a0:	434b      	muls	r3, r1
 80062a2:	18d3      	adds	r3, r2, r3
 80062a4:	121b      	asrs	r3, r3, #8
 80062a6:	b21b      	sxth	r3, r3
 80062a8:	22ff      	movs	r2, #255	@ 0xff
 80062aa:	4013      	ands	r3, r2
 80062ac:	b21a      	sxth	r2, r3
                 ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     //Green component
 80062ae:	003b      	movs	r3, r7
 80062b0:	8819      	ldrh	r1, [r3, #0]
 80062b2:	23ff      	movs	r3, #255	@ 0xff
 80062b4:	021b      	lsls	r3, r3, #8
 80062b6:	400b      	ands	r3, r1
 80062b8:	1939      	adds	r1, r7, r4
 80062ba:	7809      	ldrb	r1, [r1, #0]
 80062bc:	4359      	muls	r1, r3
 80062be:	197b      	adds	r3, r7, r5
 80062c0:	8818      	ldrh	r0, [r3, #0]
 80062c2:	23ff      	movs	r3, #255	@ 0xff
 80062c4:	021b      	lsls	r3, r3, #8
 80062c6:	4003      	ands	r3, r0
 80062c8:	1938      	adds	r0, r7, r4
 80062ca:	7800      	ldrb	r0, [r0, #0]
 80062cc:	2480      	movs	r4, #128	@ 0x80
 80062ce:	0064      	lsls	r4, r4, #1
 80062d0:	1a20      	subs	r0, r4, r0
 80062d2:	4343      	muls	r3, r0
 80062d4:	18cb      	adds	r3, r1, r3
 80062d6:	121b      	asrs	r3, r3, #8
 80062d8:	b21b      	sxth	r3, r3
 80062da:	21ff      	movs	r1, #255	@ 0xff
 80062dc:	438b      	bics	r3, r1
 80062de:	b21b      	sxth	r3, r3
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 80062e0:	4313      	orrs	r3, r2
 80062e2:	b21a      	sxth	r2, r3
 80062e4:	2112      	movs	r1, #18
 80062e6:	187b      	adds	r3, r7, r1
 80062e8:	801a      	strh	r2, [r3, #0]
                 ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); //Red component
         if(driver)
 80062ea:	2316      	movs	r3, #22
 80062ec:	18fb      	adds	r3, r7, r3
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d009      	beq.n	8006308 <_UG_PutChar+0x6a0>
         {
           push_pixels(1,color);                                                          // Accelerated output
 80062f4:	187b      	adds	r3, r7, r1
 80062f6:	881a      	ldrh	r2, [r3, #0]
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	0011      	movs	r1, r2
 80062fc:	2001      	movs	r0, #1
 80062fe:	4798      	blx	r3
 8006300:	e01a      	b.n	8006338 <_UG_PutChar+0x6d0>
 8006302:	46c0      	nop			@ (mov r8, r8)
 8006304:	200002e4 	.word	0x200002e4
         }
         else
         {
           gui->device->pset(x+i,y+j,color);                                                // Not accelerated output
 8006308:	4b27      	ldr	r3, [pc, #156]	@ (80063a8 <_UG_PutChar+0x740>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	1d3a      	adds	r2, r7, #4
 8006312:	8811      	ldrh	r1, [r2, #0]
 8006314:	222a      	movs	r2, #42	@ 0x2a
 8006316:	18ba      	adds	r2, r7, r2
 8006318:	8812      	ldrh	r2, [r2, #0]
 800631a:	188a      	adds	r2, r1, r2
 800631c:	b292      	uxth	r2, r2
 800631e:	b210      	sxth	r0, r2
 8006320:	1cba      	adds	r2, r7, #2
 8006322:	8811      	ldrh	r1, [r2, #0]
 8006324:	2228      	movs	r2, #40	@ 0x28
 8006326:	18ba      	adds	r2, r7, r2
 8006328:	8812      	ldrh	r2, [r2, #0]
 800632a:	188a      	adds	r2, r1, r2
 800632c:	b292      	uxth	r2, r2
 800632e:	b211      	sxth	r1, r2
 8006330:	2212      	movs	r2, #18
 8006332:	18ba      	adds	r2, r7, r2
 8006334:	8812      	ldrh	r2, [r2, #0]
 8006336:	4798      	blx	r3
       for( i=0;i<actual_char_width;i++ )
 8006338:	212a      	movs	r1, #42	@ 0x2a
 800633a:	187b      	adds	r3, r7, r1
 800633c:	881a      	ldrh	r2, [r3, #0]
 800633e:	187b      	adds	r3, r7, r1
 8006340:	3201      	adds	r2, #1
 8006342:	801a      	strh	r2, [r3, #0]
 8006344:	232a      	movs	r3, #42	@ 0x2a
 8006346:	18fb      	adds	r3, r7, r3
 8006348:	881a      	ldrh	r2, [r3, #0]
 800634a:	2014      	movs	r0, #20
 800634c:	183b      	adds	r3, r7, r0
 800634e:	2100      	movs	r1, #0
 8006350:	5e5b      	ldrsh	r3, [r3, r1]
 8006352:	429a      	cmp	r2, r3
 8006354:	da00      	bge.n	8006358 <_UG_PutChar+0x6f0>
 8006356:	e78b      	b.n	8006270 <_UG_PutChar+0x608>
         }
       }
       data +=  gui->currentFont.char_width - actual_char_width;
 8006358:	68ba      	ldr	r2, [r7, #8]
 800635a:	4b13      	ldr	r3, [pc, #76]	@ (80063a8 <_UG_PutChar+0x740>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	212e      	movs	r1, #46	@ 0x2e
 8006360:	5c5b      	ldrb	r3, [r3, r1]
 8006362:	0019      	movs	r1, r3
 8006364:	183b      	adds	r3, r7, r0
 8006366:	2000      	movs	r0, #0
 8006368:	5e1b      	ldrsh	r3, [r3, r0]
 800636a:	1acb      	subs	r3, r1, r3
 800636c:	18d3      	adds	r3, r2, r3
 800636e:	60bb      	str	r3, [r7, #8]
     for( j=0;j< gui->currentFont.char_height;j++ )
 8006370:	2128      	movs	r1, #40	@ 0x28
 8006372:	187b      	adds	r3, r7, r1
 8006374:	881a      	ldrh	r2, [r3, #0]
 8006376:	187b      	adds	r3, r7, r1
 8006378:	3201      	adds	r2, #1
 800637a:	801a      	strh	r2, [r3, #0]
 800637c:	4b0a      	ldr	r3, [pc, #40]	@ (80063a8 <_UG_PutChar+0x740>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	222f      	movs	r2, #47	@ 0x2f
 8006382:	5c9b      	ldrb	r3, [r3, r2]
 8006384:	001a      	movs	r2, r3
 8006386:	2328      	movs	r3, #40	@ 0x28
 8006388:	18fb      	adds	r3, r7, r3
 800638a:	881b      	ldrh	r3, [r3, #0]
 800638c:	4293      	cmp	r3, r2
 800638e:	d200      	bcs.n	8006392 <_UG_PutChar+0x72a>
 8006390:	e769      	b.n	8006266 <_UG_PutChar+0x5fe>
     }
   }
   #endif
   return (actual_char_width);
 8006392:	2314      	movs	r3, #20
 8006394:	18fb      	adds	r3, r7, r3
 8006396:	2200      	movs	r2, #0
 8006398:	5e9b      	ldrsh	r3, [r3, r2]
}
 800639a:	0018      	movs	r0, r3
 800639c:	46bd      	mov	sp, r7
 800639e:	b00c      	add	sp, #48	@ 0x30
 80063a0:	bc80      	pop	{r7}
 80063a2:	46b8      	mov	r8, r7
 80063a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063a6:	46c0      	nop			@ (mov r8, r8)
 80063a8:	200002e4 	.word	0x200002e4

080063ac <_UG_ProcessTouchData>:

#ifdef UGUI_USE_TOUCH
static void _UG_ProcessTouchData( UG_WINDOW* wnd )
{
 80063ac:	b590      	push	{r4, r7, lr}
 80063ae:	b089      	sub	sp, #36	@ 0x24
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
   UG_OBJECT* obj;
   UG_U8 objstate;
   UG_U8 objtouch;
   UG_U8 tchstate;

   xp = gui->touch.xp;
 80063b4:	4b77      	ldr	r3, [pc, #476]	@ (8006594 <_UG_ProcessTouchData+0x1e8>)
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	231a      	movs	r3, #26
 80063ba:	18fb      	adds	r3, r7, r3
 80063bc:	88d2      	ldrh	r2, [r2, #6]
 80063be:	801a      	strh	r2, [r3, #0]
   yp = gui->touch.yp;
 80063c0:	4b74      	ldr	r3, [pc, #464]	@ (8006594 <_UG_ProcessTouchData+0x1e8>)
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	2318      	movs	r3, #24
 80063c6:	18fb      	adds	r3, r7, r3
 80063c8:	8912      	ldrh	r2, [r2, #8]
 80063ca:	801a      	strh	r2, [r3, #0]
   tchstate = gui->touch.state;
 80063cc:	4b71      	ldr	r3, [pc, #452]	@ (8006594 <_UG_ProcessTouchData+0x1e8>)
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	2317      	movs	r3, #23
 80063d2:	18fb      	adds	r3, r7, r3
 80063d4:	7912      	ldrb	r2, [r2, #4]
 80063d6:	701a      	strb	r2, [r3, #0]

   objcnt = wnd->objcnt;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	781a      	ldrb	r2, [r3, #0]
 80063dc:	2314      	movs	r3, #20
 80063de:	18fb      	adds	r3, r7, r3
 80063e0:	801a      	strh	r2, [r3, #0]
   for(i=0; i<objcnt; i++)
 80063e2:	231e      	movs	r3, #30
 80063e4:	18fb      	adds	r3, r7, r3
 80063e6:	2200      	movs	r2, #0
 80063e8:	801a      	strh	r2, [r3, #0]
 80063ea:	e0c5      	b.n	8006578 <_UG_ProcessTouchData+0x1cc>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685a      	ldr	r2, [r3, #4]
 80063f0:	231e      	movs	r3, #30
 80063f2:	18fb      	adds	r3, r7, r3
 80063f4:	881b      	ldrh	r3, [r3, #0]
 80063f6:	015b      	lsls	r3, r3, #5
 80063f8:	18d3      	adds	r3, r2, r3
 80063fa:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 80063fc:	200f      	movs	r0, #15
 80063fe:	183b      	adds	r3, r7, r0
 8006400:	693a      	ldr	r2, [r7, #16]
 8006402:	7812      	ldrb	r2, [r2, #0]
 8006404:	701a      	strb	r2, [r3, #0]
      objtouch = obj->touch_state;
 8006406:	211d      	movs	r1, #29
 8006408:	187b      	adds	r3, r7, r1
 800640a:	693a      	ldr	r2, [r7, #16]
 800640c:	7852      	ldrb	r2, [r2, #1]
 800640e:	701a      	strb	r2, [r3, #0]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) && (objstate & OBJ_STATE_VISIBLE) && !(objstate & OBJ_STATE_REDRAW))
 8006410:	183b      	adds	r3, r7, r0
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	2201      	movs	r2, #1
 8006416:	4013      	ands	r3, r2
 8006418:	d000      	beq.n	800641c <_UG_ProcessTouchData+0x70>
 800641a:	e0a2      	b.n	8006562 <_UG_ProcessTouchData+0x1b6>
 800641c:	183b      	adds	r3, r7, r0
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	2202      	movs	r2, #2
 8006422:	4013      	ands	r3, r2
 8006424:	d100      	bne.n	8006428 <_UG_ProcessTouchData+0x7c>
 8006426:	e09c      	b.n	8006562 <_UG_ProcessTouchData+0x1b6>
 8006428:	183b      	adds	r3, r7, r0
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	2208      	movs	r2, #8
 800642e:	4013      	ands	r3, r2
 8006430:	d100      	bne.n	8006434 <_UG_ProcessTouchData+0x88>
 8006432:	e096      	b.n	8006562 <_UG_ProcessTouchData+0x1b6>
 8006434:	183b      	adds	r3, r7, r0
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	2240      	movs	r2, #64	@ 0x40
 800643a:	4013      	ands	r3, r2
 800643c:	d000      	beq.n	8006440 <_UG_ProcessTouchData+0x94>
 800643e:	e090      	b.n	8006562 <_UG_ProcessTouchData+0x1b6>
      {
         /* Process touch data */
         if ( (tchstate) && xp != -1 )
 8006440:	2317      	movs	r3, #23
 8006442:	18fb      	adds	r3, r7, r3
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d05f      	beq.n	800650a <_UG_ProcessTouchData+0x15e>
 800644a:	231a      	movs	r3, #26
 800644c:	18fb      	adds	r3, r7, r3
 800644e:	2200      	movs	r2, #0
 8006450:	5e9b      	ldrsh	r3, [r3, r2]
 8006452:	3301      	adds	r3, #1
 8006454:	d059      	beq.n	800650a <_UG_ProcessTouchData+0x15e>
         {
            if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 8006456:	187b      	adds	r3, r7, r1
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	2240      	movs	r2, #64	@ 0x40
 800645c:	4013      	ands	r3, r2
 800645e:	d10c      	bne.n	800647a <_UG_ProcessTouchData+0xce>
            {
               objtouch |= OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_CHANGED;
 8006460:	187b      	adds	r3, r7, r1
 8006462:	0008      	movs	r0, r1
 8006464:	187a      	adds	r2, r7, r1
 8006466:	7812      	ldrb	r2, [r2, #0]
 8006468:	2105      	movs	r1, #5
 800646a:	430a      	orrs	r2, r1
 800646c:	701a      	strb	r2, [r3, #0]
               objtouch &= ~(OBJ_TOUCH_STATE_RELEASED_ON_OBJECT | OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT);
 800646e:	183b      	adds	r3, r7, r0
 8006470:	183a      	adds	r2, r7, r0
 8006472:	7812      	ldrb	r2, [r2, #0]
 8006474:	2118      	movs	r1, #24
 8006476:	438a      	bics	r2, r1
 8006478:	701a      	strb	r2, [r3, #0]
            }
            objtouch &= ~OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 800647a:	201d      	movs	r0, #29
 800647c:	183b      	adds	r3, r7, r0
 800647e:	183a      	adds	r2, r7, r0
 8006480:	7812      	ldrb	r2, [r2, #0]
 8006482:	2120      	movs	r1, #32
 8006484:	438a      	bics	r2, r1
 8006486:	701a      	strb	r2, [r3, #0]
            if ( xp >= obj->a_abs.xs )
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	2208      	movs	r2, #8
 800648c:	5e9b      	ldrsh	r3, [r3, r2]
 800648e:	211a      	movs	r1, #26
 8006490:	187a      	adds	r2, r7, r1
 8006492:	2400      	movs	r4, #0
 8006494:	5f12      	ldrsh	r2, [r2, r4]
 8006496:	429a      	cmp	r2, r3
 8006498:	db2f      	blt.n	80064fa <_UG_ProcessTouchData+0x14e>
            {
               if ( xp <= obj->a_abs.xe )
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	220c      	movs	r2, #12
 800649e:	5e9b      	ldrsh	r3, [r3, r2]
 80064a0:	187a      	adds	r2, r7, r1
 80064a2:	2100      	movs	r1, #0
 80064a4:	5e52      	ldrsh	r2, [r2, r1]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	dc27      	bgt.n	80064fa <_UG_ProcessTouchData+0x14e>
               {
                  if ( yp >= obj->a_abs.ys )
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	220a      	movs	r2, #10
 80064ae:	5e9b      	ldrsh	r3, [r3, r2]
 80064b0:	2118      	movs	r1, #24
 80064b2:	187a      	adds	r2, r7, r1
 80064b4:	2400      	movs	r4, #0
 80064b6:	5f12      	ldrsh	r2, [r2, r4]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	db1e      	blt.n	80064fa <_UG_ProcessTouchData+0x14e>
                  {
                     if ( yp <= obj->a_abs.ye )
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	220e      	movs	r2, #14
 80064c0:	5e9b      	ldrsh	r3, [r3, r2]
 80064c2:	187a      	adds	r2, r7, r1
 80064c4:	2100      	movs	r1, #0
 80064c6:	5e52      	ldrsh	r2, [r2, r1]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	dc16      	bgt.n	80064fa <_UG_ProcessTouchData+0x14e>
                     {
                        objtouch |= OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 80064cc:	183b      	adds	r3, r7, r0
 80064ce:	183a      	adds	r2, r7, r0
 80064d0:	7812      	ldrb	r2, [r2, #0]
 80064d2:	2120      	movs	r1, #32
 80064d4:	430a      	orrs	r2, r1
 80064d6:	701a      	strb	r2, [r3, #0]
                        if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 80064d8:	183b      	adds	r3, r7, r0
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	2240      	movs	r2, #64	@ 0x40
 80064de:	4013      	ands	r3, r2
 80064e0:	d10b      	bne.n	80064fa <_UG_ProcessTouchData+0x14e>
                        {
                           objtouch &= ~OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT;
 80064e2:	183b      	adds	r3, r7, r0
 80064e4:	183a      	adds	r2, r7, r0
 80064e6:	7812      	ldrb	r2, [r2, #0]
 80064e8:	2104      	movs	r1, #4
 80064ea:	438a      	bics	r2, r1
 80064ec:	701a      	strb	r2, [r3, #0]
                           objtouch |= OBJ_TOUCH_STATE_PRESSED_ON_OBJECT;
 80064ee:	183b      	adds	r3, r7, r0
 80064f0:	183a      	adds	r2, r7, r0
 80064f2:	7812      	ldrb	r2, [r2, #0]
 80064f4:	2102      	movs	r1, #2
 80064f6:	430a      	orrs	r2, r1
 80064f8:	701a      	strb	r2, [r3, #0]
                        }
                     }
                  }
               }
            }
            objtouch |= OBJ_TOUCH_STATE_IS_PRESSED;
 80064fa:	221d      	movs	r2, #29
 80064fc:	18bb      	adds	r3, r7, r2
 80064fe:	18ba      	adds	r2, r7, r2
 8006500:	7812      	ldrb	r2, [r2, #0]
 8006502:	2140      	movs	r1, #64	@ 0x40
 8006504:	430a      	orrs	r2, r1
 8006506:	701a      	strb	r2, [r3, #0]
 8006508:	e02b      	b.n	8006562 <_UG_ProcessTouchData+0x1b6>
         }
         else if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 800650a:	211d      	movs	r1, #29
 800650c:	187b      	adds	r3, r7, r1
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	2240      	movs	r2, #64	@ 0x40
 8006512:	4013      	ands	r3, r2
 8006514:	d025      	beq.n	8006562 <_UG_ProcessTouchData+0x1b6>
         {
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT )
 8006516:	187b      	adds	r3, r7, r1
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	2220      	movs	r2, #32
 800651c:	4013      	ands	r3, r2
 800651e:	d006      	beq.n	800652e <_UG_ProcessTouchData+0x182>
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_ON_OBJECT;
 8006520:	187b      	adds	r3, r7, r1
 8006522:	187a      	adds	r2, r7, r1
 8006524:	7812      	ldrb	r2, [r2, #0]
 8006526:	2108      	movs	r1, #8
 8006528:	430a      	orrs	r2, r1
 800652a:	701a      	strb	r2, [r3, #0]
 800652c:	e006      	b.n	800653c <_UG_ProcessTouchData+0x190>
            }
            else
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT;
 800652e:	221d      	movs	r2, #29
 8006530:	18bb      	adds	r3, r7, r2
 8006532:	18ba      	adds	r2, r7, r2
 8006534:	7812      	ldrb	r2, [r2, #0]
 8006536:	2110      	movs	r1, #16
 8006538:	430a      	orrs	r2, r1
 800653a:	701a      	strb	r2, [r3, #0]
            }
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 800653c:	211d      	movs	r1, #29
 800653e:	187b      	adds	r3, r7, r1
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	2240      	movs	r2, #64	@ 0x40
 8006544:	4013      	ands	r3, r2
 8006546:	d005      	beq.n	8006554 <_UG_ProcessTouchData+0x1a8>
            {
               objtouch |= OBJ_TOUCH_STATE_CHANGED;
 8006548:	187b      	adds	r3, r7, r1
 800654a:	187a      	adds	r2, r7, r1
 800654c:	7812      	ldrb	r2, [r2, #0]
 800654e:	2101      	movs	r1, #1
 8006550:	430a      	orrs	r2, r1
 8006552:	701a      	strb	r2, [r3, #0]
            }
            objtouch &= ~(OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_PRESSED_ON_OBJECT | OBJ_TOUCH_STATE_IS_PRESSED);
 8006554:	221d      	movs	r2, #29
 8006556:	18bb      	adds	r3, r7, r2
 8006558:	18ba      	adds	r2, r7, r2
 800655a:	7812      	ldrb	r2, [r2, #0]
 800655c:	2146      	movs	r1, #70	@ 0x46
 800655e:	438a      	bics	r2, r1
 8006560:	701a      	strb	r2, [r3, #0]
         }
      }
      obj->touch_state = objtouch;
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	221d      	movs	r2, #29
 8006566:	18ba      	adds	r2, r7, r2
 8006568:	7812      	ldrb	r2, [r2, #0]
 800656a:	705a      	strb	r2, [r3, #1]
   for(i=0; i<objcnt; i++)
 800656c:	211e      	movs	r1, #30
 800656e:	187b      	adds	r3, r7, r1
 8006570:	881a      	ldrh	r2, [r3, #0]
 8006572:	187b      	adds	r3, r7, r1
 8006574:	3201      	adds	r2, #1
 8006576:	801a      	strh	r2, [r3, #0]
 8006578:	231e      	movs	r3, #30
 800657a:	18fa      	adds	r2, r7, r3
 800657c:	2314      	movs	r3, #20
 800657e:	18fb      	adds	r3, r7, r3
 8006580:	8812      	ldrh	r2, [r2, #0]
 8006582:	881b      	ldrh	r3, [r3, #0]
 8006584:	429a      	cmp	r2, r3
 8006586:	d200      	bcs.n	800658a <_UG_ProcessTouchData+0x1de>
 8006588:	e730      	b.n	80063ec <_UG_ProcessTouchData+0x40>
   }
}
 800658a:	46c0      	nop			@ (mov r8, r8)
 800658c:	46c0      	nop			@ (mov r8, r8)
 800658e:	46bd      	mov	sp, r7
 8006590:	b009      	add	sp, #36	@ 0x24
 8006592:	bd90      	pop	{r4, r7, pc}
 8006594:	200002e4 	.word	0x200002e4

08006598 <_UG_UpdateObjects>:
#endif

static void _UG_UpdateObjects( UG_WINDOW* wnd )
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b086      	sub	sp, #24
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
   #ifdef UGUI_USE_TOUCH
   UG_U8 objtouch;
   #endif

   /* Check each object, if it needs to be updated? */
   objcnt = wnd->objcnt;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	781a      	ldrb	r2, [r3, #0]
 80065a4:	2314      	movs	r3, #20
 80065a6:	18fb      	adds	r3, r7, r3
 80065a8:	801a      	strh	r2, [r3, #0]
   for(i=0; i<objcnt; i++)
 80065aa:	2316      	movs	r3, #22
 80065ac:	18fb      	adds	r3, r7, r3
 80065ae:	2200      	movs	r2, #0
 80065b0:	801a      	strh	r2, [r3, #0]
 80065b2:	e043      	b.n	800663c <_UG_UpdateObjects+0xa4>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	685a      	ldr	r2, [r3, #4]
 80065b8:	2316      	movs	r3, #22
 80065ba:	18fb      	adds	r3, r7, r3
 80065bc:	881b      	ldrh	r3, [r3, #0]
 80065be:	015b      	lsls	r3, r3, #5
 80065c0:	18d3      	adds	r3, r2, r3
 80065c2:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 80065c4:	210f      	movs	r1, #15
 80065c6:	187b      	adds	r3, r7, r1
 80065c8:	693a      	ldr	r2, [r7, #16]
 80065ca:	7812      	ldrb	r2, [r2, #0]
 80065cc:	701a      	strb	r2, [r3, #0]
      #ifdef UGUI_USE_TOUCH
      objtouch = obj->touch_state;
 80065ce:	230e      	movs	r3, #14
 80065d0:	18fb      	adds	r3, r7, r3
 80065d2:	693a      	ldr	r2, [r7, #16]
 80065d4:	7852      	ldrb	r2, [r2, #1]
 80065d6:	701a      	strb	r2, [r3, #0]
      #endif
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 80065d8:	187b      	adds	r3, r7, r1
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	2201      	movs	r2, #1
 80065de:	4013      	ands	r3, r2
 80065e0:	d126      	bne.n	8006630 <_UG_UpdateObjects+0x98>
 80065e2:	187b      	adds	r3, r7, r1
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	2202      	movs	r2, #2
 80065e8:	4013      	ands	r3, r2
 80065ea:	d021      	beq.n	8006630 <_UG_UpdateObjects+0x98>
      {
         if ( objstate & OBJ_STATE_UPDATE )
 80065ec:	187b      	adds	r3, r7, r1
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	2220      	movs	r2, #32
 80065f2:	4013      	ands	r3, r2
 80065f4:	d005      	beq.n	8006602 <_UG_UpdateObjects+0x6a>
         {
            obj->update(wnd,obj);
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	6939      	ldr	r1, [r7, #16]
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	0010      	movs	r0, r2
 8006600:	4798      	blx	r3
         }
         #ifdef UGUI_USE_TOUCH
         if ( (objstate & OBJ_STATE_VISIBLE) && (objstate & OBJ_STATE_TOUCH_ENABLE) )
 8006602:	210f      	movs	r1, #15
 8006604:	187b      	adds	r3, r7, r1
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	2208      	movs	r2, #8
 800660a:	4013      	ands	r3, r2
 800660c:	d010      	beq.n	8006630 <_UG_UpdateObjects+0x98>
 800660e:	187b      	adds	r3, r7, r1
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	b25b      	sxtb	r3, r3
 8006614:	2b00      	cmp	r3, #0
 8006616:	da0b      	bge.n	8006630 <_UG_UpdateObjects+0x98>
         {
            if ( (objtouch & (OBJ_TOUCH_STATE_CHANGED | OBJ_TOUCH_STATE_IS_PRESSED)) )
 8006618:	230e      	movs	r3, #14
 800661a:	18fb      	adds	r3, r7, r3
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	2241      	movs	r2, #65	@ 0x41
 8006620:	4013      	ands	r3, r2
 8006622:	d005      	beq.n	8006630 <_UG_UpdateObjects+0x98>
            {
               obj->update(wnd,obj);
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	6939      	ldr	r1, [r7, #16]
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	0010      	movs	r0, r2
 800662e:	4798      	blx	r3
   for(i=0; i<objcnt; i++)
 8006630:	2116      	movs	r1, #22
 8006632:	187b      	adds	r3, r7, r1
 8006634:	881a      	ldrh	r2, [r3, #0]
 8006636:	187b      	adds	r3, r7, r1
 8006638:	3201      	adds	r2, #1
 800663a:	801a      	strh	r2, [r3, #0]
 800663c:	2316      	movs	r3, #22
 800663e:	18fa      	adds	r2, r7, r3
 8006640:	2314      	movs	r3, #20
 8006642:	18fb      	adds	r3, r7, r3
 8006644:	8812      	ldrh	r2, [r2, #0]
 8006646:	881b      	ldrh	r3, [r3, #0]
 8006648:	429a      	cmp	r2, r3
 800664a:	d3b3      	bcc.n	80065b4 <_UG_UpdateObjects+0x1c>
            }
         }
         #endif
      }
   }
}
 800664c:	46c0      	nop			@ (mov r8, r8)
 800664e:	46c0      	nop			@ (mov r8, r8)
 8006650:	46bd      	mov	sp, r7
 8006652:	b006      	add	sp, #24
 8006654:	bd80      	pop	{r7, pc}
	...

08006658 <_UG_HandleEvents>:

static void _UG_HandleEvents( UG_WINDOW* wnd )
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b086      	sub	sp, #24
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_U8 objstate;
   static UG_MESSAGE msg;
   msg.src = NULL;
 8006660:	4b2a      	ldr	r3, [pc, #168]	@ (800670c <_UG_HandleEvents+0xb4>)
 8006662:	2200      	movs	r2, #0
 8006664:	605a      	str	r2, [r3, #4]

   /* Handle window-related events */
   //ToDo

   /* Handle object-related events */
   msg.type = MSG_TYPE_OBJECT;
 8006666:	4b29      	ldr	r3, [pc, #164]	@ (800670c <_UG_HandleEvents+0xb4>)
 8006668:	2202      	movs	r2, #2
 800666a:	701a      	strb	r2, [r3, #0]
   objcnt = wnd->objcnt;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	781a      	ldrb	r2, [r3, #0]
 8006670:	2314      	movs	r3, #20
 8006672:	18fb      	adds	r3, r7, r3
 8006674:	801a      	strh	r2, [r3, #0]
   for(i=0; i<objcnt; i++)
 8006676:	2316      	movs	r3, #22
 8006678:	18fb      	adds	r3, r7, r3
 800667a:	2200      	movs	r2, #0
 800667c:	801a      	strh	r2, [r3, #0]
 800667e:	e037      	b.n	80066f0 <_UG_HandleEvents+0x98>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	685a      	ldr	r2, [r3, #4]
 8006684:	2316      	movs	r3, #22
 8006686:	18fb      	adds	r3, r7, r3
 8006688:	881b      	ldrh	r3, [r3, #0]
 800668a:	015b      	lsls	r3, r3, #5
 800668c:	18d3      	adds	r3, r2, r3
 800668e:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8006690:	210f      	movs	r1, #15
 8006692:	187b      	adds	r3, r7, r1
 8006694:	693a      	ldr	r2, [r7, #16]
 8006696:	7812      	ldrb	r2, [r2, #0]
 8006698:	701a      	strb	r2, [r3, #0]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 800669a:	187b      	adds	r3, r7, r1
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	2201      	movs	r2, #1
 80066a0:	4013      	ands	r3, r2
 80066a2:	d11f      	bne.n	80066e4 <_UG_HandleEvents+0x8c>
 80066a4:	187b      	adds	r3, r7, r1
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	2202      	movs	r2, #2
 80066aa:	4013      	ands	r3, r2
 80066ac:	d01a      	beq.n	80066e4 <_UG_HandleEvents+0x8c>
      {
         if ( obj->event != OBJ_EVENT_NONE )
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	7e9b      	ldrb	r3, [r3, #26]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d016      	beq.n	80066e4 <_UG_HandleEvents+0x8c>
         {
            msg.src = obj;
 80066b6:	4b15      	ldr	r3, [pc, #84]	@ (800670c <_UG_HandleEvents+0xb4>)
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	605a      	str	r2, [r3, #4]
            msg.id = obj->type;
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	7e1a      	ldrb	r2, [r3, #24]
 80066c0:	4b12      	ldr	r3, [pc, #72]	@ (800670c <_UG_HandleEvents+0xb4>)
 80066c2:	705a      	strb	r2, [r3, #1]
            msg.sub_id = obj->id;
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	7e5a      	ldrb	r2, [r3, #25]
 80066c8:	4b10      	ldr	r3, [pc, #64]	@ (800670c <_UG_HandleEvents+0xb4>)
 80066ca:	709a      	strb	r2, [r3, #2]
            msg.event = obj->event;
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	7e9a      	ldrb	r2, [r3, #26]
 80066d0:	4b0e      	ldr	r3, [pc, #56]	@ (800670c <_UG_HandleEvents+0xb4>)
 80066d2:	70da      	strb	r2, [r3, #3]

            wnd->cb( &msg );
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066d8:	4a0c      	ldr	r2, [pc, #48]	@ (800670c <_UG_HandleEvents+0xb4>)
 80066da:	0010      	movs	r0, r2
 80066dc:	4798      	blx	r3

            obj->event = OBJ_EVENT_NONE;
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	2200      	movs	r2, #0
 80066e2:	769a      	strb	r2, [r3, #26]
   for(i=0; i<objcnt; i++)
 80066e4:	2116      	movs	r1, #22
 80066e6:	187b      	adds	r3, r7, r1
 80066e8:	881a      	ldrh	r2, [r3, #0]
 80066ea:	187b      	adds	r3, r7, r1
 80066ec:	3201      	adds	r2, #1
 80066ee:	801a      	strh	r2, [r3, #0]
 80066f0:	2316      	movs	r3, #22
 80066f2:	18fa      	adds	r2, r7, r3
 80066f4:	2314      	movs	r3, #20
 80066f6:	18fb      	adds	r3, r7, r3
 80066f8:	8812      	ldrh	r2, [r2, #0]
 80066fa:	881b      	ldrh	r3, [r3, #0]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d3bf      	bcc.n	8006680 <_UG_HandleEvents+0x28>
         }
      }
   }
}
 8006700:	46c0      	nop			@ (mov r8, r8)
 8006702:	46c0      	nop			@ (mov r8, r8)
 8006704:	46bd      	mov	sp, r7
 8006706:	b006      	add	sp, #24
 8006708:	bd80      	pop	{r7, pc}
 800670a:	46c0      	nop			@ (mov r8, r8)
 800670c:	200002f8 	.word	0x200002f8

08006710 <_UG_PutText>:
/* -------------------------------------------------------------------------------- */
/* -- INTERNAL API FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */

void _UG_PutText(UG_TEXT* txt)
{
 8006710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006712:	b08f      	sub	sp, #60	@ 0x3c
 8006714:	af02      	add	r7, sp, #8
 8006716:	6078      	str	r0, [r7, #4]
   if(!txt->font || !txt->str){
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d100      	bne.n	8006722 <_UG_PutText+0x12>
 8006720:	e1b6      	b.n	8006a90 <_UG_PutText+0x380>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d100      	bne.n	800672c <_UG_PutText+0x1c>
 800672a:	e1b1      	b.n	8006a90 <_UG_PutText+0x380>
     return;
   }

   UG_S16 ye=txt->a.ye;
 800672c:	2122      	movs	r1, #34	@ 0x22
 800672e:	187b      	adds	r3, r7, r1
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	89d2      	ldrh	r2, [r2, #14]
 8006734:	801a      	strh	r2, [r3, #0]
   UG_S16 ys=txt->a.ys;
 8006736:	2020      	movs	r0, #32
 8006738:	183b      	adds	r3, r7, r0
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	8952      	ldrh	r2, [r2, #10]
 800673e:	801a      	strh	r2, [r3, #0]
   UG_S16 char_height=UG_GetFontHeight(txt->font);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	3302      	adds	r3, #2
 8006746:	781a      	ldrb	r2, [r3, #0]
 8006748:	241e      	movs	r4, #30
 800674a:	193b      	adds	r3, r7, r4
 800674c:	801a      	strh	r2, [r3, #0]

   if ( (ye - ys) < char_height ){
 800674e:	187b      	adds	r3, r7, r1
 8006750:	2200      	movs	r2, #0
 8006752:	5e9a      	ldrsh	r2, [r3, r2]
 8006754:	183b      	adds	r3, r7, r0
 8006756:	2100      	movs	r1, #0
 8006758:	5e5b      	ldrsh	r3, [r3, r1]
 800675a:	1ad2      	subs	r2, r2, r3
 800675c:	193b      	adds	r3, r7, r4
 800675e:	2100      	movs	r1, #0
 8006760:	5e5b      	ldrsh	r3, [r3, r1]
 8006762:	429a      	cmp	r2, r3
 8006764:	da00      	bge.n	8006768 <_UG_PutText+0x58>
 8006766:	e195      	b.n	8006a94 <_UG_PutText+0x384>
     return;
   }

   UG_U16 sl,rc,wl;
   UG_S16 xp,yp;
   UG_S16 xs=txt->a.xs;
 8006768:	231c      	movs	r3, #28
 800676a:	18fb      	adds	r3, r7, r3
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	8912      	ldrh	r2, [r2, #8]
 8006770:	801a      	strh	r2, [r3, #0]
   UG_S16 xe=txt->a.xe;
 8006772:	231a      	movs	r3, #26
 8006774:	18fb      	adds	r3, r7, r3
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	8992      	ldrh	r2, [r2, #12]
 800677a:	801a      	strh	r2, [r3, #0]
   UG_U8  align=txt->align;
 800677c:	2319      	movs	r3, #25
 800677e:	18fb      	adds	r3, r7, r3
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	7d12      	ldrb	r2, [r2, #20]
 8006784:	701a      	strb	r2, [r3, #0]
   UG_S16 char_h_space=txt->h_space;
 8006786:	2316      	movs	r3, #22
 8006788:	18fb      	adds	r3, r7, r3
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	8ad2      	ldrh	r2, [r2, #22]
 800678e:	801a      	strh	r2, [r3, #0]
   UG_S16 char_v_space=txt->v_space;
 8006790:	2314      	movs	r3, #20
 8006792:	18fb      	adds	r3, r7, r3
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	8b12      	ldrh	r2, [r2, #24]
 8006798:	801a      	strh	r2, [r3, #0]
   UG_S16 w;
   UG_CHAR chr;
   char* str = txt->str;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	60fb      	str	r3, [r7, #12]
   char* c = str;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	60bb      	str	r3, [r7, #8]

   _UG_FontSelect(txt->font);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	0018      	movs	r0, r3
 80067aa:	f7ff f9d9 	bl	8005b60 <_UG_FontSelect>

   rc=1;
 80067ae:	232c      	movs	r3, #44	@ 0x2c
 80067b0:	18fb      	adds	r3, r7, r3
 80067b2:	2201      	movs	r2, #1
 80067b4:	801a      	strh	r2, [r3, #0]
   c=str;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	60bb      	str	r3, [r7, #8]

   while (1)
   {
     #ifdef UGUI_USE_UTF8
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80067ba:	4bbb      	ldr	r3, [pc, #748]	@ (8006aa8 <_UG_PutText+0x398>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	222d      	movs	r2, #45	@ 0x2d
 80067c0:	5c9b      	ldrb	r3, [r3, r2]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d109      	bne.n	80067da <_UG_PutText+0xca>
       chr = _UG_DecodeUTF8(&c);
 80067c6:	2324      	movs	r3, #36	@ 0x24
 80067c8:	18fc      	adds	r4, r7, r3
 80067ca:	2308      	movs	r3, #8
 80067cc:	18fb      	adds	r3, r7, r3
 80067ce:	0018      	movs	r0, r3
 80067d0:	f7fe ffc8 	bl	8005764 <_UG_DecodeUTF8>
 80067d4:	0003      	movs	r3, r0
 80067d6:	8023      	strh	r3, [r4, #0]
 80067d8:	e006      	b.n	80067e8 <_UG_PutText+0xd8>
     }
     else{
       chr = *c++;
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	1c5a      	adds	r2, r3, #1
 80067de:	60ba      	str	r2, [r7, #8]
 80067e0:	781a      	ldrb	r2, [r3, #0]
 80067e2:	2324      	movs	r3, #36	@ 0x24
 80067e4:	18fb      	adds	r3, r7, r3
 80067e6:	801a      	strh	r2, [r3, #0]
     }
     #else
     chr = *c++;
     #endif
     if(!chr) break;
 80067e8:	2224      	movs	r2, #36	@ 0x24
 80067ea:	18bb      	adds	r3, r7, r2
 80067ec:	881b      	ldrh	r3, [r3, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00a      	beq.n	8006808 <_UG_PutText+0xf8>
     if ( chr == '\n' ) rc++;
 80067f2:	18bb      	adds	r3, r7, r2
 80067f4:	881b      	ldrh	r3, [r3, #0]
 80067f6:	2b0a      	cmp	r3, #10
 80067f8:	d1df      	bne.n	80067ba <_UG_PutText+0xaa>
 80067fa:	212c      	movs	r1, #44	@ 0x2c
 80067fc:	187b      	adds	r3, r7, r1
 80067fe:	881a      	ldrh	r2, [r3, #0]
 8006800:	187b      	adds	r3, r7, r1
 8006802:	3201      	adds	r2, #1
 8006804:	801a      	strh	r2, [r3, #0]
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8006806:	e7d8      	b.n	80067ba <_UG_PutText+0xaa>
     if(!chr) break;
 8006808:	46c0      	nop			@ (mov r8, r8)
   }

   yp = 0;
 800680a:	2126      	movs	r1, #38	@ 0x26
 800680c:	187b      	adds	r3, r7, r1
 800680e:	2200      	movs	r2, #0
 8006810:	801a      	strh	r2, [r3, #0]
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 8006812:	2319      	movs	r3, #25
 8006814:	18fb      	adds	r3, r7, r3
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	2230      	movs	r2, #48	@ 0x30
 800681a:	4013      	ands	r3, r2
 800681c:	d02f      	beq.n	800687e <_UG_PutText+0x16e>
   {
      yp = ye - ys + 1;
 800681e:	2322      	movs	r3, #34	@ 0x22
 8006820:	18fb      	adds	r3, r7, r3
 8006822:	881a      	ldrh	r2, [r3, #0]
 8006824:	2320      	movs	r3, #32
 8006826:	18fb      	adds	r3, r7, r3
 8006828:	881b      	ldrh	r3, [r3, #0]
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	b29b      	uxth	r3, r3
 800682e:	3301      	adds	r3, #1
 8006830:	b29a      	uxth	r2, r3
 8006832:	0008      	movs	r0, r1
 8006834:	183b      	adds	r3, r7, r0
 8006836:	801a      	strh	r2, [r3, #0]
      yp -= char_height*rc;
 8006838:	183b      	adds	r3, r7, r0
 800683a:	881a      	ldrh	r2, [r3, #0]
 800683c:	231e      	movs	r3, #30
 800683e:	18fb      	adds	r3, r7, r3
 8006840:	881b      	ldrh	r3, [r3, #0]
 8006842:	242c      	movs	r4, #44	@ 0x2c
 8006844:	1939      	adds	r1, r7, r4
 8006846:	8809      	ldrh	r1, [r1, #0]
 8006848:	434b      	muls	r3, r1
 800684a:	b29b      	uxth	r3, r3
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	b29a      	uxth	r2, r3
 8006850:	183b      	adds	r3, r7, r0
 8006852:	801a      	strh	r2, [r3, #0]
      yp -= char_v_space*(rc-1);
 8006854:	183b      	adds	r3, r7, r0
 8006856:	881a      	ldrh	r2, [r3, #0]
 8006858:	193b      	adds	r3, r7, r4
 800685a:	881b      	ldrh	r3, [r3, #0]
 800685c:	3b01      	subs	r3, #1
 800685e:	b29b      	uxth	r3, r3
 8006860:	2114      	movs	r1, #20
 8006862:	1879      	adds	r1, r7, r1
 8006864:	8809      	ldrh	r1, [r1, #0]
 8006866:	434b      	muls	r3, r1
 8006868:	b29b      	uxth	r3, r3
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	b29a      	uxth	r2, r3
 800686e:	183b      	adds	r3, r7, r0
 8006870:	801a      	strh	r2, [r3, #0]
      if ( yp < 0 ){
 8006872:	183b      	adds	r3, r7, r0
 8006874:	2200      	movs	r2, #0
 8006876:	5e9b      	ldrsh	r3, [r3, r2]
 8006878:	2b00      	cmp	r3, #0
 800687a:	da00      	bge.n	800687e <_UG_PutText+0x16e>
 800687c:	e10c      	b.n	8006a98 <_UG_PutText+0x388>
        return;
      }
   }
   if ( align & ALIGN_V_CENTER ) yp >>= 1;
 800687e:	2319      	movs	r3, #25
 8006880:	18fb      	adds	r3, r7, r3
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	2210      	movs	r2, #16
 8006886:	4013      	ands	r3, r2
 8006888:	d006      	beq.n	8006898 <_UG_PutText+0x188>
 800688a:	2226      	movs	r2, #38	@ 0x26
 800688c:	18bb      	adds	r3, r7, r2
 800688e:	18ba      	adds	r2, r7, r2
 8006890:	2100      	movs	r1, #0
 8006892:	5e52      	ldrsh	r2, [r2, r1]
 8006894:	1052      	asrs	r2, r2, #1
 8006896:	801a      	strh	r2, [r3, #0]
   yp += ys;
 8006898:	2126      	movs	r1, #38	@ 0x26
 800689a:	187b      	adds	r3, r7, r1
 800689c:	881a      	ldrh	r2, [r3, #0]
 800689e:	2320      	movs	r3, #32
 80068a0:	18fb      	adds	r3, r7, r3
 80068a2:	881b      	ldrh	r3, [r3, #0]
 80068a4:	18d3      	adds	r3, r2, r3
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	187b      	adds	r3, r7, r1
 80068aa:	801a      	strh	r2, [r3, #0]

   while( 1 )
   {
      sl=0;
 80068ac:	232e      	movs	r3, #46	@ 0x2e
 80068ae:	18fb      	adds	r3, r7, r3
 80068b0:	2200      	movs	r2, #0
 80068b2:	801a      	strh	r2, [r3, #0]
      c=str;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	60bb      	str	r3, [r7, #8]
      wl = 0;
 80068b8:	232a      	movs	r3, #42	@ 0x2a
 80068ba:	18fb      	adds	r3, r7, r3
 80068bc:	2200      	movs	r2, #0
 80068be:	801a      	strh	r2, [r3, #0]
      while(1)
      {
        #ifdef UGUI_USE_UTF8
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80068c0:	4b79      	ldr	r3, [pc, #484]	@ (8006aa8 <_UG_PutText+0x398>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	222d      	movs	r2, #45	@ 0x2d
 80068c6:	5c9b      	ldrb	r3, [r3, r2]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d109      	bne.n	80068e0 <_UG_PutText+0x1d0>
          chr = _UG_DecodeUTF8(&c);
 80068cc:	2324      	movs	r3, #36	@ 0x24
 80068ce:	18fc      	adds	r4, r7, r3
 80068d0:	2308      	movs	r3, #8
 80068d2:	18fb      	adds	r3, r7, r3
 80068d4:	0018      	movs	r0, r3
 80068d6:	f7fe ff45 	bl	8005764 <_UG_DecodeUTF8>
 80068da:	0003      	movs	r3, r0
 80068dc:	8023      	strh	r3, [r4, #0]
 80068de:	e006      	b.n	80068ee <_UG_PutText+0x1de>
        }
        else{
          chr = *c++;
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	1c5a      	adds	r2, r3, #1
 80068e4:	60ba      	str	r2, [r7, #8]
 80068e6:	781a      	ldrb	r2, [r3, #0]
 80068e8:	2324      	movs	r3, #36	@ 0x24
 80068ea:	18fb      	adds	r3, r7, r3
 80068ec:	801a      	strh	r2, [r3, #0]
        }
        #else
        chr = *c++;
        #endif
        if( chr == 0 || chr == '\n'){
 80068ee:	2224      	movs	r2, #36	@ 0x24
 80068f0:	18bb      	adds	r3, r7, r2
 80068f2:	881b      	ldrh	r3, [r3, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d029      	beq.n	800694c <_UG_PutText+0x23c>
 80068f8:	18bb      	adds	r3, r7, r2
 80068fa:	881b      	ldrh	r3, [r3, #0]
 80068fc:	2b0a      	cmp	r3, #10
 80068fe:	d025      	beq.n	800694c <_UG_PutText+0x23c>
          break;
        }
         w = _UG_GetCharData(chr, NULL);
 8006900:	2512      	movs	r5, #18
 8006902:	197c      	adds	r4, r7, r5
 8006904:	18bb      	adds	r3, r7, r2
 8006906:	881b      	ldrh	r3, [r3, #0]
 8006908:	2100      	movs	r1, #0
 800690a:	0018      	movs	r0, r3
 800690c:	f7fe ffd8 	bl	80058c0 <_UG_GetCharData>
 8006910:	0003      	movs	r3, r0
 8006912:	8023      	strh	r3, [r4, #0]
         if (w == -1){continue;}
 8006914:	0029      	movs	r1, r5
 8006916:	187b      	adds	r3, r7, r1
 8006918:	2200      	movs	r2, #0
 800691a:	5e9b      	ldrsh	r3, [r3, r2]
 800691c:	3301      	adds	r3, #1
 800691e:	d013      	beq.n	8006948 <_UG_PutText+0x238>
         sl++;
 8006920:	202e      	movs	r0, #46	@ 0x2e
 8006922:	183b      	adds	r3, r7, r0
 8006924:	881a      	ldrh	r2, [r3, #0]
 8006926:	183b      	adds	r3, r7, r0
 8006928:	3201      	adds	r2, #1
 800692a:	801a      	strh	r2, [r3, #0]
         wl += w + char_h_space;
 800692c:	187b      	adds	r3, r7, r1
 800692e:	881a      	ldrh	r2, [r3, #0]
 8006930:	2316      	movs	r3, #22
 8006932:	18fb      	adds	r3, r7, r3
 8006934:	881b      	ldrh	r3, [r3, #0]
 8006936:	18d3      	adds	r3, r2, r3
 8006938:	b299      	uxth	r1, r3
 800693a:	222a      	movs	r2, #42	@ 0x2a
 800693c:	18bb      	adds	r3, r7, r2
 800693e:	18ba      	adds	r2, r7, r2
 8006940:	8812      	ldrh	r2, [r2, #0]
 8006942:	188a      	adds	r2, r1, r2
 8006944:	801a      	strh	r2, [r3, #0]
 8006946:	e7bb      	b.n	80068c0 <_UG_PutText+0x1b0>
         if (w == -1){continue;}
 8006948:	46c0      	nop			@ (mov r8, r8)
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 800694a:	e7b9      	b.n	80068c0 <_UG_PutText+0x1b0>
      }
      wl -= char_h_space;
 800694c:	2316      	movs	r3, #22
 800694e:	18fb      	adds	r3, r7, r3
 8006950:	881a      	ldrh	r2, [r3, #0]
 8006952:	202a      	movs	r0, #42	@ 0x2a
 8006954:	183b      	adds	r3, r7, r0
 8006956:	1839      	adds	r1, r7, r0
 8006958:	8809      	ldrh	r1, [r1, #0]
 800695a:	1a8a      	subs	r2, r1, r2
 800695c:	801a      	strh	r2, [r3, #0]

      xp = xe - xs + 1;
 800695e:	231a      	movs	r3, #26
 8006960:	18fb      	adds	r3, r7, r3
 8006962:	881a      	ldrh	r2, [r3, #0]
 8006964:	231c      	movs	r3, #28
 8006966:	18fb      	adds	r3, r7, r3
 8006968:	881b      	ldrh	r3, [r3, #0]
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	b29b      	uxth	r3, r3
 800696e:	3301      	adds	r3, #1
 8006970:	b29a      	uxth	r2, r3
 8006972:	2128      	movs	r1, #40	@ 0x28
 8006974:	187b      	adds	r3, r7, r1
 8006976:	801a      	strh	r2, [r3, #0]
      xp -= wl;
 8006978:	187b      	adds	r3, r7, r1
 800697a:	881a      	ldrh	r2, [r3, #0]
 800697c:	183b      	adds	r3, r7, r0
 800697e:	881b      	ldrh	r3, [r3, #0]
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	b29a      	uxth	r2, r3
 8006984:	187b      	adds	r3, r7, r1
 8006986:	801a      	strh	r2, [r3, #0]
      if ( xp < 0 ) break;
 8006988:	187b      	adds	r3, r7, r1
 800698a:	2200      	movs	r2, #0
 800698c:	5e9b      	ldrsh	r3, [r3, r2]
 800698e:	2b00      	cmp	r3, #0
 8006990:	da00      	bge.n	8006994 <_UG_PutText+0x284>
 8006992:	e083      	b.n	8006a9c <_UG_PutText+0x38c>

      if ( align & ALIGN_H_LEFT ) xp = 0;
 8006994:	2319      	movs	r3, #25
 8006996:	18fb      	adds	r3, r7, r3
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	2201      	movs	r2, #1
 800699c:	4013      	ands	r3, r2
 800699e:	d003      	beq.n	80069a8 <_UG_PutText+0x298>
 80069a0:	187b      	adds	r3, r7, r1
 80069a2:	2200      	movs	r2, #0
 80069a4:	801a      	strh	r2, [r3, #0]
 80069a6:	e00c      	b.n	80069c2 <_UG_PutText+0x2b2>
      else if ( align & ALIGN_H_CENTER ) xp >>= 1;
 80069a8:	2319      	movs	r3, #25
 80069aa:	18fb      	adds	r3, r7, r3
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	2202      	movs	r2, #2
 80069b0:	4013      	ands	r3, r2
 80069b2:	d006      	beq.n	80069c2 <_UG_PutText+0x2b2>
 80069b4:	2228      	movs	r2, #40	@ 0x28
 80069b6:	18bb      	adds	r3, r7, r2
 80069b8:	18ba      	adds	r2, r7, r2
 80069ba:	2100      	movs	r1, #0
 80069bc:	5e52      	ldrsh	r2, [r2, r1]
 80069be:	1052      	asrs	r2, r2, #1
 80069c0:	801a      	strh	r2, [r3, #0]
      xp += xs;
 80069c2:	2128      	movs	r1, #40	@ 0x28
 80069c4:	187b      	adds	r3, r7, r1
 80069c6:	881a      	ldrh	r2, [r3, #0]
 80069c8:	231c      	movs	r3, #28
 80069ca:	18fb      	adds	r3, r7, r3
 80069cc:	881b      	ldrh	r3, [r3, #0]
 80069ce:	18d3      	adds	r3, r2, r3
 80069d0:	b29a      	uxth	r2, r3
 80069d2:	187b      	adds	r3, r7, r1
 80069d4:	801a      	strh	r2, [r3, #0]


      while(1){
         #ifdef UGUI_USE_UTF8
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80069d6:	4b34      	ldr	r3, [pc, #208]	@ (8006aa8 <_UG_PutText+0x398>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	222d      	movs	r2, #45	@ 0x2d
 80069dc:	5c9b      	ldrb	r3, [r3, r2]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d109      	bne.n	80069f6 <_UG_PutText+0x2e6>
           chr = _UG_DecodeUTF8(&str);
 80069e2:	2324      	movs	r3, #36	@ 0x24
 80069e4:	18fc      	adds	r4, r7, r3
 80069e6:	230c      	movs	r3, #12
 80069e8:	18fb      	adds	r3, r7, r3
 80069ea:	0018      	movs	r0, r3
 80069ec:	f7fe feba 	bl	8005764 <_UG_DecodeUTF8>
 80069f0:	0003      	movs	r3, r0
 80069f2:	8023      	strh	r3, [r4, #0]
 80069f4:	e006      	b.n	8006a04 <_UG_PutText+0x2f4>
         }
         else{
           chr = *str++;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	1c5a      	adds	r2, r3, #1
 80069fa:	60fa      	str	r2, [r7, #12]
 80069fc:	781a      	ldrb	r2, [r3, #0]
 80069fe:	2324      	movs	r3, #36	@ 0x24
 8006a00:	18fb      	adds	r3, r7, r3
 8006a02:	801a      	strh	r2, [r3, #0]
         }
         #else
         chr = *str++;
         #endif
         if ( chr == 0 ){
 8006a04:	2024      	movs	r0, #36	@ 0x24
 8006a06:	183b      	adds	r3, r7, r0
 8006a08:	881b      	ldrh	r3, [r3, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d048      	beq.n	8006aa0 <_UG_PutText+0x390>
           return;
         }
         else if(chr=='\n'){
 8006a0e:	183b      	adds	r3, r7, r0
 8006a10:	881b      	ldrh	r3, [r3, #0]
 8006a12:	2b0a      	cmp	r3, #10
 8006a14:	d02b      	beq.n	8006a6e <_UG_PutText+0x35e>
           break;
         }
         w = _UG_PutChar(chr,xp,yp,txt->fc,txt->bc);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	8a1e      	ldrh	r6, [r3, #16]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	8a5b      	ldrh	r3, [r3, #18]
 8006a1e:	2212      	movs	r2, #18
 8006a20:	18bc      	adds	r4, r7, r2
 8006a22:	2126      	movs	r1, #38	@ 0x26
 8006a24:	187a      	adds	r2, r7, r1
 8006a26:	2100      	movs	r1, #0
 8006a28:	5e55      	ldrsh	r5, [r2, r1]
 8006a2a:	2128      	movs	r1, #40	@ 0x28
 8006a2c:	187a      	adds	r2, r7, r1
 8006a2e:	2100      	movs	r1, #0
 8006a30:	5e51      	ldrsh	r1, [r2, r1]
 8006a32:	183a      	adds	r2, r7, r0
 8006a34:	8810      	ldrh	r0, [r2, #0]
 8006a36:	9300      	str	r3, [sp, #0]
 8006a38:	0033      	movs	r3, r6
 8006a3a:	002a      	movs	r2, r5
 8006a3c:	f7ff f914 	bl	8005c68 <_UG_PutChar>
 8006a40:	0003      	movs	r3, r0
 8006a42:	8023      	strh	r3, [r4, #0]
         if(w!=-1)
 8006a44:	2212      	movs	r2, #18
 8006a46:	18bb      	adds	r3, r7, r2
 8006a48:	2000      	movs	r0, #0
 8006a4a:	5e1b      	ldrsh	r3, [r3, r0]
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	d0c2      	beq.n	80069d6 <_UG_PutText+0x2c6>
           xp += w + char_h_space;
 8006a50:	18bb      	adds	r3, r7, r2
 8006a52:	881a      	ldrh	r2, [r3, #0]
 8006a54:	2316      	movs	r3, #22
 8006a56:	18fb      	adds	r3, r7, r3
 8006a58:	881b      	ldrh	r3, [r3, #0]
 8006a5a:	18d3      	adds	r3, r2, r3
 8006a5c:	b29a      	uxth	r2, r3
 8006a5e:	2128      	movs	r1, #40	@ 0x28
 8006a60:	187b      	adds	r3, r7, r1
 8006a62:	881b      	ldrh	r3, [r3, #0]
 8006a64:	18d3      	adds	r3, r2, r3
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	187b      	adds	r3, r7, r1
 8006a6a:	801a      	strh	r2, [r3, #0]
 8006a6c:	e7b3      	b.n	80069d6 <_UG_PutText+0x2c6>
           break;
 8006a6e:	46c0      	nop			@ (mov r8, r8)
      }
      yp += char_height + char_v_space;
 8006a70:	231e      	movs	r3, #30
 8006a72:	18fb      	adds	r3, r7, r3
 8006a74:	881a      	ldrh	r2, [r3, #0]
 8006a76:	2314      	movs	r3, #20
 8006a78:	18fb      	adds	r3, r7, r3
 8006a7a:	881b      	ldrh	r3, [r3, #0]
 8006a7c:	18d3      	adds	r3, r2, r3
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	2126      	movs	r1, #38	@ 0x26
 8006a82:	187b      	adds	r3, r7, r1
 8006a84:	881b      	ldrh	r3, [r3, #0]
 8006a86:	18d3      	adds	r3, r2, r3
 8006a88:	b29a      	uxth	r2, r3
 8006a8a:	187b      	adds	r3, r7, r1
 8006a8c:	801a      	strh	r2, [r3, #0]
      sl=0;
 8006a8e:	e70d      	b.n	80068ac <_UG_PutText+0x19c>
     return;
 8006a90:	46c0      	nop			@ (mov r8, r8)
 8006a92:	e006      	b.n	8006aa2 <_UG_PutText+0x392>
     return;
 8006a94:	46c0      	nop			@ (mov r8, r8)
 8006a96:	e004      	b.n	8006aa2 <_UG_PutText+0x392>
        return;
 8006a98:	46c0      	nop			@ (mov r8, r8)
 8006a9a:	e002      	b.n	8006aa2 <_UG_PutText+0x392>
      if ( xp < 0 ) break;
 8006a9c:	46c0      	nop			@ (mov r8, r8)
 8006a9e:	e000      	b.n	8006aa2 <_UG_PutText+0x392>
           return;
 8006aa0:	46c0      	nop			@ (mov r8, r8)
   }
}
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	b00d      	add	sp, #52	@ 0x34
 8006aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006aa8:	200002e4 	.word	0x200002e4

08006aac <_UG_DrawObjectFrame>:
   }
   return NULL;
}

void _UG_DrawObjectFrame( UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye, UG_COLOR* p )
{
 8006aac:	b5b0      	push	{r4, r5, r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af02      	add	r7, sp, #8
 8006ab2:	0005      	movs	r5, r0
 8006ab4:	000c      	movs	r4, r1
 8006ab6:	0010      	movs	r0, r2
 8006ab8:	0019      	movs	r1, r3
 8006aba:	1dbb      	adds	r3, r7, #6
 8006abc:	1c2a      	adds	r2, r5, #0
 8006abe:	801a      	strh	r2, [r3, #0]
 8006ac0:	1d3b      	adds	r3, r7, #4
 8006ac2:	1c22      	adds	r2, r4, #0
 8006ac4:	801a      	strh	r2, [r3, #0]
 8006ac6:	1cbb      	adds	r3, r7, #2
 8006ac8:	1c02      	adds	r2, r0, #0
 8006aca:	801a      	strh	r2, [r3, #0]
 8006acc:	003b      	movs	r3, r7
 8006ace:	1c0a      	adds	r2, r1, #0
 8006ad0:	801a      	strh	r2, [r3, #0]
   // Frame 0
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 8006ad2:	1cbb      	adds	r3, r7, #2
 8006ad4:	881b      	ldrh	r3, [r3, #0]
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	b21c      	sxth	r4, r3
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	1c9a      	adds	r2, r3, #2
 8006ae0:	61ba      	str	r2, [r7, #24]
 8006ae2:	881b      	ldrh	r3, [r3, #0]
 8006ae4:	1d3a      	adds	r2, r7, #4
 8006ae6:	2500      	movs	r5, #0
 8006ae8:	5f55      	ldrsh	r5, [r2, r5]
 8006aea:	1d3a      	adds	r2, r7, #4
 8006aec:	2100      	movs	r1, #0
 8006aee:	5e51      	ldrsh	r1, [r2, r1]
 8006af0:	1dba      	adds	r2, r7, #6
 8006af2:	2000      	movs	r0, #0
 8006af4:	5e10      	ldrsh	r0, [r2, r0]
 8006af6:	9300      	str	r3, [sp, #0]
 8006af8:	002b      	movs	r3, r5
 8006afa:	0022      	movs	r2, r4
 8006afc:	f7fe fbc4 	bl	8005288 <UG_DrawLine>
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 8006b00:	1d3b      	adds	r3, r7, #4
 8006b02:	881b      	ldrh	r3, [r3, #0]
 8006b04:	3301      	adds	r3, #1
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	b219      	sxth	r1, r3
 8006b0a:	003b      	movs	r3, r7
 8006b0c:	881b      	ldrh	r3, [r3, #0]
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	b21d      	sxth	r5, r3
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	1c9a      	adds	r2, r3, #2
 8006b18:	61ba      	str	r2, [r7, #24]
 8006b1a:	881b      	ldrh	r3, [r3, #0]
 8006b1c:	1dba      	adds	r2, r7, #6
 8006b1e:	2400      	movs	r4, #0
 8006b20:	5f14      	ldrsh	r4, [r2, r4]
 8006b22:	1dba      	adds	r2, r7, #6
 8006b24:	2000      	movs	r0, #0
 8006b26:	5e10      	ldrsh	r0, [r2, r0]
 8006b28:	9300      	str	r3, [sp, #0]
 8006b2a:	002b      	movs	r3, r5
 8006b2c:	0022      	movs	r2, r4
 8006b2e:	f7fe fbab 	bl	8005288 <UG_DrawLine>
   UG_DrawLine(xs, ye  , xe  , ye  , *p++);
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	1c9a      	adds	r2, r3, #2
 8006b36:	61ba      	str	r2, [r7, #24]
 8006b38:	881b      	ldrh	r3, [r3, #0]
 8006b3a:	003a      	movs	r2, r7
 8006b3c:	2500      	movs	r5, #0
 8006b3e:	5f55      	ldrsh	r5, [r2, r5]
 8006b40:	1cba      	adds	r2, r7, #2
 8006b42:	2400      	movs	r4, #0
 8006b44:	5f14      	ldrsh	r4, [r2, r4]
 8006b46:	003a      	movs	r2, r7
 8006b48:	2100      	movs	r1, #0
 8006b4a:	5e51      	ldrsh	r1, [r2, r1]
 8006b4c:	1dba      	adds	r2, r7, #6
 8006b4e:	2000      	movs	r0, #0
 8006b50:	5e10      	ldrsh	r0, [r2, r0]
 8006b52:	9300      	str	r3, [sp, #0]
 8006b54:	002b      	movs	r3, r5
 8006b56:	0022      	movs	r2, r4
 8006b58:	f7fe fb96 	bl	8005288 <UG_DrawLine>
   UG_DrawLine(xe, ys  , xe  , ye-1, *p++);
 8006b5c:	003b      	movs	r3, r7
 8006b5e:	881b      	ldrh	r3, [r3, #0]
 8006b60:	3b01      	subs	r3, #1
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	b21d      	sxth	r5, r3
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	1c9a      	adds	r2, r3, #2
 8006b6a:	61ba      	str	r2, [r7, #24]
 8006b6c:	881b      	ldrh	r3, [r3, #0]
 8006b6e:	1cba      	adds	r2, r7, #2
 8006b70:	2400      	movs	r4, #0
 8006b72:	5f14      	ldrsh	r4, [r2, r4]
 8006b74:	1d3a      	adds	r2, r7, #4
 8006b76:	2100      	movs	r1, #0
 8006b78:	5e51      	ldrsh	r1, [r2, r1]
 8006b7a:	1cba      	adds	r2, r7, #2
 8006b7c:	2000      	movs	r0, #0
 8006b7e:	5e10      	ldrsh	r0, [r2, r0]
 8006b80:	9300      	str	r3, [sp, #0]
 8006b82:	002b      	movs	r3, r5
 8006b84:	0022      	movs	r2, r4
 8006b86:	f7fe fb7f 	bl	8005288 <UG_DrawLine>
   // Frame 1
   UG_DrawLine(xs+1, ys+1, xe-2, ys+1, *p++);
 8006b8a:	1dbb      	adds	r3, r7, #6
 8006b8c:	881b      	ldrh	r3, [r3, #0]
 8006b8e:	3301      	adds	r3, #1
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	b218      	sxth	r0, r3
 8006b94:	1d3b      	adds	r3, r7, #4
 8006b96:	881b      	ldrh	r3, [r3, #0]
 8006b98:	3301      	adds	r3, #1
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	b219      	sxth	r1, r3
 8006b9e:	1cbb      	adds	r3, r7, #2
 8006ba0:	881b      	ldrh	r3, [r3, #0]
 8006ba2:	3b02      	subs	r3, #2
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	b21c      	sxth	r4, r3
 8006ba8:	1d3b      	adds	r3, r7, #4
 8006baa:	881b      	ldrh	r3, [r3, #0]
 8006bac:	3301      	adds	r3, #1
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	b21d      	sxth	r5, r3
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	1c9a      	adds	r2, r3, #2
 8006bb6:	61ba      	str	r2, [r7, #24]
 8006bb8:	881b      	ldrh	r3, [r3, #0]
 8006bba:	9300      	str	r3, [sp, #0]
 8006bbc:	002b      	movs	r3, r5
 8006bbe:	0022      	movs	r2, r4
 8006bc0:	f7fe fb62 	bl	8005288 <UG_DrawLine>
   UG_DrawLine(xs+1, ys+2, xs+1, ye-2, *p++);
 8006bc4:	1dbb      	adds	r3, r7, #6
 8006bc6:	881b      	ldrh	r3, [r3, #0]
 8006bc8:	3301      	adds	r3, #1
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	b218      	sxth	r0, r3
 8006bce:	1d3b      	adds	r3, r7, #4
 8006bd0:	881b      	ldrh	r3, [r3, #0]
 8006bd2:	3302      	adds	r3, #2
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	b219      	sxth	r1, r3
 8006bd8:	1dbb      	adds	r3, r7, #6
 8006bda:	881b      	ldrh	r3, [r3, #0]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	b21c      	sxth	r4, r3
 8006be2:	003b      	movs	r3, r7
 8006be4:	881b      	ldrh	r3, [r3, #0]
 8006be6:	3b02      	subs	r3, #2
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	b21d      	sxth	r5, r3
 8006bec:	69bb      	ldr	r3, [r7, #24]
 8006bee:	1c9a      	adds	r2, r3, #2
 8006bf0:	61ba      	str	r2, [r7, #24]
 8006bf2:	881b      	ldrh	r3, [r3, #0]
 8006bf4:	9300      	str	r3, [sp, #0]
 8006bf6:	002b      	movs	r3, r5
 8006bf8:	0022      	movs	r2, r4
 8006bfa:	f7fe fb45 	bl	8005288 <UG_DrawLine>
   UG_DrawLine(xs+1, ye-1, xe-1, ye-1, *p++);
 8006bfe:	1dbb      	adds	r3, r7, #6
 8006c00:	881b      	ldrh	r3, [r3, #0]
 8006c02:	3301      	adds	r3, #1
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	b218      	sxth	r0, r3
 8006c08:	003b      	movs	r3, r7
 8006c0a:	881b      	ldrh	r3, [r3, #0]
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	b219      	sxth	r1, r3
 8006c12:	1cbb      	adds	r3, r7, #2
 8006c14:	881b      	ldrh	r3, [r3, #0]
 8006c16:	3b01      	subs	r3, #1
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	b21c      	sxth	r4, r3
 8006c1c:	003b      	movs	r3, r7
 8006c1e:	881b      	ldrh	r3, [r3, #0]
 8006c20:	3b01      	subs	r3, #1
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	b21d      	sxth	r5, r3
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	1c9a      	adds	r2, r3, #2
 8006c2a:	61ba      	str	r2, [r7, #24]
 8006c2c:	881b      	ldrh	r3, [r3, #0]
 8006c2e:	9300      	str	r3, [sp, #0]
 8006c30:	002b      	movs	r3, r5
 8006c32:	0022      	movs	r2, r4
 8006c34:	f7fe fb28 	bl	8005288 <UG_DrawLine>
   UG_DrawLine(xe-1, ys+1, xe-1, ye-2, *p++);
 8006c38:	1cbb      	adds	r3, r7, #2
 8006c3a:	881b      	ldrh	r3, [r3, #0]
 8006c3c:	3b01      	subs	r3, #1
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	b218      	sxth	r0, r3
 8006c42:	1d3b      	adds	r3, r7, #4
 8006c44:	881b      	ldrh	r3, [r3, #0]
 8006c46:	3301      	adds	r3, #1
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	b219      	sxth	r1, r3
 8006c4c:	1cbb      	adds	r3, r7, #2
 8006c4e:	881b      	ldrh	r3, [r3, #0]
 8006c50:	3b01      	subs	r3, #1
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	b21c      	sxth	r4, r3
 8006c56:	003b      	movs	r3, r7
 8006c58:	881b      	ldrh	r3, [r3, #0]
 8006c5a:	3b02      	subs	r3, #2
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	b21d      	sxth	r5, r3
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	1c9a      	adds	r2, r3, #2
 8006c64:	61ba      	str	r2, [r7, #24]
 8006c66:	881b      	ldrh	r3, [r3, #0]
 8006c68:	9300      	str	r3, [sp, #0]
 8006c6a:	002b      	movs	r3, r5
 8006c6c:	0022      	movs	r2, r4
 8006c6e:	f7fe fb0b 	bl	8005288 <UG_DrawLine>
   // Frame 2
   UG_DrawLine(xs+2, ys+2, xe-3, ys+2, *p++);
 8006c72:	1dbb      	adds	r3, r7, #6
 8006c74:	881b      	ldrh	r3, [r3, #0]
 8006c76:	3302      	adds	r3, #2
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	b218      	sxth	r0, r3
 8006c7c:	1d3b      	adds	r3, r7, #4
 8006c7e:	881b      	ldrh	r3, [r3, #0]
 8006c80:	3302      	adds	r3, #2
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	b219      	sxth	r1, r3
 8006c86:	1cbb      	adds	r3, r7, #2
 8006c88:	881b      	ldrh	r3, [r3, #0]
 8006c8a:	3b03      	subs	r3, #3
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	b21c      	sxth	r4, r3
 8006c90:	1d3b      	adds	r3, r7, #4
 8006c92:	881b      	ldrh	r3, [r3, #0]
 8006c94:	3302      	adds	r3, #2
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	b21d      	sxth	r5, r3
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	1c9a      	adds	r2, r3, #2
 8006c9e:	61ba      	str	r2, [r7, #24]
 8006ca0:	881b      	ldrh	r3, [r3, #0]
 8006ca2:	9300      	str	r3, [sp, #0]
 8006ca4:	002b      	movs	r3, r5
 8006ca6:	0022      	movs	r2, r4
 8006ca8:	f7fe faee 	bl	8005288 <UG_DrawLine>
   UG_DrawLine(xs+2, ys+3, xs+2, ye-3, *p++);
 8006cac:	1dbb      	adds	r3, r7, #6
 8006cae:	881b      	ldrh	r3, [r3, #0]
 8006cb0:	3302      	adds	r3, #2
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	b218      	sxth	r0, r3
 8006cb6:	1d3b      	adds	r3, r7, #4
 8006cb8:	881b      	ldrh	r3, [r3, #0]
 8006cba:	3303      	adds	r3, #3
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	b219      	sxth	r1, r3
 8006cc0:	1dbb      	adds	r3, r7, #6
 8006cc2:	881b      	ldrh	r3, [r3, #0]
 8006cc4:	3302      	adds	r3, #2
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	b21c      	sxth	r4, r3
 8006cca:	003b      	movs	r3, r7
 8006ccc:	881b      	ldrh	r3, [r3, #0]
 8006cce:	3b03      	subs	r3, #3
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	b21d      	sxth	r5, r3
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	1c9a      	adds	r2, r3, #2
 8006cd8:	61ba      	str	r2, [r7, #24]
 8006cda:	881b      	ldrh	r3, [r3, #0]
 8006cdc:	9300      	str	r3, [sp, #0]
 8006cde:	002b      	movs	r3, r5
 8006ce0:	0022      	movs	r2, r4
 8006ce2:	f7fe fad1 	bl	8005288 <UG_DrawLine>
   UG_DrawLine(xs+2, ye-2, xe-2, ye-2, *p++);
 8006ce6:	1dbb      	adds	r3, r7, #6
 8006ce8:	881b      	ldrh	r3, [r3, #0]
 8006cea:	3302      	adds	r3, #2
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	b218      	sxth	r0, r3
 8006cf0:	003b      	movs	r3, r7
 8006cf2:	881b      	ldrh	r3, [r3, #0]
 8006cf4:	3b02      	subs	r3, #2
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	b219      	sxth	r1, r3
 8006cfa:	1cbb      	adds	r3, r7, #2
 8006cfc:	881b      	ldrh	r3, [r3, #0]
 8006cfe:	3b02      	subs	r3, #2
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	b21c      	sxth	r4, r3
 8006d04:	003b      	movs	r3, r7
 8006d06:	881b      	ldrh	r3, [r3, #0]
 8006d08:	3b02      	subs	r3, #2
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	b21d      	sxth	r5, r3
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	1c9a      	adds	r2, r3, #2
 8006d12:	61ba      	str	r2, [r7, #24]
 8006d14:	881b      	ldrh	r3, [r3, #0]
 8006d16:	9300      	str	r3, [sp, #0]
 8006d18:	002b      	movs	r3, r5
 8006d1a:	0022      	movs	r2, r4
 8006d1c:	f7fe fab4 	bl	8005288 <UG_DrawLine>
   UG_DrawLine(xe-2, ys+2, xe-2, ye-3, *p);
 8006d20:	1cbb      	adds	r3, r7, #2
 8006d22:	881b      	ldrh	r3, [r3, #0]
 8006d24:	3b02      	subs	r3, #2
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	b218      	sxth	r0, r3
 8006d2a:	1d3b      	adds	r3, r7, #4
 8006d2c:	881b      	ldrh	r3, [r3, #0]
 8006d2e:	3302      	adds	r3, #2
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	b219      	sxth	r1, r3
 8006d34:	1cbb      	adds	r3, r7, #2
 8006d36:	881b      	ldrh	r3, [r3, #0]
 8006d38:	3b02      	subs	r3, #2
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	b21a      	sxth	r2, r3
 8006d3e:	003b      	movs	r3, r7
 8006d40:	881b      	ldrh	r3, [r3, #0]
 8006d42:	3b03      	subs	r3, #3
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	b21c      	sxth	r4, r3
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	881b      	ldrh	r3, [r3, #0]
 8006d4c:	9300      	str	r3, [sp, #0]
 8006d4e:	0023      	movs	r3, r4
 8006d50:	f7fe fa9a 	bl	8005288 <UG_DrawLine>
}
 8006d54:	46c0      	nop			@ (mov r8, r8)
 8006d56:	46bd      	mov	sp, r7
 8006d58:	b002      	add	sp, #8
 8006d5a:	bdb0      	pop	{r4, r5, r7, pc}

08006d5c <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	0002      	movs	r2, r0
 8006d64:	6039      	str	r1, [r7, #0]
 8006d66:	1dfb      	adds	r3, r7, #7
 8006d68:	701a      	strb	r2, [r3, #0]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8006d6a:	1dfb      	adds	r3, r7, #7
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	2b03      	cmp	r3, #3
 8006d70:	d814      	bhi.n	8006d9c <UG_DriverRegister+0x40>

   gui->driver[type].driver = driver;
 8006d72:	4b0c      	ldr	r3, [pc, #48]	@ (8006da4 <UG_DriverRegister+0x48>)
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	1dfb      	adds	r3, r7, #7
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	330a      	adds	r3, #10
 8006d7c:	00db      	lsls	r3, r3, #3
 8006d7e:	18d3      	adds	r3, r2, r3
 8006d80:	3304      	adds	r3, #4
 8006d82:	683a      	ldr	r2, [r7, #0]
 8006d84:	601a      	str	r2, [r3, #0]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 8006d86:	4b07      	ldr	r3, [pc, #28]	@ (8006da4 <UG_DriverRegister+0x48>)
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	1dfb      	adds	r3, r7, #7
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	330a      	adds	r3, #10
 8006d90:	00db      	lsls	r3, r3, #3
 8006d92:	18d3      	adds	r3, r2, r3
 8006d94:	3308      	adds	r3, #8
 8006d96:	2203      	movs	r2, #3
 8006d98:	701a      	strb	r2, [r3, #0]
 8006d9a:	e000      	b.n	8006d9e <UG_DriverRegister+0x42>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8006d9c:	46c0      	nop			@ (mov r8, r8)
}
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	b002      	add	sp, #8
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	200002e4 	.word	0x200002e4

08006da8 <UG_Update>:

/* -------------------------------------------------------------------------------- */
/* -- MISCELLANEOUS FUNCTIONS                                                    -- */
/* -------------------------------------------------------------------------------- */
void UG_Update( void )
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
   UG_WINDOW* wnd;

   /* Is somebody waiting for this update? */
   if ( gui->state & UG_STATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_STATUS_WAIT_FOR_UPDATE;
 8006dae:	4b61      	ldr	r3, [pc, #388]	@ (8006f34 <UG_Update+0x18c>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2252      	movs	r2, #82	@ 0x52
 8006db4:	5c9b      	ldrb	r3, [r3, r2]
 8006db6:	001a      	movs	r2, r3
 8006db8:	2301      	movs	r3, #1
 8006dba:	4013      	ands	r3, r2
 8006dbc:	d00a      	beq.n	8006dd4 <UG_Update+0x2c>
 8006dbe:	4b5d      	ldr	r3, [pc, #372]	@ (8006f34 <UG_Update+0x18c>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2252      	movs	r2, #82	@ 0x52
 8006dc4:	5c9a      	ldrb	r2, [r3, r2]
 8006dc6:	4b5b      	ldr	r3, [pc, #364]	@ (8006f34 <UG_Update+0x18c>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2101      	movs	r1, #1
 8006dcc:	438a      	bics	r2, r1
 8006dce:	b2d1      	uxtb	r1, r2
 8006dd0:	2252      	movs	r2, #82	@ 0x52
 8006dd2:	5499      	strb	r1, [r3, r2]

   /* Keep track of the windows */
   if ( gui->next_window != gui->active_window )
 8006dd4:	4b57      	ldr	r3, [pc, #348]	@ (8006f34 <UG_Update+0x18c>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	68da      	ldr	r2, [r3, #12]
 8006dda:	4b56      	ldr	r3, [pc, #344]	@ (8006f34 <UG_Update+0x18c>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	691b      	ldr	r3, [r3, #16]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d100      	bne.n	8006de6 <UG_Update+0x3e>
 8006de4:	e071      	b.n	8006eca <UG_Update+0x122>
   {
      if ( gui->next_window != NULL )
 8006de6:	4b53      	ldr	r3, [pc, #332]	@ (8006f34 <UG_Update+0x18c>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d06c      	beq.n	8006eca <UG_Update+0x122>
      {
         gui->last_window = gui->active_window;
 8006df0:	4b50      	ldr	r3, [pc, #320]	@ (8006f34 <UG_Update+0x18c>)
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	4b4f      	ldr	r3, [pc, #316]	@ (8006f34 <UG_Update+0x18c>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	6912      	ldr	r2, [r2, #16]
 8006dfa:	615a      	str	r2, [r3, #20]
         gui->active_window = gui->next_window;
 8006dfc:	4b4d      	ldr	r3, [pc, #308]	@ (8006f34 <UG_Update+0x18c>)
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	4b4c      	ldr	r3, [pc, #304]	@ (8006f34 <UG_Update+0x18c>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	68d2      	ldr	r2, [r2, #12]
 8006e06:	611a      	str	r2, [r3, #16]

         /* Do we need to draw an inactive title? */
         if ((gui->last_window != NULL) && (gui->last_window->style & WND_STYLE_SHOW_TITLE) && (gui->last_window->state & WND_STATE_VISIBLE) )
 8006e08:	4b4a      	ldr	r3, [pc, #296]	@ (8006f34 <UG_Update+0x18c>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	695b      	ldr	r3, [r3, #20]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d045      	beq.n	8006e9e <UG_Update+0xf6>
 8006e12:	4b48      	ldr	r3, [pc, #288]	@ (8006f34 <UG_Update+0x18c>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	695b      	ldr	r3, [r3, #20]
 8006e18:	7d9b      	ldrb	r3, [r3, #22]
 8006e1a:	001a      	movs	r2, r3
 8006e1c:	2302      	movs	r3, #2
 8006e1e:	4013      	ands	r3, r2
 8006e20:	d03d      	beq.n	8006e9e <UG_Update+0xf6>
 8006e22:	4b44      	ldr	r3, [pc, #272]	@ (8006f34 <UG_Update+0x18c>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	695b      	ldr	r3, [r3, #20]
 8006e28:	7a1b      	ldrb	r3, [r3, #8]
 8006e2a:	001a      	movs	r2, r3
 8006e2c:	2308      	movs	r3, #8
 8006e2e:	4013      	ands	r3, r2
 8006e30:	d035      	beq.n	8006e9e <UG_Update+0xf6>
         {
            /* Do both windows differ in size */
            if ( (gui->last_window->xs != gui->active_window->xs) || (gui->last_window->xe != gui->active_window->xe) || (gui->last_window->ys != gui->active_window->ys) || (gui->last_window->ye != gui->active_window->ye) )
 8006e32:	4b40      	ldr	r3, [pc, #256]	@ (8006f34 <UG_Update+0x18c>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	695b      	ldr	r3, [r3, #20]
 8006e38:	220e      	movs	r2, #14
 8006e3a:	5e9a      	ldrsh	r2, [r3, r2]
 8006e3c:	4b3d      	ldr	r3, [pc, #244]	@ (8006f34 <UG_Update+0x18c>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	691b      	ldr	r3, [r3, #16]
 8006e42:	210e      	movs	r1, #14
 8006e44:	5e5b      	ldrsh	r3, [r3, r1]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d123      	bne.n	8006e92 <UG_Update+0xea>
 8006e4a:	4b3a      	ldr	r3, [pc, #232]	@ (8006f34 <UG_Update+0x18c>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	695b      	ldr	r3, [r3, #20]
 8006e50:	2212      	movs	r2, #18
 8006e52:	5e9a      	ldrsh	r2, [r3, r2]
 8006e54:	4b37      	ldr	r3, [pc, #220]	@ (8006f34 <UG_Update+0x18c>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	2112      	movs	r1, #18
 8006e5c:	5e5b      	ldrsh	r3, [r3, r1]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d117      	bne.n	8006e92 <UG_Update+0xea>
 8006e62:	4b34      	ldr	r3, [pc, #208]	@ (8006f34 <UG_Update+0x18c>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	695b      	ldr	r3, [r3, #20]
 8006e68:	2210      	movs	r2, #16
 8006e6a:	5e9a      	ldrsh	r2, [r3, r2]
 8006e6c:	4b31      	ldr	r3, [pc, #196]	@ (8006f34 <UG_Update+0x18c>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	2110      	movs	r1, #16
 8006e74:	5e5b      	ldrsh	r3, [r3, r1]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d10b      	bne.n	8006e92 <UG_Update+0xea>
 8006e7a:	4b2e      	ldr	r3, [pc, #184]	@ (8006f34 <UG_Update+0x18c>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	695b      	ldr	r3, [r3, #20]
 8006e80:	2214      	movs	r2, #20
 8006e82:	5e9a      	ldrsh	r2, [r3, r2]
 8006e84:	4b2b      	ldr	r3, [pc, #172]	@ (8006f34 <UG_Update+0x18c>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	2114      	movs	r1, #20
 8006e8c:	5e5b      	ldrsh	r3, [r3, r1]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d005      	beq.n	8006e9e <UG_Update+0xf6>
            {
               /* Redraw title of the last window */
               _UG_WindowDrawTitle( gui->last_window );
 8006e92:	4b28      	ldr	r3, [pc, #160]	@ (8006f34 <UG_Update+0x18c>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	695b      	ldr	r3, [r3, #20]
 8006e98:	0018      	movs	r0, r3
 8006e9a:	f000 f84d 	bl	8006f38 <_UG_WindowDrawTitle>
            }
         }
         gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 8006e9e:	4b25      	ldr	r3, [pc, #148]	@ (8006f34 <UG_Update+0x18c>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	7a1a      	ldrb	r2, [r3, #8]
 8006ea6:	4b23      	ldr	r3, [pc, #140]	@ (8006f34 <UG_Update+0x18c>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	2140      	movs	r1, #64	@ 0x40
 8006eae:	438a      	bics	r2, r1
 8006eb0:	b2d2      	uxtb	r2, r2
 8006eb2:	721a      	strb	r2, [r3, #8]
         gui->active_window->state |= WND_STATE_UPDATE | WND_STATE_VISIBLE;
 8006eb4:	4b1f      	ldr	r3, [pc, #124]	@ (8006f34 <UG_Update+0x18c>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	7a1a      	ldrb	r2, [r3, #8]
 8006ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8006f34 <UG_Update+0x18c>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	2128      	movs	r1, #40	@ 0x28
 8006ec4:	430a      	orrs	r2, r1
 8006ec6:	b2d2      	uxtb	r2, r2
 8006ec8:	721a      	strb	r2, [r3, #8]
      }
   }

   /* Is there an active window */
   if ( gui->active_window != NULL )
 8006eca:	4b1a      	ldr	r3, [pc, #104]	@ (8006f34 <UG_Update+0x18c>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d01f      	beq.n	8006f14 <UG_Update+0x16c>
   {
      wnd = gui->active_window;
 8006ed4:	4b17      	ldr	r3, [pc, #92]	@ (8006f34 <UG_Update+0x18c>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	607b      	str	r3, [r7, #4]

      /* Does the window need to be updated? */
      if ( wnd->state & WND_STATE_UPDATE )
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	7a1b      	ldrb	r3, [r3, #8]
 8006ee0:	001a      	movs	r2, r3
 8006ee2:	2320      	movs	r3, #32
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	d003      	beq.n	8006ef0 <UG_Update+0x148>
      {
         /* Do it! */
         _UG_WindowUpdate( wnd );
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	0018      	movs	r0, r3
 8006eec:	f000 f904 	bl	80070f8 <_UG_WindowUpdate>
      }

      /* Is the window visible? */
      if ( wnd->state & WND_STATE_VISIBLE )
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	7a1b      	ldrb	r3, [r3, #8]
 8006ef4:	001a      	movs	r2, r3
 8006ef6:	2308      	movs	r3, #8
 8006ef8:	4013      	ands	r3, r2
 8006efa:	d00b      	beq.n	8006f14 <UG_Update+0x16c>
      {
         #ifdef UGUI_USE_TOUCH
         _UG_ProcessTouchData( wnd );
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	0018      	movs	r0, r3
 8006f00:	f7ff fa54 	bl	80063ac <_UG_ProcessTouchData>
         #endif
         _UG_UpdateObjects( wnd );
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	0018      	movs	r0, r3
 8006f08:	f7ff fb46 	bl	8006598 <_UG_UpdateObjects>
         _UG_HandleEvents( wnd );
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	0018      	movs	r0, r3
 8006f10:	f7ff fba2 	bl	8006658 <_UG_HandleEvents>
      }
   }
   if(gui->device->flush){
 8006f14:	4b07      	ldr	r3, [pc, #28]	@ (8006f34 <UG_Update+0x18c>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d004      	beq.n	8006f2a <UG_Update+0x182>
     gui->device->flush();
 8006f20:	4b04      	ldr	r3, [pc, #16]	@ (8006f34 <UG_Update+0x18c>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	4798      	blx	r3
   }
}
 8006f2a:	46c0      	nop			@ (mov r8, r8)
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	b002      	add	sp, #8
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	46c0      	nop			@ (mov r8, r8)
 8006f34:	200002e4 	.word	0x200002e4

08006f38 <_UG_WindowDrawTitle>:
   }
   return h;
}

static UG_RESULT _UG_WindowDrawTitle( UG_WINDOW* wnd )
{
 8006f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f3a:	b08f      	sub	sp, #60	@ 0x3c
 8006f3c:	af02      	add	r7, sp, #8
 8006f3e:	6078      	str	r0, [r7, #4]
   UG_TEXT txt;
   UG_S16 xs,ys,xe,ye;

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d100      	bne.n	8006f48 <_UG_WindowDrawTitle+0x10>
 8006f46:	e0cd      	b.n	80070e4 <_UG_WindowDrawTitle+0x1ac>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	7a1b      	ldrb	r3, [r3, #8]
 8006f4c:	001a      	movs	r2, r3
 8006f4e:	2302      	movs	r3, #2
 8006f50:	4013      	ands	r3, r2
 8006f52:	d100      	bne.n	8006f56 <_UG_WindowDrawTitle+0x1e>
 8006f54:	e0c6      	b.n	80070e4 <_UG_WindowDrawTitle+0x1ac>
   {
      xs = wnd->xs;
 8006f56:	212e      	movs	r1, #46	@ 0x2e
 8006f58:	187b      	adds	r3, r7, r1
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	89d2      	ldrh	r2, [r2, #14]
 8006f5e:	801a      	strh	r2, [r3, #0]
      ys = wnd->ys;
 8006f60:	202c      	movs	r0, #44	@ 0x2c
 8006f62:	183b      	adds	r3, r7, r0
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	8a12      	ldrh	r2, [r2, #16]
 8006f68:	801a      	strh	r2, [r3, #0]
      xe = wnd->xe;
 8006f6a:	242a      	movs	r4, #42	@ 0x2a
 8006f6c:	193b      	adds	r3, r7, r4
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	8a52      	ldrh	r2, [r2, #18]
 8006f72:	801a      	strh	r2, [r3, #0]
      ye = wnd->ye;
 8006f74:	2528      	movs	r5, #40	@ 0x28
 8006f76:	197b      	adds	r3, r7, r5
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	8a92      	ldrh	r2, [r2, #20]
 8006f7c:	801a      	strh	r2, [r3, #0]

      /* 3D style? */
      if ( wnd->style & WND_STYLE_3D )
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	7d9b      	ldrb	r3, [r3, #22]
 8006f82:	001a      	movs	r2, r3
 8006f84:	2301      	movs	r3, #1
 8006f86:	4013      	ands	r3, r2
 8006f88:	d017      	beq.n	8006fba <_UG_WindowDrawTitle+0x82>
      {
         xs+=3;
 8006f8a:	187b      	adds	r3, r7, r1
 8006f8c:	881b      	ldrh	r3, [r3, #0]
 8006f8e:	3303      	adds	r3, #3
 8006f90:	b29a      	uxth	r2, r3
 8006f92:	187b      	adds	r3, r7, r1
 8006f94:	801a      	strh	r2, [r3, #0]
         ys+=3;
 8006f96:	183b      	adds	r3, r7, r0
 8006f98:	881b      	ldrh	r3, [r3, #0]
 8006f9a:	3303      	adds	r3, #3
 8006f9c:	b29a      	uxth	r2, r3
 8006f9e:	183b      	adds	r3, r7, r0
 8006fa0:	801a      	strh	r2, [r3, #0]
         xe-=3;
 8006fa2:	193b      	adds	r3, r7, r4
 8006fa4:	881b      	ldrh	r3, [r3, #0]
 8006fa6:	3b03      	subs	r3, #3
 8006fa8:	b29a      	uxth	r2, r3
 8006faa:	193b      	adds	r3, r7, r4
 8006fac:	801a      	strh	r2, [r3, #0]
         ye-=3;
 8006fae:	197b      	adds	r3, r7, r5
 8006fb0:	881b      	ldrh	r3, [r3, #0]
 8006fb2:	3b03      	subs	r3, #3
 8006fb4:	b29a      	uxth	r2, r3
 8006fb6:	197b      	adds	r3, r7, r5
 8006fb8:	801a      	strh	r2, [r3, #0]
      }

      /* Is the window active or inactive? */
      if ( wnd == gui->active_window )
 8006fba:	4b4d      	ldr	r3, [pc, #308]	@ (80070f0 <_UG_WindowDrawTitle+0x1b8>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d109      	bne.n	8006fda <_UG_WindowDrawTitle+0xa2>
      {
         txt.bc = wnd->title.bc;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	8cda      	ldrh	r2, [r3, #38]	@ 0x26
 8006fca:	210c      	movs	r1, #12
 8006fcc:	187b      	adds	r3, r7, r1
 8006fce:	825a      	strh	r2, [r3, #18]
         txt.fc = wnd->title.fc;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 8006fd4:	187b      	adds	r3, r7, r1
 8006fd6:	821a      	strh	r2, [r3, #16]
 8006fd8:	e008      	b.n	8006fec <_UG_WindowDrawTitle+0xb4>
      }
      else
      {
         txt.bc = wnd->title.ibc;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8006fde:	210c      	movs	r1, #12
 8006fe0:	187b      	adds	r3, r7, r1
 8006fe2:	825a      	strh	r2, [r3, #18]
         txt.fc = wnd->title.ifc;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8006fe8:	187b      	adds	r3, r7, r1
 8006fea:	821a      	strh	r2, [r3, #16]
      }

      /* Draw title */
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	222c      	movs	r2, #44	@ 0x2c
 8006ff0:	5c9b      	ldrb	r3, [r3, r2]
 8006ff2:	001a      	movs	r2, r3
 8006ff4:	212c      	movs	r1, #44	@ 0x2c
 8006ff6:	187b      	adds	r3, r7, r1
 8006ff8:	881b      	ldrh	r3, [r3, #0]
 8006ffa:	18d3      	adds	r3, r2, r3
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	3b01      	subs	r3, #1
 8007000:	b29b      	uxth	r3, r3
 8007002:	b21d      	sxth	r5, r3
 8007004:	260c      	movs	r6, #12
 8007006:	19bb      	adds	r3, r7, r6
 8007008:	8a5b      	ldrh	r3, [r3, #18]
 800700a:	222a      	movs	r2, #42	@ 0x2a
 800700c:	18ba      	adds	r2, r7, r2
 800700e:	2000      	movs	r0, #0
 8007010:	5e14      	ldrsh	r4, [r2, r0]
 8007012:	187a      	adds	r2, r7, r1
 8007014:	2000      	movs	r0, #0
 8007016:	5e11      	ldrsh	r1, [r2, r0]
 8007018:	202e      	movs	r0, #46	@ 0x2e
 800701a:	183a      	adds	r2, r7, r0
 800701c:	2000      	movs	r0, #0
 800701e:	5e10      	ldrsh	r0, [r2, r0]
 8007020:	9300      	str	r3, [sp, #0]
 8007022:	002b      	movs	r3, r5
 8007024:	0022      	movs	r2, r4
 8007026:	f7fe f889 	bl	800513c <UG_FillFrame>

      /* Draw title text */
      txt.str = wnd->title.str;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	699a      	ldr	r2, [r3, #24]
 800702e:	19bb      	adds	r3, r7, r6
 8007030:	601a      	str	r2, [r3, #0]
      txt.font = wnd->title.font;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	69da      	ldr	r2, [r3, #28]
 8007036:	19bb      	adds	r3, r7, r6
 8007038:	605a      	str	r2, [r3, #4]
      txt.a.xs = xs+3;
 800703a:	202e      	movs	r0, #46	@ 0x2e
 800703c:	183b      	adds	r3, r7, r0
 800703e:	881b      	ldrh	r3, [r3, #0]
 8007040:	3303      	adds	r3, #3
 8007042:	b29b      	uxth	r3, r3
 8007044:	b21a      	sxth	r2, r3
 8007046:	0031      	movs	r1, r6
 8007048:	187b      	adds	r3, r7, r1
 800704a:	811a      	strh	r2, [r3, #8]
      txt.a.ys = ys;
 800704c:	187b      	adds	r3, r7, r1
 800704e:	242c      	movs	r4, #44	@ 0x2c
 8007050:	193a      	adds	r2, r7, r4
 8007052:	8812      	ldrh	r2, [r2, #0]
 8007054:	815a      	strh	r2, [r3, #10]
      txt.a.xe = xe;
 8007056:	187b      	adds	r3, r7, r1
 8007058:	262a      	movs	r6, #42	@ 0x2a
 800705a:	19ba      	adds	r2, r7, r6
 800705c:	8812      	ldrh	r2, [r2, #0]
 800705e:	819a      	strh	r2, [r3, #12]
      txt.a.ye = ys+wnd->title.height-1;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	222c      	movs	r2, #44	@ 0x2c
 8007064:	5c9b      	ldrb	r3, [r3, r2]
 8007066:	001a      	movs	r2, r3
 8007068:	193b      	adds	r3, r7, r4
 800706a:	881b      	ldrh	r3, [r3, #0]
 800706c:	18d3      	adds	r3, r2, r3
 800706e:	b29b      	uxth	r3, r3
 8007070:	3b01      	subs	r3, #1
 8007072:	b29b      	uxth	r3, r3
 8007074:	b21a      	sxth	r2, r3
 8007076:	187b      	adds	r3, r7, r1
 8007078:	81da      	strh	r2, [r3, #14]
      txt.align = wnd->title.align;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2222      	movs	r2, #34	@ 0x22
 800707e:	5c9a      	ldrb	r2, [r3, r2]
 8007080:	187b      	adds	r3, r7, r1
 8007082:	751a      	strb	r2, [r3, #20]
      txt.h_space = wnd->title.h_space;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2220      	movs	r2, #32
 8007088:	569b      	ldrsb	r3, [r3, r2]
 800708a:	001a      	movs	r2, r3
 800708c:	187b      	adds	r3, r7, r1
 800708e:	82da      	strh	r2, [r3, #22]
      txt.v_space = wnd->title.v_space;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2221      	movs	r2, #33	@ 0x21
 8007094:	569b      	ldrsb	r3, [r3, r2]
 8007096:	001a      	movs	r2, r3
 8007098:	187b      	adds	r3, r7, r1
 800709a:	831a      	strh	r2, [r3, #24]
      _UG_PutText( &txt );
 800709c:	187b      	adds	r3, r7, r1
 800709e:	0018      	movs	r0, r3
 80070a0:	f7ff fb36 	bl	8006710 <_UG_PutText>

      /* Draw line */
      UG_DrawLine(xs,ys+wnd->title.height,xe,ys+wnd->title.height,pal_window[11]);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	222c      	movs	r2, #44	@ 0x2c
 80070a8:	5c9b      	ldrb	r3, [r3, r2]
 80070aa:	001a      	movs	r2, r3
 80070ac:	193b      	adds	r3, r7, r4
 80070ae:	881b      	ldrh	r3, [r3, #0]
 80070b0:	18d3      	adds	r3, r2, r3
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	b219      	sxth	r1, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	222c      	movs	r2, #44	@ 0x2c
 80070ba:	5c9b      	ldrb	r3, [r3, r2]
 80070bc:	001a      	movs	r2, r3
 80070be:	193b      	adds	r3, r7, r4
 80070c0:	881b      	ldrh	r3, [r3, #0]
 80070c2:	18d3      	adds	r3, r2, r3
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	b21c      	sxth	r4, r3
 80070c8:	4d0a      	ldr	r5, [pc, #40]	@ (80070f4 <_UG_WindowDrawTitle+0x1bc>)
 80070ca:	19bb      	adds	r3, r7, r6
 80070cc:	2200      	movs	r2, #0
 80070ce:	5e9a      	ldrsh	r2, [r3, r2]
 80070d0:	202e      	movs	r0, #46	@ 0x2e
 80070d2:	183b      	adds	r3, r7, r0
 80070d4:	2000      	movs	r0, #0
 80070d6:	5e18      	ldrsh	r0, [r3, r0]
 80070d8:	9500      	str	r5, [sp, #0]
 80070da:	0023      	movs	r3, r4
 80070dc:	f7fe f8d4 	bl	8005288 <UG_DrawLine>
      return UG_RESULT_OK;
 80070e0:	2300      	movs	r3, #0
 80070e2:	e001      	b.n	80070e8 <_UG_WindowDrawTitle+0x1b0>
   }
   return UG_RESULT_FAIL;
 80070e4:	2301      	movs	r3, #1
 80070e6:	425b      	negs	r3, r3
}
 80070e8:	0018      	movs	r0, r3
 80070ea:	46bd      	mov	sp, r7
 80070ec:	b00d      	add	sp, #52	@ 0x34
 80070ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070f0:	200002e4 	.word	0x200002e4
 80070f4:	00009d13 	.word	0x00009d13

080070f8 <_UG_WindowUpdate>:

static void _UG_WindowUpdate( UG_WINDOW* wnd )
{
 80070f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070fa:	b089      	sub	sp, #36	@ 0x24
 80070fc:	af02      	add	r7, sp, #8
 80070fe:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_S16 xs,ys,xe,ye;

   xs = wnd->xs;
 8007100:	2014      	movs	r0, #20
 8007102:	183b      	adds	r3, r7, r0
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	89d2      	ldrh	r2, [r2, #14]
 8007108:	801a      	strh	r2, [r3, #0]
   ys = wnd->ys;
 800710a:	2112      	movs	r1, #18
 800710c:	187b      	adds	r3, r7, r1
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	8a12      	ldrh	r2, [r2, #16]
 8007112:	801a      	strh	r2, [r3, #0]
   xe = wnd->xe;
 8007114:	2510      	movs	r5, #16
 8007116:	197b      	adds	r3, r7, r5
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	8a52      	ldrh	r2, [r2, #18]
 800711c:	801a      	strh	r2, [r3, #0]
   ye = wnd->ye;
 800711e:	240e      	movs	r4, #14
 8007120:	193b      	adds	r3, r7, r4
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	8a92      	ldrh	r2, [r2, #20]
 8007126:	801a      	strh	r2, [r3, #0]

   wnd->state &= ~WND_STATE_UPDATE;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	7a1b      	ldrb	r3, [r3, #8]
 800712c:	2220      	movs	r2, #32
 800712e:	4393      	bics	r3, r2
 8007130:	b2da      	uxtb	r2, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	721a      	strb	r2, [r3, #8]
   /* Is the window visible? */
   if ( wnd->state & WND_STATE_VISIBLE )
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	7a1b      	ldrb	r3, [r3, #8]
 800713a:	001a      	movs	r2, r3
 800713c:	2308      	movs	r3, #8
 800713e:	4013      	ands	r3, r2
 8007140:	d100      	bne.n	8007144 <_UG_WindowUpdate+0x4c>
 8007142:	e0af      	b.n	80072a4 <_UG_WindowUpdate+0x1ac>
   {
      /* 3D style? */
      if ( (wnd->style & WND_STYLE_3D) && !(wnd->state & WND_STATE_REDRAW_TITLE) )
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	7d9b      	ldrb	r3, [r3, #22]
 8007148:	001a      	movs	r2, r3
 800714a:	2301      	movs	r3, #1
 800714c:	4013      	ands	r3, r2
 800714e:	d033      	beq.n	80071b8 <_UG_WindowUpdate+0xc0>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	7a1b      	ldrb	r3, [r3, #8]
 8007154:	001a      	movs	r2, r3
 8007156:	2340      	movs	r3, #64	@ 0x40
 8007158:	4013      	ands	r3, r2
 800715a:	d12d      	bne.n	80071b8 <_UG_WindowUpdate+0xc0>
      {
         _UG_DrawObjectFrame(xs,ys,xe,ye,(UG_COLOR*)pal_window);
 800715c:	193b      	adds	r3, r7, r4
 800715e:	2400      	movs	r4, #0
 8007160:	5f1c      	ldrsh	r4, [r3, r4]
 8007162:	197b      	adds	r3, r7, r5
 8007164:	2200      	movs	r2, #0
 8007166:	5e9a      	ldrsh	r2, [r3, r2]
 8007168:	000e      	movs	r6, r1
 800716a:	187b      	adds	r3, r7, r1
 800716c:	2100      	movs	r1, #0
 800716e:	5e59      	ldrsh	r1, [r3, r1]
 8007170:	0005      	movs	r5, r0
 8007172:	183b      	adds	r3, r7, r0
 8007174:	2000      	movs	r0, #0
 8007176:	5e18      	ldrsh	r0, [r3, r0]
 8007178:	4b56      	ldr	r3, [pc, #344]	@ (80072d4 <_UG_WindowUpdate+0x1dc>)
 800717a:	9300      	str	r3, [sp, #0]
 800717c:	0023      	movs	r3, r4
 800717e:	f7ff fc95 	bl	8006aac <_UG_DrawObjectFrame>
         xs+=3;
 8007182:	0028      	movs	r0, r5
 8007184:	183b      	adds	r3, r7, r0
 8007186:	881b      	ldrh	r3, [r3, #0]
 8007188:	3303      	adds	r3, #3
 800718a:	b29a      	uxth	r2, r3
 800718c:	183b      	adds	r3, r7, r0
 800718e:	801a      	strh	r2, [r3, #0]
         ys+=3;
 8007190:	19bb      	adds	r3, r7, r6
 8007192:	881b      	ldrh	r3, [r3, #0]
 8007194:	3303      	adds	r3, #3
 8007196:	b29a      	uxth	r2, r3
 8007198:	19bb      	adds	r3, r7, r6
 800719a:	801a      	strh	r2, [r3, #0]
         xe-=3;
 800719c:	2510      	movs	r5, #16
 800719e:	197b      	adds	r3, r7, r5
 80071a0:	881b      	ldrh	r3, [r3, #0]
 80071a2:	3b03      	subs	r3, #3
 80071a4:	b29a      	uxth	r2, r3
 80071a6:	197b      	adds	r3, r7, r5
 80071a8:	801a      	strh	r2, [r3, #0]
         ye-=3;
 80071aa:	240e      	movs	r4, #14
 80071ac:	193b      	adds	r3, r7, r4
 80071ae:	881b      	ldrh	r3, [r3, #0]
 80071b0:	3b03      	subs	r3, #3
 80071b2:	b29a      	uxth	r2, r3
 80071b4:	193b      	adds	r3, r7, r4
 80071b6:	801a      	strh	r2, [r3, #0]
      }
      /* Show title bar? */
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	7d9b      	ldrb	r3, [r3, #22]
 80071bc:	001a      	movs	r2, r3
 80071be:	2302      	movs	r3, #2
 80071c0:	4013      	ands	r3, r2
 80071c2:	d01e      	beq.n	8007202 <_UG_WindowUpdate+0x10a>
      {
         _UG_WindowDrawTitle( wnd );
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	0018      	movs	r0, r3
 80071c8:	f7ff feb6 	bl	8006f38 <_UG_WindowDrawTitle>
         ys += wnd->title.height+1;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	222c      	movs	r2, #44	@ 0x2c
 80071d0:	5c9b      	ldrb	r3, [r3, r2]
 80071d2:	001a      	movs	r2, r3
 80071d4:	2112      	movs	r1, #18
 80071d6:	187b      	adds	r3, r7, r1
 80071d8:	881b      	ldrh	r3, [r3, #0]
 80071da:	18d3      	adds	r3, r2, r3
 80071dc:	b29b      	uxth	r3, r3
 80071de:	3301      	adds	r3, #1
 80071e0:	b29a      	uxth	r2, r3
 80071e2:	187b      	adds	r3, r7, r1
 80071e4:	801a      	strh	r2, [r3, #0]
         if ( wnd->state & WND_STATE_REDRAW_TITLE )
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	7a1b      	ldrb	r3, [r3, #8]
 80071ea:	001a      	movs	r2, r3
 80071ec:	2340      	movs	r3, #64	@ 0x40
 80071ee:	4013      	ands	r3, r2
 80071f0:	d007      	beq.n	8007202 <_UG_WindowUpdate+0x10a>
         {
            wnd->state &= ~WND_STATE_REDRAW_TITLE;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	7a1b      	ldrb	r3, [r3, #8]
 80071f6:	2240      	movs	r2, #64	@ 0x40
 80071f8:	4393      	bics	r3, r2
 80071fa:	b2da      	uxtb	r2, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	721a      	strb	r2, [r3, #8]
            return;
 8007200:	e064      	b.n	80072cc <_UG_WindowUpdate+0x1d4>
         }
      }
      /* Draw window area? */
      UG_FillFrame(xs,ys,xe,ye,wnd->bc);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	899b      	ldrh	r3, [r3, #12]
 8007206:	220e      	movs	r2, #14
 8007208:	18ba      	adds	r2, r7, r2
 800720a:	2500      	movs	r5, #0
 800720c:	5f55      	ldrsh	r5, [r2, r5]
 800720e:	2210      	movs	r2, #16
 8007210:	18ba      	adds	r2, r7, r2
 8007212:	2400      	movs	r4, #0
 8007214:	5f14      	ldrsh	r4, [r2, r4]
 8007216:	2212      	movs	r2, #18
 8007218:	18ba      	adds	r2, r7, r2
 800721a:	2100      	movs	r1, #0
 800721c:	5e51      	ldrsh	r1, [r2, r1]
 800721e:	2214      	movs	r2, #20
 8007220:	18ba      	adds	r2, r7, r2
 8007222:	2000      	movs	r0, #0
 8007224:	5e10      	ldrsh	r0, [r2, r0]
 8007226:	9300      	str	r3, [sp, #0]
 8007228:	002b      	movs	r3, r5
 800722a:	0022      	movs	r2, r4
 800722c:	f7fd ff86 	bl	800513c <UG_FillFrame>

      /* Force each object to be updated! */
      objcnt = wnd->objcnt;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	781a      	ldrb	r2, [r3, #0]
 8007234:	230c      	movs	r3, #12
 8007236:	18fb      	adds	r3, r7, r3
 8007238:	801a      	strh	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 800723a:	2316      	movs	r3, #22
 800723c:	18fb      	adds	r3, r7, r3
 800723e:	2200      	movs	r2, #0
 8007240:	801a      	strh	r2, [r3, #0]
 8007242:	e026      	b.n	8007292 <_UG_WindowUpdate+0x19a>
      {
         obj = (UG_OBJECT*)&wnd->objlst[i];
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	685a      	ldr	r2, [r3, #4]
 8007248:	2316      	movs	r3, #22
 800724a:	18fb      	adds	r3, r7, r3
 800724c:	881b      	ldrh	r3, [r3, #0]
 800724e:	015b      	lsls	r3, r3, #5
 8007250:	18d3      	adds	r3, r2, r3
 8007252:	60bb      	str	r3, [r7, #8]
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	001a      	movs	r2, r3
 800725a:	2301      	movs	r3, #1
 800725c:	4013      	ands	r3, r2
 800725e:	d112      	bne.n	8007286 <_UG_WindowUpdate+0x18e>
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	001a      	movs	r2, r3
 8007266:	2302      	movs	r3, #2
 8007268:	4013      	ands	r3, r2
 800726a:	d00c      	beq.n	8007286 <_UG_WindowUpdate+0x18e>
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	001a      	movs	r2, r3
 8007272:	2308      	movs	r3, #8
 8007274:	4013      	ands	r3, r2
 8007276:	d006      	beq.n	8007286 <_UG_WindowUpdate+0x18e>
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	2260      	movs	r2, #96	@ 0x60
 800727e:	4313      	orrs	r3, r2
 8007280:	b2da      	uxtb	r2, r3
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	701a      	strb	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 8007286:	2116      	movs	r1, #22
 8007288:	187b      	adds	r3, r7, r1
 800728a:	881a      	ldrh	r2, [r3, #0]
 800728c:	187b      	adds	r3, r7, r1
 800728e:	3201      	adds	r2, #1
 8007290:	801a      	strh	r2, [r3, #0]
 8007292:	2316      	movs	r3, #22
 8007294:	18fa      	adds	r2, r7, r3
 8007296:	230c      	movs	r3, #12
 8007298:	18fb      	adds	r3, r7, r3
 800729a:	8812      	ldrh	r2, [r2, #0]
 800729c:	881b      	ldrh	r3, [r3, #0]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d3d0      	bcc.n	8007244 <_UG_WindowUpdate+0x14c>
 80072a2:	e013      	b.n	80072cc <_UG_WindowUpdate+0x1d4>
      }
   }
   else
   {
      UG_FillFrame(wnd->xs,wnd->xs,wnd->xe,wnd->ye,gui->desktop_color);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	200e      	movs	r0, #14
 80072a8:	5e18      	ldrsh	r0, [r3, r0]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	210e      	movs	r1, #14
 80072ae:	5e59      	ldrsh	r1, [r3, r1]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2212      	movs	r2, #18
 80072b4:	5e9a      	ldrsh	r2, [r3, r2]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2414      	movs	r4, #20
 80072ba:	5f1c      	ldrsh	r4, [r3, r4]
 80072bc:	4b06      	ldr	r3, [pc, #24]	@ (80072d8 <_UG_WindowUpdate+0x1e0>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2550      	movs	r5, #80	@ 0x50
 80072c2:	5b5b      	ldrh	r3, [r3, r5]
 80072c4:	9300      	str	r3, [sp, #0]
 80072c6:	0023      	movs	r3, r4
 80072c8:	f7fd ff38 	bl	800513c <UG_FillFrame>
   }
}
 80072cc:	46bd      	mov	sp, r7
 80072ce:	b007      	add	sp, #28
 80072d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072d2:	46c0      	nop			@ (mov r8, r8)
 80072d4:	0800917c 	.word	0x0800917c
 80072d8:	200002e4 	.word	0x200002e4

080072dc <rand>:
 80072dc:	4b16      	ldr	r3, [pc, #88]	@ (8007338 <rand+0x5c>)
 80072de:	b510      	push	{r4, lr}
 80072e0:	681c      	ldr	r4, [r3, #0]
 80072e2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d116      	bne.n	8007316 <rand+0x3a>
 80072e8:	2018      	movs	r0, #24
 80072ea:	f000 fa51 	bl	8007790 <malloc>
 80072ee:	1e02      	subs	r2, r0, #0
 80072f0:	6320      	str	r0, [r4, #48]	@ 0x30
 80072f2:	d104      	bne.n	80072fe <rand+0x22>
 80072f4:	2152      	movs	r1, #82	@ 0x52
 80072f6:	4b11      	ldr	r3, [pc, #68]	@ (800733c <rand+0x60>)
 80072f8:	4811      	ldr	r0, [pc, #68]	@ (8007340 <rand+0x64>)
 80072fa:	f000 f9e1 	bl	80076c0 <__assert_func>
 80072fe:	4b11      	ldr	r3, [pc, #68]	@ (8007344 <rand+0x68>)
 8007300:	2100      	movs	r1, #0
 8007302:	6003      	str	r3, [r0, #0]
 8007304:	4b10      	ldr	r3, [pc, #64]	@ (8007348 <rand+0x6c>)
 8007306:	6043      	str	r3, [r0, #4]
 8007308:	4b10      	ldr	r3, [pc, #64]	@ (800734c <rand+0x70>)
 800730a:	6083      	str	r3, [r0, #8]
 800730c:	230b      	movs	r3, #11
 800730e:	8183      	strh	r3, [r0, #12]
 8007310:	2001      	movs	r0, #1
 8007312:	6110      	str	r0, [r2, #16]
 8007314:	6151      	str	r1, [r2, #20]
 8007316:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 8007318:	4a0d      	ldr	r2, [pc, #52]	@ (8007350 <rand+0x74>)
 800731a:	6920      	ldr	r0, [r4, #16]
 800731c:	6961      	ldr	r1, [r4, #20]
 800731e:	4b0d      	ldr	r3, [pc, #52]	@ (8007354 <rand+0x78>)
 8007320:	f7f9 f892 	bl	8000448 <__aeabi_lmul>
 8007324:	2201      	movs	r2, #1
 8007326:	2300      	movs	r3, #0
 8007328:	1880      	adds	r0, r0, r2
 800732a:	4159      	adcs	r1, r3
 800732c:	6120      	str	r0, [r4, #16]
 800732e:	6161      	str	r1, [r4, #20]
 8007330:	0048      	lsls	r0, r1, #1
 8007332:	0840      	lsrs	r0, r0, #1
 8007334:	bd10      	pop	{r4, pc}
 8007336:	46c0      	nop			@ (mov r8, r8)
 8007338:	20000028 	.word	0x20000028
 800733c:	08009230 	.word	0x08009230
 8007340:	08009247 	.word	0x08009247
 8007344:	abcd330e 	.word	0xabcd330e
 8007348:	e66d1234 	.word	0xe66d1234
 800734c:	0005deec 	.word	0x0005deec
 8007350:	4c957f2d 	.word	0x4c957f2d
 8007354:	5851f42d 	.word	0x5851f42d

08007358 <std>:
 8007358:	2300      	movs	r3, #0
 800735a:	b510      	push	{r4, lr}
 800735c:	0004      	movs	r4, r0
 800735e:	6003      	str	r3, [r0, #0]
 8007360:	6043      	str	r3, [r0, #4]
 8007362:	6083      	str	r3, [r0, #8]
 8007364:	8181      	strh	r1, [r0, #12]
 8007366:	6643      	str	r3, [r0, #100]	@ 0x64
 8007368:	81c2      	strh	r2, [r0, #14]
 800736a:	6103      	str	r3, [r0, #16]
 800736c:	6143      	str	r3, [r0, #20]
 800736e:	6183      	str	r3, [r0, #24]
 8007370:	0019      	movs	r1, r3
 8007372:	2208      	movs	r2, #8
 8007374:	305c      	adds	r0, #92	@ 0x5c
 8007376:	f000 f91f 	bl	80075b8 <memset>
 800737a:	4b0b      	ldr	r3, [pc, #44]	@ (80073a8 <std+0x50>)
 800737c:	6224      	str	r4, [r4, #32]
 800737e:	6263      	str	r3, [r4, #36]	@ 0x24
 8007380:	4b0a      	ldr	r3, [pc, #40]	@ (80073ac <std+0x54>)
 8007382:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007384:	4b0a      	ldr	r3, [pc, #40]	@ (80073b0 <std+0x58>)
 8007386:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007388:	4b0a      	ldr	r3, [pc, #40]	@ (80073b4 <std+0x5c>)
 800738a:	6323      	str	r3, [r4, #48]	@ 0x30
 800738c:	4b0a      	ldr	r3, [pc, #40]	@ (80073b8 <std+0x60>)
 800738e:	429c      	cmp	r4, r3
 8007390:	d005      	beq.n	800739e <std+0x46>
 8007392:	4b0a      	ldr	r3, [pc, #40]	@ (80073bc <std+0x64>)
 8007394:	429c      	cmp	r4, r3
 8007396:	d002      	beq.n	800739e <std+0x46>
 8007398:	4b09      	ldr	r3, [pc, #36]	@ (80073c0 <std+0x68>)
 800739a:	429c      	cmp	r4, r3
 800739c:	d103      	bne.n	80073a6 <std+0x4e>
 800739e:	0020      	movs	r0, r4
 80073a0:	3058      	adds	r0, #88	@ 0x58
 80073a2:	f000 f989 	bl	80076b8 <__retarget_lock_init_recursive>
 80073a6:	bd10      	pop	{r4, pc}
 80073a8:	08007521 	.word	0x08007521
 80073ac:	08007549 	.word	0x08007549
 80073b0:	08007581 	.word	0x08007581
 80073b4:	080075ad 	.word	0x080075ad
 80073b8:	20000300 	.word	0x20000300
 80073bc:	20000368 	.word	0x20000368
 80073c0:	200003d0 	.word	0x200003d0

080073c4 <stdio_exit_handler>:
 80073c4:	b510      	push	{r4, lr}
 80073c6:	4a03      	ldr	r2, [pc, #12]	@ (80073d4 <stdio_exit_handler+0x10>)
 80073c8:	4903      	ldr	r1, [pc, #12]	@ (80073d8 <stdio_exit_handler+0x14>)
 80073ca:	4804      	ldr	r0, [pc, #16]	@ (80073dc <stdio_exit_handler+0x18>)
 80073cc:	f000 f86c 	bl	80074a8 <_fwalk_sglue>
 80073d0:	bd10      	pop	{r4, pc}
 80073d2:	46c0      	nop			@ (mov r8, r8)
 80073d4:	2000001c 	.word	0x2000001c
 80073d8:	08007fcd 	.word	0x08007fcd
 80073dc:	2000002c 	.word	0x2000002c

080073e0 <cleanup_stdio>:
 80073e0:	6841      	ldr	r1, [r0, #4]
 80073e2:	4b0b      	ldr	r3, [pc, #44]	@ (8007410 <cleanup_stdio+0x30>)
 80073e4:	b510      	push	{r4, lr}
 80073e6:	0004      	movs	r4, r0
 80073e8:	4299      	cmp	r1, r3
 80073ea:	d001      	beq.n	80073f0 <cleanup_stdio+0x10>
 80073ec:	f000 fdee 	bl	8007fcc <_fflush_r>
 80073f0:	68a1      	ldr	r1, [r4, #8]
 80073f2:	4b08      	ldr	r3, [pc, #32]	@ (8007414 <cleanup_stdio+0x34>)
 80073f4:	4299      	cmp	r1, r3
 80073f6:	d002      	beq.n	80073fe <cleanup_stdio+0x1e>
 80073f8:	0020      	movs	r0, r4
 80073fa:	f000 fde7 	bl	8007fcc <_fflush_r>
 80073fe:	68e1      	ldr	r1, [r4, #12]
 8007400:	4b05      	ldr	r3, [pc, #20]	@ (8007418 <cleanup_stdio+0x38>)
 8007402:	4299      	cmp	r1, r3
 8007404:	d002      	beq.n	800740c <cleanup_stdio+0x2c>
 8007406:	0020      	movs	r0, r4
 8007408:	f000 fde0 	bl	8007fcc <_fflush_r>
 800740c:	bd10      	pop	{r4, pc}
 800740e:	46c0      	nop			@ (mov r8, r8)
 8007410:	20000300 	.word	0x20000300
 8007414:	20000368 	.word	0x20000368
 8007418:	200003d0 	.word	0x200003d0

0800741c <global_stdio_init.part.0>:
 800741c:	b510      	push	{r4, lr}
 800741e:	4b09      	ldr	r3, [pc, #36]	@ (8007444 <global_stdio_init.part.0+0x28>)
 8007420:	4a09      	ldr	r2, [pc, #36]	@ (8007448 <global_stdio_init.part.0+0x2c>)
 8007422:	2104      	movs	r1, #4
 8007424:	601a      	str	r2, [r3, #0]
 8007426:	4809      	ldr	r0, [pc, #36]	@ (800744c <global_stdio_init.part.0+0x30>)
 8007428:	2200      	movs	r2, #0
 800742a:	f7ff ff95 	bl	8007358 <std>
 800742e:	2201      	movs	r2, #1
 8007430:	2109      	movs	r1, #9
 8007432:	4807      	ldr	r0, [pc, #28]	@ (8007450 <global_stdio_init.part.0+0x34>)
 8007434:	f7ff ff90 	bl	8007358 <std>
 8007438:	2202      	movs	r2, #2
 800743a:	2112      	movs	r1, #18
 800743c:	4805      	ldr	r0, [pc, #20]	@ (8007454 <global_stdio_init.part.0+0x38>)
 800743e:	f7ff ff8b 	bl	8007358 <std>
 8007442:	bd10      	pop	{r4, pc}
 8007444:	20000438 	.word	0x20000438
 8007448:	080073c5 	.word	0x080073c5
 800744c:	20000300 	.word	0x20000300
 8007450:	20000368 	.word	0x20000368
 8007454:	200003d0 	.word	0x200003d0

08007458 <__sfp_lock_acquire>:
 8007458:	b510      	push	{r4, lr}
 800745a:	4802      	ldr	r0, [pc, #8]	@ (8007464 <__sfp_lock_acquire+0xc>)
 800745c:	f000 f92d 	bl	80076ba <__retarget_lock_acquire_recursive>
 8007460:	bd10      	pop	{r4, pc}
 8007462:	46c0      	nop			@ (mov r8, r8)
 8007464:	20000441 	.word	0x20000441

08007468 <__sfp_lock_release>:
 8007468:	b510      	push	{r4, lr}
 800746a:	4802      	ldr	r0, [pc, #8]	@ (8007474 <__sfp_lock_release+0xc>)
 800746c:	f000 f926 	bl	80076bc <__retarget_lock_release_recursive>
 8007470:	bd10      	pop	{r4, pc}
 8007472:	46c0      	nop			@ (mov r8, r8)
 8007474:	20000441 	.word	0x20000441

08007478 <__sinit>:
 8007478:	b510      	push	{r4, lr}
 800747a:	0004      	movs	r4, r0
 800747c:	f7ff ffec 	bl	8007458 <__sfp_lock_acquire>
 8007480:	6a23      	ldr	r3, [r4, #32]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d002      	beq.n	800748c <__sinit+0x14>
 8007486:	f7ff ffef 	bl	8007468 <__sfp_lock_release>
 800748a:	bd10      	pop	{r4, pc}
 800748c:	4b04      	ldr	r3, [pc, #16]	@ (80074a0 <__sinit+0x28>)
 800748e:	6223      	str	r3, [r4, #32]
 8007490:	4b04      	ldr	r3, [pc, #16]	@ (80074a4 <__sinit+0x2c>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d1f6      	bne.n	8007486 <__sinit+0xe>
 8007498:	f7ff ffc0 	bl	800741c <global_stdio_init.part.0>
 800749c:	e7f3      	b.n	8007486 <__sinit+0xe>
 800749e:	46c0      	nop			@ (mov r8, r8)
 80074a0:	080073e1 	.word	0x080073e1
 80074a4:	20000438 	.word	0x20000438

080074a8 <_fwalk_sglue>:
 80074a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074aa:	0014      	movs	r4, r2
 80074ac:	2600      	movs	r6, #0
 80074ae:	9000      	str	r0, [sp, #0]
 80074b0:	9101      	str	r1, [sp, #4]
 80074b2:	68a5      	ldr	r5, [r4, #8]
 80074b4:	6867      	ldr	r7, [r4, #4]
 80074b6:	3f01      	subs	r7, #1
 80074b8:	d504      	bpl.n	80074c4 <_fwalk_sglue+0x1c>
 80074ba:	6824      	ldr	r4, [r4, #0]
 80074bc:	2c00      	cmp	r4, #0
 80074be:	d1f8      	bne.n	80074b2 <_fwalk_sglue+0xa>
 80074c0:	0030      	movs	r0, r6
 80074c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80074c4:	89ab      	ldrh	r3, [r5, #12]
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d908      	bls.n	80074dc <_fwalk_sglue+0x34>
 80074ca:	220e      	movs	r2, #14
 80074cc:	5eab      	ldrsh	r3, [r5, r2]
 80074ce:	3301      	adds	r3, #1
 80074d0:	d004      	beq.n	80074dc <_fwalk_sglue+0x34>
 80074d2:	0029      	movs	r1, r5
 80074d4:	9800      	ldr	r0, [sp, #0]
 80074d6:	9b01      	ldr	r3, [sp, #4]
 80074d8:	4798      	blx	r3
 80074da:	4306      	orrs	r6, r0
 80074dc:	3568      	adds	r5, #104	@ 0x68
 80074de:	e7ea      	b.n	80074b6 <_fwalk_sglue+0xe>

080074e0 <siprintf>:
 80074e0:	b40e      	push	{r1, r2, r3}
 80074e2:	b500      	push	{lr}
 80074e4:	490b      	ldr	r1, [pc, #44]	@ (8007514 <siprintf+0x34>)
 80074e6:	b09c      	sub	sp, #112	@ 0x70
 80074e8:	ab1d      	add	r3, sp, #116	@ 0x74
 80074ea:	9002      	str	r0, [sp, #8]
 80074ec:	9006      	str	r0, [sp, #24]
 80074ee:	9107      	str	r1, [sp, #28]
 80074f0:	9104      	str	r1, [sp, #16]
 80074f2:	4809      	ldr	r0, [pc, #36]	@ (8007518 <siprintf+0x38>)
 80074f4:	4909      	ldr	r1, [pc, #36]	@ (800751c <siprintf+0x3c>)
 80074f6:	cb04      	ldmia	r3!, {r2}
 80074f8:	9105      	str	r1, [sp, #20]
 80074fa:	6800      	ldr	r0, [r0, #0]
 80074fc:	a902      	add	r1, sp, #8
 80074fe:	9301      	str	r3, [sp, #4]
 8007500:	f000 fa62 	bl	80079c8 <_svfiprintf_r>
 8007504:	2200      	movs	r2, #0
 8007506:	9b02      	ldr	r3, [sp, #8]
 8007508:	701a      	strb	r2, [r3, #0]
 800750a:	b01c      	add	sp, #112	@ 0x70
 800750c:	bc08      	pop	{r3}
 800750e:	b003      	add	sp, #12
 8007510:	4718      	bx	r3
 8007512:	46c0      	nop			@ (mov r8, r8)
 8007514:	7fffffff 	.word	0x7fffffff
 8007518:	20000028 	.word	0x20000028
 800751c:	ffff0208 	.word	0xffff0208

08007520 <__sread>:
 8007520:	b570      	push	{r4, r5, r6, lr}
 8007522:	000c      	movs	r4, r1
 8007524:	250e      	movs	r5, #14
 8007526:	5f49      	ldrsh	r1, [r1, r5]
 8007528:	f000 f874 	bl	8007614 <_read_r>
 800752c:	2800      	cmp	r0, #0
 800752e:	db03      	blt.n	8007538 <__sread+0x18>
 8007530:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007532:	181b      	adds	r3, r3, r0
 8007534:	6563      	str	r3, [r4, #84]	@ 0x54
 8007536:	bd70      	pop	{r4, r5, r6, pc}
 8007538:	89a3      	ldrh	r3, [r4, #12]
 800753a:	4a02      	ldr	r2, [pc, #8]	@ (8007544 <__sread+0x24>)
 800753c:	4013      	ands	r3, r2
 800753e:	81a3      	strh	r3, [r4, #12]
 8007540:	e7f9      	b.n	8007536 <__sread+0x16>
 8007542:	46c0      	nop			@ (mov r8, r8)
 8007544:	ffffefff 	.word	0xffffefff

08007548 <__swrite>:
 8007548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800754a:	001f      	movs	r7, r3
 800754c:	898b      	ldrh	r3, [r1, #12]
 800754e:	0005      	movs	r5, r0
 8007550:	000c      	movs	r4, r1
 8007552:	0016      	movs	r6, r2
 8007554:	05db      	lsls	r3, r3, #23
 8007556:	d505      	bpl.n	8007564 <__swrite+0x1c>
 8007558:	230e      	movs	r3, #14
 800755a:	5ec9      	ldrsh	r1, [r1, r3]
 800755c:	2200      	movs	r2, #0
 800755e:	2302      	movs	r3, #2
 8007560:	f000 f844 	bl	80075ec <_lseek_r>
 8007564:	89a3      	ldrh	r3, [r4, #12]
 8007566:	4a05      	ldr	r2, [pc, #20]	@ (800757c <__swrite+0x34>)
 8007568:	0028      	movs	r0, r5
 800756a:	4013      	ands	r3, r2
 800756c:	81a3      	strh	r3, [r4, #12]
 800756e:	0032      	movs	r2, r6
 8007570:	230e      	movs	r3, #14
 8007572:	5ee1      	ldrsh	r1, [r4, r3]
 8007574:	003b      	movs	r3, r7
 8007576:	f000 f861 	bl	800763c <_write_r>
 800757a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800757c:	ffffefff 	.word	0xffffefff

08007580 <__sseek>:
 8007580:	b570      	push	{r4, r5, r6, lr}
 8007582:	000c      	movs	r4, r1
 8007584:	250e      	movs	r5, #14
 8007586:	5f49      	ldrsh	r1, [r1, r5]
 8007588:	f000 f830 	bl	80075ec <_lseek_r>
 800758c:	89a3      	ldrh	r3, [r4, #12]
 800758e:	1c42      	adds	r2, r0, #1
 8007590:	d103      	bne.n	800759a <__sseek+0x1a>
 8007592:	4a05      	ldr	r2, [pc, #20]	@ (80075a8 <__sseek+0x28>)
 8007594:	4013      	ands	r3, r2
 8007596:	81a3      	strh	r3, [r4, #12]
 8007598:	bd70      	pop	{r4, r5, r6, pc}
 800759a:	2280      	movs	r2, #128	@ 0x80
 800759c:	0152      	lsls	r2, r2, #5
 800759e:	4313      	orrs	r3, r2
 80075a0:	81a3      	strh	r3, [r4, #12]
 80075a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80075a4:	e7f8      	b.n	8007598 <__sseek+0x18>
 80075a6:	46c0      	nop			@ (mov r8, r8)
 80075a8:	ffffefff 	.word	0xffffefff

080075ac <__sclose>:
 80075ac:	b510      	push	{r4, lr}
 80075ae:	230e      	movs	r3, #14
 80075b0:	5ec9      	ldrsh	r1, [r1, r3]
 80075b2:	f000 f809 	bl	80075c8 <_close_r>
 80075b6:	bd10      	pop	{r4, pc}

080075b8 <memset>:
 80075b8:	0003      	movs	r3, r0
 80075ba:	1882      	adds	r2, r0, r2
 80075bc:	4293      	cmp	r3, r2
 80075be:	d100      	bne.n	80075c2 <memset+0xa>
 80075c0:	4770      	bx	lr
 80075c2:	7019      	strb	r1, [r3, #0]
 80075c4:	3301      	adds	r3, #1
 80075c6:	e7f9      	b.n	80075bc <memset+0x4>

080075c8 <_close_r>:
 80075c8:	2300      	movs	r3, #0
 80075ca:	b570      	push	{r4, r5, r6, lr}
 80075cc:	4d06      	ldr	r5, [pc, #24]	@ (80075e8 <_close_r+0x20>)
 80075ce:	0004      	movs	r4, r0
 80075d0:	0008      	movs	r0, r1
 80075d2:	602b      	str	r3, [r5, #0]
 80075d4:	f7f9 ffcf 	bl	8001576 <_close>
 80075d8:	1c43      	adds	r3, r0, #1
 80075da:	d103      	bne.n	80075e4 <_close_r+0x1c>
 80075dc:	682b      	ldr	r3, [r5, #0]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d000      	beq.n	80075e4 <_close_r+0x1c>
 80075e2:	6023      	str	r3, [r4, #0]
 80075e4:	bd70      	pop	{r4, r5, r6, pc}
 80075e6:	46c0      	nop			@ (mov r8, r8)
 80075e8:	2000043c 	.word	0x2000043c

080075ec <_lseek_r>:
 80075ec:	b570      	push	{r4, r5, r6, lr}
 80075ee:	0004      	movs	r4, r0
 80075f0:	0008      	movs	r0, r1
 80075f2:	0011      	movs	r1, r2
 80075f4:	001a      	movs	r2, r3
 80075f6:	2300      	movs	r3, #0
 80075f8:	4d05      	ldr	r5, [pc, #20]	@ (8007610 <_lseek_r+0x24>)
 80075fa:	602b      	str	r3, [r5, #0]
 80075fc:	f7f9 ffdc 	bl	80015b8 <_lseek>
 8007600:	1c43      	adds	r3, r0, #1
 8007602:	d103      	bne.n	800760c <_lseek_r+0x20>
 8007604:	682b      	ldr	r3, [r5, #0]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d000      	beq.n	800760c <_lseek_r+0x20>
 800760a:	6023      	str	r3, [r4, #0]
 800760c:	bd70      	pop	{r4, r5, r6, pc}
 800760e:	46c0      	nop			@ (mov r8, r8)
 8007610:	2000043c 	.word	0x2000043c

08007614 <_read_r>:
 8007614:	b570      	push	{r4, r5, r6, lr}
 8007616:	0004      	movs	r4, r0
 8007618:	0008      	movs	r0, r1
 800761a:	0011      	movs	r1, r2
 800761c:	001a      	movs	r2, r3
 800761e:	2300      	movs	r3, #0
 8007620:	4d05      	ldr	r5, [pc, #20]	@ (8007638 <_read_r+0x24>)
 8007622:	602b      	str	r3, [r5, #0]
 8007624:	f7f9 ff6e 	bl	8001504 <_read>
 8007628:	1c43      	adds	r3, r0, #1
 800762a:	d103      	bne.n	8007634 <_read_r+0x20>
 800762c:	682b      	ldr	r3, [r5, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d000      	beq.n	8007634 <_read_r+0x20>
 8007632:	6023      	str	r3, [r4, #0]
 8007634:	bd70      	pop	{r4, r5, r6, pc}
 8007636:	46c0      	nop			@ (mov r8, r8)
 8007638:	2000043c 	.word	0x2000043c

0800763c <_write_r>:
 800763c:	b570      	push	{r4, r5, r6, lr}
 800763e:	0004      	movs	r4, r0
 8007640:	0008      	movs	r0, r1
 8007642:	0011      	movs	r1, r2
 8007644:	001a      	movs	r2, r3
 8007646:	2300      	movs	r3, #0
 8007648:	4d05      	ldr	r5, [pc, #20]	@ (8007660 <_write_r+0x24>)
 800764a:	602b      	str	r3, [r5, #0]
 800764c:	f7f9 ff77 	bl	800153e <_write>
 8007650:	1c43      	adds	r3, r0, #1
 8007652:	d103      	bne.n	800765c <_write_r+0x20>
 8007654:	682b      	ldr	r3, [r5, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d000      	beq.n	800765c <_write_r+0x20>
 800765a:	6023      	str	r3, [r4, #0]
 800765c:	bd70      	pop	{r4, r5, r6, pc}
 800765e:	46c0      	nop			@ (mov r8, r8)
 8007660:	2000043c 	.word	0x2000043c

08007664 <__errno>:
 8007664:	4b01      	ldr	r3, [pc, #4]	@ (800766c <__errno+0x8>)
 8007666:	6818      	ldr	r0, [r3, #0]
 8007668:	4770      	bx	lr
 800766a:	46c0      	nop			@ (mov r8, r8)
 800766c:	20000028 	.word	0x20000028

08007670 <__libc_init_array>:
 8007670:	b570      	push	{r4, r5, r6, lr}
 8007672:	2600      	movs	r6, #0
 8007674:	4c0c      	ldr	r4, [pc, #48]	@ (80076a8 <__libc_init_array+0x38>)
 8007676:	4d0d      	ldr	r5, [pc, #52]	@ (80076ac <__libc_init_array+0x3c>)
 8007678:	1b64      	subs	r4, r4, r5
 800767a:	10a4      	asrs	r4, r4, #2
 800767c:	42a6      	cmp	r6, r4
 800767e:	d109      	bne.n	8007694 <__libc_init_array+0x24>
 8007680:	2600      	movs	r6, #0
 8007682:	f001 f815 	bl	80086b0 <_init>
 8007686:	4c0a      	ldr	r4, [pc, #40]	@ (80076b0 <__libc_init_array+0x40>)
 8007688:	4d0a      	ldr	r5, [pc, #40]	@ (80076b4 <__libc_init_array+0x44>)
 800768a:	1b64      	subs	r4, r4, r5
 800768c:	10a4      	asrs	r4, r4, #2
 800768e:	42a6      	cmp	r6, r4
 8007690:	d105      	bne.n	800769e <__libc_init_array+0x2e>
 8007692:	bd70      	pop	{r4, r5, r6, pc}
 8007694:	00b3      	lsls	r3, r6, #2
 8007696:	58eb      	ldr	r3, [r5, r3]
 8007698:	4798      	blx	r3
 800769a:	3601      	adds	r6, #1
 800769c:	e7ee      	b.n	800767c <__libc_init_array+0xc>
 800769e:	00b3      	lsls	r3, r6, #2
 80076a0:	58eb      	ldr	r3, [r5, r3]
 80076a2:	4798      	blx	r3
 80076a4:	3601      	adds	r6, #1
 80076a6:	e7f2      	b.n	800768e <__libc_init_array+0x1e>
 80076a8:	08009318 	.word	0x08009318
 80076ac:	08009318 	.word	0x08009318
 80076b0:	0800931c 	.word	0x0800931c
 80076b4:	08009318 	.word	0x08009318

080076b8 <__retarget_lock_init_recursive>:
 80076b8:	4770      	bx	lr

080076ba <__retarget_lock_acquire_recursive>:
 80076ba:	4770      	bx	lr

080076bc <__retarget_lock_release_recursive>:
 80076bc:	4770      	bx	lr
	...

080076c0 <__assert_func>:
 80076c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80076c2:	0014      	movs	r4, r2
 80076c4:	001a      	movs	r2, r3
 80076c6:	4b09      	ldr	r3, [pc, #36]	@ (80076ec <__assert_func+0x2c>)
 80076c8:	0005      	movs	r5, r0
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	000e      	movs	r6, r1
 80076ce:	68d8      	ldr	r0, [r3, #12]
 80076d0:	4b07      	ldr	r3, [pc, #28]	@ (80076f0 <__assert_func+0x30>)
 80076d2:	2c00      	cmp	r4, #0
 80076d4:	d101      	bne.n	80076da <__assert_func+0x1a>
 80076d6:	4b07      	ldr	r3, [pc, #28]	@ (80076f4 <__assert_func+0x34>)
 80076d8:	001c      	movs	r4, r3
 80076da:	4907      	ldr	r1, [pc, #28]	@ (80076f8 <__assert_func+0x38>)
 80076dc:	9301      	str	r3, [sp, #4]
 80076de:	9402      	str	r4, [sp, #8]
 80076e0:	002b      	movs	r3, r5
 80076e2:	9600      	str	r6, [sp, #0]
 80076e4:	f000 fc9e 	bl	8008024 <fiprintf>
 80076e8:	f000 fce6 	bl	80080b8 <abort>
 80076ec:	20000028 	.word	0x20000028
 80076f0:	0800929f 	.word	0x0800929f
 80076f4:	080092da 	.word	0x080092da
 80076f8:	080092ac 	.word	0x080092ac

080076fc <_free_r>:
 80076fc:	b570      	push	{r4, r5, r6, lr}
 80076fe:	0005      	movs	r5, r0
 8007700:	1e0c      	subs	r4, r1, #0
 8007702:	d010      	beq.n	8007726 <_free_r+0x2a>
 8007704:	3c04      	subs	r4, #4
 8007706:	6823      	ldr	r3, [r4, #0]
 8007708:	2b00      	cmp	r3, #0
 800770a:	da00      	bge.n	800770e <_free_r+0x12>
 800770c:	18e4      	adds	r4, r4, r3
 800770e:	0028      	movs	r0, r5
 8007710:	f000 f8ea 	bl	80078e8 <__malloc_lock>
 8007714:	4a1d      	ldr	r2, [pc, #116]	@ (800778c <_free_r+0x90>)
 8007716:	6813      	ldr	r3, [r2, #0]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d105      	bne.n	8007728 <_free_r+0x2c>
 800771c:	6063      	str	r3, [r4, #4]
 800771e:	6014      	str	r4, [r2, #0]
 8007720:	0028      	movs	r0, r5
 8007722:	f000 f8e9 	bl	80078f8 <__malloc_unlock>
 8007726:	bd70      	pop	{r4, r5, r6, pc}
 8007728:	42a3      	cmp	r3, r4
 800772a:	d908      	bls.n	800773e <_free_r+0x42>
 800772c:	6820      	ldr	r0, [r4, #0]
 800772e:	1821      	adds	r1, r4, r0
 8007730:	428b      	cmp	r3, r1
 8007732:	d1f3      	bne.n	800771c <_free_r+0x20>
 8007734:	6819      	ldr	r1, [r3, #0]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	1809      	adds	r1, r1, r0
 800773a:	6021      	str	r1, [r4, #0]
 800773c:	e7ee      	b.n	800771c <_free_r+0x20>
 800773e:	001a      	movs	r2, r3
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d001      	beq.n	800774a <_free_r+0x4e>
 8007746:	42a3      	cmp	r3, r4
 8007748:	d9f9      	bls.n	800773e <_free_r+0x42>
 800774a:	6811      	ldr	r1, [r2, #0]
 800774c:	1850      	adds	r0, r2, r1
 800774e:	42a0      	cmp	r0, r4
 8007750:	d10b      	bne.n	800776a <_free_r+0x6e>
 8007752:	6820      	ldr	r0, [r4, #0]
 8007754:	1809      	adds	r1, r1, r0
 8007756:	1850      	adds	r0, r2, r1
 8007758:	6011      	str	r1, [r2, #0]
 800775a:	4283      	cmp	r3, r0
 800775c:	d1e0      	bne.n	8007720 <_free_r+0x24>
 800775e:	6818      	ldr	r0, [r3, #0]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	1841      	adds	r1, r0, r1
 8007764:	6011      	str	r1, [r2, #0]
 8007766:	6053      	str	r3, [r2, #4]
 8007768:	e7da      	b.n	8007720 <_free_r+0x24>
 800776a:	42a0      	cmp	r0, r4
 800776c:	d902      	bls.n	8007774 <_free_r+0x78>
 800776e:	230c      	movs	r3, #12
 8007770:	602b      	str	r3, [r5, #0]
 8007772:	e7d5      	b.n	8007720 <_free_r+0x24>
 8007774:	6820      	ldr	r0, [r4, #0]
 8007776:	1821      	adds	r1, r4, r0
 8007778:	428b      	cmp	r3, r1
 800777a:	d103      	bne.n	8007784 <_free_r+0x88>
 800777c:	6819      	ldr	r1, [r3, #0]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	1809      	adds	r1, r1, r0
 8007782:	6021      	str	r1, [r4, #0]
 8007784:	6063      	str	r3, [r4, #4]
 8007786:	6054      	str	r4, [r2, #4]
 8007788:	e7ca      	b.n	8007720 <_free_r+0x24>
 800778a:	46c0      	nop			@ (mov r8, r8)
 800778c:	20000448 	.word	0x20000448

08007790 <malloc>:
 8007790:	b510      	push	{r4, lr}
 8007792:	4b03      	ldr	r3, [pc, #12]	@ (80077a0 <malloc+0x10>)
 8007794:	0001      	movs	r1, r0
 8007796:	6818      	ldr	r0, [r3, #0]
 8007798:	f000 f826 	bl	80077e8 <_malloc_r>
 800779c:	bd10      	pop	{r4, pc}
 800779e:	46c0      	nop			@ (mov r8, r8)
 80077a0:	20000028 	.word	0x20000028

080077a4 <sbrk_aligned>:
 80077a4:	b570      	push	{r4, r5, r6, lr}
 80077a6:	4e0f      	ldr	r6, [pc, #60]	@ (80077e4 <sbrk_aligned+0x40>)
 80077a8:	000d      	movs	r5, r1
 80077aa:	6831      	ldr	r1, [r6, #0]
 80077ac:	0004      	movs	r4, r0
 80077ae:	2900      	cmp	r1, #0
 80077b0:	d102      	bne.n	80077b8 <sbrk_aligned+0x14>
 80077b2:	f000 fc5b 	bl	800806c <_sbrk_r>
 80077b6:	6030      	str	r0, [r6, #0]
 80077b8:	0029      	movs	r1, r5
 80077ba:	0020      	movs	r0, r4
 80077bc:	f000 fc56 	bl	800806c <_sbrk_r>
 80077c0:	1c43      	adds	r3, r0, #1
 80077c2:	d103      	bne.n	80077cc <sbrk_aligned+0x28>
 80077c4:	2501      	movs	r5, #1
 80077c6:	426d      	negs	r5, r5
 80077c8:	0028      	movs	r0, r5
 80077ca:	bd70      	pop	{r4, r5, r6, pc}
 80077cc:	2303      	movs	r3, #3
 80077ce:	1cc5      	adds	r5, r0, #3
 80077d0:	439d      	bics	r5, r3
 80077d2:	42a8      	cmp	r0, r5
 80077d4:	d0f8      	beq.n	80077c8 <sbrk_aligned+0x24>
 80077d6:	1a29      	subs	r1, r5, r0
 80077d8:	0020      	movs	r0, r4
 80077da:	f000 fc47 	bl	800806c <_sbrk_r>
 80077de:	3001      	adds	r0, #1
 80077e0:	d1f2      	bne.n	80077c8 <sbrk_aligned+0x24>
 80077e2:	e7ef      	b.n	80077c4 <sbrk_aligned+0x20>
 80077e4:	20000444 	.word	0x20000444

080077e8 <_malloc_r>:
 80077e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077ea:	2203      	movs	r2, #3
 80077ec:	1ccb      	adds	r3, r1, #3
 80077ee:	4393      	bics	r3, r2
 80077f0:	3308      	adds	r3, #8
 80077f2:	0005      	movs	r5, r0
 80077f4:	001f      	movs	r7, r3
 80077f6:	2b0c      	cmp	r3, #12
 80077f8:	d234      	bcs.n	8007864 <_malloc_r+0x7c>
 80077fa:	270c      	movs	r7, #12
 80077fc:	42b9      	cmp	r1, r7
 80077fe:	d833      	bhi.n	8007868 <_malloc_r+0x80>
 8007800:	0028      	movs	r0, r5
 8007802:	f000 f871 	bl	80078e8 <__malloc_lock>
 8007806:	4e37      	ldr	r6, [pc, #220]	@ (80078e4 <_malloc_r+0xfc>)
 8007808:	6833      	ldr	r3, [r6, #0]
 800780a:	001c      	movs	r4, r3
 800780c:	2c00      	cmp	r4, #0
 800780e:	d12f      	bne.n	8007870 <_malloc_r+0x88>
 8007810:	0039      	movs	r1, r7
 8007812:	0028      	movs	r0, r5
 8007814:	f7ff ffc6 	bl	80077a4 <sbrk_aligned>
 8007818:	0004      	movs	r4, r0
 800781a:	1c43      	adds	r3, r0, #1
 800781c:	d15f      	bne.n	80078de <_malloc_r+0xf6>
 800781e:	6834      	ldr	r4, [r6, #0]
 8007820:	9400      	str	r4, [sp, #0]
 8007822:	9b00      	ldr	r3, [sp, #0]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d14a      	bne.n	80078be <_malloc_r+0xd6>
 8007828:	2c00      	cmp	r4, #0
 800782a:	d052      	beq.n	80078d2 <_malloc_r+0xea>
 800782c:	6823      	ldr	r3, [r4, #0]
 800782e:	0028      	movs	r0, r5
 8007830:	18e3      	adds	r3, r4, r3
 8007832:	9900      	ldr	r1, [sp, #0]
 8007834:	9301      	str	r3, [sp, #4]
 8007836:	f000 fc19 	bl	800806c <_sbrk_r>
 800783a:	9b01      	ldr	r3, [sp, #4]
 800783c:	4283      	cmp	r3, r0
 800783e:	d148      	bne.n	80078d2 <_malloc_r+0xea>
 8007840:	6823      	ldr	r3, [r4, #0]
 8007842:	0028      	movs	r0, r5
 8007844:	1aff      	subs	r7, r7, r3
 8007846:	0039      	movs	r1, r7
 8007848:	f7ff ffac 	bl	80077a4 <sbrk_aligned>
 800784c:	3001      	adds	r0, #1
 800784e:	d040      	beq.n	80078d2 <_malloc_r+0xea>
 8007850:	6823      	ldr	r3, [r4, #0]
 8007852:	19db      	adds	r3, r3, r7
 8007854:	6023      	str	r3, [r4, #0]
 8007856:	6833      	ldr	r3, [r6, #0]
 8007858:	685a      	ldr	r2, [r3, #4]
 800785a:	2a00      	cmp	r2, #0
 800785c:	d133      	bne.n	80078c6 <_malloc_r+0xde>
 800785e:	9b00      	ldr	r3, [sp, #0]
 8007860:	6033      	str	r3, [r6, #0]
 8007862:	e019      	b.n	8007898 <_malloc_r+0xb0>
 8007864:	2b00      	cmp	r3, #0
 8007866:	dac9      	bge.n	80077fc <_malloc_r+0x14>
 8007868:	230c      	movs	r3, #12
 800786a:	602b      	str	r3, [r5, #0]
 800786c:	2000      	movs	r0, #0
 800786e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007870:	6821      	ldr	r1, [r4, #0]
 8007872:	1bc9      	subs	r1, r1, r7
 8007874:	d420      	bmi.n	80078b8 <_malloc_r+0xd0>
 8007876:	290b      	cmp	r1, #11
 8007878:	d90a      	bls.n	8007890 <_malloc_r+0xa8>
 800787a:	19e2      	adds	r2, r4, r7
 800787c:	6027      	str	r7, [r4, #0]
 800787e:	42a3      	cmp	r3, r4
 8007880:	d104      	bne.n	800788c <_malloc_r+0xa4>
 8007882:	6032      	str	r2, [r6, #0]
 8007884:	6863      	ldr	r3, [r4, #4]
 8007886:	6011      	str	r1, [r2, #0]
 8007888:	6053      	str	r3, [r2, #4]
 800788a:	e005      	b.n	8007898 <_malloc_r+0xb0>
 800788c:	605a      	str	r2, [r3, #4]
 800788e:	e7f9      	b.n	8007884 <_malloc_r+0x9c>
 8007890:	6862      	ldr	r2, [r4, #4]
 8007892:	42a3      	cmp	r3, r4
 8007894:	d10e      	bne.n	80078b4 <_malloc_r+0xcc>
 8007896:	6032      	str	r2, [r6, #0]
 8007898:	0028      	movs	r0, r5
 800789a:	f000 f82d 	bl	80078f8 <__malloc_unlock>
 800789e:	0020      	movs	r0, r4
 80078a0:	2207      	movs	r2, #7
 80078a2:	300b      	adds	r0, #11
 80078a4:	1d23      	adds	r3, r4, #4
 80078a6:	4390      	bics	r0, r2
 80078a8:	1ac2      	subs	r2, r0, r3
 80078aa:	4298      	cmp	r0, r3
 80078ac:	d0df      	beq.n	800786e <_malloc_r+0x86>
 80078ae:	1a1b      	subs	r3, r3, r0
 80078b0:	50a3      	str	r3, [r4, r2]
 80078b2:	e7dc      	b.n	800786e <_malloc_r+0x86>
 80078b4:	605a      	str	r2, [r3, #4]
 80078b6:	e7ef      	b.n	8007898 <_malloc_r+0xb0>
 80078b8:	0023      	movs	r3, r4
 80078ba:	6864      	ldr	r4, [r4, #4]
 80078bc:	e7a6      	b.n	800780c <_malloc_r+0x24>
 80078be:	9c00      	ldr	r4, [sp, #0]
 80078c0:	6863      	ldr	r3, [r4, #4]
 80078c2:	9300      	str	r3, [sp, #0]
 80078c4:	e7ad      	b.n	8007822 <_malloc_r+0x3a>
 80078c6:	001a      	movs	r2, r3
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	42a3      	cmp	r3, r4
 80078cc:	d1fb      	bne.n	80078c6 <_malloc_r+0xde>
 80078ce:	2300      	movs	r3, #0
 80078d0:	e7da      	b.n	8007888 <_malloc_r+0xa0>
 80078d2:	230c      	movs	r3, #12
 80078d4:	0028      	movs	r0, r5
 80078d6:	602b      	str	r3, [r5, #0]
 80078d8:	f000 f80e 	bl	80078f8 <__malloc_unlock>
 80078dc:	e7c6      	b.n	800786c <_malloc_r+0x84>
 80078de:	6007      	str	r7, [r0, #0]
 80078e0:	e7da      	b.n	8007898 <_malloc_r+0xb0>
 80078e2:	46c0      	nop			@ (mov r8, r8)
 80078e4:	20000448 	.word	0x20000448

080078e8 <__malloc_lock>:
 80078e8:	b510      	push	{r4, lr}
 80078ea:	4802      	ldr	r0, [pc, #8]	@ (80078f4 <__malloc_lock+0xc>)
 80078ec:	f7ff fee5 	bl	80076ba <__retarget_lock_acquire_recursive>
 80078f0:	bd10      	pop	{r4, pc}
 80078f2:	46c0      	nop			@ (mov r8, r8)
 80078f4:	20000440 	.word	0x20000440

080078f8 <__malloc_unlock>:
 80078f8:	b510      	push	{r4, lr}
 80078fa:	4802      	ldr	r0, [pc, #8]	@ (8007904 <__malloc_unlock+0xc>)
 80078fc:	f7ff fede 	bl	80076bc <__retarget_lock_release_recursive>
 8007900:	bd10      	pop	{r4, pc}
 8007902:	46c0      	nop			@ (mov r8, r8)
 8007904:	20000440 	.word	0x20000440

08007908 <__ssputs_r>:
 8007908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800790a:	688e      	ldr	r6, [r1, #8]
 800790c:	b085      	sub	sp, #20
 800790e:	001f      	movs	r7, r3
 8007910:	000c      	movs	r4, r1
 8007912:	680b      	ldr	r3, [r1, #0]
 8007914:	9002      	str	r0, [sp, #8]
 8007916:	9203      	str	r2, [sp, #12]
 8007918:	42be      	cmp	r6, r7
 800791a:	d830      	bhi.n	800797e <__ssputs_r+0x76>
 800791c:	210c      	movs	r1, #12
 800791e:	5e62      	ldrsh	r2, [r4, r1]
 8007920:	2190      	movs	r1, #144	@ 0x90
 8007922:	00c9      	lsls	r1, r1, #3
 8007924:	420a      	tst	r2, r1
 8007926:	d028      	beq.n	800797a <__ssputs_r+0x72>
 8007928:	2003      	movs	r0, #3
 800792a:	6921      	ldr	r1, [r4, #16]
 800792c:	1a5b      	subs	r3, r3, r1
 800792e:	9301      	str	r3, [sp, #4]
 8007930:	6963      	ldr	r3, [r4, #20]
 8007932:	4343      	muls	r3, r0
 8007934:	9801      	ldr	r0, [sp, #4]
 8007936:	0fdd      	lsrs	r5, r3, #31
 8007938:	18ed      	adds	r5, r5, r3
 800793a:	1c7b      	adds	r3, r7, #1
 800793c:	181b      	adds	r3, r3, r0
 800793e:	106d      	asrs	r5, r5, #1
 8007940:	42ab      	cmp	r3, r5
 8007942:	d900      	bls.n	8007946 <__ssputs_r+0x3e>
 8007944:	001d      	movs	r5, r3
 8007946:	0552      	lsls	r2, r2, #21
 8007948:	d528      	bpl.n	800799c <__ssputs_r+0x94>
 800794a:	0029      	movs	r1, r5
 800794c:	9802      	ldr	r0, [sp, #8]
 800794e:	f7ff ff4b 	bl	80077e8 <_malloc_r>
 8007952:	1e06      	subs	r6, r0, #0
 8007954:	d02c      	beq.n	80079b0 <__ssputs_r+0xa8>
 8007956:	9a01      	ldr	r2, [sp, #4]
 8007958:	6921      	ldr	r1, [r4, #16]
 800795a:	f000 fba4 	bl	80080a6 <memcpy>
 800795e:	89a2      	ldrh	r2, [r4, #12]
 8007960:	4b18      	ldr	r3, [pc, #96]	@ (80079c4 <__ssputs_r+0xbc>)
 8007962:	401a      	ands	r2, r3
 8007964:	2380      	movs	r3, #128	@ 0x80
 8007966:	4313      	orrs	r3, r2
 8007968:	81a3      	strh	r3, [r4, #12]
 800796a:	9b01      	ldr	r3, [sp, #4]
 800796c:	6126      	str	r6, [r4, #16]
 800796e:	18f6      	adds	r6, r6, r3
 8007970:	6026      	str	r6, [r4, #0]
 8007972:	003e      	movs	r6, r7
 8007974:	6165      	str	r5, [r4, #20]
 8007976:	1aed      	subs	r5, r5, r3
 8007978:	60a5      	str	r5, [r4, #8]
 800797a:	42be      	cmp	r6, r7
 800797c:	d900      	bls.n	8007980 <__ssputs_r+0x78>
 800797e:	003e      	movs	r6, r7
 8007980:	0032      	movs	r2, r6
 8007982:	9903      	ldr	r1, [sp, #12]
 8007984:	6820      	ldr	r0, [r4, #0]
 8007986:	f000 fb5d 	bl	8008044 <memmove>
 800798a:	2000      	movs	r0, #0
 800798c:	68a3      	ldr	r3, [r4, #8]
 800798e:	1b9b      	subs	r3, r3, r6
 8007990:	60a3      	str	r3, [r4, #8]
 8007992:	6823      	ldr	r3, [r4, #0]
 8007994:	199b      	adds	r3, r3, r6
 8007996:	6023      	str	r3, [r4, #0]
 8007998:	b005      	add	sp, #20
 800799a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800799c:	002a      	movs	r2, r5
 800799e:	9802      	ldr	r0, [sp, #8]
 80079a0:	f000 fb91 	bl	80080c6 <_realloc_r>
 80079a4:	1e06      	subs	r6, r0, #0
 80079a6:	d1e0      	bne.n	800796a <__ssputs_r+0x62>
 80079a8:	6921      	ldr	r1, [r4, #16]
 80079aa:	9802      	ldr	r0, [sp, #8]
 80079ac:	f7ff fea6 	bl	80076fc <_free_r>
 80079b0:	230c      	movs	r3, #12
 80079b2:	2001      	movs	r0, #1
 80079b4:	9a02      	ldr	r2, [sp, #8]
 80079b6:	4240      	negs	r0, r0
 80079b8:	6013      	str	r3, [r2, #0]
 80079ba:	89a2      	ldrh	r2, [r4, #12]
 80079bc:	3334      	adds	r3, #52	@ 0x34
 80079be:	4313      	orrs	r3, r2
 80079c0:	81a3      	strh	r3, [r4, #12]
 80079c2:	e7e9      	b.n	8007998 <__ssputs_r+0x90>
 80079c4:	fffffb7f 	.word	0xfffffb7f

080079c8 <_svfiprintf_r>:
 80079c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079ca:	b0a1      	sub	sp, #132	@ 0x84
 80079cc:	9003      	str	r0, [sp, #12]
 80079ce:	001d      	movs	r5, r3
 80079d0:	898b      	ldrh	r3, [r1, #12]
 80079d2:	000f      	movs	r7, r1
 80079d4:	0016      	movs	r6, r2
 80079d6:	061b      	lsls	r3, r3, #24
 80079d8:	d511      	bpl.n	80079fe <_svfiprintf_r+0x36>
 80079da:	690b      	ldr	r3, [r1, #16]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d10e      	bne.n	80079fe <_svfiprintf_r+0x36>
 80079e0:	2140      	movs	r1, #64	@ 0x40
 80079e2:	f7ff ff01 	bl	80077e8 <_malloc_r>
 80079e6:	6038      	str	r0, [r7, #0]
 80079e8:	6138      	str	r0, [r7, #16]
 80079ea:	2800      	cmp	r0, #0
 80079ec:	d105      	bne.n	80079fa <_svfiprintf_r+0x32>
 80079ee:	230c      	movs	r3, #12
 80079f0:	9a03      	ldr	r2, [sp, #12]
 80079f2:	6013      	str	r3, [r2, #0]
 80079f4:	2001      	movs	r0, #1
 80079f6:	4240      	negs	r0, r0
 80079f8:	e0cf      	b.n	8007b9a <_svfiprintf_r+0x1d2>
 80079fa:	2340      	movs	r3, #64	@ 0x40
 80079fc:	617b      	str	r3, [r7, #20]
 80079fe:	2300      	movs	r3, #0
 8007a00:	ac08      	add	r4, sp, #32
 8007a02:	6163      	str	r3, [r4, #20]
 8007a04:	3320      	adds	r3, #32
 8007a06:	7663      	strb	r3, [r4, #25]
 8007a08:	3310      	adds	r3, #16
 8007a0a:	76a3      	strb	r3, [r4, #26]
 8007a0c:	9507      	str	r5, [sp, #28]
 8007a0e:	0035      	movs	r5, r6
 8007a10:	782b      	ldrb	r3, [r5, #0]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d001      	beq.n	8007a1a <_svfiprintf_r+0x52>
 8007a16:	2b25      	cmp	r3, #37	@ 0x25
 8007a18:	d148      	bne.n	8007aac <_svfiprintf_r+0xe4>
 8007a1a:	1bab      	subs	r3, r5, r6
 8007a1c:	9305      	str	r3, [sp, #20]
 8007a1e:	42b5      	cmp	r5, r6
 8007a20:	d00b      	beq.n	8007a3a <_svfiprintf_r+0x72>
 8007a22:	0032      	movs	r2, r6
 8007a24:	0039      	movs	r1, r7
 8007a26:	9803      	ldr	r0, [sp, #12]
 8007a28:	f7ff ff6e 	bl	8007908 <__ssputs_r>
 8007a2c:	3001      	adds	r0, #1
 8007a2e:	d100      	bne.n	8007a32 <_svfiprintf_r+0x6a>
 8007a30:	e0ae      	b.n	8007b90 <_svfiprintf_r+0x1c8>
 8007a32:	6963      	ldr	r3, [r4, #20]
 8007a34:	9a05      	ldr	r2, [sp, #20]
 8007a36:	189b      	adds	r3, r3, r2
 8007a38:	6163      	str	r3, [r4, #20]
 8007a3a:	782b      	ldrb	r3, [r5, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d100      	bne.n	8007a42 <_svfiprintf_r+0x7a>
 8007a40:	e0a6      	b.n	8007b90 <_svfiprintf_r+0x1c8>
 8007a42:	2201      	movs	r2, #1
 8007a44:	2300      	movs	r3, #0
 8007a46:	4252      	negs	r2, r2
 8007a48:	6062      	str	r2, [r4, #4]
 8007a4a:	a904      	add	r1, sp, #16
 8007a4c:	3254      	adds	r2, #84	@ 0x54
 8007a4e:	1852      	adds	r2, r2, r1
 8007a50:	1c6e      	adds	r6, r5, #1
 8007a52:	6023      	str	r3, [r4, #0]
 8007a54:	60e3      	str	r3, [r4, #12]
 8007a56:	60a3      	str	r3, [r4, #8]
 8007a58:	7013      	strb	r3, [r2, #0]
 8007a5a:	65a3      	str	r3, [r4, #88]	@ 0x58
 8007a5c:	4b54      	ldr	r3, [pc, #336]	@ (8007bb0 <_svfiprintf_r+0x1e8>)
 8007a5e:	2205      	movs	r2, #5
 8007a60:	0018      	movs	r0, r3
 8007a62:	7831      	ldrb	r1, [r6, #0]
 8007a64:	9305      	str	r3, [sp, #20]
 8007a66:	f000 fb13 	bl	8008090 <memchr>
 8007a6a:	1c75      	adds	r5, r6, #1
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	d11f      	bne.n	8007ab0 <_svfiprintf_r+0xe8>
 8007a70:	6822      	ldr	r2, [r4, #0]
 8007a72:	06d3      	lsls	r3, r2, #27
 8007a74:	d504      	bpl.n	8007a80 <_svfiprintf_r+0xb8>
 8007a76:	2353      	movs	r3, #83	@ 0x53
 8007a78:	a904      	add	r1, sp, #16
 8007a7a:	185b      	adds	r3, r3, r1
 8007a7c:	2120      	movs	r1, #32
 8007a7e:	7019      	strb	r1, [r3, #0]
 8007a80:	0713      	lsls	r3, r2, #28
 8007a82:	d504      	bpl.n	8007a8e <_svfiprintf_r+0xc6>
 8007a84:	2353      	movs	r3, #83	@ 0x53
 8007a86:	a904      	add	r1, sp, #16
 8007a88:	185b      	adds	r3, r3, r1
 8007a8a:	212b      	movs	r1, #43	@ 0x2b
 8007a8c:	7019      	strb	r1, [r3, #0]
 8007a8e:	7833      	ldrb	r3, [r6, #0]
 8007a90:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a92:	d016      	beq.n	8007ac2 <_svfiprintf_r+0xfa>
 8007a94:	0035      	movs	r5, r6
 8007a96:	2100      	movs	r1, #0
 8007a98:	200a      	movs	r0, #10
 8007a9a:	68e3      	ldr	r3, [r4, #12]
 8007a9c:	782a      	ldrb	r2, [r5, #0]
 8007a9e:	1c6e      	adds	r6, r5, #1
 8007aa0:	3a30      	subs	r2, #48	@ 0x30
 8007aa2:	2a09      	cmp	r2, #9
 8007aa4:	d950      	bls.n	8007b48 <_svfiprintf_r+0x180>
 8007aa6:	2900      	cmp	r1, #0
 8007aa8:	d111      	bne.n	8007ace <_svfiprintf_r+0x106>
 8007aaa:	e017      	b.n	8007adc <_svfiprintf_r+0x114>
 8007aac:	3501      	adds	r5, #1
 8007aae:	e7af      	b.n	8007a10 <_svfiprintf_r+0x48>
 8007ab0:	9b05      	ldr	r3, [sp, #20]
 8007ab2:	6822      	ldr	r2, [r4, #0]
 8007ab4:	1ac0      	subs	r0, r0, r3
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	4083      	lsls	r3, r0
 8007aba:	4313      	orrs	r3, r2
 8007abc:	002e      	movs	r6, r5
 8007abe:	6023      	str	r3, [r4, #0]
 8007ac0:	e7cc      	b.n	8007a5c <_svfiprintf_r+0x94>
 8007ac2:	9b07      	ldr	r3, [sp, #28]
 8007ac4:	1d19      	adds	r1, r3, #4
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	9107      	str	r1, [sp, #28]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	db01      	blt.n	8007ad2 <_svfiprintf_r+0x10a>
 8007ace:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ad0:	e004      	b.n	8007adc <_svfiprintf_r+0x114>
 8007ad2:	425b      	negs	r3, r3
 8007ad4:	60e3      	str	r3, [r4, #12]
 8007ad6:	2302      	movs	r3, #2
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	6023      	str	r3, [r4, #0]
 8007adc:	782b      	ldrb	r3, [r5, #0]
 8007ade:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ae0:	d10c      	bne.n	8007afc <_svfiprintf_r+0x134>
 8007ae2:	786b      	ldrb	r3, [r5, #1]
 8007ae4:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ae6:	d134      	bne.n	8007b52 <_svfiprintf_r+0x18a>
 8007ae8:	9b07      	ldr	r3, [sp, #28]
 8007aea:	3502      	adds	r5, #2
 8007aec:	1d1a      	adds	r2, r3, #4
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	9207      	str	r2, [sp, #28]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	da01      	bge.n	8007afa <_svfiprintf_r+0x132>
 8007af6:	2301      	movs	r3, #1
 8007af8:	425b      	negs	r3, r3
 8007afa:	9309      	str	r3, [sp, #36]	@ 0x24
 8007afc:	4e2d      	ldr	r6, [pc, #180]	@ (8007bb4 <_svfiprintf_r+0x1ec>)
 8007afe:	2203      	movs	r2, #3
 8007b00:	0030      	movs	r0, r6
 8007b02:	7829      	ldrb	r1, [r5, #0]
 8007b04:	f000 fac4 	bl	8008090 <memchr>
 8007b08:	2800      	cmp	r0, #0
 8007b0a:	d006      	beq.n	8007b1a <_svfiprintf_r+0x152>
 8007b0c:	2340      	movs	r3, #64	@ 0x40
 8007b0e:	1b80      	subs	r0, r0, r6
 8007b10:	4083      	lsls	r3, r0
 8007b12:	6822      	ldr	r2, [r4, #0]
 8007b14:	3501      	adds	r5, #1
 8007b16:	4313      	orrs	r3, r2
 8007b18:	6023      	str	r3, [r4, #0]
 8007b1a:	7829      	ldrb	r1, [r5, #0]
 8007b1c:	2206      	movs	r2, #6
 8007b1e:	4826      	ldr	r0, [pc, #152]	@ (8007bb8 <_svfiprintf_r+0x1f0>)
 8007b20:	1c6e      	adds	r6, r5, #1
 8007b22:	7621      	strb	r1, [r4, #24]
 8007b24:	f000 fab4 	bl	8008090 <memchr>
 8007b28:	2800      	cmp	r0, #0
 8007b2a:	d038      	beq.n	8007b9e <_svfiprintf_r+0x1d6>
 8007b2c:	4b23      	ldr	r3, [pc, #140]	@ (8007bbc <_svfiprintf_r+0x1f4>)
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d122      	bne.n	8007b78 <_svfiprintf_r+0x1b0>
 8007b32:	2207      	movs	r2, #7
 8007b34:	9b07      	ldr	r3, [sp, #28]
 8007b36:	3307      	adds	r3, #7
 8007b38:	4393      	bics	r3, r2
 8007b3a:	3308      	adds	r3, #8
 8007b3c:	9307      	str	r3, [sp, #28]
 8007b3e:	6963      	ldr	r3, [r4, #20]
 8007b40:	9a04      	ldr	r2, [sp, #16]
 8007b42:	189b      	adds	r3, r3, r2
 8007b44:	6163      	str	r3, [r4, #20]
 8007b46:	e762      	b.n	8007a0e <_svfiprintf_r+0x46>
 8007b48:	4343      	muls	r3, r0
 8007b4a:	0035      	movs	r5, r6
 8007b4c:	2101      	movs	r1, #1
 8007b4e:	189b      	adds	r3, r3, r2
 8007b50:	e7a4      	b.n	8007a9c <_svfiprintf_r+0xd4>
 8007b52:	2300      	movs	r3, #0
 8007b54:	200a      	movs	r0, #10
 8007b56:	0019      	movs	r1, r3
 8007b58:	3501      	adds	r5, #1
 8007b5a:	6063      	str	r3, [r4, #4]
 8007b5c:	782a      	ldrb	r2, [r5, #0]
 8007b5e:	1c6e      	adds	r6, r5, #1
 8007b60:	3a30      	subs	r2, #48	@ 0x30
 8007b62:	2a09      	cmp	r2, #9
 8007b64:	d903      	bls.n	8007b6e <_svfiprintf_r+0x1a6>
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d0c8      	beq.n	8007afc <_svfiprintf_r+0x134>
 8007b6a:	9109      	str	r1, [sp, #36]	@ 0x24
 8007b6c:	e7c6      	b.n	8007afc <_svfiprintf_r+0x134>
 8007b6e:	4341      	muls	r1, r0
 8007b70:	0035      	movs	r5, r6
 8007b72:	2301      	movs	r3, #1
 8007b74:	1889      	adds	r1, r1, r2
 8007b76:	e7f1      	b.n	8007b5c <_svfiprintf_r+0x194>
 8007b78:	aa07      	add	r2, sp, #28
 8007b7a:	9200      	str	r2, [sp, #0]
 8007b7c:	0021      	movs	r1, r4
 8007b7e:	003a      	movs	r2, r7
 8007b80:	4b0f      	ldr	r3, [pc, #60]	@ (8007bc0 <_svfiprintf_r+0x1f8>)
 8007b82:	9803      	ldr	r0, [sp, #12]
 8007b84:	e000      	b.n	8007b88 <_svfiprintf_r+0x1c0>
 8007b86:	bf00      	nop
 8007b88:	9004      	str	r0, [sp, #16]
 8007b8a:	9b04      	ldr	r3, [sp, #16]
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	d1d6      	bne.n	8007b3e <_svfiprintf_r+0x176>
 8007b90:	89bb      	ldrh	r3, [r7, #12]
 8007b92:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8007b94:	065b      	lsls	r3, r3, #25
 8007b96:	d500      	bpl.n	8007b9a <_svfiprintf_r+0x1d2>
 8007b98:	e72c      	b.n	80079f4 <_svfiprintf_r+0x2c>
 8007b9a:	b021      	add	sp, #132	@ 0x84
 8007b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b9e:	aa07      	add	r2, sp, #28
 8007ba0:	9200      	str	r2, [sp, #0]
 8007ba2:	0021      	movs	r1, r4
 8007ba4:	003a      	movs	r2, r7
 8007ba6:	4b06      	ldr	r3, [pc, #24]	@ (8007bc0 <_svfiprintf_r+0x1f8>)
 8007ba8:	9803      	ldr	r0, [sp, #12]
 8007baa:	f000 f87b 	bl	8007ca4 <_printf_i>
 8007bae:	e7eb      	b.n	8007b88 <_svfiprintf_r+0x1c0>
 8007bb0:	080092db 	.word	0x080092db
 8007bb4:	080092e1 	.word	0x080092e1
 8007bb8:	080092e5 	.word	0x080092e5
 8007bbc:	00000000 	.word	0x00000000
 8007bc0:	08007909 	.word	0x08007909

08007bc4 <_printf_common>:
 8007bc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bc6:	0016      	movs	r6, r2
 8007bc8:	9301      	str	r3, [sp, #4]
 8007bca:	688a      	ldr	r2, [r1, #8]
 8007bcc:	690b      	ldr	r3, [r1, #16]
 8007bce:	000c      	movs	r4, r1
 8007bd0:	9000      	str	r0, [sp, #0]
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	da00      	bge.n	8007bd8 <_printf_common+0x14>
 8007bd6:	0013      	movs	r3, r2
 8007bd8:	0022      	movs	r2, r4
 8007bda:	6033      	str	r3, [r6, #0]
 8007bdc:	3243      	adds	r2, #67	@ 0x43
 8007bde:	7812      	ldrb	r2, [r2, #0]
 8007be0:	2a00      	cmp	r2, #0
 8007be2:	d001      	beq.n	8007be8 <_printf_common+0x24>
 8007be4:	3301      	adds	r3, #1
 8007be6:	6033      	str	r3, [r6, #0]
 8007be8:	6823      	ldr	r3, [r4, #0]
 8007bea:	069b      	lsls	r3, r3, #26
 8007bec:	d502      	bpl.n	8007bf4 <_printf_common+0x30>
 8007bee:	6833      	ldr	r3, [r6, #0]
 8007bf0:	3302      	adds	r3, #2
 8007bf2:	6033      	str	r3, [r6, #0]
 8007bf4:	6822      	ldr	r2, [r4, #0]
 8007bf6:	2306      	movs	r3, #6
 8007bf8:	0015      	movs	r5, r2
 8007bfa:	401d      	ands	r5, r3
 8007bfc:	421a      	tst	r2, r3
 8007bfe:	d027      	beq.n	8007c50 <_printf_common+0x8c>
 8007c00:	0023      	movs	r3, r4
 8007c02:	3343      	adds	r3, #67	@ 0x43
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	1e5a      	subs	r2, r3, #1
 8007c08:	4193      	sbcs	r3, r2
 8007c0a:	6822      	ldr	r2, [r4, #0]
 8007c0c:	0692      	lsls	r2, r2, #26
 8007c0e:	d430      	bmi.n	8007c72 <_printf_common+0xae>
 8007c10:	0022      	movs	r2, r4
 8007c12:	9901      	ldr	r1, [sp, #4]
 8007c14:	9800      	ldr	r0, [sp, #0]
 8007c16:	9d08      	ldr	r5, [sp, #32]
 8007c18:	3243      	adds	r2, #67	@ 0x43
 8007c1a:	47a8      	blx	r5
 8007c1c:	3001      	adds	r0, #1
 8007c1e:	d025      	beq.n	8007c6c <_printf_common+0xa8>
 8007c20:	2206      	movs	r2, #6
 8007c22:	6823      	ldr	r3, [r4, #0]
 8007c24:	2500      	movs	r5, #0
 8007c26:	4013      	ands	r3, r2
 8007c28:	2b04      	cmp	r3, #4
 8007c2a:	d105      	bne.n	8007c38 <_printf_common+0x74>
 8007c2c:	6833      	ldr	r3, [r6, #0]
 8007c2e:	68e5      	ldr	r5, [r4, #12]
 8007c30:	1aed      	subs	r5, r5, r3
 8007c32:	43eb      	mvns	r3, r5
 8007c34:	17db      	asrs	r3, r3, #31
 8007c36:	401d      	ands	r5, r3
 8007c38:	68a3      	ldr	r3, [r4, #8]
 8007c3a:	6922      	ldr	r2, [r4, #16]
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	dd01      	ble.n	8007c44 <_printf_common+0x80>
 8007c40:	1a9b      	subs	r3, r3, r2
 8007c42:	18ed      	adds	r5, r5, r3
 8007c44:	2600      	movs	r6, #0
 8007c46:	42b5      	cmp	r5, r6
 8007c48:	d120      	bne.n	8007c8c <_printf_common+0xc8>
 8007c4a:	2000      	movs	r0, #0
 8007c4c:	e010      	b.n	8007c70 <_printf_common+0xac>
 8007c4e:	3501      	adds	r5, #1
 8007c50:	68e3      	ldr	r3, [r4, #12]
 8007c52:	6832      	ldr	r2, [r6, #0]
 8007c54:	1a9b      	subs	r3, r3, r2
 8007c56:	42ab      	cmp	r3, r5
 8007c58:	ddd2      	ble.n	8007c00 <_printf_common+0x3c>
 8007c5a:	0022      	movs	r2, r4
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	9901      	ldr	r1, [sp, #4]
 8007c60:	9800      	ldr	r0, [sp, #0]
 8007c62:	9f08      	ldr	r7, [sp, #32]
 8007c64:	3219      	adds	r2, #25
 8007c66:	47b8      	blx	r7
 8007c68:	3001      	adds	r0, #1
 8007c6a:	d1f0      	bne.n	8007c4e <_printf_common+0x8a>
 8007c6c:	2001      	movs	r0, #1
 8007c6e:	4240      	negs	r0, r0
 8007c70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007c72:	2030      	movs	r0, #48	@ 0x30
 8007c74:	18e1      	adds	r1, r4, r3
 8007c76:	3143      	adds	r1, #67	@ 0x43
 8007c78:	7008      	strb	r0, [r1, #0]
 8007c7a:	0021      	movs	r1, r4
 8007c7c:	1c5a      	adds	r2, r3, #1
 8007c7e:	3145      	adds	r1, #69	@ 0x45
 8007c80:	7809      	ldrb	r1, [r1, #0]
 8007c82:	18a2      	adds	r2, r4, r2
 8007c84:	3243      	adds	r2, #67	@ 0x43
 8007c86:	3302      	adds	r3, #2
 8007c88:	7011      	strb	r1, [r2, #0]
 8007c8a:	e7c1      	b.n	8007c10 <_printf_common+0x4c>
 8007c8c:	0022      	movs	r2, r4
 8007c8e:	2301      	movs	r3, #1
 8007c90:	9901      	ldr	r1, [sp, #4]
 8007c92:	9800      	ldr	r0, [sp, #0]
 8007c94:	9f08      	ldr	r7, [sp, #32]
 8007c96:	321a      	adds	r2, #26
 8007c98:	47b8      	blx	r7
 8007c9a:	3001      	adds	r0, #1
 8007c9c:	d0e6      	beq.n	8007c6c <_printf_common+0xa8>
 8007c9e:	3601      	adds	r6, #1
 8007ca0:	e7d1      	b.n	8007c46 <_printf_common+0x82>
	...

08007ca4 <_printf_i>:
 8007ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ca6:	b08b      	sub	sp, #44	@ 0x2c
 8007ca8:	9206      	str	r2, [sp, #24]
 8007caa:	000a      	movs	r2, r1
 8007cac:	3243      	adds	r2, #67	@ 0x43
 8007cae:	9307      	str	r3, [sp, #28]
 8007cb0:	9005      	str	r0, [sp, #20]
 8007cb2:	9203      	str	r2, [sp, #12]
 8007cb4:	7e0a      	ldrb	r2, [r1, #24]
 8007cb6:	000c      	movs	r4, r1
 8007cb8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007cba:	2a78      	cmp	r2, #120	@ 0x78
 8007cbc:	d809      	bhi.n	8007cd2 <_printf_i+0x2e>
 8007cbe:	2a62      	cmp	r2, #98	@ 0x62
 8007cc0:	d80b      	bhi.n	8007cda <_printf_i+0x36>
 8007cc2:	2a00      	cmp	r2, #0
 8007cc4:	d100      	bne.n	8007cc8 <_printf_i+0x24>
 8007cc6:	e0bc      	b.n	8007e42 <_printf_i+0x19e>
 8007cc8:	497b      	ldr	r1, [pc, #492]	@ (8007eb8 <_printf_i+0x214>)
 8007cca:	9104      	str	r1, [sp, #16]
 8007ccc:	2a58      	cmp	r2, #88	@ 0x58
 8007cce:	d100      	bne.n	8007cd2 <_printf_i+0x2e>
 8007cd0:	e090      	b.n	8007df4 <_printf_i+0x150>
 8007cd2:	0025      	movs	r5, r4
 8007cd4:	3542      	adds	r5, #66	@ 0x42
 8007cd6:	702a      	strb	r2, [r5, #0]
 8007cd8:	e022      	b.n	8007d20 <_printf_i+0x7c>
 8007cda:	0010      	movs	r0, r2
 8007cdc:	3863      	subs	r0, #99	@ 0x63
 8007cde:	2815      	cmp	r0, #21
 8007ce0:	d8f7      	bhi.n	8007cd2 <_printf_i+0x2e>
 8007ce2:	f7f8 fa11 	bl	8000108 <__gnu_thumb1_case_shi>
 8007ce6:	0016      	.short	0x0016
 8007ce8:	fff6001f 	.word	0xfff6001f
 8007cec:	fff6fff6 	.word	0xfff6fff6
 8007cf0:	001ffff6 	.word	0x001ffff6
 8007cf4:	fff6fff6 	.word	0xfff6fff6
 8007cf8:	fff6fff6 	.word	0xfff6fff6
 8007cfc:	003600a1 	.word	0x003600a1
 8007d00:	fff60080 	.word	0xfff60080
 8007d04:	00b2fff6 	.word	0x00b2fff6
 8007d08:	0036fff6 	.word	0x0036fff6
 8007d0c:	fff6fff6 	.word	0xfff6fff6
 8007d10:	0084      	.short	0x0084
 8007d12:	0025      	movs	r5, r4
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	3542      	adds	r5, #66	@ 0x42
 8007d18:	1d11      	adds	r1, r2, #4
 8007d1a:	6019      	str	r1, [r3, #0]
 8007d1c:	6813      	ldr	r3, [r2, #0]
 8007d1e:	702b      	strb	r3, [r5, #0]
 8007d20:	2301      	movs	r3, #1
 8007d22:	e0a0      	b.n	8007e66 <_printf_i+0x1c2>
 8007d24:	6818      	ldr	r0, [r3, #0]
 8007d26:	6809      	ldr	r1, [r1, #0]
 8007d28:	1d02      	adds	r2, r0, #4
 8007d2a:	060d      	lsls	r5, r1, #24
 8007d2c:	d50b      	bpl.n	8007d46 <_printf_i+0xa2>
 8007d2e:	6806      	ldr	r6, [r0, #0]
 8007d30:	601a      	str	r2, [r3, #0]
 8007d32:	2e00      	cmp	r6, #0
 8007d34:	da03      	bge.n	8007d3e <_printf_i+0x9a>
 8007d36:	232d      	movs	r3, #45	@ 0x2d
 8007d38:	9a03      	ldr	r2, [sp, #12]
 8007d3a:	4276      	negs	r6, r6
 8007d3c:	7013      	strb	r3, [r2, #0]
 8007d3e:	4b5e      	ldr	r3, [pc, #376]	@ (8007eb8 <_printf_i+0x214>)
 8007d40:	270a      	movs	r7, #10
 8007d42:	9304      	str	r3, [sp, #16]
 8007d44:	e018      	b.n	8007d78 <_printf_i+0xd4>
 8007d46:	6806      	ldr	r6, [r0, #0]
 8007d48:	601a      	str	r2, [r3, #0]
 8007d4a:	0649      	lsls	r1, r1, #25
 8007d4c:	d5f1      	bpl.n	8007d32 <_printf_i+0x8e>
 8007d4e:	b236      	sxth	r6, r6
 8007d50:	e7ef      	b.n	8007d32 <_printf_i+0x8e>
 8007d52:	6808      	ldr	r0, [r1, #0]
 8007d54:	6819      	ldr	r1, [r3, #0]
 8007d56:	c940      	ldmia	r1!, {r6}
 8007d58:	0605      	lsls	r5, r0, #24
 8007d5a:	d402      	bmi.n	8007d62 <_printf_i+0xbe>
 8007d5c:	0640      	lsls	r0, r0, #25
 8007d5e:	d500      	bpl.n	8007d62 <_printf_i+0xbe>
 8007d60:	b2b6      	uxth	r6, r6
 8007d62:	6019      	str	r1, [r3, #0]
 8007d64:	4b54      	ldr	r3, [pc, #336]	@ (8007eb8 <_printf_i+0x214>)
 8007d66:	270a      	movs	r7, #10
 8007d68:	9304      	str	r3, [sp, #16]
 8007d6a:	2a6f      	cmp	r2, #111	@ 0x6f
 8007d6c:	d100      	bne.n	8007d70 <_printf_i+0xcc>
 8007d6e:	3f02      	subs	r7, #2
 8007d70:	0023      	movs	r3, r4
 8007d72:	2200      	movs	r2, #0
 8007d74:	3343      	adds	r3, #67	@ 0x43
 8007d76:	701a      	strb	r2, [r3, #0]
 8007d78:	6863      	ldr	r3, [r4, #4]
 8007d7a:	60a3      	str	r3, [r4, #8]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	db03      	blt.n	8007d88 <_printf_i+0xe4>
 8007d80:	2104      	movs	r1, #4
 8007d82:	6822      	ldr	r2, [r4, #0]
 8007d84:	438a      	bics	r2, r1
 8007d86:	6022      	str	r2, [r4, #0]
 8007d88:	2e00      	cmp	r6, #0
 8007d8a:	d102      	bne.n	8007d92 <_printf_i+0xee>
 8007d8c:	9d03      	ldr	r5, [sp, #12]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d00c      	beq.n	8007dac <_printf_i+0x108>
 8007d92:	9d03      	ldr	r5, [sp, #12]
 8007d94:	0030      	movs	r0, r6
 8007d96:	0039      	movs	r1, r7
 8007d98:	f7f8 fa46 	bl	8000228 <__aeabi_uidivmod>
 8007d9c:	9b04      	ldr	r3, [sp, #16]
 8007d9e:	3d01      	subs	r5, #1
 8007da0:	5c5b      	ldrb	r3, [r3, r1]
 8007da2:	702b      	strb	r3, [r5, #0]
 8007da4:	0033      	movs	r3, r6
 8007da6:	0006      	movs	r6, r0
 8007da8:	429f      	cmp	r7, r3
 8007daa:	d9f3      	bls.n	8007d94 <_printf_i+0xf0>
 8007dac:	2f08      	cmp	r7, #8
 8007dae:	d109      	bne.n	8007dc4 <_printf_i+0x120>
 8007db0:	6823      	ldr	r3, [r4, #0]
 8007db2:	07db      	lsls	r3, r3, #31
 8007db4:	d506      	bpl.n	8007dc4 <_printf_i+0x120>
 8007db6:	6862      	ldr	r2, [r4, #4]
 8007db8:	6923      	ldr	r3, [r4, #16]
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	dc02      	bgt.n	8007dc4 <_printf_i+0x120>
 8007dbe:	2330      	movs	r3, #48	@ 0x30
 8007dc0:	3d01      	subs	r5, #1
 8007dc2:	702b      	strb	r3, [r5, #0]
 8007dc4:	9b03      	ldr	r3, [sp, #12]
 8007dc6:	1b5b      	subs	r3, r3, r5
 8007dc8:	6123      	str	r3, [r4, #16]
 8007dca:	9b07      	ldr	r3, [sp, #28]
 8007dcc:	0021      	movs	r1, r4
 8007dce:	9300      	str	r3, [sp, #0]
 8007dd0:	9805      	ldr	r0, [sp, #20]
 8007dd2:	9b06      	ldr	r3, [sp, #24]
 8007dd4:	aa09      	add	r2, sp, #36	@ 0x24
 8007dd6:	f7ff fef5 	bl	8007bc4 <_printf_common>
 8007dda:	3001      	adds	r0, #1
 8007ddc:	d148      	bne.n	8007e70 <_printf_i+0x1cc>
 8007dde:	2001      	movs	r0, #1
 8007de0:	4240      	negs	r0, r0
 8007de2:	b00b      	add	sp, #44	@ 0x2c
 8007de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007de6:	2220      	movs	r2, #32
 8007de8:	6809      	ldr	r1, [r1, #0]
 8007dea:	430a      	orrs	r2, r1
 8007dec:	6022      	str	r2, [r4, #0]
 8007dee:	2278      	movs	r2, #120	@ 0x78
 8007df0:	4932      	ldr	r1, [pc, #200]	@ (8007ebc <_printf_i+0x218>)
 8007df2:	9104      	str	r1, [sp, #16]
 8007df4:	0021      	movs	r1, r4
 8007df6:	3145      	adds	r1, #69	@ 0x45
 8007df8:	700a      	strb	r2, [r1, #0]
 8007dfa:	6819      	ldr	r1, [r3, #0]
 8007dfc:	6822      	ldr	r2, [r4, #0]
 8007dfe:	c940      	ldmia	r1!, {r6}
 8007e00:	0610      	lsls	r0, r2, #24
 8007e02:	d402      	bmi.n	8007e0a <_printf_i+0x166>
 8007e04:	0650      	lsls	r0, r2, #25
 8007e06:	d500      	bpl.n	8007e0a <_printf_i+0x166>
 8007e08:	b2b6      	uxth	r6, r6
 8007e0a:	6019      	str	r1, [r3, #0]
 8007e0c:	07d3      	lsls	r3, r2, #31
 8007e0e:	d502      	bpl.n	8007e16 <_printf_i+0x172>
 8007e10:	2320      	movs	r3, #32
 8007e12:	4313      	orrs	r3, r2
 8007e14:	6023      	str	r3, [r4, #0]
 8007e16:	2e00      	cmp	r6, #0
 8007e18:	d001      	beq.n	8007e1e <_printf_i+0x17a>
 8007e1a:	2710      	movs	r7, #16
 8007e1c:	e7a8      	b.n	8007d70 <_printf_i+0xcc>
 8007e1e:	2220      	movs	r2, #32
 8007e20:	6823      	ldr	r3, [r4, #0]
 8007e22:	4393      	bics	r3, r2
 8007e24:	6023      	str	r3, [r4, #0]
 8007e26:	e7f8      	b.n	8007e1a <_printf_i+0x176>
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	680d      	ldr	r5, [r1, #0]
 8007e2c:	1d10      	adds	r0, r2, #4
 8007e2e:	6949      	ldr	r1, [r1, #20]
 8007e30:	6018      	str	r0, [r3, #0]
 8007e32:	6813      	ldr	r3, [r2, #0]
 8007e34:	062e      	lsls	r6, r5, #24
 8007e36:	d501      	bpl.n	8007e3c <_printf_i+0x198>
 8007e38:	6019      	str	r1, [r3, #0]
 8007e3a:	e002      	b.n	8007e42 <_printf_i+0x19e>
 8007e3c:	066d      	lsls	r5, r5, #25
 8007e3e:	d5fb      	bpl.n	8007e38 <_printf_i+0x194>
 8007e40:	8019      	strh	r1, [r3, #0]
 8007e42:	2300      	movs	r3, #0
 8007e44:	9d03      	ldr	r5, [sp, #12]
 8007e46:	6123      	str	r3, [r4, #16]
 8007e48:	e7bf      	b.n	8007dca <_printf_i+0x126>
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	1d11      	adds	r1, r2, #4
 8007e4e:	6019      	str	r1, [r3, #0]
 8007e50:	6815      	ldr	r5, [r2, #0]
 8007e52:	2100      	movs	r1, #0
 8007e54:	0028      	movs	r0, r5
 8007e56:	6862      	ldr	r2, [r4, #4]
 8007e58:	f000 f91a 	bl	8008090 <memchr>
 8007e5c:	2800      	cmp	r0, #0
 8007e5e:	d001      	beq.n	8007e64 <_printf_i+0x1c0>
 8007e60:	1b40      	subs	r0, r0, r5
 8007e62:	6060      	str	r0, [r4, #4]
 8007e64:	6863      	ldr	r3, [r4, #4]
 8007e66:	6123      	str	r3, [r4, #16]
 8007e68:	2300      	movs	r3, #0
 8007e6a:	9a03      	ldr	r2, [sp, #12]
 8007e6c:	7013      	strb	r3, [r2, #0]
 8007e6e:	e7ac      	b.n	8007dca <_printf_i+0x126>
 8007e70:	002a      	movs	r2, r5
 8007e72:	6923      	ldr	r3, [r4, #16]
 8007e74:	9906      	ldr	r1, [sp, #24]
 8007e76:	9805      	ldr	r0, [sp, #20]
 8007e78:	9d07      	ldr	r5, [sp, #28]
 8007e7a:	47a8      	blx	r5
 8007e7c:	3001      	adds	r0, #1
 8007e7e:	d0ae      	beq.n	8007dde <_printf_i+0x13a>
 8007e80:	6823      	ldr	r3, [r4, #0]
 8007e82:	079b      	lsls	r3, r3, #30
 8007e84:	d415      	bmi.n	8007eb2 <_printf_i+0x20e>
 8007e86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e88:	68e0      	ldr	r0, [r4, #12]
 8007e8a:	4298      	cmp	r0, r3
 8007e8c:	daa9      	bge.n	8007de2 <_printf_i+0x13e>
 8007e8e:	0018      	movs	r0, r3
 8007e90:	e7a7      	b.n	8007de2 <_printf_i+0x13e>
 8007e92:	0022      	movs	r2, r4
 8007e94:	2301      	movs	r3, #1
 8007e96:	9906      	ldr	r1, [sp, #24]
 8007e98:	9805      	ldr	r0, [sp, #20]
 8007e9a:	9e07      	ldr	r6, [sp, #28]
 8007e9c:	3219      	adds	r2, #25
 8007e9e:	47b0      	blx	r6
 8007ea0:	3001      	adds	r0, #1
 8007ea2:	d09c      	beq.n	8007dde <_printf_i+0x13a>
 8007ea4:	3501      	adds	r5, #1
 8007ea6:	68e3      	ldr	r3, [r4, #12]
 8007ea8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007eaa:	1a9b      	subs	r3, r3, r2
 8007eac:	42ab      	cmp	r3, r5
 8007eae:	dcf0      	bgt.n	8007e92 <_printf_i+0x1ee>
 8007eb0:	e7e9      	b.n	8007e86 <_printf_i+0x1e2>
 8007eb2:	2500      	movs	r5, #0
 8007eb4:	e7f7      	b.n	8007ea6 <_printf_i+0x202>
 8007eb6:	46c0      	nop			@ (mov r8, r8)
 8007eb8:	080092ec 	.word	0x080092ec
 8007ebc:	080092fd 	.word	0x080092fd

08007ec0 <__sflush_r>:
 8007ec0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ec2:	220c      	movs	r2, #12
 8007ec4:	5e8b      	ldrsh	r3, [r1, r2]
 8007ec6:	0005      	movs	r5, r0
 8007ec8:	000c      	movs	r4, r1
 8007eca:	071a      	lsls	r2, r3, #28
 8007ecc:	d456      	bmi.n	8007f7c <__sflush_r+0xbc>
 8007ece:	684a      	ldr	r2, [r1, #4]
 8007ed0:	2a00      	cmp	r2, #0
 8007ed2:	dc02      	bgt.n	8007eda <__sflush_r+0x1a>
 8007ed4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8007ed6:	2a00      	cmp	r2, #0
 8007ed8:	dd4e      	ble.n	8007f78 <__sflush_r+0xb8>
 8007eda:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8007edc:	2f00      	cmp	r7, #0
 8007ede:	d04b      	beq.n	8007f78 <__sflush_r+0xb8>
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	2080      	movs	r0, #128	@ 0x80
 8007ee4:	682e      	ldr	r6, [r5, #0]
 8007ee6:	602a      	str	r2, [r5, #0]
 8007ee8:	001a      	movs	r2, r3
 8007eea:	0140      	lsls	r0, r0, #5
 8007eec:	6a21      	ldr	r1, [r4, #32]
 8007eee:	4002      	ands	r2, r0
 8007ef0:	4203      	tst	r3, r0
 8007ef2:	d033      	beq.n	8007f5c <__sflush_r+0x9c>
 8007ef4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007ef6:	89a3      	ldrh	r3, [r4, #12]
 8007ef8:	075b      	lsls	r3, r3, #29
 8007efa:	d506      	bpl.n	8007f0a <__sflush_r+0x4a>
 8007efc:	6863      	ldr	r3, [r4, #4]
 8007efe:	1ad2      	subs	r2, r2, r3
 8007f00:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d001      	beq.n	8007f0a <__sflush_r+0x4a>
 8007f06:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007f08:	1ad2      	subs	r2, r2, r3
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	0028      	movs	r0, r5
 8007f0e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8007f10:	6a21      	ldr	r1, [r4, #32]
 8007f12:	47b8      	blx	r7
 8007f14:	89a2      	ldrh	r2, [r4, #12]
 8007f16:	1c43      	adds	r3, r0, #1
 8007f18:	d106      	bne.n	8007f28 <__sflush_r+0x68>
 8007f1a:	6829      	ldr	r1, [r5, #0]
 8007f1c:	291d      	cmp	r1, #29
 8007f1e:	d846      	bhi.n	8007fae <__sflush_r+0xee>
 8007f20:	4b29      	ldr	r3, [pc, #164]	@ (8007fc8 <__sflush_r+0x108>)
 8007f22:	410b      	asrs	r3, r1
 8007f24:	07db      	lsls	r3, r3, #31
 8007f26:	d442      	bmi.n	8007fae <__sflush_r+0xee>
 8007f28:	2300      	movs	r3, #0
 8007f2a:	6063      	str	r3, [r4, #4]
 8007f2c:	6923      	ldr	r3, [r4, #16]
 8007f2e:	6023      	str	r3, [r4, #0]
 8007f30:	04d2      	lsls	r2, r2, #19
 8007f32:	d505      	bpl.n	8007f40 <__sflush_r+0x80>
 8007f34:	1c43      	adds	r3, r0, #1
 8007f36:	d102      	bne.n	8007f3e <__sflush_r+0x7e>
 8007f38:	682b      	ldr	r3, [r5, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d100      	bne.n	8007f40 <__sflush_r+0x80>
 8007f3e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007f40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f42:	602e      	str	r6, [r5, #0]
 8007f44:	2900      	cmp	r1, #0
 8007f46:	d017      	beq.n	8007f78 <__sflush_r+0xb8>
 8007f48:	0023      	movs	r3, r4
 8007f4a:	3344      	adds	r3, #68	@ 0x44
 8007f4c:	4299      	cmp	r1, r3
 8007f4e:	d002      	beq.n	8007f56 <__sflush_r+0x96>
 8007f50:	0028      	movs	r0, r5
 8007f52:	f7ff fbd3 	bl	80076fc <_free_r>
 8007f56:	2300      	movs	r3, #0
 8007f58:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f5a:	e00d      	b.n	8007f78 <__sflush_r+0xb8>
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	0028      	movs	r0, r5
 8007f60:	47b8      	blx	r7
 8007f62:	0002      	movs	r2, r0
 8007f64:	1c43      	adds	r3, r0, #1
 8007f66:	d1c6      	bne.n	8007ef6 <__sflush_r+0x36>
 8007f68:	682b      	ldr	r3, [r5, #0]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d0c3      	beq.n	8007ef6 <__sflush_r+0x36>
 8007f6e:	2b1d      	cmp	r3, #29
 8007f70:	d001      	beq.n	8007f76 <__sflush_r+0xb6>
 8007f72:	2b16      	cmp	r3, #22
 8007f74:	d11a      	bne.n	8007fac <__sflush_r+0xec>
 8007f76:	602e      	str	r6, [r5, #0]
 8007f78:	2000      	movs	r0, #0
 8007f7a:	e01e      	b.n	8007fba <__sflush_r+0xfa>
 8007f7c:	690e      	ldr	r6, [r1, #16]
 8007f7e:	2e00      	cmp	r6, #0
 8007f80:	d0fa      	beq.n	8007f78 <__sflush_r+0xb8>
 8007f82:	680f      	ldr	r7, [r1, #0]
 8007f84:	600e      	str	r6, [r1, #0]
 8007f86:	1bba      	subs	r2, r7, r6
 8007f88:	9201      	str	r2, [sp, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	079b      	lsls	r3, r3, #30
 8007f8e:	d100      	bne.n	8007f92 <__sflush_r+0xd2>
 8007f90:	694a      	ldr	r2, [r1, #20]
 8007f92:	60a2      	str	r2, [r4, #8]
 8007f94:	9b01      	ldr	r3, [sp, #4]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	ddee      	ble.n	8007f78 <__sflush_r+0xb8>
 8007f9a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007f9c:	0032      	movs	r2, r6
 8007f9e:	001f      	movs	r7, r3
 8007fa0:	0028      	movs	r0, r5
 8007fa2:	9b01      	ldr	r3, [sp, #4]
 8007fa4:	6a21      	ldr	r1, [r4, #32]
 8007fa6:	47b8      	blx	r7
 8007fa8:	2800      	cmp	r0, #0
 8007faa:	dc07      	bgt.n	8007fbc <__sflush_r+0xfc>
 8007fac:	89a2      	ldrh	r2, [r4, #12]
 8007fae:	2340      	movs	r3, #64	@ 0x40
 8007fb0:	2001      	movs	r0, #1
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	b21b      	sxth	r3, r3
 8007fb6:	81a3      	strh	r3, [r4, #12]
 8007fb8:	4240      	negs	r0, r0
 8007fba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007fbc:	9b01      	ldr	r3, [sp, #4]
 8007fbe:	1836      	adds	r6, r6, r0
 8007fc0:	1a1b      	subs	r3, r3, r0
 8007fc2:	9301      	str	r3, [sp, #4]
 8007fc4:	e7e6      	b.n	8007f94 <__sflush_r+0xd4>
 8007fc6:	46c0      	nop			@ (mov r8, r8)
 8007fc8:	dfbffffe 	.word	0xdfbffffe

08007fcc <_fflush_r>:
 8007fcc:	690b      	ldr	r3, [r1, #16]
 8007fce:	b570      	push	{r4, r5, r6, lr}
 8007fd0:	0005      	movs	r5, r0
 8007fd2:	000c      	movs	r4, r1
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d102      	bne.n	8007fde <_fflush_r+0x12>
 8007fd8:	2500      	movs	r5, #0
 8007fda:	0028      	movs	r0, r5
 8007fdc:	bd70      	pop	{r4, r5, r6, pc}
 8007fde:	2800      	cmp	r0, #0
 8007fe0:	d004      	beq.n	8007fec <_fflush_r+0x20>
 8007fe2:	6a03      	ldr	r3, [r0, #32]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d101      	bne.n	8007fec <_fflush_r+0x20>
 8007fe8:	f7ff fa46 	bl	8007478 <__sinit>
 8007fec:	220c      	movs	r2, #12
 8007fee:	5ea3      	ldrsh	r3, [r4, r2]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d0f1      	beq.n	8007fd8 <_fflush_r+0xc>
 8007ff4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007ff6:	07d2      	lsls	r2, r2, #31
 8007ff8:	d404      	bmi.n	8008004 <_fflush_r+0x38>
 8007ffa:	059b      	lsls	r3, r3, #22
 8007ffc:	d402      	bmi.n	8008004 <_fflush_r+0x38>
 8007ffe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008000:	f7ff fb5b 	bl	80076ba <__retarget_lock_acquire_recursive>
 8008004:	0028      	movs	r0, r5
 8008006:	0021      	movs	r1, r4
 8008008:	f7ff ff5a 	bl	8007ec0 <__sflush_r>
 800800c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800800e:	0005      	movs	r5, r0
 8008010:	07db      	lsls	r3, r3, #31
 8008012:	d4e2      	bmi.n	8007fda <_fflush_r+0xe>
 8008014:	89a3      	ldrh	r3, [r4, #12]
 8008016:	059b      	lsls	r3, r3, #22
 8008018:	d4df      	bmi.n	8007fda <_fflush_r+0xe>
 800801a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800801c:	f7ff fb4e 	bl	80076bc <__retarget_lock_release_recursive>
 8008020:	e7db      	b.n	8007fda <_fflush_r+0xe>
	...

08008024 <fiprintf>:
 8008024:	b40e      	push	{r1, r2, r3}
 8008026:	b517      	push	{r0, r1, r2, r4, lr}
 8008028:	4c05      	ldr	r4, [pc, #20]	@ (8008040 <fiprintf+0x1c>)
 800802a:	ab05      	add	r3, sp, #20
 800802c:	cb04      	ldmia	r3!, {r2}
 800802e:	0001      	movs	r1, r0
 8008030:	6820      	ldr	r0, [r4, #0]
 8008032:	9301      	str	r3, [sp, #4]
 8008034:	f000 f89e 	bl	8008174 <_vfiprintf_r>
 8008038:	bc1e      	pop	{r1, r2, r3, r4}
 800803a:	bc08      	pop	{r3}
 800803c:	b003      	add	sp, #12
 800803e:	4718      	bx	r3
 8008040:	20000028 	.word	0x20000028

08008044 <memmove>:
 8008044:	b510      	push	{r4, lr}
 8008046:	4288      	cmp	r0, r1
 8008048:	d806      	bhi.n	8008058 <memmove+0x14>
 800804a:	2300      	movs	r3, #0
 800804c:	429a      	cmp	r2, r3
 800804e:	d008      	beq.n	8008062 <memmove+0x1e>
 8008050:	5ccc      	ldrb	r4, [r1, r3]
 8008052:	54c4      	strb	r4, [r0, r3]
 8008054:	3301      	adds	r3, #1
 8008056:	e7f9      	b.n	800804c <memmove+0x8>
 8008058:	188b      	adds	r3, r1, r2
 800805a:	4298      	cmp	r0, r3
 800805c:	d2f5      	bcs.n	800804a <memmove+0x6>
 800805e:	3a01      	subs	r2, #1
 8008060:	d200      	bcs.n	8008064 <memmove+0x20>
 8008062:	bd10      	pop	{r4, pc}
 8008064:	5c8b      	ldrb	r3, [r1, r2]
 8008066:	5483      	strb	r3, [r0, r2]
 8008068:	e7f9      	b.n	800805e <memmove+0x1a>
	...

0800806c <_sbrk_r>:
 800806c:	2300      	movs	r3, #0
 800806e:	b570      	push	{r4, r5, r6, lr}
 8008070:	4d06      	ldr	r5, [pc, #24]	@ (800808c <_sbrk_r+0x20>)
 8008072:	0004      	movs	r4, r0
 8008074:	0008      	movs	r0, r1
 8008076:	602b      	str	r3, [r5, #0]
 8008078:	f7f9 faaa 	bl	80015d0 <_sbrk>
 800807c:	1c43      	adds	r3, r0, #1
 800807e:	d103      	bne.n	8008088 <_sbrk_r+0x1c>
 8008080:	682b      	ldr	r3, [r5, #0]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d000      	beq.n	8008088 <_sbrk_r+0x1c>
 8008086:	6023      	str	r3, [r4, #0]
 8008088:	bd70      	pop	{r4, r5, r6, pc}
 800808a:	46c0      	nop			@ (mov r8, r8)
 800808c:	2000043c 	.word	0x2000043c

08008090 <memchr>:
 8008090:	b2c9      	uxtb	r1, r1
 8008092:	1882      	adds	r2, r0, r2
 8008094:	4290      	cmp	r0, r2
 8008096:	d101      	bne.n	800809c <memchr+0xc>
 8008098:	2000      	movs	r0, #0
 800809a:	4770      	bx	lr
 800809c:	7803      	ldrb	r3, [r0, #0]
 800809e:	428b      	cmp	r3, r1
 80080a0:	d0fb      	beq.n	800809a <memchr+0xa>
 80080a2:	3001      	adds	r0, #1
 80080a4:	e7f6      	b.n	8008094 <memchr+0x4>

080080a6 <memcpy>:
 80080a6:	2300      	movs	r3, #0
 80080a8:	b510      	push	{r4, lr}
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d100      	bne.n	80080b0 <memcpy+0xa>
 80080ae:	bd10      	pop	{r4, pc}
 80080b0:	5ccc      	ldrb	r4, [r1, r3]
 80080b2:	54c4      	strb	r4, [r0, r3]
 80080b4:	3301      	adds	r3, #1
 80080b6:	e7f8      	b.n	80080aa <memcpy+0x4>

080080b8 <abort>:
 80080b8:	2006      	movs	r0, #6
 80080ba:	b510      	push	{r4, lr}
 80080bc:	f000 fa40 	bl	8008540 <raise>
 80080c0:	2001      	movs	r0, #1
 80080c2:	f7f9 fa12 	bl	80014ea <_exit>

080080c6 <_realloc_r>:
 80080c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080c8:	0006      	movs	r6, r0
 80080ca:	000c      	movs	r4, r1
 80080cc:	0015      	movs	r5, r2
 80080ce:	2900      	cmp	r1, #0
 80080d0:	d105      	bne.n	80080de <_realloc_r+0x18>
 80080d2:	0011      	movs	r1, r2
 80080d4:	f7ff fb88 	bl	80077e8 <_malloc_r>
 80080d8:	0004      	movs	r4, r0
 80080da:	0020      	movs	r0, r4
 80080dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80080de:	2a00      	cmp	r2, #0
 80080e0:	d103      	bne.n	80080ea <_realloc_r+0x24>
 80080e2:	f7ff fb0b 	bl	80076fc <_free_r>
 80080e6:	2400      	movs	r4, #0
 80080e8:	e7f7      	b.n	80080da <_realloc_r+0x14>
 80080ea:	f000 fa49 	bl	8008580 <_malloc_usable_size_r>
 80080ee:	0007      	movs	r7, r0
 80080f0:	4285      	cmp	r5, r0
 80080f2:	d802      	bhi.n	80080fa <_realloc_r+0x34>
 80080f4:	0843      	lsrs	r3, r0, #1
 80080f6:	42ab      	cmp	r3, r5
 80080f8:	d3ef      	bcc.n	80080da <_realloc_r+0x14>
 80080fa:	0029      	movs	r1, r5
 80080fc:	0030      	movs	r0, r6
 80080fe:	f7ff fb73 	bl	80077e8 <_malloc_r>
 8008102:	9001      	str	r0, [sp, #4]
 8008104:	2800      	cmp	r0, #0
 8008106:	d0ee      	beq.n	80080e6 <_realloc_r+0x20>
 8008108:	002a      	movs	r2, r5
 800810a:	42bd      	cmp	r5, r7
 800810c:	d900      	bls.n	8008110 <_realloc_r+0x4a>
 800810e:	003a      	movs	r2, r7
 8008110:	0021      	movs	r1, r4
 8008112:	9801      	ldr	r0, [sp, #4]
 8008114:	f7ff ffc7 	bl	80080a6 <memcpy>
 8008118:	0021      	movs	r1, r4
 800811a:	0030      	movs	r0, r6
 800811c:	f7ff faee 	bl	80076fc <_free_r>
 8008120:	9c01      	ldr	r4, [sp, #4]
 8008122:	e7da      	b.n	80080da <_realloc_r+0x14>

08008124 <__sfputc_r>:
 8008124:	6893      	ldr	r3, [r2, #8]
 8008126:	b510      	push	{r4, lr}
 8008128:	3b01      	subs	r3, #1
 800812a:	6093      	str	r3, [r2, #8]
 800812c:	2b00      	cmp	r3, #0
 800812e:	da04      	bge.n	800813a <__sfputc_r+0x16>
 8008130:	6994      	ldr	r4, [r2, #24]
 8008132:	42a3      	cmp	r3, r4
 8008134:	db07      	blt.n	8008146 <__sfputc_r+0x22>
 8008136:	290a      	cmp	r1, #10
 8008138:	d005      	beq.n	8008146 <__sfputc_r+0x22>
 800813a:	6813      	ldr	r3, [r2, #0]
 800813c:	1c58      	adds	r0, r3, #1
 800813e:	6010      	str	r0, [r2, #0]
 8008140:	7019      	strb	r1, [r3, #0]
 8008142:	0008      	movs	r0, r1
 8008144:	bd10      	pop	{r4, pc}
 8008146:	f000 f931 	bl	80083ac <__swbuf_r>
 800814a:	0001      	movs	r1, r0
 800814c:	e7f9      	b.n	8008142 <__sfputc_r+0x1e>

0800814e <__sfputs_r>:
 800814e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008150:	0006      	movs	r6, r0
 8008152:	000f      	movs	r7, r1
 8008154:	0014      	movs	r4, r2
 8008156:	18d5      	adds	r5, r2, r3
 8008158:	42ac      	cmp	r4, r5
 800815a:	d101      	bne.n	8008160 <__sfputs_r+0x12>
 800815c:	2000      	movs	r0, #0
 800815e:	e007      	b.n	8008170 <__sfputs_r+0x22>
 8008160:	7821      	ldrb	r1, [r4, #0]
 8008162:	003a      	movs	r2, r7
 8008164:	0030      	movs	r0, r6
 8008166:	f7ff ffdd 	bl	8008124 <__sfputc_r>
 800816a:	3401      	adds	r4, #1
 800816c:	1c43      	adds	r3, r0, #1
 800816e:	d1f3      	bne.n	8008158 <__sfputs_r+0xa>
 8008170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008174 <_vfiprintf_r>:
 8008174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008176:	b0a1      	sub	sp, #132	@ 0x84
 8008178:	000f      	movs	r7, r1
 800817a:	0015      	movs	r5, r2
 800817c:	001e      	movs	r6, r3
 800817e:	9003      	str	r0, [sp, #12]
 8008180:	2800      	cmp	r0, #0
 8008182:	d004      	beq.n	800818e <_vfiprintf_r+0x1a>
 8008184:	6a03      	ldr	r3, [r0, #32]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d101      	bne.n	800818e <_vfiprintf_r+0x1a>
 800818a:	f7ff f975 	bl	8007478 <__sinit>
 800818e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008190:	07db      	lsls	r3, r3, #31
 8008192:	d405      	bmi.n	80081a0 <_vfiprintf_r+0x2c>
 8008194:	89bb      	ldrh	r3, [r7, #12]
 8008196:	059b      	lsls	r3, r3, #22
 8008198:	d402      	bmi.n	80081a0 <_vfiprintf_r+0x2c>
 800819a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800819c:	f7ff fa8d 	bl	80076ba <__retarget_lock_acquire_recursive>
 80081a0:	89bb      	ldrh	r3, [r7, #12]
 80081a2:	071b      	lsls	r3, r3, #28
 80081a4:	d502      	bpl.n	80081ac <_vfiprintf_r+0x38>
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d113      	bne.n	80081d4 <_vfiprintf_r+0x60>
 80081ac:	0039      	movs	r1, r7
 80081ae:	9803      	ldr	r0, [sp, #12]
 80081b0:	f000 f93e 	bl	8008430 <__swsetup_r>
 80081b4:	2800      	cmp	r0, #0
 80081b6:	d00d      	beq.n	80081d4 <_vfiprintf_r+0x60>
 80081b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80081ba:	07db      	lsls	r3, r3, #31
 80081bc:	d503      	bpl.n	80081c6 <_vfiprintf_r+0x52>
 80081be:	2001      	movs	r0, #1
 80081c0:	4240      	negs	r0, r0
 80081c2:	b021      	add	sp, #132	@ 0x84
 80081c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081c6:	89bb      	ldrh	r3, [r7, #12]
 80081c8:	059b      	lsls	r3, r3, #22
 80081ca:	d4f8      	bmi.n	80081be <_vfiprintf_r+0x4a>
 80081cc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80081ce:	f7ff fa75 	bl	80076bc <__retarget_lock_release_recursive>
 80081d2:	e7f4      	b.n	80081be <_vfiprintf_r+0x4a>
 80081d4:	2300      	movs	r3, #0
 80081d6:	ac08      	add	r4, sp, #32
 80081d8:	6163      	str	r3, [r4, #20]
 80081da:	3320      	adds	r3, #32
 80081dc:	7663      	strb	r3, [r4, #25]
 80081de:	3310      	adds	r3, #16
 80081e0:	76a3      	strb	r3, [r4, #26]
 80081e2:	9607      	str	r6, [sp, #28]
 80081e4:	002e      	movs	r6, r5
 80081e6:	7833      	ldrb	r3, [r6, #0]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d001      	beq.n	80081f0 <_vfiprintf_r+0x7c>
 80081ec:	2b25      	cmp	r3, #37	@ 0x25
 80081ee:	d148      	bne.n	8008282 <_vfiprintf_r+0x10e>
 80081f0:	1b73      	subs	r3, r6, r5
 80081f2:	9305      	str	r3, [sp, #20]
 80081f4:	42ae      	cmp	r6, r5
 80081f6:	d00b      	beq.n	8008210 <_vfiprintf_r+0x9c>
 80081f8:	002a      	movs	r2, r5
 80081fa:	0039      	movs	r1, r7
 80081fc:	9803      	ldr	r0, [sp, #12]
 80081fe:	f7ff ffa6 	bl	800814e <__sfputs_r>
 8008202:	3001      	adds	r0, #1
 8008204:	d100      	bne.n	8008208 <_vfiprintf_r+0x94>
 8008206:	e0ae      	b.n	8008366 <_vfiprintf_r+0x1f2>
 8008208:	6963      	ldr	r3, [r4, #20]
 800820a:	9a05      	ldr	r2, [sp, #20]
 800820c:	189b      	adds	r3, r3, r2
 800820e:	6163      	str	r3, [r4, #20]
 8008210:	7833      	ldrb	r3, [r6, #0]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d100      	bne.n	8008218 <_vfiprintf_r+0xa4>
 8008216:	e0a6      	b.n	8008366 <_vfiprintf_r+0x1f2>
 8008218:	2201      	movs	r2, #1
 800821a:	2300      	movs	r3, #0
 800821c:	4252      	negs	r2, r2
 800821e:	6062      	str	r2, [r4, #4]
 8008220:	a904      	add	r1, sp, #16
 8008222:	3254      	adds	r2, #84	@ 0x54
 8008224:	1852      	adds	r2, r2, r1
 8008226:	1c75      	adds	r5, r6, #1
 8008228:	6023      	str	r3, [r4, #0]
 800822a:	60e3      	str	r3, [r4, #12]
 800822c:	60a3      	str	r3, [r4, #8]
 800822e:	7013      	strb	r3, [r2, #0]
 8008230:	65a3      	str	r3, [r4, #88]	@ 0x58
 8008232:	4b59      	ldr	r3, [pc, #356]	@ (8008398 <_vfiprintf_r+0x224>)
 8008234:	2205      	movs	r2, #5
 8008236:	0018      	movs	r0, r3
 8008238:	7829      	ldrb	r1, [r5, #0]
 800823a:	9305      	str	r3, [sp, #20]
 800823c:	f7ff ff28 	bl	8008090 <memchr>
 8008240:	1c6e      	adds	r6, r5, #1
 8008242:	2800      	cmp	r0, #0
 8008244:	d11f      	bne.n	8008286 <_vfiprintf_r+0x112>
 8008246:	6822      	ldr	r2, [r4, #0]
 8008248:	06d3      	lsls	r3, r2, #27
 800824a:	d504      	bpl.n	8008256 <_vfiprintf_r+0xe2>
 800824c:	2353      	movs	r3, #83	@ 0x53
 800824e:	a904      	add	r1, sp, #16
 8008250:	185b      	adds	r3, r3, r1
 8008252:	2120      	movs	r1, #32
 8008254:	7019      	strb	r1, [r3, #0]
 8008256:	0713      	lsls	r3, r2, #28
 8008258:	d504      	bpl.n	8008264 <_vfiprintf_r+0xf0>
 800825a:	2353      	movs	r3, #83	@ 0x53
 800825c:	a904      	add	r1, sp, #16
 800825e:	185b      	adds	r3, r3, r1
 8008260:	212b      	movs	r1, #43	@ 0x2b
 8008262:	7019      	strb	r1, [r3, #0]
 8008264:	782b      	ldrb	r3, [r5, #0]
 8008266:	2b2a      	cmp	r3, #42	@ 0x2a
 8008268:	d016      	beq.n	8008298 <_vfiprintf_r+0x124>
 800826a:	002e      	movs	r6, r5
 800826c:	2100      	movs	r1, #0
 800826e:	200a      	movs	r0, #10
 8008270:	68e3      	ldr	r3, [r4, #12]
 8008272:	7832      	ldrb	r2, [r6, #0]
 8008274:	1c75      	adds	r5, r6, #1
 8008276:	3a30      	subs	r2, #48	@ 0x30
 8008278:	2a09      	cmp	r2, #9
 800827a:	d950      	bls.n	800831e <_vfiprintf_r+0x1aa>
 800827c:	2900      	cmp	r1, #0
 800827e:	d111      	bne.n	80082a4 <_vfiprintf_r+0x130>
 8008280:	e017      	b.n	80082b2 <_vfiprintf_r+0x13e>
 8008282:	3601      	adds	r6, #1
 8008284:	e7af      	b.n	80081e6 <_vfiprintf_r+0x72>
 8008286:	9b05      	ldr	r3, [sp, #20]
 8008288:	6822      	ldr	r2, [r4, #0]
 800828a:	1ac0      	subs	r0, r0, r3
 800828c:	2301      	movs	r3, #1
 800828e:	4083      	lsls	r3, r0
 8008290:	4313      	orrs	r3, r2
 8008292:	0035      	movs	r5, r6
 8008294:	6023      	str	r3, [r4, #0]
 8008296:	e7cc      	b.n	8008232 <_vfiprintf_r+0xbe>
 8008298:	9b07      	ldr	r3, [sp, #28]
 800829a:	1d19      	adds	r1, r3, #4
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	9107      	str	r1, [sp, #28]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	db01      	blt.n	80082a8 <_vfiprintf_r+0x134>
 80082a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80082a6:	e004      	b.n	80082b2 <_vfiprintf_r+0x13e>
 80082a8:	425b      	negs	r3, r3
 80082aa:	60e3      	str	r3, [r4, #12]
 80082ac:	2302      	movs	r3, #2
 80082ae:	4313      	orrs	r3, r2
 80082b0:	6023      	str	r3, [r4, #0]
 80082b2:	7833      	ldrb	r3, [r6, #0]
 80082b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80082b6:	d10c      	bne.n	80082d2 <_vfiprintf_r+0x15e>
 80082b8:	7873      	ldrb	r3, [r6, #1]
 80082ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80082bc:	d134      	bne.n	8008328 <_vfiprintf_r+0x1b4>
 80082be:	9b07      	ldr	r3, [sp, #28]
 80082c0:	3602      	adds	r6, #2
 80082c2:	1d1a      	adds	r2, r3, #4
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	9207      	str	r2, [sp, #28]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	da01      	bge.n	80082d0 <_vfiprintf_r+0x15c>
 80082cc:	2301      	movs	r3, #1
 80082ce:	425b      	negs	r3, r3
 80082d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80082d2:	4d32      	ldr	r5, [pc, #200]	@ (800839c <_vfiprintf_r+0x228>)
 80082d4:	2203      	movs	r2, #3
 80082d6:	0028      	movs	r0, r5
 80082d8:	7831      	ldrb	r1, [r6, #0]
 80082da:	f7ff fed9 	bl	8008090 <memchr>
 80082de:	2800      	cmp	r0, #0
 80082e0:	d006      	beq.n	80082f0 <_vfiprintf_r+0x17c>
 80082e2:	2340      	movs	r3, #64	@ 0x40
 80082e4:	1b40      	subs	r0, r0, r5
 80082e6:	4083      	lsls	r3, r0
 80082e8:	6822      	ldr	r2, [r4, #0]
 80082ea:	3601      	adds	r6, #1
 80082ec:	4313      	orrs	r3, r2
 80082ee:	6023      	str	r3, [r4, #0]
 80082f0:	7831      	ldrb	r1, [r6, #0]
 80082f2:	2206      	movs	r2, #6
 80082f4:	482a      	ldr	r0, [pc, #168]	@ (80083a0 <_vfiprintf_r+0x22c>)
 80082f6:	1c75      	adds	r5, r6, #1
 80082f8:	7621      	strb	r1, [r4, #24]
 80082fa:	f7ff fec9 	bl	8008090 <memchr>
 80082fe:	2800      	cmp	r0, #0
 8008300:	d040      	beq.n	8008384 <_vfiprintf_r+0x210>
 8008302:	4b28      	ldr	r3, [pc, #160]	@ (80083a4 <_vfiprintf_r+0x230>)
 8008304:	2b00      	cmp	r3, #0
 8008306:	d122      	bne.n	800834e <_vfiprintf_r+0x1da>
 8008308:	2207      	movs	r2, #7
 800830a:	9b07      	ldr	r3, [sp, #28]
 800830c:	3307      	adds	r3, #7
 800830e:	4393      	bics	r3, r2
 8008310:	3308      	adds	r3, #8
 8008312:	9307      	str	r3, [sp, #28]
 8008314:	6963      	ldr	r3, [r4, #20]
 8008316:	9a04      	ldr	r2, [sp, #16]
 8008318:	189b      	adds	r3, r3, r2
 800831a:	6163      	str	r3, [r4, #20]
 800831c:	e762      	b.n	80081e4 <_vfiprintf_r+0x70>
 800831e:	4343      	muls	r3, r0
 8008320:	002e      	movs	r6, r5
 8008322:	2101      	movs	r1, #1
 8008324:	189b      	adds	r3, r3, r2
 8008326:	e7a4      	b.n	8008272 <_vfiprintf_r+0xfe>
 8008328:	2300      	movs	r3, #0
 800832a:	200a      	movs	r0, #10
 800832c:	0019      	movs	r1, r3
 800832e:	3601      	adds	r6, #1
 8008330:	6063      	str	r3, [r4, #4]
 8008332:	7832      	ldrb	r2, [r6, #0]
 8008334:	1c75      	adds	r5, r6, #1
 8008336:	3a30      	subs	r2, #48	@ 0x30
 8008338:	2a09      	cmp	r2, #9
 800833a:	d903      	bls.n	8008344 <_vfiprintf_r+0x1d0>
 800833c:	2b00      	cmp	r3, #0
 800833e:	d0c8      	beq.n	80082d2 <_vfiprintf_r+0x15e>
 8008340:	9109      	str	r1, [sp, #36]	@ 0x24
 8008342:	e7c6      	b.n	80082d2 <_vfiprintf_r+0x15e>
 8008344:	4341      	muls	r1, r0
 8008346:	002e      	movs	r6, r5
 8008348:	2301      	movs	r3, #1
 800834a:	1889      	adds	r1, r1, r2
 800834c:	e7f1      	b.n	8008332 <_vfiprintf_r+0x1be>
 800834e:	aa07      	add	r2, sp, #28
 8008350:	9200      	str	r2, [sp, #0]
 8008352:	0021      	movs	r1, r4
 8008354:	003a      	movs	r2, r7
 8008356:	4b14      	ldr	r3, [pc, #80]	@ (80083a8 <_vfiprintf_r+0x234>)
 8008358:	9803      	ldr	r0, [sp, #12]
 800835a:	e000      	b.n	800835e <_vfiprintf_r+0x1ea>
 800835c:	bf00      	nop
 800835e:	9004      	str	r0, [sp, #16]
 8008360:	9b04      	ldr	r3, [sp, #16]
 8008362:	3301      	adds	r3, #1
 8008364:	d1d6      	bne.n	8008314 <_vfiprintf_r+0x1a0>
 8008366:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008368:	07db      	lsls	r3, r3, #31
 800836a:	d405      	bmi.n	8008378 <_vfiprintf_r+0x204>
 800836c:	89bb      	ldrh	r3, [r7, #12]
 800836e:	059b      	lsls	r3, r3, #22
 8008370:	d402      	bmi.n	8008378 <_vfiprintf_r+0x204>
 8008372:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8008374:	f7ff f9a2 	bl	80076bc <__retarget_lock_release_recursive>
 8008378:	89bb      	ldrh	r3, [r7, #12]
 800837a:	065b      	lsls	r3, r3, #25
 800837c:	d500      	bpl.n	8008380 <_vfiprintf_r+0x20c>
 800837e:	e71e      	b.n	80081be <_vfiprintf_r+0x4a>
 8008380:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8008382:	e71e      	b.n	80081c2 <_vfiprintf_r+0x4e>
 8008384:	aa07      	add	r2, sp, #28
 8008386:	9200      	str	r2, [sp, #0]
 8008388:	0021      	movs	r1, r4
 800838a:	003a      	movs	r2, r7
 800838c:	4b06      	ldr	r3, [pc, #24]	@ (80083a8 <_vfiprintf_r+0x234>)
 800838e:	9803      	ldr	r0, [sp, #12]
 8008390:	f7ff fc88 	bl	8007ca4 <_printf_i>
 8008394:	e7e3      	b.n	800835e <_vfiprintf_r+0x1ea>
 8008396:	46c0      	nop			@ (mov r8, r8)
 8008398:	080092db 	.word	0x080092db
 800839c:	080092e1 	.word	0x080092e1
 80083a0:	080092e5 	.word	0x080092e5
 80083a4:	00000000 	.word	0x00000000
 80083a8:	0800814f 	.word	0x0800814f

080083ac <__swbuf_r>:
 80083ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ae:	0006      	movs	r6, r0
 80083b0:	000d      	movs	r5, r1
 80083b2:	0014      	movs	r4, r2
 80083b4:	2800      	cmp	r0, #0
 80083b6:	d004      	beq.n	80083c2 <__swbuf_r+0x16>
 80083b8:	6a03      	ldr	r3, [r0, #32]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d101      	bne.n	80083c2 <__swbuf_r+0x16>
 80083be:	f7ff f85b 	bl	8007478 <__sinit>
 80083c2:	69a3      	ldr	r3, [r4, #24]
 80083c4:	60a3      	str	r3, [r4, #8]
 80083c6:	89a3      	ldrh	r3, [r4, #12]
 80083c8:	071b      	lsls	r3, r3, #28
 80083ca:	d502      	bpl.n	80083d2 <__swbuf_r+0x26>
 80083cc:	6923      	ldr	r3, [r4, #16]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d109      	bne.n	80083e6 <__swbuf_r+0x3a>
 80083d2:	0021      	movs	r1, r4
 80083d4:	0030      	movs	r0, r6
 80083d6:	f000 f82b 	bl	8008430 <__swsetup_r>
 80083da:	2800      	cmp	r0, #0
 80083dc:	d003      	beq.n	80083e6 <__swbuf_r+0x3a>
 80083de:	2501      	movs	r5, #1
 80083e0:	426d      	negs	r5, r5
 80083e2:	0028      	movs	r0, r5
 80083e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083e6:	6923      	ldr	r3, [r4, #16]
 80083e8:	6820      	ldr	r0, [r4, #0]
 80083ea:	b2ef      	uxtb	r7, r5
 80083ec:	1ac0      	subs	r0, r0, r3
 80083ee:	6963      	ldr	r3, [r4, #20]
 80083f0:	b2ed      	uxtb	r5, r5
 80083f2:	4283      	cmp	r3, r0
 80083f4:	dc05      	bgt.n	8008402 <__swbuf_r+0x56>
 80083f6:	0021      	movs	r1, r4
 80083f8:	0030      	movs	r0, r6
 80083fa:	f7ff fde7 	bl	8007fcc <_fflush_r>
 80083fe:	2800      	cmp	r0, #0
 8008400:	d1ed      	bne.n	80083de <__swbuf_r+0x32>
 8008402:	68a3      	ldr	r3, [r4, #8]
 8008404:	3001      	adds	r0, #1
 8008406:	3b01      	subs	r3, #1
 8008408:	60a3      	str	r3, [r4, #8]
 800840a:	6823      	ldr	r3, [r4, #0]
 800840c:	1c5a      	adds	r2, r3, #1
 800840e:	6022      	str	r2, [r4, #0]
 8008410:	701f      	strb	r7, [r3, #0]
 8008412:	6963      	ldr	r3, [r4, #20]
 8008414:	4283      	cmp	r3, r0
 8008416:	d004      	beq.n	8008422 <__swbuf_r+0x76>
 8008418:	89a3      	ldrh	r3, [r4, #12]
 800841a:	07db      	lsls	r3, r3, #31
 800841c:	d5e1      	bpl.n	80083e2 <__swbuf_r+0x36>
 800841e:	2d0a      	cmp	r5, #10
 8008420:	d1df      	bne.n	80083e2 <__swbuf_r+0x36>
 8008422:	0021      	movs	r1, r4
 8008424:	0030      	movs	r0, r6
 8008426:	f7ff fdd1 	bl	8007fcc <_fflush_r>
 800842a:	2800      	cmp	r0, #0
 800842c:	d0d9      	beq.n	80083e2 <__swbuf_r+0x36>
 800842e:	e7d6      	b.n	80083de <__swbuf_r+0x32>

08008430 <__swsetup_r>:
 8008430:	4b2d      	ldr	r3, [pc, #180]	@ (80084e8 <__swsetup_r+0xb8>)
 8008432:	b570      	push	{r4, r5, r6, lr}
 8008434:	0005      	movs	r5, r0
 8008436:	6818      	ldr	r0, [r3, #0]
 8008438:	000c      	movs	r4, r1
 800843a:	2800      	cmp	r0, #0
 800843c:	d004      	beq.n	8008448 <__swsetup_r+0x18>
 800843e:	6a03      	ldr	r3, [r0, #32]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d101      	bne.n	8008448 <__swsetup_r+0x18>
 8008444:	f7ff f818 	bl	8007478 <__sinit>
 8008448:	230c      	movs	r3, #12
 800844a:	5ee2      	ldrsh	r2, [r4, r3]
 800844c:	0713      	lsls	r3, r2, #28
 800844e:	d423      	bmi.n	8008498 <__swsetup_r+0x68>
 8008450:	06d3      	lsls	r3, r2, #27
 8008452:	d407      	bmi.n	8008464 <__swsetup_r+0x34>
 8008454:	2309      	movs	r3, #9
 8008456:	602b      	str	r3, [r5, #0]
 8008458:	2340      	movs	r3, #64	@ 0x40
 800845a:	2001      	movs	r0, #1
 800845c:	4313      	orrs	r3, r2
 800845e:	81a3      	strh	r3, [r4, #12]
 8008460:	4240      	negs	r0, r0
 8008462:	e03a      	b.n	80084da <__swsetup_r+0xaa>
 8008464:	0752      	lsls	r2, r2, #29
 8008466:	d513      	bpl.n	8008490 <__swsetup_r+0x60>
 8008468:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800846a:	2900      	cmp	r1, #0
 800846c:	d008      	beq.n	8008480 <__swsetup_r+0x50>
 800846e:	0023      	movs	r3, r4
 8008470:	3344      	adds	r3, #68	@ 0x44
 8008472:	4299      	cmp	r1, r3
 8008474:	d002      	beq.n	800847c <__swsetup_r+0x4c>
 8008476:	0028      	movs	r0, r5
 8008478:	f7ff f940 	bl	80076fc <_free_r>
 800847c:	2300      	movs	r3, #0
 800847e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008480:	2224      	movs	r2, #36	@ 0x24
 8008482:	89a3      	ldrh	r3, [r4, #12]
 8008484:	4393      	bics	r3, r2
 8008486:	81a3      	strh	r3, [r4, #12]
 8008488:	2300      	movs	r3, #0
 800848a:	6063      	str	r3, [r4, #4]
 800848c:	6923      	ldr	r3, [r4, #16]
 800848e:	6023      	str	r3, [r4, #0]
 8008490:	2308      	movs	r3, #8
 8008492:	89a2      	ldrh	r2, [r4, #12]
 8008494:	4313      	orrs	r3, r2
 8008496:	81a3      	strh	r3, [r4, #12]
 8008498:	6923      	ldr	r3, [r4, #16]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d10b      	bne.n	80084b6 <__swsetup_r+0x86>
 800849e:	21a0      	movs	r1, #160	@ 0xa0
 80084a0:	2280      	movs	r2, #128	@ 0x80
 80084a2:	89a3      	ldrh	r3, [r4, #12]
 80084a4:	0089      	lsls	r1, r1, #2
 80084a6:	0092      	lsls	r2, r2, #2
 80084a8:	400b      	ands	r3, r1
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d003      	beq.n	80084b6 <__swsetup_r+0x86>
 80084ae:	0021      	movs	r1, r4
 80084b0:	0028      	movs	r0, r5
 80084b2:	f000 f897 	bl	80085e4 <__smakebuf_r>
 80084b6:	230c      	movs	r3, #12
 80084b8:	5ee2      	ldrsh	r2, [r4, r3]
 80084ba:	2101      	movs	r1, #1
 80084bc:	0013      	movs	r3, r2
 80084be:	400b      	ands	r3, r1
 80084c0:	420a      	tst	r2, r1
 80084c2:	d00b      	beq.n	80084dc <__swsetup_r+0xac>
 80084c4:	2300      	movs	r3, #0
 80084c6:	60a3      	str	r3, [r4, #8]
 80084c8:	6963      	ldr	r3, [r4, #20]
 80084ca:	425b      	negs	r3, r3
 80084cc:	61a3      	str	r3, [r4, #24]
 80084ce:	2000      	movs	r0, #0
 80084d0:	6923      	ldr	r3, [r4, #16]
 80084d2:	4283      	cmp	r3, r0
 80084d4:	d101      	bne.n	80084da <__swsetup_r+0xaa>
 80084d6:	0613      	lsls	r3, r2, #24
 80084d8:	d4be      	bmi.n	8008458 <__swsetup_r+0x28>
 80084da:	bd70      	pop	{r4, r5, r6, pc}
 80084dc:	0791      	lsls	r1, r2, #30
 80084de:	d400      	bmi.n	80084e2 <__swsetup_r+0xb2>
 80084e0:	6963      	ldr	r3, [r4, #20]
 80084e2:	60a3      	str	r3, [r4, #8]
 80084e4:	e7f3      	b.n	80084ce <__swsetup_r+0x9e>
 80084e6:	46c0      	nop			@ (mov r8, r8)
 80084e8:	20000028 	.word	0x20000028

080084ec <_raise_r>:
 80084ec:	b570      	push	{r4, r5, r6, lr}
 80084ee:	0004      	movs	r4, r0
 80084f0:	000d      	movs	r5, r1
 80084f2:	291f      	cmp	r1, #31
 80084f4:	d904      	bls.n	8008500 <_raise_r+0x14>
 80084f6:	2316      	movs	r3, #22
 80084f8:	6003      	str	r3, [r0, #0]
 80084fa:	2001      	movs	r0, #1
 80084fc:	4240      	negs	r0, r0
 80084fe:	bd70      	pop	{r4, r5, r6, pc}
 8008500:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8008502:	2b00      	cmp	r3, #0
 8008504:	d004      	beq.n	8008510 <_raise_r+0x24>
 8008506:	008a      	lsls	r2, r1, #2
 8008508:	189b      	adds	r3, r3, r2
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	2a00      	cmp	r2, #0
 800850e:	d108      	bne.n	8008522 <_raise_r+0x36>
 8008510:	0020      	movs	r0, r4
 8008512:	f000 f831 	bl	8008578 <_getpid_r>
 8008516:	002a      	movs	r2, r5
 8008518:	0001      	movs	r1, r0
 800851a:	0020      	movs	r0, r4
 800851c:	f000 f81a 	bl	8008554 <_kill_r>
 8008520:	e7ed      	b.n	80084fe <_raise_r+0x12>
 8008522:	2a01      	cmp	r2, #1
 8008524:	d009      	beq.n	800853a <_raise_r+0x4e>
 8008526:	1c51      	adds	r1, r2, #1
 8008528:	d103      	bne.n	8008532 <_raise_r+0x46>
 800852a:	2316      	movs	r3, #22
 800852c:	6003      	str	r3, [r0, #0]
 800852e:	2001      	movs	r0, #1
 8008530:	e7e5      	b.n	80084fe <_raise_r+0x12>
 8008532:	2100      	movs	r1, #0
 8008534:	0028      	movs	r0, r5
 8008536:	6019      	str	r1, [r3, #0]
 8008538:	4790      	blx	r2
 800853a:	2000      	movs	r0, #0
 800853c:	e7df      	b.n	80084fe <_raise_r+0x12>
	...

08008540 <raise>:
 8008540:	b510      	push	{r4, lr}
 8008542:	4b03      	ldr	r3, [pc, #12]	@ (8008550 <raise+0x10>)
 8008544:	0001      	movs	r1, r0
 8008546:	6818      	ldr	r0, [r3, #0]
 8008548:	f7ff ffd0 	bl	80084ec <_raise_r>
 800854c:	bd10      	pop	{r4, pc}
 800854e:	46c0      	nop			@ (mov r8, r8)
 8008550:	20000028 	.word	0x20000028

08008554 <_kill_r>:
 8008554:	2300      	movs	r3, #0
 8008556:	b570      	push	{r4, r5, r6, lr}
 8008558:	4d06      	ldr	r5, [pc, #24]	@ (8008574 <_kill_r+0x20>)
 800855a:	0004      	movs	r4, r0
 800855c:	0008      	movs	r0, r1
 800855e:	0011      	movs	r1, r2
 8008560:	602b      	str	r3, [r5, #0]
 8008562:	f7f8 ffb2 	bl	80014ca <_kill>
 8008566:	1c43      	adds	r3, r0, #1
 8008568:	d103      	bne.n	8008572 <_kill_r+0x1e>
 800856a:	682b      	ldr	r3, [r5, #0]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d000      	beq.n	8008572 <_kill_r+0x1e>
 8008570:	6023      	str	r3, [r4, #0]
 8008572:	bd70      	pop	{r4, r5, r6, pc}
 8008574:	2000043c 	.word	0x2000043c

08008578 <_getpid_r>:
 8008578:	b510      	push	{r4, lr}
 800857a:	f7f8 ffa0 	bl	80014be <_getpid>
 800857e:	bd10      	pop	{r4, pc}

08008580 <_malloc_usable_size_r>:
 8008580:	1f0b      	subs	r3, r1, #4
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	1f18      	subs	r0, r3, #4
 8008586:	2b00      	cmp	r3, #0
 8008588:	da01      	bge.n	800858e <_malloc_usable_size_r+0xe>
 800858a:	580b      	ldr	r3, [r1, r0]
 800858c:	18c0      	adds	r0, r0, r3
 800858e:	4770      	bx	lr

08008590 <__swhatbuf_r>:
 8008590:	b570      	push	{r4, r5, r6, lr}
 8008592:	000e      	movs	r6, r1
 8008594:	001d      	movs	r5, r3
 8008596:	230e      	movs	r3, #14
 8008598:	5ec9      	ldrsh	r1, [r1, r3]
 800859a:	0014      	movs	r4, r2
 800859c:	b096      	sub	sp, #88	@ 0x58
 800859e:	2900      	cmp	r1, #0
 80085a0:	da0c      	bge.n	80085bc <__swhatbuf_r+0x2c>
 80085a2:	89b2      	ldrh	r2, [r6, #12]
 80085a4:	2380      	movs	r3, #128	@ 0x80
 80085a6:	0011      	movs	r1, r2
 80085a8:	4019      	ands	r1, r3
 80085aa:	421a      	tst	r2, r3
 80085ac:	d114      	bne.n	80085d8 <__swhatbuf_r+0x48>
 80085ae:	2380      	movs	r3, #128	@ 0x80
 80085b0:	00db      	lsls	r3, r3, #3
 80085b2:	2000      	movs	r0, #0
 80085b4:	6029      	str	r1, [r5, #0]
 80085b6:	6023      	str	r3, [r4, #0]
 80085b8:	b016      	add	sp, #88	@ 0x58
 80085ba:	bd70      	pop	{r4, r5, r6, pc}
 80085bc:	466a      	mov	r2, sp
 80085be:	f000 f853 	bl	8008668 <_fstat_r>
 80085c2:	2800      	cmp	r0, #0
 80085c4:	dbed      	blt.n	80085a2 <__swhatbuf_r+0x12>
 80085c6:	23f0      	movs	r3, #240	@ 0xf0
 80085c8:	9901      	ldr	r1, [sp, #4]
 80085ca:	021b      	lsls	r3, r3, #8
 80085cc:	4019      	ands	r1, r3
 80085ce:	4b04      	ldr	r3, [pc, #16]	@ (80085e0 <__swhatbuf_r+0x50>)
 80085d0:	18c9      	adds	r1, r1, r3
 80085d2:	424b      	negs	r3, r1
 80085d4:	4159      	adcs	r1, r3
 80085d6:	e7ea      	b.n	80085ae <__swhatbuf_r+0x1e>
 80085d8:	2100      	movs	r1, #0
 80085da:	2340      	movs	r3, #64	@ 0x40
 80085dc:	e7e9      	b.n	80085b2 <__swhatbuf_r+0x22>
 80085de:	46c0      	nop			@ (mov r8, r8)
 80085e0:	ffffe000 	.word	0xffffe000

080085e4 <__smakebuf_r>:
 80085e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085e6:	2602      	movs	r6, #2
 80085e8:	898b      	ldrh	r3, [r1, #12]
 80085ea:	0005      	movs	r5, r0
 80085ec:	000c      	movs	r4, r1
 80085ee:	b085      	sub	sp, #20
 80085f0:	4233      	tst	r3, r6
 80085f2:	d007      	beq.n	8008604 <__smakebuf_r+0x20>
 80085f4:	0023      	movs	r3, r4
 80085f6:	3347      	adds	r3, #71	@ 0x47
 80085f8:	6023      	str	r3, [r4, #0]
 80085fa:	6123      	str	r3, [r4, #16]
 80085fc:	2301      	movs	r3, #1
 80085fe:	6163      	str	r3, [r4, #20]
 8008600:	b005      	add	sp, #20
 8008602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008604:	ab03      	add	r3, sp, #12
 8008606:	aa02      	add	r2, sp, #8
 8008608:	f7ff ffc2 	bl	8008590 <__swhatbuf_r>
 800860c:	9f02      	ldr	r7, [sp, #8]
 800860e:	9001      	str	r0, [sp, #4]
 8008610:	0039      	movs	r1, r7
 8008612:	0028      	movs	r0, r5
 8008614:	f7ff f8e8 	bl	80077e8 <_malloc_r>
 8008618:	2800      	cmp	r0, #0
 800861a:	d108      	bne.n	800862e <__smakebuf_r+0x4a>
 800861c:	220c      	movs	r2, #12
 800861e:	5ea3      	ldrsh	r3, [r4, r2]
 8008620:	059a      	lsls	r2, r3, #22
 8008622:	d4ed      	bmi.n	8008600 <__smakebuf_r+0x1c>
 8008624:	2203      	movs	r2, #3
 8008626:	4393      	bics	r3, r2
 8008628:	431e      	orrs	r6, r3
 800862a:	81a6      	strh	r6, [r4, #12]
 800862c:	e7e2      	b.n	80085f4 <__smakebuf_r+0x10>
 800862e:	2380      	movs	r3, #128	@ 0x80
 8008630:	89a2      	ldrh	r2, [r4, #12]
 8008632:	6020      	str	r0, [r4, #0]
 8008634:	4313      	orrs	r3, r2
 8008636:	81a3      	strh	r3, [r4, #12]
 8008638:	9b03      	ldr	r3, [sp, #12]
 800863a:	6120      	str	r0, [r4, #16]
 800863c:	6167      	str	r7, [r4, #20]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d00c      	beq.n	800865c <__smakebuf_r+0x78>
 8008642:	0028      	movs	r0, r5
 8008644:	230e      	movs	r3, #14
 8008646:	5ee1      	ldrsh	r1, [r4, r3]
 8008648:	f000 f820 	bl	800868c <_isatty_r>
 800864c:	2800      	cmp	r0, #0
 800864e:	d005      	beq.n	800865c <__smakebuf_r+0x78>
 8008650:	2303      	movs	r3, #3
 8008652:	89a2      	ldrh	r2, [r4, #12]
 8008654:	439a      	bics	r2, r3
 8008656:	3b02      	subs	r3, #2
 8008658:	4313      	orrs	r3, r2
 800865a:	81a3      	strh	r3, [r4, #12]
 800865c:	89a3      	ldrh	r3, [r4, #12]
 800865e:	9a01      	ldr	r2, [sp, #4]
 8008660:	4313      	orrs	r3, r2
 8008662:	81a3      	strh	r3, [r4, #12]
 8008664:	e7cc      	b.n	8008600 <__smakebuf_r+0x1c>
	...

08008668 <_fstat_r>:
 8008668:	2300      	movs	r3, #0
 800866a:	b570      	push	{r4, r5, r6, lr}
 800866c:	4d06      	ldr	r5, [pc, #24]	@ (8008688 <_fstat_r+0x20>)
 800866e:	0004      	movs	r4, r0
 8008670:	0008      	movs	r0, r1
 8008672:	0011      	movs	r1, r2
 8008674:	602b      	str	r3, [r5, #0]
 8008676:	f7f8 ff88 	bl	800158a <_fstat>
 800867a:	1c43      	adds	r3, r0, #1
 800867c:	d103      	bne.n	8008686 <_fstat_r+0x1e>
 800867e:	682b      	ldr	r3, [r5, #0]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d000      	beq.n	8008686 <_fstat_r+0x1e>
 8008684:	6023      	str	r3, [r4, #0]
 8008686:	bd70      	pop	{r4, r5, r6, pc}
 8008688:	2000043c 	.word	0x2000043c

0800868c <_isatty_r>:
 800868c:	2300      	movs	r3, #0
 800868e:	b570      	push	{r4, r5, r6, lr}
 8008690:	4d06      	ldr	r5, [pc, #24]	@ (80086ac <_isatty_r+0x20>)
 8008692:	0004      	movs	r4, r0
 8008694:	0008      	movs	r0, r1
 8008696:	602b      	str	r3, [r5, #0]
 8008698:	f7f8 ff85 	bl	80015a6 <_isatty>
 800869c:	1c43      	adds	r3, r0, #1
 800869e:	d103      	bne.n	80086a8 <_isatty_r+0x1c>
 80086a0:	682b      	ldr	r3, [r5, #0]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d000      	beq.n	80086a8 <_isatty_r+0x1c>
 80086a6:	6023      	str	r3, [r4, #0]
 80086a8:	bd70      	pop	{r4, r5, r6, pc}
 80086aa:	46c0      	nop			@ (mov r8, r8)
 80086ac:	2000043c 	.word	0x2000043c

080086b0 <_init>:
 80086b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086b2:	46c0      	nop			@ (mov r8, r8)
 80086b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086b6:	bc08      	pop	{r3}
 80086b8:	469e      	mov	lr, r3
 80086ba:	4770      	bx	lr

080086bc <_fini>:
 80086bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086be:	46c0      	nop			@ (mov r8, r8)
 80086c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086c2:	bc08      	pop	{r3}
 80086c4:	469e      	mov	lr, r3
 80086c6:	4770      	bx	lr
