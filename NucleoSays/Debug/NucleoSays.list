
NucleoSays.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000861c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004be0  080086dc  080086dc  000096dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d2bc  0800d2bc  0000f08c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d2bc  0800d2bc  0000e2bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d2c4  0800d2c4  0000f08c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d2c4  0800d2c4  0000e2c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d2c8  0800d2c8  0000e2c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800d2cc  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d4  2000008c  0800d358  0000f08c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000460  0800d358  0000f460  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000f08c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001213b  00000000  00000000  0000f0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002667  00000000  00000000  000211ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  00023858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cf6  00000000  00000000  00024908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001665a  00000000  00000000  000255fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001539b  00000000  00000000  0003bc58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008086b  00000000  00000000  00050ff3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d185e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004894  00000000  00000000  000d18a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000d6138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000008c 	.word	0x2000008c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080086c4 	.word	0x080086c4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000090 	.word	0x20000090
 8000104:	080086c4 	.word	0x080086c4

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <__aeabi_uldivmod>:
 8000408:	2b00      	cmp	r3, #0
 800040a:	d111      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 800040c:	2a00      	cmp	r2, #0
 800040e:	d10f      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 8000410:	2900      	cmp	r1, #0
 8000412:	d100      	bne.n	8000416 <__aeabi_uldivmod+0xe>
 8000414:	2800      	cmp	r0, #0
 8000416:	d002      	beq.n	800041e <__aeabi_uldivmod+0x16>
 8000418:	2100      	movs	r1, #0
 800041a:	43c9      	mvns	r1, r1
 800041c:	0008      	movs	r0, r1
 800041e:	b407      	push	{r0, r1, r2}
 8000420:	4802      	ldr	r0, [pc, #8]	@ (800042c <__aeabi_uldivmod+0x24>)
 8000422:	a102      	add	r1, pc, #8	@ (adr r1, 800042c <__aeabi_uldivmod+0x24>)
 8000424:	1840      	adds	r0, r0, r1
 8000426:	9002      	str	r0, [sp, #8]
 8000428:	bd03      	pop	{r0, r1, pc}
 800042a:	46c0      	nop			@ (mov r8, r8)
 800042c:	ffffffd9 	.word	0xffffffd9
 8000430:	b403      	push	{r0, r1}
 8000432:	4668      	mov	r0, sp
 8000434:	b501      	push	{r0, lr}
 8000436:	9802      	ldr	r0, [sp, #8]
 8000438:	f000 f834 	bl	80004a4 <__udivmoddi4>
 800043c:	9b01      	ldr	r3, [sp, #4]
 800043e:	469e      	mov	lr, r3
 8000440:	b002      	add	sp, #8
 8000442:	bc0c      	pop	{r2, r3}
 8000444:	4770      	bx	lr
 8000446:	46c0      	nop			@ (mov r8, r8)

08000448 <__aeabi_lmul>:
 8000448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044a:	46ce      	mov	lr, r9
 800044c:	4699      	mov	r9, r3
 800044e:	0c03      	lsrs	r3, r0, #16
 8000450:	469c      	mov	ip, r3
 8000452:	0413      	lsls	r3, r2, #16
 8000454:	4647      	mov	r7, r8
 8000456:	0c1b      	lsrs	r3, r3, #16
 8000458:	001d      	movs	r5, r3
 800045a:	000e      	movs	r6, r1
 800045c:	4661      	mov	r1, ip
 800045e:	0404      	lsls	r4, r0, #16
 8000460:	0c24      	lsrs	r4, r4, #16
 8000462:	b580      	push	{r7, lr}
 8000464:	0007      	movs	r7, r0
 8000466:	0c10      	lsrs	r0, r2, #16
 8000468:	434b      	muls	r3, r1
 800046a:	4365      	muls	r5, r4
 800046c:	4341      	muls	r1, r0
 800046e:	4360      	muls	r0, r4
 8000470:	0c2c      	lsrs	r4, r5, #16
 8000472:	18c0      	adds	r0, r0, r3
 8000474:	1824      	adds	r4, r4, r0
 8000476:	468c      	mov	ip, r1
 8000478:	42a3      	cmp	r3, r4
 800047a:	d903      	bls.n	8000484 <__aeabi_lmul+0x3c>
 800047c:	2380      	movs	r3, #128	@ 0x80
 800047e:	025b      	lsls	r3, r3, #9
 8000480:	4698      	mov	r8, r3
 8000482:	44c4      	add	ip, r8
 8000484:	4649      	mov	r1, r9
 8000486:	4379      	muls	r1, r7
 8000488:	4356      	muls	r6, r2
 800048a:	0c23      	lsrs	r3, r4, #16
 800048c:	042d      	lsls	r5, r5, #16
 800048e:	0c2d      	lsrs	r5, r5, #16
 8000490:	1989      	adds	r1, r1, r6
 8000492:	4463      	add	r3, ip
 8000494:	0424      	lsls	r4, r4, #16
 8000496:	1960      	adds	r0, r4, r5
 8000498:	18c9      	adds	r1, r1, r3
 800049a:	bcc0      	pop	{r6, r7}
 800049c:	46b9      	mov	r9, r7
 800049e:	46b0      	mov	r8, r6
 80004a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)

080004a4 <__udivmoddi4>:
 80004a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a6:	4657      	mov	r7, sl
 80004a8:	464e      	mov	r6, r9
 80004aa:	4645      	mov	r5, r8
 80004ac:	46de      	mov	lr, fp
 80004ae:	b5e0      	push	{r5, r6, r7, lr}
 80004b0:	0004      	movs	r4, r0
 80004b2:	000d      	movs	r5, r1
 80004b4:	4692      	mov	sl, r2
 80004b6:	4699      	mov	r9, r3
 80004b8:	b083      	sub	sp, #12
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d830      	bhi.n	8000520 <__udivmoddi4+0x7c>
 80004be:	d02d      	beq.n	800051c <__udivmoddi4+0x78>
 80004c0:	4649      	mov	r1, r9
 80004c2:	4650      	mov	r0, sl
 80004c4:	f000 f8ba 	bl	800063c <__clzdi2>
 80004c8:	0029      	movs	r1, r5
 80004ca:	0006      	movs	r6, r0
 80004cc:	0020      	movs	r0, r4
 80004ce:	f000 f8b5 	bl	800063c <__clzdi2>
 80004d2:	1a33      	subs	r3, r6, r0
 80004d4:	4698      	mov	r8, r3
 80004d6:	3b20      	subs	r3, #32
 80004d8:	d434      	bmi.n	8000544 <__udivmoddi4+0xa0>
 80004da:	469b      	mov	fp, r3
 80004dc:	4653      	mov	r3, sl
 80004de:	465a      	mov	r2, fp
 80004e0:	4093      	lsls	r3, r2
 80004e2:	4642      	mov	r2, r8
 80004e4:	001f      	movs	r7, r3
 80004e6:	4653      	mov	r3, sl
 80004e8:	4093      	lsls	r3, r2
 80004ea:	001e      	movs	r6, r3
 80004ec:	42af      	cmp	r7, r5
 80004ee:	d83b      	bhi.n	8000568 <__udivmoddi4+0xc4>
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d100      	bne.n	80004f6 <__udivmoddi4+0x52>
 80004f4:	e079      	b.n	80005ea <__udivmoddi4+0x146>
 80004f6:	465b      	mov	r3, fp
 80004f8:	1ba4      	subs	r4, r4, r6
 80004fa:	41bd      	sbcs	r5, r7
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	da00      	bge.n	8000502 <__udivmoddi4+0x5e>
 8000500:	e076      	b.n	80005f0 <__udivmoddi4+0x14c>
 8000502:	2200      	movs	r2, #0
 8000504:	2300      	movs	r3, #0
 8000506:	9200      	str	r2, [sp, #0]
 8000508:	9301      	str	r3, [sp, #4]
 800050a:	2301      	movs	r3, #1
 800050c:	465a      	mov	r2, fp
 800050e:	4093      	lsls	r3, r2
 8000510:	9301      	str	r3, [sp, #4]
 8000512:	2301      	movs	r3, #1
 8000514:	4642      	mov	r2, r8
 8000516:	4093      	lsls	r3, r2
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	e029      	b.n	8000570 <__udivmoddi4+0xcc>
 800051c:	4282      	cmp	r2, r0
 800051e:	d9cf      	bls.n	80004c0 <__udivmoddi4+0x1c>
 8000520:	2200      	movs	r2, #0
 8000522:	2300      	movs	r3, #0
 8000524:	9200      	str	r2, [sp, #0]
 8000526:	9301      	str	r3, [sp, #4]
 8000528:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <__udivmoddi4+0x8e>
 800052e:	601c      	str	r4, [r3, #0]
 8000530:	605d      	str	r5, [r3, #4]
 8000532:	9800      	ldr	r0, [sp, #0]
 8000534:	9901      	ldr	r1, [sp, #4]
 8000536:	b003      	add	sp, #12
 8000538:	bcf0      	pop	{r4, r5, r6, r7}
 800053a:	46bb      	mov	fp, r7
 800053c:	46b2      	mov	sl, r6
 800053e:	46a9      	mov	r9, r5
 8000540:	46a0      	mov	r8, r4
 8000542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000544:	4642      	mov	r2, r8
 8000546:	469b      	mov	fp, r3
 8000548:	2320      	movs	r3, #32
 800054a:	1a9b      	subs	r3, r3, r2
 800054c:	4652      	mov	r2, sl
 800054e:	40da      	lsrs	r2, r3
 8000550:	4641      	mov	r1, r8
 8000552:	0013      	movs	r3, r2
 8000554:	464a      	mov	r2, r9
 8000556:	408a      	lsls	r2, r1
 8000558:	0017      	movs	r7, r2
 800055a:	4642      	mov	r2, r8
 800055c:	431f      	orrs	r7, r3
 800055e:	4653      	mov	r3, sl
 8000560:	4093      	lsls	r3, r2
 8000562:	001e      	movs	r6, r3
 8000564:	42af      	cmp	r7, r5
 8000566:	d9c3      	bls.n	80004f0 <__udivmoddi4+0x4c>
 8000568:	2200      	movs	r2, #0
 800056a:	2300      	movs	r3, #0
 800056c:	9200      	str	r2, [sp, #0]
 800056e:	9301      	str	r3, [sp, #4]
 8000570:	4643      	mov	r3, r8
 8000572:	2b00      	cmp	r3, #0
 8000574:	d0d8      	beq.n	8000528 <__udivmoddi4+0x84>
 8000576:	07fb      	lsls	r3, r7, #31
 8000578:	0872      	lsrs	r2, r6, #1
 800057a:	431a      	orrs	r2, r3
 800057c:	4646      	mov	r6, r8
 800057e:	087b      	lsrs	r3, r7, #1
 8000580:	e00e      	b.n	80005a0 <__udivmoddi4+0xfc>
 8000582:	42ab      	cmp	r3, r5
 8000584:	d101      	bne.n	800058a <__udivmoddi4+0xe6>
 8000586:	42a2      	cmp	r2, r4
 8000588:	d80c      	bhi.n	80005a4 <__udivmoddi4+0x100>
 800058a:	1aa4      	subs	r4, r4, r2
 800058c:	419d      	sbcs	r5, r3
 800058e:	2001      	movs	r0, #1
 8000590:	1924      	adds	r4, r4, r4
 8000592:	416d      	adcs	r5, r5
 8000594:	2100      	movs	r1, #0
 8000596:	3e01      	subs	r6, #1
 8000598:	1824      	adds	r4, r4, r0
 800059a:	414d      	adcs	r5, r1
 800059c:	2e00      	cmp	r6, #0
 800059e:	d006      	beq.n	80005ae <__udivmoddi4+0x10a>
 80005a0:	42ab      	cmp	r3, r5
 80005a2:	d9ee      	bls.n	8000582 <__udivmoddi4+0xde>
 80005a4:	3e01      	subs	r6, #1
 80005a6:	1924      	adds	r4, r4, r4
 80005a8:	416d      	adcs	r5, r5
 80005aa:	2e00      	cmp	r6, #0
 80005ac:	d1f8      	bne.n	80005a0 <__udivmoddi4+0xfc>
 80005ae:	9800      	ldr	r0, [sp, #0]
 80005b0:	9901      	ldr	r1, [sp, #4]
 80005b2:	465b      	mov	r3, fp
 80005b4:	1900      	adds	r0, r0, r4
 80005b6:	4169      	adcs	r1, r5
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	db24      	blt.n	8000606 <__udivmoddi4+0x162>
 80005bc:	002b      	movs	r3, r5
 80005be:	465a      	mov	r2, fp
 80005c0:	4644      	mov	r4, r8
 80005c2:	40d3      	lsrs	r3, r2
 80005c4:	002a      	movs	r2, r5
 80005c6:	40e2      	lsrs	r2, r4
 80005c8:	001c      	movs	r4, r3
 80005ca:	465b      	mov	r3, fp
 80005cc:	0015      	movs	r5, r2
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	db2a      	blt.n	8000628 <__udivmoddi4+0x184>
 80005d2:	0026      	movs	r6, r4
 80005d4:	409e      	lsls	r6, r3
 80005d6:	0033      	movs	r3, r6
 80005d8:	0026      	movs	r6, r4
 80005da:	4647      	mov	r7, r8
 80005dc:	40be      	lsls	r6, r7
 80005de:	0032      	movs	r2, r6
 80005e0:	1a80      	subs	r0, r0, r2
 80005e2:	4199      	sbcs	r1, r3
 80005e4:	9000      	str	r0, [sp, #0]
 80005e6:	9101      	str	r1, [sp, #4]
 80005e8:	e79e      	b.n	8000528 <__udivmoddi4+0x84>
 80005ea:	42a3      	cmp	r3, r4
 80005ec:	d8bc      	bhi.n	8000568 <__udivmoddi4+0xc4>
 80005ee:	e782      	b.n	80004f6 <__udivmoddi4+0x52>
 80005f0:	4642      	mov	r2, r8
 80005f2:	2320      	movs	r3, #32
 80005f4:	2100      	movs	r1, #0
 80005f6:	1a9b      	subs	r3, r3, r2
 80005f8:	2200      	movs	r2, #0
 80005fa:	9100      	str	r1, [sp, #0]
 80005fc:	9201      	str	r2, [sp, #4]
 80005fe:	2201      	movs	r2, #1
 8000600:	40da      	lsrs	r2, r3
 8000602:	9201      	str	r2, [sp, #4]
 8000604:	e785      	b.n	8000512 <__udivmoddi4+0x6e>
 8000606:	4642      	mov	r2, r8
 8000608:	2320      	movs	r3, #32
 800060a:	1a9b      	subs	r3, r3, r2
 800060c:	002a      	movs	r2, r5
 800060e:	4646      	mov	r6, r8
 8000610:	409a      	lsls	r2, r3
 8000612:	0023      	movs	r3, r4
 8000614:	40f3      	lsrs	r3, r6
 8000616:	4644      	mov	r4, r8
 8000618:	4313      	orrs	r3, r2
 800061a:	002a      	movs	r2, r5
 800061c:	40e2      	lsrs	r2, r4
 800061e:	001c      	movs	r4, r3
 8000620:	465b      	mov	r3, fp
 8000622:	0015      	movs	r5, r2
 8000624:	2b00      	cmp	r3, #0
 8000626:	dad4      	bge.n	80005d2 <__udivmoddi4+0x12e>
 8000628:	4642      	mov	r2, r8
 800062a:	002f      	movs	r7, r5
 800062c:	2320      	movs	r3, #32
 800062e:	0026      	movs	r6, r4
 8000630:	4097      	lsls	r7, r2
 8000632:	1a9b      	subs	r3, r3, r2
 8000634:	40de      	lsrs	r6, r3
 8000636:	003b      	movs	r3, r7
 8000638:	4333      	orrs	r3, r6
 800063a:	e7cd      	b.n	80005d8 <__udivmoddi4+0x134>

0800063c <__clzdi2>:
 800063c:	b510      	push	{r4, lr}
 800063e:	2900      	cmp	r1, #0
 8000640:	d103      	bne.n	800064a <__clzdi2+0xe>
 8000642:	f000 f807 	bl	8000654 <__clzsi2>
 8000646:	3020      	adds	r0, #32
 8000648:	e002      	b.n	8000650 <__clzdi2+0x14>
 800064a:	0008      	movs	r0, r1
 800064c:	f000 f802 	bl	8000654 <__clzsi2>
 8000650:	bd10      	pop	{r4, pc}
 8000652:	46c0      	nop			@ (mov r8, r8)

08000654 <__clzsi2>:
 8000654:	211c      	movs	r1, #28
 8000656:	2301      	movs	r3, #1
 8000658:	041b      	lsls	r3, r3, #16
 800065a:	4298      	cmp	r0, r3
 800065c:	d301      	bcc.n	8000662 <__clzsi2+0xe>
 800065e:	0c00      	lsrs	r0, r0, #16
 8000660:	3910      	subs	r1, #16
 8000662:	0a1b      	lsrs	r3, r3, #8
 8000664:	4298      	cmp	r0, r3
 8000666:	d301      	bcc.n	800066c <__clzsi2+0x18>
 8000668:	0a00      	lsrs	r0, r0, #8
 800066a:	3908      	subs	r1, #8
 800066c:	091b      	lsrs	r3, r3, #4
 800066e:	4298      	cmp	r0, r3
 8000670:	d301      	bcc.n	8000676 <__clzsi2+0x22>
 8000672:	0900      	lsrs	r0, r0, #4
 8000674:	3904      	subs	r1, #4
 8000676:	a202      	add	r2, pc, #8	@ (adr r2, 8000680 <__clzsi2+0x2c>)
 8000678:	5c10      	ldrb	r0, [r2, r0]
 800067a:	1840      	adds	r0, r0, r1
 800067c:	4770      	bx	lr
 800067e:	46c0      	nop			@ (mov r8, r8)
 8000680:	02020304 	.word	0x02020304
 8000684:	01010101 	.word	0x01010101
	...

08000690 <main>:
// main
//
///////////////////////////////////////////////////////////////////////////////

int main(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08c      	sub	sp, #48	@ 0x30
 8000694:	af02      	add	r7, sp, #8
  uint32_t i;
  uint32_t x_prev=120, y_prev=160;
 8000696:	2378      	movs	r3, #120	@ 0x78
 8000698:	623b      	str	r3, [r7, #32]
 800069a:	23a0      	movs	r3, #160	@ 0xa0
 800069c:	61fb      	str	r3, [r7, #28]
  uint32_t x_new=120, y_new=160;
 800069e:	2378      	movs	r3, #120	@ 0x78
 80006a0:	61bb      	str	r3, [r7, #24]
 80006a2:	23a0      	movs	r3, #160	@ 0xa0
 80006a4:	617b      	str	r3, [r7, #20]
  uint32_t dx=4, dy=4, delta=5, radius=16;
 80006a6:	2304      	movs	r3, #4
 80006a8:	613b      	str	r3, [r7, #16]
 80006aa:	2304      	movs	r3, #4
 80006ac:	60fb      	str	r3, [r7, #12]
 80006ae:	2305      	movs	r3, #5
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	2310      	movs	r3, #16
 80006b4:	607b      	str	r3, [r7, #4]

  // MCU Configuration--------------------------------------------------------
  // Reset of all peripherals, Initializes the Flash interface and the Systick.
  HAL_Init();
 80006b6:	f001 fb7d 	bl	8001db4 <HAL_Init>
  // Configure the system clock
  SystemClock_Config();
 80006ba:	f000 fb8d 	bl	8000dd8 <SystemClock_Config>
  // Initialize all configured peripherals
  MX_GPIO_Init();
 80006be:	f000 fcb1 	bl	8001024 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006c2:	f000 fc7f 	bl	8000fc4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80006c6:	f000 fc45 	bl	8000f54 <MX_SPI1_Init>
  MX_I2C1_Init();
 80006ca:	f000 fbed 	bl	8000ea8 <MX_I2C1_Init>

  // LCD display initialization; black screen;
  LCD_init();
 80006ce:	f001 fafb 	bl	8001cc8 <LCD_init>
  // one time print of message and variable names;
  // note this text will be having pixels erased as the yellow
  // circle will be moved and overlapping with the text;
  //NunChuck_print_data_init();
  // NunChuck phase 1;
  NunChuck_phase1_init();
 80006d2:	f000 facb 	bl	8000c6c <NunChuck_phase1_init>

  // Draw 3 hearts at beginning for 3 lives.
  LCD_DrawImage(32, 90, &heartAliveBmp);
 80006d6:	4bda      	ldr	r3, [pc, #872]	@ (8000a40 <main+0x3b0>)
 80006d8:	001a      	movs	r2, r3
 80006da:	215a      	movs	r1, #90	@ 0x5a
 80006dc:	2020      	movs	r0, #32
 80006de:	f001 f9f1 	bl	8001ac4 <LCD_DrawImage>
  LCD_DrawImage(92, 90, &heartAliveBmp);
 80006e2:	4bd7      	ldr	r3, [pc, #860]	@ (8000a40 <main+0x3b0>)
 80006e4:	001a      	movs	r2, r3
 80006e6:	215a      	movs	r1, #90	@ 0x5a
 80006e8:	205c      	movs	r0, #92	@ 0x5c
 80006ea:	f001 f9eb 	bl	8001ac4 <LCD_DrawImage>
  LCD_DrawImage(152, 90, &heartAliveBmp);
 80006ee:	4bd4      	ldr	r3, [pc, #848]	@ (8000a40 <main+0x3b0>)
 80006f0:	001a      	movs	r2, r3
 80006f2:	215a      	movs	r1, #90	@ 0x5a
 80006f4:	2098      	movs	r0, #152	@ 0x98
 80006f6:	f001 f9e5 	bl	8001ac4 <LCD_DrawImage>

  // Seed the random number generator
  srand(time(NULL));
 80006fa:	2000      	movs	r0, #0
 80006fc:	f006 ff38 	bl	8007570 <time>
 8000700:	0002      	movs	r2, r0
 8000702:	000b      	movs	r3, r1
 8000704:	0013      	movs	r3, r2
 8000706:	0018      	movs	r0, r3
 8000708:	f006 fd8c 	bl	8007224 <srand>

  while (alive)
 800070c:	e1fd      	b.n	8000b0a <main+0x47a>
  {

    // Resetting the correct 'boolean'
    correct = 0;
 800070e:	4bcd      	ldr	r3, [pc, #820]	@ (8000a44 <main+0x3b4>)
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
    // Resetting GPIO_PIN_%
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000714:	23a0      	movs	r3, #160	@ 0xa0
 8000716:	05db      	lsls	r3, r3, #23
 8000718:	2200      	movs	r2, #0
 800071a:	2120      	movs	r1, #32
 800071c:	0018      	movs	r0, r3
 800071e:	f001 fe24 	bl	800236a <HAL_GPIO_WritePin>

    // clear receive buffer;
    for ( i = 0; i < BUFSIZE; i++ ) {
 8000722:	2300      	movs	r3, #0
 8000724:	627b      	str	r3, [r7, #36]	@ 0x24
 8000726:	e007      	b.n	8000738 <main+0xa8>
      I2CSlaveBuffer[i] = 0x00;
 8000728:	4ac7      	ldr	r2, [pc, #796]	@ (8000a48 <main+0x3b8>)
 800072a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800072c:	18d3      	adds	r3, r2, r3
 800072e:	2200      	movs	r2, #0
 8000730:	701a      	strb	r2, [r3, #0]
    for ( i = 0; i < BUFSIZE; i++ ) {
 8000732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000734:	3301      	adds	r3, #1
 8000736:	627b      	str	r3, [r7, #36]	@ 0x24
 8000738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800073a:	2b3f      	cmp	r3, #63	@ 0x3f
 800073c:	d9f4      	bls.n	8000728 <main+0x98>
    }

    // Determine random number for action to be performed.
    int random_action = random() % 5;
 800073e:	f006 fda1 	bl	8007284 <random>
 8000742:	0003      	movs	r3, r0
 8000744:	2105      	movs	r1, #5
 8000746:	0018      	movs	r0, r3
 8000748:	f7ff fe58 	bl	80003fc <__aeabi_idivmod>
 800074c:	000b      	movs	r3, r1
 800074e:	603b      	str	r3, [r7, #0]
    // 0: C-it!       The program expects c to be pushed.
    // 1: Z-it!       The program expects z to be pushed.
    // 2: Push-it!    The program expects the blue push button to be pushed.
    // 3: Twist-it!   The program expects joystick movement from the Wii Nunchuck.
    // 4: Shake-it!   The program expected joystick acceleration from the Wii Nunchuck.
    HAL_UART_Transmit(&huart2, (uint8_t*)EXPECTED_ACTION, strlen(EXPECTED_ACTION), HAL_MAX_DELAY);
 8000750:	2301      	movs	r3, #1
 8000752:	425b      	negs	r3, r3
 8000754:	49bd      	ldr	r1, [pc, #756]	@ (8000a4c <main+0x3bc>)
 8000756:	48be      	ldr	r0, [pc, #760]	@ (8000a50 <main+0x3c0>)
 8000758:	2211      	movs	r2, #17
 800075a:	f003 fe53 	bl	8004404 <HAL_UART_Transmit>

    // Display action on LCD board.
    if (random_action == 0) {
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d111      	bne.n	8000788 <main+0xf8>
      LCD_PutStr(32,32,  (char *)C_IT_LCD, DEFAULT_FONT, C_WHITE, C_BLACK);
 8000764:	4bbb      	ldr	r3, [pc, #748]	@ (8000a54 <main+0x3c4>)
 8000766:	4abc      	ldr	r2, [pc, #752]	@ (8000a58 <main+0x3c8>)
 8000768:	2100      	movs	r1, #0
 800076a:	9101      	str	r1, [sp, #4]
 800076c:	49bb      	ldr	r1, [pc, #748]	@ (8000a5c <main+0x3cc>)
 800076e:	9100      	str	r1, [sp, #0]
 8000770:	2120      	movs	r1, #32
 8000772:	2020      	movs	r0, #32
 8000774:	f001 fa6c 	bl	8001c50 <LCD_PutStr>
      HAL_UART_Transmit(&huart2, (uint8_t*)C_IT, strlen(C_IT), HAL_MAX_DELAY);
 8000778:	2301      	movs	r3, #1
 800077a:	425b      	negs	r3, r3
 800077c:	49b8      	ldr	r1, [pc, #736]	@ (8000a60 <main+0x3d0>)
 800077e:	48b4      	ldr	r0, [pc, #720]	@ (8000a50 <main+0x3c0>)
 8000780:	2209      	movs	r2, #9
 8000782:	f003 fe3f 	bl	8004404 <HAL_UART_Transmit>
 8000786:	e04f      	b.n	8000828 <main+0x198>
    } else if (random_action == 1){
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	2b01      	cmp	r3, #1
 800078c:	d111      	bne.n	80007b2 <main+0x122>
      LCD_PutStr(32,32,  (char *)Z_IT_LCD, DEFAULT_FONT, C_WHITE, C_BLACK);
 800078e:	4bb1      	ldr	r3, [pc, #708]	@ (8000a54 <main+0x3c4>)
 8000790:	4ab4      	ldr	r2, [pc, #720]	@ (8000a64 <main+0x3d4>)
 8000792:	2100      	movs	r1, #0
 8000794:	9101      	str	r1, [sp, #4]
 8000796:	49b1      	ldr	r1, [pc, #708]	@ (8000a5c <main+0x3cc>)
 8000798:	9100      	str	r1, [sp, #0]
 800079a:	2120      	movs	r1, #32
 800079c:	2020      	movs	r0, #32
 800079e:	f001 fa57 	bl	8001c50 <LCD_PutStr>
      HAL_UART_Transmit(&huart2, (uint8_t*)Z_IT, strlen(Z_IT), HAL_MAX_DELAY);
 80007a2:	2301      	movs	r3, #1
 80007a4:	425b      	negs	r3, r3
 80007a6:	49b0      	ldr	r1, [pc, #704]	@ (8000a68 <main+0x3d8>)
 80007a8:	48a9      	ldr	r0, [pc, #676]	@ (8000a50 <main+0x3c0>)
 80007aa:	2209      	movs	r2, #9
 80007ac:	f003 fe2a 	bl	8004404 <HAL_UART_Transmit>
 80007b0:	e03a      	b.n	8000828 <main+0x198>
    } else if (random_action == 2) {
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	2b02      	cmp	r3, #2
 80007b6:	d111      	bne.n	80007dc <main+0x14c>
      LCD_PutStr(32,32,  (char *)PUSH_IT_LCD, DEFAULT_FONT, C_WHITE, C_BLACK);
 80007b8:	4ba6      	ldr	r3, [pc, #664]	@ (8000a54 <main+0x3c4>)
 80007ba:	4aac      	ldr	r2, [pc, #688]	@ (8000a6c <main+0x3dc>)
 80007bc:	2100      	movs	r1, #0
 80007be:	9101      	str	r1, [sp, #4]
 80007c0:	49a6      	ldr	r1, [pc, #664]	@ (8000a5c <main+0x3cc>)
 80007c2:	9100      	str	r1, [sp, #0]
 80007c4:	2120      	movs	r1, #32
 80007c6:	2020      	movs	r0, #32
 80007c8:	f001 fa42 	bl	8001c50 <LCD_PutStr>
      HAL_UART_Transmit(&huart2, (uint8_t*)PUSH_IT, strlen(PUSH_IT), HAL_MAX_DELAY);
 80007cc:	2301      	movs	r3, #1
 80007ce:	425b      	negs	r3, r3
 80007d0:	49a7      	ldr	r1, [pc, #668]	@ (8000a70 <main+0x3e0>)
 80007d2:	489f      	ldr	r0, [pc, #636]	@ (8000a50 <main+0x3c0>)
 80007d4:	2217      	movs	r2, #23
 80007d6:	f003 fe15 	bl	8004404 <HAL_UART_Transmit>
 80007da:	e025      	b.n	8000828 <main+0x198>
    } else if (random_action == 3) {
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	2b03      	cmp	r3, #3
 80007e0:	d111      	bne.n	8000806 <main+0x176>
      LCD_PutStr(32,32,  (char *)TWIST_IT_LCD, DEFAULT_FONT, C_WHITE, C_BLACK);
 80007e2:	4b9c      	ldr	r3, [pc, #624]	@ (8000a54 <main+0x3c4>)
 80007e4:	4aa3      	ldr	r2, [pc, #652]	@ (8000a74 <main+0x3e4>)
 80007e6:	2100      	movs	r1, #0
 80007e8:	9101      	str	r1, [sp, #4]
 80007ea:	499c      	ldr	r1, [pc, #624]	@ (8000a5c <main+0x3cc>)
 80007ec:	9100      	str	r1, [sp, #0]
 80007ee:	2120      	movs	r1, #32
 80007f0:	2020      	movs	r0, #32
 80007f2:	f001 fa2d 	bl	8001c50 <LCD_PutStr>
      HAL_UART_Transmit(&huart2, (uint8_t*)TWIST_IT, strlen(TWIST_IT), HAL_MAX_DELAY);
 80007f6:	2301      	movs	r3, #1
 80007f8:	425b      	negs	r3, r3
 80007fa:	499f      	ldr	r1, [pc, #636]	@ (8000a78 <main+0x3e8>)
 80007fc:	4894      	ldr	r0, [pc, #592]	@ (8000a50 <main+0x3c0>)
 80007fe:	2213      	movs	r2, #19
 8000800:	f003 fe00 	bl	8004404 <HAL_UART_Transmit>
 8000804:	e010      	b.n	8000828 <main+0x198>
    } else {
      LCD_PutStr(32,32,  (char *)SHAKE_IT_LCD, DEFAULT_FONT, C_WHITE, C_BLACK);
 8000806:	4b93      	ldr	r3, [pc, #588]	@ (8000a54 <main+0x3c4>)
 8000808:	4a9c      	ldr	r2, [pc, #624]	@ (8000a7c <main+0x3ec>)
 800080a:	2100      	movs	r1, #0
 800080c:	9101      	str	r1, [sp, #4]
 800080e:	4993      	ldr	r1, [pc, #588]	@ (8000a5c <main+0x3cc>)
 8000810:	9100      	str	r1, [sp, #0]
 8000812:	2120      	movs	r1, #32
 8000814:	2020      	movs	r0, #32
 8000816:	f001 fa1b 	bl	8001c50 <LCD_PutStr>
      HAL_UART_Transmit(&huart2, (uint8_t*)SHAKE_IT, strlen(SHAKE_IT), HAL_MAX_DELAY);
 800081a:	2301      	movs	r3, #1
 800081c:	425b      	negs	r3, r3
 800081e:	4998      	ldr	r1, [pc, #608]	@ (8000a80 <main+0x3f0>)
 8000820:	488b      	ldr	r0, [pc, #556]	@ (8000a50 <main+0x3c0>)
 8000822:	2212      	movs	r2, #18
 8000824:	f003 fdee 	bl	8004404 <HAL_UART_Transmit>
    }

    // Wait.
    HAL_Delay(2000);
 8000828:	23fa      	movs	r3, #250	@ 0xfa
 800082a:	00db      	lsls	r3, r3, #3
 800082c:	0018      	movs	r0, r3
 800082e:	f001 fb31 	bl	8001e94 <HAL_Delay>

    // Erase action from LCD board.
    if (random_action == 0) {
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d10a      	bne.n	800084e <main+0x1be>
      LCD_PutStr(32,32,  (char *)C_IT_LCD, DEFAULT_FONT, C_BLACK, C_BLACK);
 8000838:	4b86      	ldr	r3, [pc, #536]	@ (8000a54 <main+0x3c4>)
 800083a:	4a87      	ldr	r2, [pc, #540]	@ (8000a58 <main+0x3c8>)
 800083c:	2100      	movs	r1, #0
 800083e:	9101      	str	r1, [sp, #4]
 8000840:	2100      	movs	r1, #0
 8000842:	9100      	str	r1, [sp, #0]
 8000844:	2120      	movs	r1, #32
 8000846:	2020      	movs	r0, #32
 8000848:	f001 fa02 	bl	8001c50 <LCD_PutStr>
 800084c:	e033      	b.n	80008b6 <main+0x226>
    } else if (random_action == 1){
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	2b01      	cmp	r3, #1
 8000852:	d10a      	bne.n	800086a <main+0x1da>
      LCD_PutStr(32,32,  (char *)Z_IT_LCD, DEFAULT_FONT, C_BLACK, C_BLACK);
 8000854:	4b7f      	ldr	r3, [pc, #508]	@ (8000a54 <main+0x3c4>)
 8000856:	4a83      	ldr	r2, [pc, #524]	@ (8000a64 <main+0x3d4>)
 8000858:	2100      	movs	r1, #0
 800085a:	9101      	str	r1, [sp, #4]
 800085c:	2100      	movs	r1, #0
 800085e:	9100      	str	r1, [sp, #0]
 8000860:	2120      	movs	r1, #32
 8000862:	2020      	movs	r0, #32
 8000864:	f001 f9f4 	bl	8001c50 <LCD_PutStr>
 8000868:	e025      	b.n	80008b6 <main+0x226>
    } else if (random_action == 2) {
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	2b02      	cmp	r3, #2
 800086e:	d10a      	bne.n	8000886 <main+0x1f6>
      LCD_PutStr(32,32,  (char *)PUSH_IT_LCD, DEFAULT_FONT, C_BLACK, C_BLACK);
 8000870:	4b78      	ldr	r3, [pc, #480]	@ (8000a54 <main+0x3c4>)
 8000872:	4a7e      	ldr	r2, [pc, #504]	@ (8000a6c <main+0x3dc>)
 8000874:	2100      	movs	r1, #0
 8000876:	9101      	str	r1, [sp, #4]
 8000878:	2100      	movs	r1, #0
 800087a:	9100      	str	r1, [sp, #0]
 800087c:	2120      	movs	r1, #32
 800087e:	2020      	movs	r0, #32
 8000880:	f001 f9e6 	bl	8001c50 <LCD_PutStr>
 8000884:	e017      	b.n	80008b6 <main+0x226>
    } else if (random_action == 3) {
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	2b03      	cmp	r3, #3
 800088a:	d10a      	bne.n	80008a2 <main+0x212>
      LCD_PutStr(32,32,  (char *)TWIST_IT_LCD, DEFAULT_FONT, C_BLACK, C_BLACK);
 800088c:	4b71      	ldr	r3, [pc, #452]	@ (8000a54 <main+0x3c4>)
 800088e:	4a79      	ldr	r2, [pc, #484]	@ (8000a74 <main+0x3e4>)
 8000890:	2100      	movs	r1, #0
 8000892:	9101      	str	r1, [sp, #4]
 8000894:	2100      	movs	r1, #0
 8000896:	9100      	str	r1, [sp, #0]
 8000898:	2120      	movs	r1, #32
 800089a:	2020      	movs	r0, #32
 800089c:	f001 f9d8 	bl	8001c50 <LCD_PutStr>
 80008a0:	e009      	b.n	80008b6 <main+0x226>
    } else {
      LCD_PutStr(32,32,  (char *)SHAKE_IT_LCD, DEFAULT_FONT, C_BLACK, C_BLACK);
 80008a2:	4b6c      	ldr	r3, [pc, #432]	@ (8000a54 <main+0x3c4>)
 80008a4:	4a75      	ldr	r2, [pc, #468]	@ (8000a7c <main+0x3ec>)
 80008a6:	2100      	movs	r1, #0
 80008a8:	9101      	str	r1, [sp, #4]
 80008aa:	2100      	movs	r1, #0
 80008ac:	9100      	str	r1, [sp, #0]
 80008ae:	2120      	movs	r1, #32
 80008b0:	2020      	movs	r0, #32
 80008b2:	f001 f9cd 	bl	8001c50 <LCD_PutStr>
    }

    // NunChuck phase 2
    NunChuck_phase2_read();
 80008b6:	f000 fa01 	bl	8000cbc <NunChuck_phase2_read>
    NunChuck_translate_data();
 80008ba:	f000 fa1f 	bl	8000cfc <NunChuck_translate_data>
    //NunChuck_print_data();

    HAL_Delay(1000);
 80008be:	23fa      	movs	r3, #250	@ 0xfa
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	0018      	movs	r0, r3
 80008c4:	f001 fae6 	bl	8001e94 <HAL_Delay>
    HAL_UART_Transmit(&huart2, (uint8_t*)ACTUAL_ACTION, strlen(ACTUAL_ACTION), HAL_MAX_DELAY);
 80008c8:	2301      	movs	r3, #1
 80008ca:	425b      	negs	r3, r3
 80008cc:	496d      	ldr	r1, [pc, #436]	@ (8000a84 <main+0x3f4>)
 80008ce:	4860      	ldr	r0, [pc, #384]	@ (8000a50 <main+0x3c0>)
 80008d0:	220f      	movs	r2, #15
 80008d2:	f003 fd97 	bl	8004404 <HAL_UART_Transmit>

    // Determine if action was correct.
    if (c_button == 0 && random_action == 0) {
 80008d6:	4b6c      	ldr	r3, [pc, #432]	@ (8000a88 <main+0x3f8>)
 80008d8:	881b      	ldrh	r3, [r3, #0]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d111      	bne.n	8000902 <main+0x272>
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d10e      	bne.n	8000902 <main+0x272>
      score++;
 80008e4:	4b69      	ldr	r3, [pc, #420]	@ (8000a8c <main+0x3fc>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	1c5a      	adds	r2, r3, #1
 80008ea:	4b68      	ldr	r3, [pc, #416]	@ (8000a8c <main+0x3fc>)
 80008ec:	601a      	str	r2, [r3, #0]
      HAL_UART_Transmit(&huart2, (uint8_t*)CORRECT, strlen(CORRECT), HAL_MAX_DELAY);
 80008ee:	2301      	movs	r3, #1
 80008f0:	425b      	negs	r3, r3
 80008f2:	4967      	ldr	r1, [pc, #412]	@ (8000a90 <main+0x400>)
 80008f4:	4856      	ldr	r0, [pc, #344]	@ (8000a50 <main+0x3c0>)
 80008f6:	2209      	movs	r2, #9
 80008f8:	f003 fd84 	bl	8004404 <HAL_UART_Transmit>
      correct = 1;
 80008fc:	4b51      	ldr	r3, [pc, #324]	@ (8000a44 <main+0x3b4>)
 80008fe:	2201      	movs	r2, #1
 8000900:	601a      	str	r2, [r3, #0]
    }

    if (z_button == 0 && random_action == 1) {
 8000902:	4b64      	ldr	r3, [pc, #400]	@ (8000a94 <main+0x404>)
 8000904:	881b      	ldrh	r3, [r3, #0]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d111      	bne.n	800092e <main+0x29e>
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d10e      	bne.n	800092e <main+0x29e>
      score++;
 8000910:	4b5e      	ldr	r3, [pc, #376]	@ (8000a8c <main+0x3fc>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	1c5a      	adds	r2, r3, #1
 8000916:	4b5d      	ldr	r3, [pc, #372]	@ (8000a8c <main+0x3fc>)
 8000918:	601a      	str	r2, [r3, #0]
      HAL_UART_Transmit(&huart2, (uint8_t*)CORRECT, strlen(CORRECT), HAL_MAX_DELAY);
 800091a:	2301      	movs	r3, #1
 800091c:	425b      	negs	r3, r3
 800091e:	495c      	ldr	r1, [pc, #368]	@ (8000a90 <main+0x400>)
 8000920:	484b      	ldr	r0, [pc, #300]	@ (8000a50 <main+0x3c0>)
 8000922:	2209      	movs	r2, #9
 8000924:	f003 fd6e 	bl	8004404 <HAL_UART_Transmit>
      correct = 1;
 8000928:	4b46      	ldr	r3, [pc, #280]	@ (8000a44 <main+0x3b4>)
 800092a:	2201      	movs	r2, #1
 800092c:	601a      	str	r2, [r3, #0]
    }

    if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) && random_action == 2) {
 800092e:	2380      	movs	r3, #128	@ 0x80
 8000930:	019b      	lsls	r3, r3, #6
 8000932:	4a59      	ldr	r2, [pc, #356]	@ (8000a98 <main+0x408>)
 8000934:	0019      	movs	r1, r3
 8000936:	0010      	movs	r0, r2
 8000938:	f001 fcfa 	bl	8002330 <HAL_GPIO_ReadPin>
 800093c:	1e03      	subs	r3, r0, #0
 800093e:	d111      	bne.n	8000964 <main+0x2d4>
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	2b02      	cmp	r3, #2
 8000944:	d10e      	bne.n	8000964 <main+0x2d4>
      score++;
 8000946:	4b51      	ldr	r3, [pc, #324]	@ (8000a8c <main+0x3fc>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	1c5a      	adds	r2, r3, #1
 800094c:	4b4f      	ldr	r3, [pc, #316]	@ (8000a8c <main+0x3fc>)
 800094e:	601a      	str	r2, [r3, #0]
      HAL_UART_Transmit(&huart2, (uint8_t*)CORRECT, strlen(CORRECT), HAL_MAX_DELAY);
 8000950:	2301      	movs	r3, #1
 8000952:	425b      	negs	r3, r3
 8000954:	494e      	ldr	r1, [pc, #312]	@ (8000a90 <main+0x400>)
 8000956:	483e      	ldr	r0, [pc, #248]	@ (8000a50 <main+0x3c0>)
 8000958:	2209      	movs	r2, #9
 800095a:	f003 fd53 	bl	8004404 <HAL_UART_Transmit>
      correct = 1;
 800095e:	4b39      	ldr	r3, [pc, #228]	@ (8000a44 <main+0x3b4>)
 8000960:	2201      	movs	r2, #1
 8000962:	601a      	str	r2, [r3, #0]
    }

    if (joy_x_axis != 128 && joy_y_axis != 130 && random_action == 3) {
 8000964:	4b4d      	ldr	r3, [pc, #308]	@ (8000a9c <main+0x40c>)
 8000966:	881b      	ldrh	r3, [r3, #0]
 8000968:	2b80      	cmp	r3, #128	@ 0x80
 800096a:	d015      	beq.n	8000998 <main+0x308>
 800096c:	4b4c      	ldr	r3, [pc, #304]	@ (8000aa0 <main+0x410>)
 800096e:	881b      	ldrh	r3, [r3, #0]
 8000970:	2b82      	cmp	r3, #130	@ 0x82
 8000972:	d011      	beq.n	8000998 <main+0x308>
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	2b03      	cmp	r3, #3
 8000978:	d10e      	bne.n	8000998 <main+0x308>
      score++;
 800097a:	4b44      	ldr	r3, [pc, #272]	@ (8000a8c <main+0x3fc>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	1c5a      	adds	r2, r3, #1
 8000980:	4b42      	ldr	r3, [pc, #264]	@ (8000a8c <main+0x3fc>)
 8000982:	601a      	str	r2, [r3, #0]
      HAL_UART_Transmit(&huart2, (uint8_t*)CORRECT, strlen(CORRECT), HAL_MAX_DELAY);
 8000984:	2301      	movs	r3, #1
 8000986:	425b      	negs	r3, r3
 8000988:	4941      	ldr	r1, [pc, #260]	@ (8000a90 <main+0x400>)
 800098a:	4831      	ldr	r0, [pc, #196]	@ (8000a50 <main+0x3c0>)
 800098c:	2209      	movs	r2, #9
 800098e:	f003 fd39 	bl	8004404 <HAL_UART_Transmit>
      correct = 1;
 8000992:	4b2c      	ldr	r3, [pc, #176]	@ (8000a44 <main+0x3b4>)
 8000994:	2201      	movs	r2, #1
 8000996:	601a      	str	r2, [r3, #0]
    }

    if (accel_x_axis != 550 && accel_y_axis !=  600 && accel_z_axis != 700 && random_action == 4) {
 8000998:	4b42      	ldr	r3, [pc, #264]	@ (8000aa4 <main+0x414>)
 800099a:	881b      	ldrh	r3, [r3, #0]
 800099c:	4a42      	ldr	r2, [pc, #264]	@ (8000aa8 <main+0x418>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d01d      	beq.n	80009de <main+0x34e>
 80009a2:	4b42      	ldr	r3, [pc, #264]	@ (8000aac <main+0x41c>)
 80009a4:	881a      	ldrh	r2, [r3, #0]
 80009a6:	2396      	movs	r3, #150	@ 0x96
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	429a      	cmp	r2, r3
 80009ac:	d017      	beq.n	80009de <main+0x34e>
 80009ae:	4b40      	ldr	r3, [pc, #256]	@ (8000ab0 <main+0x420>)
 80009b0:	881a      	ldrh	r2, [r3, #0]
 80009b2:	23af      	movs	r3, #175	@ 0xaf
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	429a      	cmp	r2, r3
 80009b8:	d011      	beq.n	80009de <main+0x34e>
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	2b04      	cmp	r3, #4
 80009be:	d10e      	bne.n	80009de <main+0x34e>
      score++;
 80009c0:	4b32      	ldr	r3, [pc, #200]	@ (8000a8c <main+0x3fc>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	1c5a      	adds	r2, r3, #1
 80009c6:	4b31      	ldr	r3, [pc, #196]	@ (8000a8c <main+0x3fc>)
 80009c8:	601a      	str	r2, [r3, #0]
      HAL_UART_Transmit(&huart2, (uint8_t*)CORRECT, strlen(CORRECT), HAL_MAX_DELAY);
 80009ca:	2301      	movs	r3, #1
 80009cc:	425b      	negs	r3, r3
 80009ce:	4930      	ldr	r1, [pc, #192]	@ (8000a90 <main+0x400>)
 80009d0:	481f      	ldr	r0, [pc, #124]	@ (8000a50 <main+0x3c0>)
 80009d2:	2209      	movs	r2, #9
 80009d4:	f003 fd16 	bl	8004404 <HAL_UART_Transmit>
      correct = 1;
 80009d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a44 <main+0x3b4>)
 80009da:	2201      	movs	r2, #1
 80009dc:	601a      	str	r2, [r3, #0]
    }

    if (correct == 0) {
 80009de:	4b19      	ldr	r3, [pc, #100]	@ (8000a44 <main+0x3b4>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d16c      	bne.n	8000ac0 <main+0x430>
      HAL_UART_Transmit(&huart2, (uint8_t*)INCORRECT, strlen(INCORRECT), HAL_MAX_DELAY);
 80009e6:	2301      	movs	r3, #1
 80009e8:	425b      	negs	r3, r3
 80009ea:	4932      	ldr	r1, [pc, #200]	@ (8000ab4 <main+0x424>)
 80009ec:	4818      	ldr	r0, [pc, #96]	@ (8000a50 <main+0x3c0>)
 80009ee:	220b      	movs	r2, #11
 80009f0:	f003 fd08 	bl	8004404 <HAL_UART_Transmit>
      HAL_UART_Transmit(&huart2, (uint8_t*)LIFE_LOST, strlen(LIFE_LOST), HAL_MAX_DELAY);
 80009f4:	2301      	movs	r3, #1
 80009f6:	425b      	negs	r3, r3
 80009f8:	492f      	ldr	r1, [pc, #188]	@ (8000ab8 <main+0x428>)
 80009fa:	4815      	ldr	r0, [pc, #84]	@ (8000a50 <main+0x3c0>)
 80009fc:	220e      	movs	r2, #14
 80009fe:	f003 fd01 	bl	8004404 <HAL_UART_Transmit>
      lives = lives - 1;
 8000a02:	4b2e      	ldr	r3, [pc, #184]	@ (8000abc <main+0x42c>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	1e5a      	subs	r2, r3, #1
 8000a08:	4b2c      	ldr	r3, [pc, #176]	@ (8000abc <main+0x42c>)
 8000a0a:	601a      	str	r2, [r3, #0]
      if (lives == 2) {
 8000a0c:	4b2b      	ldr	r3, [pc, #172]	@ (8000abc <main+0x42c>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b02      	cmp	r3, #2
 8000a12:	d107      	bne.n	8000a24 <main+0x394>
        // Draw over third heart
        UG_FillFrame(152, 90, 206, 144, C_BLACK);
 8000a14:	2300      	movs	r3, #0
 8000a16:	9300      	str	r3, [sp, #0]
 8000a18:	2390      	movs	r3, #144	@ 0x90
 8000a1a:	22ce      	movs	r2, #206	@ 0xce
 8000a1c:	215a      	movs	r1, #90	@ 0x5a
 8000a1e:	2098      	movs	r0, #152	@ 0x98
 8000a20:	f004 fb30 	bl	8005084 <UG_FillFrame>
      }
      if (lives == 1) {
 8000a24:	4b25      	ldr	r3, [pc, #148]	@ (8000abc <main+0x42c>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d164      	bne.n	8000af6 <main+0x466>
        // Draw over middle heart
        UG_FillFrame(92, 90, 146, 144, C_BLACK);
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	9300      	str	r3, [sp, #0]
 8000a30:	2390      	movs	r3, #144	@ 0x90
 8000a32:	2292      	movs	r2, #146	@ 0x92
 8000a34:	215a      	movs	r1, #90	@ 0x5a
 8000a36:	205c      	movs	r0, #92	@ 0x5c
 8000a38:	f004 fb24 	bl	8005084 <UG_FillFrame>
 8000a3c:	e05b      	b.n	8000af6 <main+0x466>
 8000a3e:	46c0      	nop			@ (mov r8, r8)
 8000a40:	20000008 	.word	0x20000008
 8000a44:	20000278 	.word	0x20000278
 8000a48:	2000021c 	.word	0x2000021c
 8000a4c:	080086dc 	.word	0x080086dc
 8000a50:	20000154 	.word	0x20000154
 8000a54:	0800a0b0 	.word	0x0800a0b0
 8000a58:	080086f0 	.word	0x080086f0
 8000a5c:	0000ffff 	.word	0x0000ffff
 8000a60:	080086f8 	.word	0x080086f8
 8000a64:	08008704 	.word	0x08008704
 8000a68:	0800870c 	.word	0x0800870c
 8000a6c:	08008718 	.word	0x08008718
 8000a70:	08008724 	.word	0x08008724
 8000a74:	0800873c 	.word	0x0800873c
 8000a78:	08008748 	.word	0x08008748
 8000a7c:	0800875c 	.word	0x0800875c
 8000a80:	08008768 	.word	0x08008768
 8000a84:	0800877c 	.word	0x0800877c
 8000a88:	20000270 	.word	0x20000270
 8000a8c:	20000274 	.word	0x20000274
 8000a90:	0800878c 	.word	0x0800878c
 8000a94:	2000026e 	.word	0x2000026e
 8000a98:	50000800 	.word	0x50000800
 8000a9c:	20000264 	.word	0x20000264
 8000aa0:	20000266 	.word	0x20000266
 8000aa4:	20000268 	.word	0x20000268
 8000aa8:	00000226 	.word	0x00000226
 8000aac:	2000026a 	.word	0x2000026a
 8000ab0:	2000026c 	.word	0x2000026c
 8000ab4:	08008798 	.word	0x08008798
 8000ab8:	080087a4 	.word	0x080087a4
 8000abc:	20000000 	.word	0x20000000
      }
    } else {
      // Update score if necessary on LCD.
      LCD_PutStr(32, 180,  (char *)SCORE, DEFAULT_FONT, C_WHITE, C_BLACK);
 8000ac0:	4b33      	ldr	r3, [pc, #204]	@ (8000b90 <main+0x500>)
 8000ac2:	4a34      	ldr	r2, [pc, #208]	@ (8000b94 <main+0x504>)
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	9101      	str	r1, [sp, #4]
 8000ac8:	4933      	ldr	r1, [pc, #204]	@ (8000b98 <main+0x508>)
 8000aca:	9100      	str	r1, [sp, #0]
 8000acc:	21b4      	movs	r1, #180	@ 0xb4
 8000ace:	2020      	movs	r0, #32
 8000ad0:	f001 f8be 	bl	8001c50 <LCD_PutStr>
      sprintf(text_buffer, "%01d", score);
 8000ad4:	4b31      	ldr	r3, [pc, #196]	@ (8000b9c <main+0x50c>)
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	4931      	ldr	r1, [pc, #196]	@ (8000ba0 <main+0x510>)
 8000ada:	4b32      	ldr	r3, [pc, #200]	@ (8000ba4 <main+0x514>)
 8000adc:	0018      	movs	r0, r3
 8000ade:	f006 fcd3 	bl	8007488 <siprintf>
      LCD_PutStr(32, 200, (char *)text_buffer, DEFAULT_FONT, C_YELLOW, C_BLACK);
 8000ae2:	4b2b      	ldr	r3, [pc, #172]	@ (8000b90 <main+0x500>)
 8000ae4:	4a2f      	ldr	r2, [pc, #188]	@ (8000ba4 <main+0x514>)
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	9101      	str	r1, [sp, #4]
 8000aea:	492f      	ldr	r1, [pc, #188]	@ (8000ba8 <main+0x518>)
 8000aec:	9100      	str	r1, [sp, #0]
 8000aee:	21c8      	movs	r1, #200	@ 0xc8
 8000af0:	2020      	movs	r0, #32
 8000af2:	f001 f8ad 	bl	8001c50 <LCD_PutStr>
    }

    if (lives == 0) {
 8000af6:	4b2d      	ldr	r3, [pc, #180]	@ (8000bac <main+0x51c>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d102      	bne.n	8000b04 <main+0x474>
      // Player ran out of lives.
      alive = 0;
 8000afe:	4b2c      	ldr	r3, [pc, #176]	@ (8000bb0 <main+0x520>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
    }

    HAL_Delay(10);
 8000b04:	200a      	movs	r0, #10
 8000b06:	f001 f9c5 	bl	8001e94 <HAL_Delay>
  while (alive)
 8000b0a:	4b29      	ldr	r3, [pc, #164]	@ (8000bb0 <main+0x520>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d000      	beq.n	8000b14 <main+0x484>
 8000b12:	e5fc      	b.n	800070e <main+0x7e>
  }

  // No more lives. Game Over.
  // Display game over message, how to restart the game, and the final score on the screen.
  UG_FillScreen(C_BLACK); // This will draw over last heart.
 8000b14:	2000      	movs	r0, #0
 8000b16:	f004 fa8f 	bl	8005038 <UG_FillScreen>
  LCD_PutStr(32,32,  (char *)GAME_OVER, DEFAULT_FONT, C_WHITE, C_BLACK);
 8000b1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000b90 <main+0x500>)
 8000b1c:	4a25      	ldr	r2, [pc, #148]	@ (8000bb4 <main+0x524>)
 8000b1e:	2100      	movs	r1, #0
 8000b20:	9101      	str	r1, [sp, #4]
 8000b22:	491d      	ldr	r1, [pc, #116]	@ (8000b98 <main+0x508>)
 8000b24:	9100      	str	r1, [sp, #0]
 8000b26:	2120      	movs	r1, #32
 8000b28:	2020      	movs	r0, #32
 8000b2a:	f001 f891 	bl	8001c50 <LCD_PutStr>
  LCD_PutStr(32,64,  (char *)GAME_RESET, SMALL_FONT, C_WHITE, C_BLACK);
 8000b2e:	4b22      	ldr	r3, [pc, #136]	@ (8000bb8 <main+0x528>)
 8000b30:	4a22      	ldr	r2, [pc, #136]	@ (8000bbc <main+0x52c>)
 8000b32:	2100      	movs	r1, #0
 8000b34:	9101      	str	r1, [sp, #4]
 8000b36:	4918      	ldr	r1, [pc, #96]	@ (8000b98 <main+0x508>)
 8000b38:	9100      	str	r1, [sp, #0]
 8000b3a:	2140      	movs	r1, #64	@ 0x40
 8000b3c:	2020      	movs	r0, #32
 8000b3e:	f001 f887 	bl	8001c50 <LCD_PutStr>
  LCD_PutStr(32, 180,  (char *)FINAL_SCORE, DEFAULT_FONT, C_WHITE, C_BLACK);
 8000b42:	4b13      	ldr	r3, [pc, #76]	@ (8000b90 <main+0x500>)
 8000b44:	4a1e      	ldr	r2, [pc, #120]	@ (8000bc0 <main+0x530>)
 8000b46:	2100      	movs	r1, #0
 8000b48:	9101      	str	r1, [sp, #4]
 8000b4a:	4913      	ldr	r1, [pc, #76]	@ (8000b98 <main+0x508>)
 8000b4c:	9100      	str	r1, [sp, #0]
 8000b4e:	21b4      	movs	r1, #180	@ 0xb4
 8000b50:	2020      	movs	r0, #32
 8000b52:	f001 f87d 	bl	8001c50 <LCD_PutStr>
  sprintf(text_buffer, "%01d", score);
 8000b56:	4b11      	ldr	r3, [pc, #68]	@ (8000b9c <main+0x50c>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	4911      	ldr	r1, [pc, #68]	@ (8000ba0 <main+0x510>)
 8000b5c:	4b11      	ldr	r3, [pc, #68]	@ (8000ba4 <main+0x514>)
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f006 fc92 	bl	8007488 <siprintf>
  LCD_PutStr(32, 200, (char *)text_buffer, DEFAULT_FONT, C_YELLOW, C_BLACK);
 8000b64:	4b0a      	ldr	r3, [pc, #40]	@ (8000b90 <main+0x500>)
 8000b66:	4a0f      	ldr	r2, [pc, #60]	@ (8000ba4 <main+0x514>)
 8000b68:	2100      	movs	r1, #0
 8000b6a:	9101      	str	r1, [sp, #4]
 8000b6c:	490e      	ldr	r1, [pc, #56]	@ (8000ba8 <main+0x518>)
 8000b6e:	9100      	str	r1, [sp, #0]
 8000b70:	21c8      	movs	r1, #200	@ 0xc8
 8000b72:	2020      	movs	r0, #32
 8000b74:	f001 f86c 	bl	8001c50 <LCD_PutStr>
  HAL_UART_Transmit(&huart2, (uint8_t*)GAME_OVER, strlen(GAME_OVER), HAL_MAX_DELAY);
 8000b78:	2301      	movs	r3, #1
 8000b7a:	425b      	negs	r3, r3
 8000b7c:	490d      	ldr	r1, [pc, #52]	@ (8000bb4 <main+0x524>)
 8000b7e:	4811      	ldr	r0, [pc, #68]	@ (8000bc4 <main+0x534>)
 8000b80:	220a      	movs	r2, #10
 8000b82:	f003 fc3f 	bl	8004404 <HAL_UART_Transmit>
 8000b86:	2300      	movs	r3, #0

}
 8000b88:	0018      	movs	r0, r3
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	b00a      	add	sp, #40	@ 0x28
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	0800a0b0 	.word	0x0800a0b0
 8000b94:	080087b4 	.word	0x080087b4
 8000b98:	0000ffff 	.word	0x0000ffff
 8000b9c:	20000274 	.word	0x20000274
 8000ba0:	080087bc 	.word	0x080087bc
 8000ba4:	2000025c 	.word	0x2000025c
 8000ba8:	0000ffe0 	.word	0x0000ffe0
 8000bac:	20000000 	.word	0x20000000
 8000bb0:	20000004 	.word	0x20000004
 8000bb4:	080087c4 	.word	0x080087c4
 8000bb8:	0800c8c0 	.word	0x0800c8c0
 8000bbc:	080087d0 	.word	0x080087d0
 8000bc0:	0800880c 	.word	0x0800880c
 8000bc4:	20000154 	.word	0x20000154

08000bc8 <Write_To_NunChuck>:
// read transaction.
// NOTE: NunChuck uses 'fast mode' for I2C communication!

HAL_StatusTypeDef Write_To_NunChuck(I2C_HandleTypeDef *hi2c,
    uint16_t DevAddress, uint8_t *pData, uint16_t len)
{
 8000bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bca:	b089      	sub	sp, #36	@ 0x24
 8000bcc:	af02      	add	r7, sp, #8
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	0008      	movs	r0, r1
 8000bd2:	607a      	str	r2, [r7, #4]
 8000bd4:	0019      	movs	r1, r3
 8000bd6:	230a      	movs	r3, #10
 8000bd8:	18fb      	adds	r3, r7, r3
 8000bda:	1c02      	adds	r2, r0, #0
 8000bdc:	801a      	strh	r2, [r3, #0]
 8000bde:	2008      	movs	r0, #8
 8000be0:	183b      	adds	r3, r7, r0
 8000be2:	1c0a      	adds	r2, r1, #0
 8000be4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef returnValue;

  // transfer transmit buffer over the I2C bus;
  returnValue = HAL_I2C_Master_Transmit(hi2c, DevAddress, pData, len, HAL_MAX_DELAY);
 8000be6:	2617      	movs	r6, #23
 8000be8:	19bc      	adds	r4, r7, r6
 8000bea:	183b      	adds	r3, r7, r0
 8000bec:	881d      	ldrh	r5, [r3, #0]
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	230a      	movs	r3, #10
 8000bf2:	18fb      	adds	r3, r7, r3
 8000bf4:	8819      	ldrh	r1, [r3, #0]
 8000bf6:	68f8      	ldr	r0, [r7, #12]
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	425b      	negs	r3, r3
 8000bfc:	9300      	str	r3, [sp, #0]
 8000bfe:	002b      	movs	r3, r5
 8000c00:	f001 fc66 	bl	80024d0 <HAL_I2C_Master_Transmit>
 8000c04:	0003      	movs	r3, r0
 8000c06:	7023      	strb	r3, [r4, #0]
  if (returnValue != HAL_OK)
 8000c08:	19bb      	adds	r3, r7, r6
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d002      	beq.n	8000c16 <Write_To_NunChuck+0x4e>
    return returnValue;
 8000c10:	19bb      	adds	r3, r7, r6
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	e000      	b.n	8000c18 <Write_To_NunChuck+0x50>

  return HAL_OK;
 8000c16:	2300      	movs	r3, #0
}
 8000c18:	0018      	movs	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	b007      	add	sp, #28
 8000c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c20 <Read_From_NunChuck>:

HAL_StatusTypeDef Read_From_NunChuck(I2C_HandleTypeDef *hi2c,
    uint16_t DevAddress, uint8_t *pData, uint16_t len)
{
 8000c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c22:	b089      	sub	sp, #36	@ 0x24
 8000c24:	af02      	add	r7, sp, #8
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	0008      	movs	r0, r1
 8000c2a:	607a      	str	r2, [r7, #4]
 8000c2c:	0019      	movs	r1, r3
 8000c2e:	260a      	movs	r6, #10
 8000c30:	19bb      	adds	r3, r7, r6
 8000c32:	1c02      	adds	r2, r0, #0
 8000c34:	801a      	strh	r2, [r3, #0]
 8000c36:	2008      	movs	r0, #8
 8000c38:	183b      	adds	r3, r7, r0
 8000c3a:	1c0a      	adds	r2, r1, #0
 8000c3c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef returnValue;

  // retrieve data;
  returnValue = HAL_I2C_Master_Receive(hi2c, DevAddress, pData, len, HAL_MAX_DELAY);
 8000c3e:	2317      	movs	r3, #23
 8000c40:	18fc      	adds	r4, r7, r3
 8000c42:	183b      	adds	r3, r7, r0
 8000c44:	881d      	ldrh	r5, [r3, #0]
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	19bb      	adds	r3, r7, r6
 8000c4a:	8819      	ldrh	r1, [r3, #0]
 8000c4c:	68f8      	ldr	r0, [r7, #12]
 8000c4e:	2301      	movs	r3, #1
 8000c50:	425b      	negs	r3, r3
 8000c52:	9300      	str	r3, [sp, #0]
 8000c54:	002b      	movs	r3, r5
 8000c56:	f001 fd43 	bl	80026e0 <HAL_I2C_Master_Receive>
 8000c5a:	0003      	movs	r3, r0
 8000c5c:	7023      	strb	r3, [r4, #0]

  return returnValue;
 8000c5e:	2317      	movs	r3, #23
 8000c60:	18fb      	adds	r3, r7, r3
 8000c62:	781b      	ldrb	r3, [r3, #0]
}
 8000c64:	0018      	movs	r0, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	b007      	add	sp, #28
 8000c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c6c <NunChuck_phase1_init>:
  LCD_PutStr(32,144, (char *)"Z    =", DEFAULT_FONT, C_WHITE, C_BLACK);
  LCD_PutStr(32,160, (char *)"C    =", DEFAULT_FONT, C_WHITE, C_BLACK);
}

void NunChuck_phase1_init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  // this function should be called once only;

  I2CMasterBuffer[0] = 0xF0; // at address 0xF0 of NunChuck write:
 8000c70:	4b10      	ldr	r3, [pc, #64]	@ (8000cb4 <NunChuck_phase1_init+0x48>)
 8000c72:	22f0      	movs	r2, #240	@ 0xf0
 8000c74:	701a      	strb	r2, [r3, #0]
  I2CMasterBuffer[1] = 0x55; // data 0x55
 8000c76:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb4 <NunChuck_phase1_init+0x48>)
 8000c78:	2255      	movs	r2, #85	@ 0x55
 8000c7a:	705a      	strb	r2, [r3, #1]
  Write_To_NunChuck(&hi2c1, NUNCHUK_ADDRESS_SLAVE1, I2CMasterBuffer, 2);
 8000c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb4 <NunChuck_phase1_init+0x48>)
 8000c7e:	480e      	ldr	r0, [pc, #56]	@ (8000cb8 <NunChuck_phase1_init+0x4c>)
 8000c80:	2302      	movs	r3, #2
 8000c82:	21a4      	movs	r1, #164	@ 0xa4
 8000c84:	f7ff ffa0 	bl	8000bc8 <Write_To_NunChuck>
  HAL_Delay(10);
 8000c88:	200a      	movs	r0, #10
 8000c8a:	f001 f903 	bl	8001e94 <HAL_Delay>

  I2CMasterBuffer[0] = 0xFB; // at address 0xFB of NunChuck write:
 8000c8e:	4b09      	ldr	r3, [pc, #36]	@ (8000cb4 <NunChuck_phase1_init+0x48>)
 8000c90:	22fb      	movs	r2, #251	@ 0xfb
 8000c92:	701a      	strb	r2, [r3, #0]
  I2CMasterBuffer[1] = 0x00; // data 0x00
 8000c94:	4b07      	ldr	r3, [pc, #28]	@ (8000cb4 <NunChuck_phase1_init+0x48>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	705a      	strb	r2, [r3, #1]
  Write_To_NunChuck(&hi2c1, NUNCHUK_ADDRESS_SLAVE1, I2CMasterBuffer, 2);
 8000c9a:	4a06      	ldr	r2, [pc, #24]	@ (8000cb4 <NunChuck_phase1_init+0x48>)
 8000c9c:	4806      	ldr	r0, [pc, #24]	@ (8000cb8 <NunChuck_phase1_init+0x4c>)
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	21a4      	movs	r1, #164	@ 0xa4
 8000ca2:	f7ff ff91 	bl	8000bc8 <Write_To_NunChuck>
  HAL_Delay(10);
 8000ca6:	200a      	movs	r0, #10
 8000ca8:	f001 f8f4 	bl	8001e94 <HAL_Delay>
}
 8000cac:	46c0      	nop			@ (mov r8, r8)
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	46c0      	nop			@ (mov r8, r8)
 8000cb4:	200001dc 	.word	0x200001dc
 8000cb8:	200000a8 	.word	0x200000a8

08000cbc <NunChuck_phase2_read>:

void NunChuck_phase2_read(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  // this is called repeatedly to realize continued polling of NunChuck

  I2CMasterBuffer[0] = 0x00; // value;
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf0 <NunChuck_phase2_read+0x34>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	701a      	strb	r2, [r3, #0]
  Write_To_NunChuck(&hi2c1, NUNCHUK_ADDRESS_SLAVE1, I2CMasterBuffer, 1);
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf0 <NunChuck_phase2_read+0x34>)
 8000cc8:	480a      	ldr	r0, [pc, #40]	@ (8000cf4 <NunChuck_phase2_read+0x38>)
 8000cca:	2301      	movs	r3, #1
 8000ccc:	21a4      	movs	r1, #164	@ 0xa4
 8000cce:	f7ff ff7b 	bl	8000bc8 <Write_To_NunChuck>
  HAL_Delay(10);
 8000cd2:	200a      	movs	r0, #10
 8000cd4:	f001 f8de 	bl	8001e94 <HAL_Delay>

  Read_From_NunChuck(&hi2c1, NUNCHUK_ADDRESS_SLAVE2, I2CSlaveBuffer, 6);
 8000cd8:	4a07      	ldr	r2, [pc, #28]	@ (8000cf8 <NunChuck_phase2_read+0x3c>)
 8000cda:	4806      	ldr	r0, [pc, #24]	@ (8000cf4 <NunChuck_phase2_read+0x38>)
 8000cdc:	2306      	movs	r3, #6
 8000cde:	21a5      	movs	r1, #165	@ 0xa5
 8000ce0:	f7ff ff9e 	bl	8000c20 <Read_From_NunChuck>
  HAL_Delay(10);
 8000ce4:	200a      	movs	r0, #10
 8000ce6:	f001 f8d5 	bl	8001e94 <HAL_Delay>
}
 8000cea:	46c0      	nop			@ (mov r8, r8)
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	200001dc 	.word	0x200001dc
 8000cf4:	200000a8 	.word	0x200000a8
 8000cf8:	2000021c 	.word	0x2000021c

08000cfc <NunChuck_translate_data>:

void NunChuck_translate_data(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
  int byte5 = I2CSlaveBuffer[5];
 8000d02:	4b2d      	ldr	r3, [pc, #180]	@ (8000db8 <NunChuck_translate_data+0xbc>)
 8000d04:	795b      	ldrb	r3, [r3, #5]
 8000d06:	607b      	str	r3, [r7, #4]
  joy_x_axis = I2CSlaveBuffer[0];
 8000d08:	4b2b      	ldr	r3, [pc, #172]	@ (8000db8 <NunChuck_translate_data+0xbc>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	001a      	movs	r2, r3
 8000d0e:	4b2b      	ldr	r3, [pc, #172]	@ (8000dbc <NunChuck_translate_data+0xc0>)
 8000d10:	801a      	strh	r2, [r3, #0]
  joy_y_axis = I2CSlaveBuffer[1];
 8000d12:	4b29      	ldr	r3, [pc, #164]	@ (8000db8 <NunChuck_translate_data+0xbc>)
 8000d14:	785b      	ldrb	r3, [r3, #1]
 8000d16:	001a      	movs	r2, r3
 8000d18:	4b29      	ldr	r3, [pc, #164]	@ (8000dc0 <NunChuck_translate_data+0xc4>)
 8000d1a:	801a      	strh	r2, [r3, #0]
  accel_x_axis = (I2CSlaveBuffer[2] << 2);
 8000d1c:	4b26      	ldr	r3, [pc, #152]	@ (8000db8 <NunChuck_translate_data+0xbc>)
 8000d1e:	789b      	ldrb	r3, [r3, #2]
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	4b27      	ldr	r3, [pc, #156]	@ (8000dc4 <NunChuck_translate_data+0xc8>)
 8000d26:	801a      	strh	r2, [r3, #0]
  accel_y_axis = (I2CSlaveBuffer[3] << 2);
 8000d28:	4b23      	ldr	r3, [pc, #140]	@ (8000db8 <NunChuck_translate_data+0xbc>)
 8000d2a:	78db      	ldrb	r3, [r3, #3]
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	b29a      	uxth	r2, r3
 8000d30:	4b25      	ldr	r3, [pc, #148]	@ (8000dc8 <NunChuck_translate_data+0xcc>)
 8000d32:	801a      	strh	r2, [r3, #0]
  accel_z_axis = (I2CSlaveBuffer[4] << 2);
 8000d34:	4b20      	ldr	r3, [pc, #128]	@ (8000db8 <NunChuck_translate_data+0xbc>)
 8000d36:	791b      	ldrb	r3, [r3, #4]
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	b29a      	uxth	r2, r3
 8000d3c:	4b23      	ldr	r3, [pc, #140]	@ (8000dcc <NunChuck_translate_data+0xd0>)
 8000d3e:	801a      	strh	r2, [r3, #0]
  z_button = 0;
 8000d40:	4b23      	ldr	r3, [pc, #140]	@ (8000dd0 <NunChuck_translate_data+0xd4>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	801a      	strh	r2, [r3, #0]
  c_button = 0;
 8000d46:	4b23      	ldr	r3, [pc, #140]	@ (8000dd4 <NunChuck_translate_data+0xd8>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	801a      	strh	r2, [r3, #0]

  // byte I2CSlaveBuffer[5] contains bits for z and c buttons
  // it also contains the least significant bits for the accelerometer data
  if ((byte5 >> 0) & 1)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2201      	movs	r2, #1
 8000d50:	4013      	ands	r3, r2
 8000d52:	d002      	beq.n	8000d5a <NunChuck_translate_data+0x5e>
    z_button = 1;
 8000d54:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd0 <NunChuck_translate_data+0xd4>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	801a      	strh	r2, [r3, #0]
  if ((byte5 >> 1) & 1)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2202      	movs	r2, #2
 8000d5e:	4013      	ands	r3, r2
 8000d60:	d002      	beq.n	8000d68 <NunChuck_translate_data+0x6c>
    c_button = 1;
 8000d62:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd4 <NunChuck_translate_data+0xd8>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	801a      	strh	r2, [r3, #0]
  accel_x_axis += (byte5 >> 2) & 0x03;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	109b      	asrs	r3, r3, #2
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	2203      	movs	r2, #3
 8000d70:	4013      	ands	r3, r2
 8000d72:	b29a      	uxth	r2, r3
 8000d74:	4b13      	ldr	r3, [pc, #76]	@ (8000dc4 <NunChuck_translate_data+0xc8>)
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	18d3      	adds	r3, r2, r3
 8000d7a:	b29a      	uxth	r2, r3
 8000d7c:	4b11      	ldr	r3, [pc, #68]	@ (8000dc4 <NunChuck_translate_data+0xc8>)
 8000d7e:	801a      	strh	r2, [r3, #0]
  accel_y_axis += (byte5 >> 4) & 0x03;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	111b      	asrs	r3, r3, #4
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	2203      	movs	r2, #3
 8000d88:	4013      	ands	r3, r2
 8000d8a:	b29a      	uxth	r2, r3
 8000d8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc8 <NunChuck_translate_data+0xcc>)
 8000d8e:	881b      	ldrh	r3, [r3, #0]
 8000d90:	18d3      	adds	r3, r2, r3
 8000d92:	b29a      	uxth	r2, r3
 8000d94:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc8 <NunChuck_translate_data+0xcc>)
 8000d96:	801a      	strh	r2, [r3, #0]
  accel_z_axis += (byte5 >> 6) & 0x03;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	119b      	asrs	r3, r3, #6
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	2203      	movs	r2, #3
 8000da0:	4013      	ands	r3, r2
 8000da2:	b29a      	uxth	r2, r3
 8000da4:	4b09      	ldr	r3, [pc, #36]	@ (8000dcc <NunChuck_translate_data+0xd0>)
 8000da6:	881b      	ldrh	r3, [r3, #0]
 8000da8:	18d3      	adds	r3, r2, r3
 8000daa:	b29a      	uxth	r2, r3
 8000dac:	4b07      	ldr	r3, [pc, #28]	@ (8000dcc <NunChuck_translate_data+0xd0>)
 8000dae:	801a      	strh	r2, [r3, #0]
}
 8000db0:	46c0      	nop			@ (mov r8, r8)
 8000db2:	46bd      	mov	sp, r7
 8000db4:	b002      	add	sp, #8
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	2000021c 	.word	0x2000021c
 8000dbc:	20000264 	.word	0x20000264
 8000dc0:	20000266 	.word	0x20000266
 8000dc4:	20000268 	.word	0x20000268
 8000dc8:	2000026a 	.word	0x2000026a
 8000dcc:	2000026c 	.word	0x2000026c
 8000dd0:	2000026e 	.word	0x2000026e
 8000dd4:	20000270 	.word	0x20000270

08000dd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd8:	b590      	push	{r4, r7, lr}
 8000dda:	b09d      	sub	sp, #116	@ 0x74
 8000ddc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dde:	2438      	movs	r4, #56	@ 0x38
 8000de0:	193b      	adds	r3, r7, r4
 8000de2:	0018      	movs	r0, r3
 8000de4:	2338      	movs	r3, #56	@ 0x38
 8000de6:	001a      	movs	r2, r3
 8000de8:	2100      	movs	r1, #0
 8000dea:	f006 fbb9 	bl	8007560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dee:	2324      	movs	r3, #36	@ 0x24
 8000df0:	18fb      	adds	r3, r7, r3
 8000df2:	0018      	movs	r0, r3
 8000df4:	2314      	movs	r3, #20
 8000df6:	001a      	movs	r2, r3
 8000df8:	2100      	movs	r1, #0
 8000dfa:	f006 fbb1 	bl	8007560 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dfe:	003b      	movs	r3, r7
 8000e00:	0018      	movs	r0, r3
 8000e02:	2324      	movs	r3, #36	@ 0x24
 8000e04:	001a      	movs	r2, r3
 8000e06:	2100      	movs	r1, #0
 8000e08:	f006 fbaa 	bl	8007560 <memset>

  // Configure the main internal regulator output voltage
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e0c:	4b24      	ldr	r3, [pc, #144]	@ (8000ea0 <SystemClock_Config+0xc8>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a24      	ldr	r2, [pc, #144]	@ (8000ea4 <SystemClock_Config+0xcc>)
 8000e12:	401a      	ands	r2, r3
 8000e14:	4b22      	ldr	r3, [pc, #136]	@ (8000ea0 <SystemClock_Config+0xc8>)
 8000e16:	2180      	movs	r1, #128	@ 0x80
 8000e18:	0109      	lsls	r1, r1, #4
 8000e1a:	430a      	orrs	r2, r1
 8000e1c:	601a      	str	r2, [r3, #0]

  // Initializes the RCC Oscillators according to the specified parameters
  // in the RCC_OscInitTypeDef structure.
  // NOTE: use the high speed internal clock source, and not the default
  // MultiSpeed Internal (MSI) clock, which is slower;
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e1e:	0021      	movs	r1, r4
 8000e20:	187b      	adds	r3, r7, r1
 8000e22:	2202      	movs	r2, #2
 8000e24:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e26:	187b      	adds	r3, r7, r1
 8000e28:	2201      	movs	r2, #1
 8000e2a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e2c:	187b      	adds	r3, r7, r1
 8000e2e:	2210      	movs	r2, #16
 8000e30:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e32:	187b      	adds	r3, r7, r1
 8000e34:	2200      	movs	r2, #0
 8000e36:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e38:	187b      	adds	r3, r7, r1
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f002 f852 	bl	8002ee4 <HAL_RCC_OscConfig>
 8000e40:	1e03      	subs	r3, r0, #0
 8000e42:	d001      	beq.n	8000e48 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000e44:	f000 f9bc 	bl	80011c0 <Error_Handler>
  }

  // Initializes the CPU, AHB and APB buses clocks
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e48:	2124      	movs	r1, #36	@ 0x24
 8000e4a:	187b      	adds	r3, r7, r1
 8000e4c:	220f      	movs	r2, #15
 8000e4e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e50:	187b      	adds	r3, r7, r1
 8000e52:	2201      	movs	r2, #1
 8000e54:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e56:	187b      	adds	r3, r7, r1
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e5c:	187b      	adds	r3, r7, r1
 8000e5e:	2200      	movs	r2, #0
 8000e60:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e62:	187b      	adds	r3, r7, r1
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e68:	187b      	adds	r3, r7, r1
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f002 fbfd 	bl	800366c <HAL_RCC_ClockConfig>
 8000e72:	1e03      	subs	r3, r0, #0
 8000e74:	d001      	beq.n	8000e7a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000e76:	f000 f9a3 	bl	80011c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e7a:	003b      	movs	r3, r7
 8000e7c:	2202      	movs	r2, #2
 8000e7e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e80:	003b      	movs	r3, r7
 8000e82:	2200      	movs	r2, #0
 8000e84:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e86:	003b      	movs	r3, r7
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f002 fe13 	bl	8003ab4 <HAL_RCCEx_PeriphCLKConfig>
 8000e8e:	1e03      	subs	r3, r0, #0
 8000e90:	d001      	beq.n	8000e96 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000e92:	f000 f995 	bl	80011c0 <Error_Handler>
  }
}
 8000e96:	46c0      	nop			@ (mov r8, r8)
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	b01d      	add	sp, #116	@ 0x74
 8000e9c:	bd90      	pop	{r4, r7, pc}
 8000e9e:	46c0      	nop			@ (mov r8, r8)
 8000ea0:	40007000 	.word	0x40007000
 8000ea4:	ffffe7ff 	.word	0xffffe7ff

08000ea8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  // Peripheral clock enable
  __HAL_RCC_I2C1_CLK_ENABLE();
 8000eae:	4b24      	ldr	r3, [pc, #144]	@ (8000f40 <MX_I2C1_Init+0x98>)
 8000eb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000eb2:	4b23      	ldr	r3, [pc, #140]	@ (8000f40 <MX_I2C1_Init+0x98>)
 8000eb4:	2180      	movs	r1, #128	@ 0x80
 8000eb6:	0389      	lsls	r1, r1, #14
 8000eb8:	430a      	orrs	r2, r1
 8000eba:	639a      	str	r2, [r3, #56]	@ 0x38

  hi2c1.Instance = I2C1;
 8000ebc:	4b21      	ldr	r3, [pc, #132]	@ (8000f44 <MX_I2C1_Init+0x9c>)
 8000ebe:	4a22      	ldr	r2, [pc, #136]	@ (8000f48 <MX_I2C1_Init+0xa0>)
 8000ec0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000ec2:	4b20      	ldr	r3, [pc, #128]	@ (8000f44 <MX_I2C1_Init+0x9c>)
 8000ec4:	4a21      	ldr	r2, [pc, #132]	@ (8000f4c <MX_I2C1_Init+0xa4>)
 8000ec6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ec8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f44 <MX_I2C1_Init+0x9c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ece:	4b1d      	ldr	r3, [pc, #116]	@ (8000f44 <MX_I2C1_Init+0x9c>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f44 <MX_I2C1_Init+0x9c>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000eda:	4b1a      	ldr	r3, [pc, #104]	@ (8000f44 <MX_I2C1_Init+0x9c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ee0:	4b18      	ldr	r3, [pc, #96]	@ (8000f44 <MX_I2C1_Init+0x9c>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ee6:	4b17      	ldr	r3, [pc, #92]	@ (8000f44 <MX_I2C1_Init+0x9c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eec:	4b15      	ldr	r3, [pc, #84]	@ (8000f44 <MX_I2C1_Init+0x9c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	621a      	str	r2, [r3, #32]
  HAL_I2C_Init(&hi2c1);
 8000ef2:	4b14      	ldr	r3, [pc, #80]	@ (8000f44 <MX_I2C1_Init+0x9c>)
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	f001 fa55 	bl	80023a4 <HAL_I2C_Init>

  // Configure Analog filter
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000efa:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <MX_I2C1_Init+0x9c>)
 8000efc:	2100      	movs	r1, #0
 8000efe:	0018      	movs	r0, r3
 8000f00:	f001 ffa4 	bl	8002e4c <HAL_I2CEx_ConfigAnalogFilter>
 8000f04:	1e03      	subs	r3, r0, #0
 8000f06:	d001      	beq.n	8000f0c <MX_I2C1_Init+0x64>
  {
    Error_Handler();
 8000f08:	f000 f95a 	bl	80011c0 <Error_Handler>
  //if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
  //{
  //  Error_Handler();
  //}

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f0c:	1d3b      	adds	r3, r7, #4
 8000f0e:	22c0      	movs	r2, #192	@ 0xc0
 8000f10:	0092      	lsls	r2, r2, #2
 8000f12:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	2212      	movs	r2, #18
 8000f18:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f20:	1d3b      	adds	r3, r7, #4
 8000f22:	2203      	movs	r2, #3
 8000f24:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	2204      	movs	r2, #4
 8000f2a:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	4a08      	ldr	r2, [pc, #32]	@ (8000f50 <MX_I2C1_Init+0xa8>)
 8000f30:	0019      	movs	r1, r3
 8000f32:	0010      	movs	r0, r2
 8000f34:	f001 f886 	bl	8002044 <HAL_GPIO_Init>
}
 8000f38:	46c0      	nop			@ (mov r8, r8)
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	b006      	add	sp, #24
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40021000 	.word	0x40021000
 8000f44:	200000a8 	.word	0x200000a8
 8000f48:	40005400 	.word	0x40005400
 8000f4c:	00707cbb 	.word	0x00707cbb
 8000f50:	50000400 	.word	0x50000400

08000f54 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f58:	4b18      	ldr	r3, [pc, #96]	@ (8000fbc <MX_SPI1_Init+0x68>)
 8000f5a:	4a19      	ldr	r2, [pc, #100]	@ (8000fc0 <MX_SPI1_Init+0x6c>)
 8000f5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f5e:	4b17      	ldr	r3, [pc, #92]	@ (8000fbc <MX_SPI1_Init+0x68>)
 8000f60:	2282      	movs	r2, #130	@ 0x82
 8000f62:	0052      	lsls	r2, r2, #1
 8000f64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f66:	4b15      	ldr	r3, [pc, #84]	@ (8000fbc <MX_SPI1_Init+0x68>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f6c:	4b13      	ldr	r3, [pc, #76]	@ (8000fbc <MX_SPI1_Init+0x68>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000f72:	4b12      	ldr	r3, [pc, #72]	@ (8000fbc <MX_SPI1_Init+0x68>)
 8000f74:	2202      	movs	r2, #2
 8000f76:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f78:	4b10      	ldr	r3, [pc, #64]	@ (8000fbc <MX_SPI1_Init+0x68>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fbc <MX_SPI1_Init+0x68>)
 8000f80:	2280      	movs	r2, #128	@ 0x80
 8000f82:	0092      	lsls	r2, r2, #2
 8000f84:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f86:	4b0d      	ldr	r3, [pc, #52]	@ (8000fbc <MX_SPI1_Init+0x68>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fbc <MX_SPI1_Init+0x68>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f92:	4b0a      	ldr	r3, [pc, #40]	@ (8000fbc <MX_SPI1_Init+0x68>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f98:	4b08      	ldr	r3, [pc, #32]	@ (8000fbc <MX_SPI1_Init+0x68>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f9e:	4b07      	ldr	r3, [pc, #28]	@ (8000fbc <MX_SPI1_Init+0x68>)
 8000fa0:	2207      	movs	r2, #7
 8000fa2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fa4:	4b05      	ldr	r3, [pc, #20]	@ (8000fbc <MX_SPI1_Init+0x68>)
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	f002 ff12 	bl	8003dd0 <HAL_SPI_Init>
 8000fac:	1e03      	subs	r3, r0, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000fb0:	f000 f906 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fb4:	46c0      	nop			@ (mov r8, r8)
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	46c0      	nop			@ (mov r8, r8)
 8000fbc:	200000fc 	.word	0x200000fc
 8000fc0:	40013000 	.word	0x40013000

08000fc4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fc8:	4b14      	ldr	r3, [pc, #80]	@ (800101c <MX_USART2_UART_Init+0x58>)
 8000fca:	4a15      	ldr	r2, [pc, #84]	@ (8001020 <MX_USART2_UART_Init+0x5c>)
 8000fcc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fce:	4b13      	ldr	r3, [pc, #76]	@ (800101c <MX_USART2_UART_Init+0x58>)
 8000fd0:	22e1      	movs	r2, #225	@ 0xe1
 8000fd2:	0252      	lsls	r2, r2, #9
 8000fd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fd6:	4b11      	ldr	r3, [pc, #68]	@ (800101c <MX_USART2_UART_Init+0x58>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800101c <MX_USART2_UART_Init+0x58>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800101c <MX_USART2_UART_Init+0x58>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800101c <MX_USART2_UART_Init+0x58>)
 8000fea:	220c      	movs	r2, #12
 8000fec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fee:	4b0b      	ldr	r3, [pc, #44]	@ (800101c <MX_USART2_UART_Init+0x58>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff4:	4b09      	ldr	r3, [pc, #36]	@ (800101c <MX_USART2_UART_Init+0x58>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ffa:	4b08      	ldr	r3, [pc, #32]	@ (800101c <MX_USART2_UART_Init+0x58>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001000:	4b06      	ldr	r3, [pc, #24]	@ (800101c <MX_USART2_UART_Init+0x58>)
 8001002:	2200      	movs	r2, #0
 8001004:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001006:	4b05      	ldr	r3, [pc, #20]	@ (800101c <MX_USART2_UART_Init+0x58>)
 8001008:	0018      	movs	r0, r3
 800100a:	f003 f9a7 	bl	800435c <HAL_UART_Init>
 800100e:	1e03      	subs	r3, r0, #0
 8001010:	d001      	beq.n	8001016 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001012:	f000 f8d5 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001016:	46c0      	nop			@ (mov r8, r8)
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000154 	.word	0x20000154
 8001020:	40004400 	.word	0x40004400

08001024 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001024:	b590      	push	{r4, r7, lr}
 8001026:	b08b      	sub	sp, #44	@ 0x2c
 8001028:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102a:	2414      	movs	r4, #20
 800102c:	193b      	adds	r3, r7, r4
 800102e:	0018      	movs	r0, r3
 8001030:	2314      	movs	r3, #20
 8001032:	001a      	movs	r2, r3
 8001034:	2100      	movs	r1, #0
 8001036:	f006 fa93 	bl	8007560 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800103a:	4b5e      	ldr	r3, [pc, #376]	@ (80011b4 <MX_GPIO_Init+0x190>)
 800103c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800103e:	4b5d      	ldr	r3, [pc, #372]	@ (80011b4 <MX_GPIO_Init+0x190>)
 8001040:	2104      	movs	r1, #4
 8001042:	430a      	orrs	r2, r1
 8001044:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001046:	4b5b      	ldr	r3, [pc, #364]	@ (80011b4 <MX_GPIO_Init+0x190>)
 8001048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800104a:	2204      	movs	r2, #4
 800104c:	4013      	ands	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001052:	4b58      	ldr	r3, [pc, #352]	@ (80011b4 <MX_GPIO_Init+0x190>)
 8001054:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001056:	4b57      	ldr	r3, [pc, #348]	@ (80011b4 <MX_GPIO_Init+0x190>)
 8001058:	2180      	movs	r1, #128	@ 0x80
 800105a:	430a      	orrs	r2, r1
 800105c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800105e:	4b55      	ldr	r3, [pc, #340]	@ (80011b4 <MX_GPIO_Init+0x190>)
 8001060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001062:	2280      	movs	r2, #128	@ 0x80
 8001064:	4013      	ands	r3, r2
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800106a:	4b52      	ldr	r3, [pc, #328]	@ (80011b4 <MX_GPIO_Init+0x190>)
 800106c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800106e:	4b51      	ldr	r3, [pc, #324]	@ (80011b4 <MX_GPIO_Init+0x190>)
 8001070:	2101      	movs	r1, #1
 8001072:	430a      	orrs	r2, r1
 8001074:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001076:	4b4f      	ldr	r3, [pc, #316]	@ (80011b4 <MX_GPIO_Init+0x190>)
 8001078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800107a:	2201      	movs	r2, #1
 800107c:	4013      	ands	r3, r2
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001082:	4b4c      	ldr	r3, [pc, #304]	@ (80011b4 <MX_GPIO_Init+0x190>)
 8001084:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001086:	4b4b      	ldr	r3, [pc, #300]	@ (80011b4 <MX_GPIO_Init+0x190>)
 8001088:	2102      	movs	r1, #2
 800108a:	430a      	orrs	r2, r1
 800108c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800108e:	4b49      	ldr	r3, [pc, #292]	@ (80011b4 <MX_GPIO_Init+0x190>)
 8001090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001092:	2202      	movs	r2, #2
 8001094:	4013      	ands	r3, r2
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800109a:	23a0      	movs	r3, #160	@ 0xa0
 800109c:	05db      	lsls	r3, r3, #23
 800109e:	2200      	movs	r2, #0
 80010a0:	2120      	movs	r1, #32
 80010a2:	0018      	movs	r0, r3
 80010a4:	f001 f961 	bl	800236a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80010a8:	193b      	adds	r3, r7, r4
 80010aa:	2280      	movs	r2, #128	@ 0x80
 80010ac:	0192      	lsls	r2, r2, #6
 80010ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010b0:	193b      	adds	r3, r7, r4
 80010b2:	2284      	movs	r2, #132	@ 0x84
 80010b4:	0392      	lsls	r2, r2, #14
 80010b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	193b      	adds	r3, r7, r4
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010be:	193b      	adds	r3, r7, r4
 80010c0:	4a3d      	ldr	r2, [pc, #244]	@ (80011b8 <MX_GPIO_Init+0x194>)
 80010c2:	0019      	movs	r1, r3
 80010c4:	0010      	movs	r0, r2
 80010c6:	f000 ffbd 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80010ca:	193b      	adds	r3, r7, r4
 80010cc:	2220      	movs	r2, #32
 80010ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d0:	193b      	adds	r3, r7, r4
 80010d2:	2201      	movs	r2, #1
 80010d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	193b      	adds	r3, r7, r4
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010dc:	193b      	adds	r3, r7, r4
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e2:	193a      	adds	r2, r7, r4
 80010e4:	23a0      	movs	r3, #160	@ 0xa0
 80010e6:	05db      	lsls	r3, r3, #23
 80010e8:	0011      	movs	r1, r2
 80010ea:	0018      	movs	r0, r3
 80010ec:	f000 ffaa 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level - DC*/
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80010f0:	2380      	movs	r3, #128	@ 0x80
 80010f2:	0099      	lsls	r1, r3, #2
 80010f4:	23a0      	movs	r3, #160	@ 0xa0
 80010f6:	05db      	lsls	r3, r3, #23
 80010f8:	2200      	movs	r2, #0
 80010fa:	0018      	movs	r0, r3
 80010fc:	f001 f935 	bl	800236a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level - RST */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001100:	4b2d      	ldr	r3, [pc, #180]	@ (80011b8 <MX_GPIO_Init+0x194>)
 8001102:	2200      	movs	r2, #0
 8001104:	2180      	movs	r1, #128	@ 0x80
 8001106:	0018      	movs	r0, r3
 8001108:	f001 f92f 	bl	800236a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level - CS */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800110c:	4b2b      	ldr	r3, [pc, #172]	@ (80011bc <MX_GPIO_Init+0x198>)
 800110e:	2200      	movs	r2, #0
 8001110:	2140      	movs	r1, #64	@ 0x40
 8001112:	0018      	movs	r0, r3
 8001114:	f001 f929 	bl	800236a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ST7789_DC_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001118:	193b      	adds	r3, r7, r4
 800111a:	2280      	movs	r2, #128	@ 0x80
 800111c:	0092      	lsls	r2, r2, #2
 800111e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001120:	193b      	adds	r3, r7, r4
 8001122:	2201      	movs	r2, #1
 8001124:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	193b      	adds	r3, r7, r4
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	193b      	adds	r3, r7, r4
 800112e:	2200      	movs	r2, #0
 8001130:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001132:	193a      	adds	r2, r7, r4
 8001134:	23a0      	movs	r3, #160	@ 0xa0
 8001136:	05db      	lsls	r3, r3, #23
 8001138:	0011      	movs	r1, r2
 800113a:	0018      	movs	r0, r3
 800113c:	f000 ff82 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7789_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001140:	193b      	adds	r3, r7, r4
 8001142:	2280      	movs	r2, #128	@ 0x80
 8001144:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001146:	193b      	adds	r3, r7, r4
 8001148:	2201      	movs	r2, #1
 800114a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	193b      	adds	r3, r7, r4
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001152:	193b      	adds	r3, r7, r4
 8001154:	2200      	movs	r2, #0
 8001156:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001158:	193b      	adds	r3, r7, r4
 800115a:	4a17      	ldr	r2, [pc, #92]	@ (80011b8 <MX_GPIO_Init+0x194>)
 800115c:	0019      	movs	r1, r3
 800115e:	0010      	movs	r0, r2
 8001160:	f000 ff70 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7789_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001164:	193b      	adds	r3, r7, r4
 8001166:	2240      	movs	r2, #64	@ 0x40
 8001168:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116a:	193b      	adds	r3, r7, r4
 800116c:	2201      	movs	r2, #1
 800116e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	193b      	adds	r3, r7, r4
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	193b      	adds	r3, r7, r4
 8001178:	2200      	movs	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117c:	193b      	adds	r3, r7, r4
 800117e:	4a0f      	ldr	r2, [pc, #60]	@ (80011bc <MX_GPIO_Init+0x198>)
 8001180:	0019      	movs	r1, r3
 8001182:	0010      	movs	r0, r2
 8001184:	f000 ff5e 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001188:	0021      	movs	r1, r4
 800118a:	187b      	adds	r3, r7, r1
 800118c:	2280      	movs	r2, #128	@ 0x80
 800118e:	0192      	lsls	r2, r2, #6
 8001190:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // GPIO_MODE_IT_FALLING;
 8001192:	187b      	adds	r3, r7, r1
 8001194:	2200      	movs	r2, #0
 8001196:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	187b      	adds	r3, r7, r1
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800119e:	187b      	adds	r3, r7, r1
 80011a0:	4a05      	ldr	r2, [pc, #20]	@ (80011b8 <MX_GPIO_Init+0x194>)
 80011a2:	0019      	movs	r1, r3
 80011a4:	0010      	movs	r0, r2
 80011a6:	f000 ff4d 	bl	8002044 <HAL_GPIO_Init>
}
 80011aa:	46c0      	nop			@ (mov r8, r8)
 80011ac:	46bd      	mov	sp, r7
 80011ae:	b00b      	add	sp, #44	@ 0x2c
 80011b0:	bd90      	pop	{r4, r7, pc}
 80011b2:	46c0      	nop			@ (mov r8, r8)
 80011b4:	40021000 	.word	0x40021000
 80011b8:	50000800 	.word	0x50000800
 80011bc:	50000400 	.word	0x50000400

080011c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c4:	b672      	cpsid	i
}
 80011c6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011c8:	46c0      	nop			@ (mov r8, r8)
 80011ca:	e7fd      	b.n	80011c8 <Error_Handler+0x8>

080011cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d0:	4b07      	ldr	r3, [pc, #28]	@ (80011f0 <HAL_MspInit+0x24>)
 80011d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011d4:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <HAL_MspInit+0x24>)
 80011d6:	2101      	movs	r1, #1
 80011d8:	430a      	orrs	r2, r1
 80011da:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80011dc:	4b04      	ldr	r3, [pc, #16]	@ (80011f0 <HAL_MspInit+0x24>)
 80011de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80011e0:	4b03      	ldr	r3, [pc, #12]	@ (80011f0 <HAL_MspInit+0x24>)
 80011e2:	2180      	movs	r1, #128	@ 0x80
 80011e4:	0549      	lsls	r1, r1, #21
 80011e6:	430a      	orrs	r2, r1
 80011e8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ea:	46c0      	nop			@ (mov r8, r8)
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40021000 	.word	0x40021000

080011f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011f4:	b590      	push	{r4, r7, lr}
 80011f6:	b089      	sub	sp, #36	@ 0x24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	240c      	movs	r4, #12
 80011fe:	193b      	adds	r3, r7, r4
 8001200:	0018      	movs	r0, r3
 8001202:	2314      	movs	r3, #20
 8001204:	001a      	movs	r2, r3
 8001206:	2100      	movs	r1, #0
 8001208:	f006 f9aa 	bl	8007560 <memset>
  if(hi2c->Instance==I2C2)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a18      	ldr	r2, [pc, #96]	@ (8001274 <HAL_I2C_MspInit+0x80>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d129      	bne.n	800126a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001216:	4b18      	ldr	r3, [pc, #96]	@ (8001278 <HAL_I2C_MspInit+0x84>)
 8001218:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800121a:	4b17      	ldr	r3, [pc, #92]	@ (8001278 <HAL_I2C_MspInit+0x84>)
 800121c:	2102      	movs	r1, #2
 800121e:	430a      	orrs	r2, r1
 8001220:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001222:	4b15      	ldr	r3, [pc, #84]	@ (8001278 <HAL_I2C_MspInit+0x84>)
 8001224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001226:	2202      	movs	r2, #2
 8001228:	4013      	ands	r3, r2
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800122e:	193b      	adds	r3, r7, r4
 8001230:	22c0      	movs	r2, #192	@ 0xc0
 8001232:	0112      	lsls	r2, r2, #4
 8001234:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001236:	0021      	movs	r1, r4
 8001238:	187b      	adds	r3, r7, r1
 800123a:	2212      	movs	r2, #18
 800123c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	187b      	adds	r3, r7, r1
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001244:	187b      	adds	r3, r7, r1
 8001246:	2203      	movs	r2, #3
 8001248:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800124a:	187b      	adds	r3, r7, r1
 800124c:	2206      	movs	r2, #6
 800124e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001250:	187b      	adds	r3, r7, r1
 8001252:	4a0a      	ldr	r2, [pc, #40]	@ (800127c <HAL_I2C_MspInit+0x88>)
 8001254:	0019      	movs	r1, r3
 8001256:	0010      	movs	r0, r2
 8001258:	f000 fef4 	bl	8002044 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800125c:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <HAL_I2C_MspInit+0x84>)
 800125e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001260:	4b05      	ldr	r3, [pc, #20]	@ (8001278 <HAL_I2C_MspInit+0x84>)
 8001262:	2180      	movs	r1, #128	@ 0x80
 8001264:	03c9      	lsls	r1, r1, #15
 8001266:	430a      	orrs	r2, r1
 8001268:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800126a:	46c0      	nop			@ (mov r8, r8)
 800126c:	46bd      	mov	sp, r7
 800126e:	b009      	add	sp, #36	@ 0x24
 8001270:	bd90      	pop	{r4, r7, pc}
 8001272:	46c0      	nop			@ (mov r8, r8)
 8001274:	40005800 	.word	0x40005800
 8001278:	40021000 	.word	0x40021000
 800127c:	50000400 	.word	0x50000400

08001280 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001280:	b590      	push	{r4, r7, lr}
 8001282:	b08b      	sub	sp, #44	@ 0x2c
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	2414      	movs	r4, #20
 800128a:	193b      	adds	r3, r7, r4
 800128c:	0018      	movs	r0, r3
 800128e:	2314      	movs	r3, #20
 8001290:	001a      	movs	r2, r3
 8001292:	2100      	movs	r1, #0
 8001294:	f006 f964 	bl	8007560 <memset>
  if(hspi->Instance==SPI1)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a28      	ldr	r2, [pc, #160]	@ (8001340 <HAL_SPI_MspInit+0xc0>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d14a      	bne.n	8001338 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012a2:	4b28      	ldr	r3, [pc, #160]	@ (8001344 <HAL_SPI_MspInit+0xc4>)
 80012a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012a6:	4b27      	ldr	r3, [pc, #156]	@ (8001344 <HAL_SPI_MspInit+0xc4>)
 80012a8:	2180      	movs	r1, #128	@ 0x80
 80012aa:	0149      	lsls	r1, r1, #5
 80012ac:	430a      	orrs	r2, r1
 80012ae:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b0:	4b24      	ldr	r3, [pc, #144]	@ (8001344 <HAL_SPI_MspInit+0xc4>)
 80012b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012b4:	4b23      	ldr	r3, [pc, #140]	@ (8001344 <HAL_SPI_MspInit+0xc4>)
 80012b6:	2101      	movs	r1, #1
 80012b8:	430a      	orrs	r2, r1
 80012ba:	62da      	str	r2, [r3, #44]	@ 0x2c
 80012bc:	4b21      	ldr	r3, [pc, #132]	@ (8001344 <HAL_SPI_MspInit+0xc4>)
 80012be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012c0:	2201      	movs	r2, #1
 80012c2:	4013      	ands	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
 80012c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001344 <HAL_SPI_MspInit+0xc4>)
 80012ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001344 <HAL_SPI_MspInit+0xc4>)
 80012ce:	2102      	movs	r1, #2
 80012d0:	430a      	orrs	r2, r1
 80012d2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80012d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001344 <HAL_SPI_MspInit+0xc4>)
 80012d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012d8:	2202      	movs	r2, #2
 80012da:	4013      	ands	r3, r2
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012e0:	193b      	adds	r3, r7, r4
 80012e2:	22c0      	movs	r2, #192	@ 0xc0
 80012e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e6:	193b      	adds	r3, r7, r4
 80012e8:	2202      	movs	r2, #2
 80012ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	193b      	adds	r3, r7, r4
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f2:	193b      	adds	r3, r7, r4
 80012f4:	2203      	movs	r2, #3
 80012f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80012f8:	193b      	adds	r3, r7, r4
 80012fa:	2200      	movs	r2, #0
 80012fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fe:	193a      	adds	r2, r7, r4
 8001300:	23a0      	movs	r3, #160	@ 0xa0
 8001302:	05db      	lsls	r3, r3, #23
 8001304:	0011      	movs	r1, r2
 8001306:	0018      	movs	r0, r3
 8001308:	f000 fe9c 	bl	8002044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800130c:	0021      	movs	r1, r4
 800130e:	187b      	adds	r3, r7, r1
 8001310:	2208      	movs	r2, #8
 8001312:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001314:	187b      	adds	r3, r7, r1
 8001316:	2202      	movs	r2, #2
 8001318:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	187b      	adds	r3, r7, r1
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001320:	187b      	adds	r3, r7, r1
 8001322:	2203      	movs	r2, #3
 8001324:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001326:	187b      	adds	r3, r7, r1
 8001328:	2200      	movs	r2, #0
 800132a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132c:	187b      	adds	r3, r7, r1
 800132e:	4a06      	ldr	r2, [pc, #24]	@ (8001348 <HAL_SPI_MspInit+0xc8>)
 8001330:	0019      	movs	r1, r3
 8001332:	0010      	movs	r0, r2
 8001334:	f000 fe86 	bl	8002044 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001338:	46c0      	nop			@ (mov r8, r8)
 800133a:	46bd      	mov	sp, r7
 800133c:	b00b      	add	sp, #44	@ 0x2c
 800133e:	bd90      	pop	{r4, r7, pc}
 8001340:	40013000 	.word	0x40013000
 8001344:	40021000 	.word	0x40021000
 8001348:	50000400 	.word	0x50000400

0800134c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800134c:	b590      	push	{r4, r7, lr}
 800134e:	b089      	sub	sp, #36	@ 0x24
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	240c      	movs	r4, #12
 8001356:	193b      	adds	r3, r7, r4
 8001358:	0018      	movs	r0, r3
 800135a:	2314      	movs	r3, #20
 800135c:	001a      	movs	r2, r3
 800135e:	2100      	movs	r1, #0
 8001360:	f006 f8fe 	bl	8007560 <memset>
  if(huart->Instance==USART2)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a18      	ldr	r2, [pc, #96]	@ (80013cc <HAL_UART_MspInit+0x80>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d129      	bne.n	80013c2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800136e:	4b18      	ldr	r3, [pc, #96]	@ (80013d0 <HAL_UART_MspInit+0x84>)
 8001370:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001372:	4b17      	ldr	r3, [pc, #92]	@ (80013d0 <HAL_UART_MspInit+0x84>)
 8001374:	2180      	movs	r1, #128	@ 0x80
 8001376:	0289      	lsls	r1, r1, #10
 8001378:	430a      	orrs	r2, r1
 800137a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137c:	4b14      	ldr	r3, [pc, #80]	@ (80013d0 <HAL_UART_MspInit+0x84>)
 800137e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001380:	4b13      	ldr	r3, [pc, #76]	@ (80013d0 <HAL_UART_MspInit+0x84>)
 8001382:	2101      	movs	r1, #1
 8001384:	430a      	orrs	r2, r1
 8001386:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001388:	4b11      	ldr	r3, [pc, #68]	@ (80013d0 <HAL_UART_MspInit+0x84>)
 800138a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800138c:	2201      	movs	r2, #1
 800138e:	4013      	ands	r3, r2
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001394:	0021      	movs	r1, r4
 8001396:	187b      	adds	r3, r7, r1
 8001398:	220c      	movs	r2, #12
 800139a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139c:	187b      	adds	r3, r7, r1
 800139e:	2202      	movs	r2, #2
 80013a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	187b      	adds	r3, r7, r1
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a8:	187b      	adds	r3, r7, r1
 80013aa:	2203      	movs	r2, #3
 80013ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80013ae:	187b      	adds	r3, r7, r1
 80013b0:	2204      	movs	r2, #4
 80013b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b4:	187a      	adds	r2, r7, r1
 80013b6:	23a0      	movs	r3, #160	@ 0xa0
 80013b8:	05db      	lsls	r3, r3, #23
 80013ba:	0011      	movs	r1, r2
 80013bc:	0018      	movs	r0, r3
 80013be:	f000 fe41 	bl	8002044 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013c2:	46c0      	nop			@ (mov r8, r8)
 80013c4:	46bd      	mov	sp, r7
 80013c6:	b009      	add	sp, #36	@ 0x24
 80013c8:	bd90      	pop	{r4, r7, pc}
 80013ca:	46c0      	nop			@ (mov r8, r8)
 80013cc:	40004400 	.word	0x40004400
 80013d0:	40021000 	.word	0x40021000

080013d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013d8:	46c0      	nop			@ (mov r8, r8)
 80013da:	e7fd      	b.n	80013d8 <NMI_Handler+0x4>

080013dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e0:	46c0      	nop			@ (mov r8, r8)
 80013e2:	e7fd      	b.n	80013e0 <HardFault_Handler+0x4>

080013e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80013e8:	46c0      	nop			@ (mov r8, r8)
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013f2:	46c0      	nop			@ (mov r8, r8)
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013fc:	f000 fd2e 	bl	8001e5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001400:	46c0      	nop			@ (mov r8, r8)
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	af00      	add	r7, sp, #0
	return 1;
 800140a:	2301      	movs	r3, #1
}
 800140c:	0018      	movs	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <_kill>:

int _kill(int pid, int sig)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
 800141a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800141c:	f006 f924 	bl	8007668 <__errno>
 8001420:	0003      	movs	r3, r0
 8001422:	2216      	movs	r2, #22
 8001424:	601a      	str	r2, [r3, #0]
	return -1;
 8001426:	2301      	movs	r3, #1
 8001428:	425b      	negs	r3, r3
}
 800142a:	0018      	movs	r0, r3
 800142c:	46bd      	mov	sp, r7
 800142e:	b002      	add	sp, #8
 8001430:	bd80      	pop	{r7, pc}

08001432 <_exit>:

void _exit (int status)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b082      	sub	sp, #8
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800143a:	2301      	movs	r3, #1
 800143c:	425a      	negs	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	0011      	movs	r1, r2
 8001442:	0018      	movs	r0, r3
 8001444:	f7ff ffe5 	bl	8001412 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001448:	46c0      	nop			@ (mov r8, r8)
 800144a:	e7fd      	b.n	8001448 <_exit+0x16>

0800144c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
 800145c:	e00a      	b.n	8001474 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800145e:	e000      	b.n	8001462 <_read+0x16>
 8001460:	bf00      	nop
 8001462:	0001      	movs	r1, r0
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	1c5a      	adds	r2, r3, #1
 8001468:	60ba      	str	r2, [r7, #8]
 800146a:	b2ca      	uxtb	r2, r1
 800146c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	3301      	adds	r3, #1
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	697a      	ldr	r2, [r7, #20]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	429a      	cmp	r2, r3
 800147a:	dbf0      	blt.n	800145e <_read+0x12>
	}

return len;
 800147c:	687b      	ldr	r3, [r7, #4]
}
 800147e:	0018      	movs	r0, r3
 8001480:	46bd      	mov	sp, r7
 8001482:	b006      	add	sp, #24
 8001484:	bd80      	pop	{r7, pc}

08001486 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b086      	sub	sp, #24
 800148a:	af00      	add	r7, sp, #0
 800148c:	60f8      	str	r0, [r7, #12]
 800148e:	60b9      	str	r1, [r7, #8]
 8001490:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
 8001496:	e009      	b.n	80014ac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	1c5a      	adds	r2, r3, #1
 800149c:	60ba      	str	r2, [r7, #8]
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	0018      	movs	r0, r3
 80014a2:	e000      	b.n	80014a6 <_write+0x20>
 80014a4:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	3301      	adds	r3, #1
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	697a      	ldr	r2, [r7, #20]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	dbf1      	blt.n	8001498 <_write+0x12>
	}
	return len;
 80014b4:	687b      	ldr	r3, [r7, #4]
}
 80014b6:	0018      	movs	r0, r3
 80014b8:	46bd      	mov	sp, r7
 80014ba:	b006      	add	sp, #24
 80014bc:	bd80      	pop	{r7, pc}

080014be <_close>:

int _close(int file)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
	return -1;
 80014c6:	2301      	movs	r3, #1
 80014c8:	425b      	negs	r3, r3
}
 80014ca:	0018      	movs	r0, r3
 80014cc:	46bd      	mov	sp, r7
 80014ce:	b002      	add	sp, #8
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
 80014da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	2280      	movs	r2, #128	@ 0x80
 80014e0:	0192      	lsls	r2, r2, #6
 80014e2:	605a      	str	r2, [r3, #4]
	return 0;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	0018      	movs	r0, r3
 80014e8:	46bd      	mov	sp, r7
 80014ea:	b002      	add	sp, #8
 80014ec:	bd80      	pop	{r7, pc}

080014ee <_isatty>:

int _isatty(int file)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
	return 1;
 80014f6:	2301      	movs	r3, #1
}
 80014f8:	0018      	movs	r0, r3
 80014fa:	46bd      	mov	sp, r7
 80014fc:	b002      	add	sp, #8
 80014fe:	bd80      	pop	{r7, pc}

08001500 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
	return 0;
 800150c:	2300      	movs	r3, #0
}
 800150e:	0018      	movs	r0, r3
 8001510:	46bd      	mov	sp, r7
 8001512:	b004      	add	sp, #16
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001520:	4a14      	ldr	r2, [pc, #80]	@ (8001574 <_sbrk+0x5c>)
 8001522:	4b15      	ldr	r3, [pc, #84]	@ (8001578 <_sbrk+0x60>)
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800152c:	4b13      	ldr	r3, [pc, #76]	@ (800157c <_sbrk+0x64>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d102      	bne.n	800153a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001534:	4b11      	ldr	r3, [pc, #68]	@ (800157c <_sbrk+0x64>)
 8001536:	4a12      	ldr	r2, [pc, #72]	@ (8001580 <_sbrk+0x68>)
 8001538:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800153a:	4b10      	ldr	r3, [pc, #64]	@ (800157c <_sbrk+0x64>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	18d3      	adds	r3, r2, r3
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	429a      	cmp	r2, r3
 8001546:	d207      	bcs.n	8001558 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001548:	f006 f88e 	bl	8007668 <__errno>
 800154c:	0003      	movs	r3, r0
 800154e:	220c      	movs	r2, #12
 8001550:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001552:	2301      	movs	r3, #1
 8001554:	425b      	negs	r3, r3
 8001556:	e009      	b.n	800156c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001558:	4b08      	ldr	r3, [pc, #32]	@ (800157c <_sbrk+0x64>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800155e:	4b07      	ldr	r3, [pc, #28]	@ (800157c <_sbrk+0x64>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	18d2      	adds	r2, r2, r3
 8001566:	4b05      	ldr	r3, [pc, #20]	@ (800157c <_sbrk+0x64>)
 8001568:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800156a:	68fb      	ldr	r3, [r7, #12]
}
 800156c:	0018      	movs	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	b006      	add	sp, #24
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20002000 	.word	0x20002000
 8001578:	00000400 	.word	0x00000400
 800157c:	2000027c 	.word	0x2000027c
 8001580:	20000460 	.word	0x20000460

08001584 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001588:	46c0      	nop			@ (mov r8, r8)
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
	...

08001590 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8001590:	480d      	ldr	r0, [pc, #52]	@ (80015c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001592:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001594:	f7ff fff6 	bl	8001584 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001598:	480c      	ldr	r0, [pc, #48]	@ (80015cc <LoopForever+0x6>)
  ldr r1, =_edata
 800159a:	490d      	ldr	r1, [pc, #52]	@ (80015d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800159c:	4a0d      	ldr	r2, [pc, #52]	@ (80015d4 <LoopForever+0xe>)
  movs r3, #0
 800159e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015a0:	e002      	b.n	80015a8 <LoopCopyDataInit>

080015a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015a6:	3304      	adds	r3, #4

080015a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015ac:	d3f9      	bcc.n	80015a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ae:	4a0a      	ldr	r2, [pc, #40]	@ (80015d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015b0:	4c0a      	ldr	r4, [pc, #40]	@ (80015dc <LoopForever+0x16>)
  movs r3, #0
 80015b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015b4:	e001      	b.n	80015ba <LoopFillZerobss>

080015b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b8:	3204      	adds	r2, #4

080015ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015bc:	d3fb      	bcc.n	80015b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015be:	f006 f859 	bl	8007674 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015c2:	f7ff f865 	bl	8000690 <main>

080015c6 <LoopForever>:

LoopForever:
    b LoopForever
 80015c6:	e7fe      	b.n	80015c6 <LoopForever>
  ldr   r0, =_estack
 80015c8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80015cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015d0:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80015d4:	0800d2cc 	.word	0x0800d2cc
  ldr r2, =_sbss
 80015d8:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80015dc:	20000460 	.word	0x20000460

080015e0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015e0:	e7fe      	b.n	80015e0 <ADC1_COMP_IRQHandler>
	...

080015e4 <setSPI_Size>:
 * @brief Sets SPI interface word size (0=8bit, 1=16 bit)
 * @param none
 * @return none
 */
static void setSPI_Size(int8_t size)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	0002      	movs	r2, r0
 80015ec:	1dfb      	adds	r3, r7, #7
 80015ee:	701a      	strb	r2, [r3, #0]
  if(config.spi_sz!=size){
 80015f0:	4b1a      	ldr	r3, [pc, #104]	@ (800165c <setSPI_Size+0x78>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	b25b      	sxtb	r3, r3
 80015f6:	1dfa      	adds	r2, r7, #7
 80015f8:	7812      	ldrb	r2, [r2, #0]
 80015fa:	b252      	sxtb	r2, r2
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d029      	beq.n	8001654 <setSPI_Size+0x70>
    __HAL_SPI_DISABLE(&LCD_HANDLE);
 8001600:	4b17      	ldr	r3, [pc, #92]	@ (8001660 <setSPI_Size+0x7c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	4b16      	ldr	r3, [pc, #88]	@ (8001660 <setSPI_Size+0x7c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2140      	movs	r1, #64	@ 0x40
 800160c:	438a      	bics	r2, r1
 800160e:	601a      	str	r2, [r3, #0]
    config.spi_sz=size;
 8001610:	4b12      	ldr	r3, [pc, #72]	@ (800165c <setSPI_Size+0x78>)
 8001612:	1dfa      	adds	r2, r7, #7
 8001614:	7812      	ldrb	r2, [r2, #0]
 8001616:	701a      	strb	r2, [r3, #0]
    if(size==mode_16bit){
 8001618:	1dfb      	adds	r3, r7, #7
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	b25b      	sxtb	r3, r3
 800161e:	2b01      	cmp	r3, #1
 8001620:	d10d      	bne.n	800163e <setSPI_Size+0x5a>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_16BIT;
 8001622:	4b0f      	ldr	r3, [pc, #60]	@ (8001660 <setSPI_Size+0x7c>)
 8001624:	2280      	movs	r2, #128	@ 0x80
 8001626:	0112      	lsls	r2, r2, #4
 8001628:	60da      	str	r2, [r3, #12]
      LCD_HANDLE.Instance->CR1 |= SPI_CR1_DFF;
 800162a:	4b0d      	ldr	r3, [pc, #52]	@ (8001660 <setSPI_Size+0x7c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4b0b      	ldr	r3, [pc, #44]	@ (8001660 <setSPI_Size+0x7c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2180      	movs	r1, #128	@ 0x80
 8001636:	0109      	lsls	r1, r1, #4
 8001638:	430a      	orrs	r2, r1
 800163a:	601a      	str	r2, [r3, #0]
    else{
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
      LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_DFF);
    }
  }
}
 800163c:	e00a      	b.n	8001654 <setSPI_Size+0x70>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 800163e:	4b08      	ldr	r3, [pc, #32]	@ (8001660 <setSPI_Size+0x7c>)
 8001640:	2200      	movs	r2, #0
 8001642:	60da      	str	r2, [r3, #12]
      LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_DFF);
 8001644:	4b06      	ldr	r3, [pc, #24]	@ (8001660 <setSPI_Size+0x7c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	4b05      	ldr	r3, [pc, #20]	@ (8001660 <setSPI_Size+0x7c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4905      	ldr	r1, [pc, #20]	@ (8001664 <setSPI_Size+0x80>)
 8001650:	400a      	ands	r2, r1
 8001652:	601a      	str	r2, [r3, #0]
}
 8001654:	46c0      	nop			@ (mov r8, r8)
 8001656:	46bd      	mov	sp, r7
 8001658:	b002      	add	sp, #8
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000018 	.word	0x20000018
 8001660:	200000fc 	.word	0x200000fc
 8001664:	fffff7ff 	.word	0xfffff7ff

08001668 <LCD_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void LCD_WriteCommand(uint8_t *cmd, uint8_t argc)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	000a      	movs	r2, r1
 8001672:	1cfb      	adds	r3, r7, #3
 8001674:	701a      	strb	r2, [r3, #0]
  setSPI_Size(mode_8bit);
 8001676:	2000      	movs	r0, #0
 8001678:	f7ff ffb4 	bl	80015e4 <setSPI_Size>
  LCD_DC_Clr();
 800167c:	2380      	movs	r3, #128	@ 0x80
 800167e:	0099      	lsls	r1, r3, #2
 8001680:	23a0      	movs	r3, #160	@ 0xa0
 8001682:	05db      	lsls	r3, r3, #23
 8001684:	2200      	movs	r2, #0
 8001686:	0018      	movs	r0, r3
 8001688:	f000 fe6f 	bl	800236a <HAL_GPIO_WritePin>
#ifdef LCD_CS
  LCD_CS_Clr();
 800168c:	4b16      	ldr	r3, [pc, #88]	@ (80016e8 <LCD_WriteCommand+0x80>)
 800168e:	2200      	movs	r2, #0
 8001690:	2140      	movs	r1, #64	@ 0x40
 8001692:	0018      	movs	r0, r3
 8001694:	f000 fe69 	bl	800236a <HAL_GPIO_WritePin>
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, cmd, 1, HAL_MAX_DELAY);
 8001698:	2301      	movs	r3, #1
 800169a:	425b      	negs	r3, r3
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	4813      	ldr	r0, [pc, #76]	@ (80016ec <LCD_WriteCommand+0x84>)
 80016a0:	2201      	movs	r2, #1
 80016a2:	f002 fc29 	bl	8003ef8 <HAL_SPI_Transmit>
  if(argc){
 80016a6:	1cfb      	adds	r3, r7, #3
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d011      	beq.n	80016d2 <LCD_WriteCommand+0x6a>
    LCD_DC_Set();
 80016ae:	2380      	movs	r3, #128	@ 0x80
 80016b0:	0099      	lsls	r1, r3, #2
 80016b2:	23a0      	movs	r3, #160	@ 0xa0
 80016b4:	05db      	lsls	r3, r3, #23
 80016b6:	2201      	movs	r2, #1
 80016b8:	0018      	movs	r0, r3
 80016ba:	f000 fe56 	bl	800236a <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&LCD_HANDLE, (cmd+1), argc, HAL_MAX_DELAY);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	1c59      	adds	r1, r3, #1
 80016c2:	1cfb      	adds	r3, r7, #3
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	2301      	movs	r3, #1
 80016ca:	425b      	negs	r3, r3
 80016cc:	4807      	ldr	r0, [pc, #28]	@ (80016ec <LCD_WriteCommand+0x84>)
 80016ce:	f002 fc13 	bl	8003ef8 <HAL_SPI_Transmit>
  }
#ifdef LCD_CS
  LCD_CS_Set();
 80016d2:	4b05      	ldr	r3, [pc, #20]	@ (80016e8 <LCD_WriteCommand+0x80>)
 80016d4:	2201      	movs	r2, #1
 80016d6:	2140      	movs	r1, #64	@ 0x40
 80016d8:	0018      	movs	r0, r3
 80016da:	f000 fe46 	bl	800236a <HAL_GPIO_WritePin>
#endif
}
 80016de:	46c0      	nop			@ (mov r8, r8)
 80016e0:	46bd      	mov	sp, r7
 80016e2:	b002      	add	sp, #8
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	46c0      	nop			@ (mov r8, r8)
 80016e8:	50000400 	.word	0x50000400
 80016ec:	200000fc 	.word	0x200000fc

080016f0 <LCD_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void LCD_WriteData(uint8_t *buff, size_t buff_size)
{
 80016f0:	b5b0      	push	{r4, r5, r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  LCD_DC_Set();
 80016fa:	2380      	movs	r3, #128	@ 0x80
 80016fc:	0099      	lsls	r1, r3, #2
 80016fe:	23a0      	movs	r3, #160	@ 0xa0
 8001700:	05db      	lsls	r3, r3, #23
 8001702:	2201      	movs	r2, #1
 8001704:	0018      	movs	r0, r3
 8001706:	f000 fe30 	bl	800236a <HAL_GPIO_WritePin>
#ifdef LCD_CS
  LCD_CS_Clr();
 800170a:	4b19      	ldr	r3, [pc, #100]	@ (8001770 <LCD_WriteData+0x80>)
 800170c:	2200      	movs	r2, #0
 800170e:	2140      	movs	r1, #64	@ 0x40
 8001710:	0018      	movs	r0, r3
 8001712:	f000 fe2a 	bl	800236a <HAL_GPIO_WritePin>
#endif

  // split data in small chunks because HAL can't send more than 64K at once
  while (buff_size > 0) {
 8001716:	e01d      	b.n	8001754 <LCD_WriteData+0x64>
    uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	2280      	movs	r2, #128	@ 0x80
 800171c:	0252      	lsls	r2, r2, #9
 800171e:	4293      	cmp	r3, r2
 8001720:	d300      	bcc.n	8001724 <LCD_WriteData+0x34>
 8001722:	4b14      	ldr	r3, [pc, #80]	@ (8001774 <LCD_WriteData+0x84>)
 8001724:	210e      	movs	r1, #14
 8001726:	187a      	adds	r2, r7, r1
 8001728:	8013      	strh	r3, [r2, #0]
        buff += chunk_size;
      else
        buff += chunk_size*2;
    }
#else
    HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
 800172a:	2301      	movs	r3, #1
 800172c:	425c      	negs	r4, r3
 800172e:	000d      	movs	r5, r1
 8001730:	187b      	adds	r3, r7, r1
 8001732:	881a      	ldrh	r2, [r3, #0]
 8001734:	6879      	ldr	r1, [r7, #4]
 8001736:	4810      	ldr	r0, [pc, #64]	@ (8001778 <LCD_WriteData+0x88>)
 8001738:	0023      	movs	r3, r4
 800173a:	f002 fbdd 	bl	8003ef8 <HAL_SPI_Transmit>
    buff += chunk_size;
 800173e:	0029      	movs	r1, r5
 8001740:	187b      	adds	r3, r7, r1
 8001742:	881b      	ldrh	r3, [r3, #0]
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	18d3      	adds	r3, r2, r3
 8001748:	607b      	str	r3, [r7, #4]
#endif
    buff_size -= chunk_size;
 800174a:	187b      	adds	r3, r7, r1
 800174c:	881b      	ldrh	r3, [r3, #0]
 800174e:	683a      	ldr	r2, [r7, #0]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	603b      	str	r3, [r7, #0]
  while (buff_size > 0) {
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1de      	bne.n	8001718 <LCD_WriteData+0x28>
  }

#ifdef LCD_CS
  LCD_CS_Set();
 800175a:	4b05      	ldr	r3, [pc, #20]	@ (8001770 <LCD_WriteData+0x80>)
 800175c:	2201      	movs	r2, #1
 800175e:	2140      	movs	r1, #64	@ 0x40
 8001760:	0018      	movs	r0, r3
 8001762:	f000 fe02 	bl	800236a <HAL_GPIO_WritePin>
#endif
}
 8001766:	46c0      	nop			@ (mov r8, r8)
 8001768:	46bd      	mov	sp, r7
 800176a:	b004      	add	sp, #16
 800176c:	bdb0      	pop	{r4, r5, r7, pc}
 800176e:	46c0      	nop			@ (mov r8, r8)
 8001770:	50000400 	.word	0x50000400
 8001774:	0000ffff 	.word	0x0000ffff
 8001778:	200000fc 	.word	0x200000fc

0800177c <LCD_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void LCD_SetAddressWindow(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 800177c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800177e:	b08b      	sub	sp, #44	@ 0x2c
 8001780:	af00      	add	r7, sp, #0
 8001782:	0005      	movs	r5, r0
 8001784:	000c      	movs	r4, r1
 8001786:	0010      	movs	r0, r2
 8001788:	0019      	movs	r1, r3
 800178a:	1dbb      	adds	r3, r7, #6
 800178c:	1c2a      	adds	r2, r5, #0
 800178e:	801a      	strh	r2, [r3, #0]
 8001790:	1d3b      	adds	r3, r7, #4
 8001792:	1c22      	adds	r2, r4, #0
 8001794:	801a      	strh	r2, [r3, #0]
 8001796:	1cbb      	adds	r3, r7, #2
 8001798:	1c02      	adds	r2, r0, #0
 800179a:	801a      	strh	r2, [r3, #0]
 800179c:	003b      	movs	r3, r7
 800179e:	1c0a      	adds	r2, r1, #0
 80017a0:	801a      	strh	r2, [r3, #0]
  int16_t x_start = x0 + LCD_X_SHIFT, x_end = x1 + LCD_X_SHIFT;
 80017a2:	2026      	movs	r0, #38	@ 0x26
 80017a4:	183b      	adds	r3, r7, r0
 80017a6:	1dba      	adds	r2, r7, #6
 80017a8:	8812      	ldrh	r2, [r2, #0]
 80017aa:	801a      	strh	r2, [r3, #0]
 80017ac:	2424      	movs	r4, #36	@ 0x24
 80017ae:	193b      	adds	r3, r7, r4
 80017b0:	1cba      	adds	r2, r7, #2
 80017b2:	8812      	ldrh	r2, [r2, #0]
 80017b4:	801a      	strh	r2, [r3, #0]
  int16_t y_start = y0 + LCD_Y_SHIFT, y_end = y1 + LCD_Y_SHIFT;
 80017b6:	2522      	movs	r5, #34	@ 0x22
 80017b8:	197b      	adds	r3, r7, r5
 80017ba:	1d3a      	adds	r2, r7, #4
 80017bc:	8812      	ldrh	r2, [r2, #0]
 80017be:	801a      	strh	r2, [r3, #0]
 80017c0:	2620      	movs	r6, #32
 80017c2:	19bb      	adds	r3, r7, r6
 80017c4:	003a      	movs	r2, r7
 80017c6:	8812      	ldrh	r2, [r2, #0]
 80017c8:	801a      	strh	r2, [r3, #0]

  /* Column Address set */
  {
    uint8_t cmd[] = { CMD_CASET, x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF };
 80017ca:	2118      	movs	r1, #24
 80017cc:	187b      	adds	r3, r7, r1
 80017ce:	222a      	movs	r2, #42	@ 0x2a
 80017d0:	701a      	strb	r2, [r3, #0]
 80017d2:	183b      	adds	r3, r7, r0
 80017d4:	2200      	movs	r2, #0
 80017d6:	5e9b      	ldrsh	r3, [r3, r2]
 80017d8:	121b      	asrs	r3, r3, #8
 80017da:	b21b      	sxth	r3, r3
 80017dc:	b2da      	uxtb	r2, r3
 80017de:	187b      	adds	r3, r7, r1
 80017e0:	705a      	strb	r2, [r3, #1]
 80017e2:	183b      	adds	r3, r7, r0
 80017e4:	881b      	ldrh	r3, [r3, #0]
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	187b      	adds	r3, r7, r1
 80017ea:	709a      	strb	r2, [r3, #2]
 80017ec:	193b      	adds	r3, r7, r4
 80017ee:	2200      	movs	r2, #0
 80017f0:	5e9b      	ldrsh	r3, [r3, r2]
 80017f2:	121b      	asrs	r3, r3, #8
 80017f4:	b21b      	sxth	r3, r3
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	187b      	adds	r3, r7, r1
 80017fa:	70da      	strb	r2, [r3, #3]
 80017fc:	193b      	adds	r3, r7, r4
 80017fe:	881b      	ldrh	r3, [r3, #0]
 8001800:	b2da      	uxtb	r2, r3
 8001802:	187b      	adds	r3, r7, r1
 8001804:	711a      	strb	r2, [r3, #4]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8001806:	187b      	adds	r3, r7, r1
 8001808:	2104      	movs	r1, #4
 800180a:	0018      	movs	r0, r3
 800180c:	f7ff ff2c 	bl	8001668 <LCD_WriteCommand>
  }
  /* Row Address set */
  {
    uint8_t cmd[] = { CMD_RASET, y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF };
 8001810:	2110      	movs	r1, #16
 8001812:	187b      	adds	r3, r7, r1
 8001814:	222b      	movs	r2, #43	@ 0x2b
 8001816:	701a      	strb	r2, [r3, #0]
 8001818:	197b      	adds	r3, r7, r5
 800181a:	2200      	movs	r2, #0
 800181c:	5e9b      	ldrsh	r3, [r3, r2]
 800181e:	121b      	asrs	r3, r3, #8
 8001820:	b21b      	sxth	r3, r3
 8001822:	b2da      	uxtb	r2, r3
 8001824:	187b      	adds	r3, r7, r1
 8001826:	705a      	strb	r2, [r3, #1]
 8001828:	197b      	adds	r3, r7, r5
 800182a:	881b      	ldrh	r3, [r3, #0]
 800182c:	b2da      	uxtb	r2, r3
 800182e:	187b      	adds	r3, r7, r1
 8001830:	709a      	strb	r2, [r3, #2]
 8001832:	19bb      	adds	r3, r7, r6
 8001834:	2200      	movs	r2, #0
 8001836:	5e9b      	ldrsh	r3, [r3, r2]
 8001838:	121b      	asrs	r3, r3, #8
 800183a:	b21b      	sxth	r3, r3
 800183c:	b2da      	uxtb	r2, r3
 800183e:	187b      	adds	r3, r7, r1
 8001840:	70da      	strb	r2, [r3, #3]
 8001842:	19bb      	adds	r3, r7, r6
 8001844:	881b      	ldrh	r3, [r3, #0]
 8001846:	b2da      	uxtb	r2, r3
 8001848:	187b      	adds	r3, r7, r1
 800184a:	711a      	strb	r2, [r3, #4]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 800184c:	187b      	adds	r3, r7, r1
 800184e:	2104      	movs	r1, #4
 8001850:	0018      	movs	r0, r3
 8001852:	f7ff ff09 	bl	8001668 <LCD_WriteCommand>
  }
  {
  /* Write to RAM */
    uint8_t cmd[] = { CMD_RAMWR };
 8001856:	210c      	movs	r1, #12
 8001858:	187b      	adds	r3, r7, r1
 800185a:	4a06      	ldr	r2, [pc, #24]	@ (8001874 <LCD_SetAddressWindow+0xf8>)
 800185c:	7812      	ldrb	r2, [r2, #0]
 800185e:	701a      	strb	r2, [r3, #0]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8001860:	187b      	adds	r3, r7, r1
 8001862:	2100      	movs	r1, #0
 8001864:	0018      	movs	r0, r3
 8001866:	f7ff feff 	bl	8001668 <LCD_WriteCommand>
  }
}
 800186a:	46c0      	nop			@ (mov r8, r8)
 800186c:	46bd      	mov	sp, r7
 800186e:	b00b      	add	sp, #44	@ 0x2c
 8001870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001872:	46c0      	nop			@ (mov r8, r8)
 8001874:	08008864 	.word	0x08008864

08001878 <LCD_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color)
{
 8001878:	b5b0      	push	{r4, r5, r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	0004      	movs	r4, r0
 8001880:	0008      	movs	r0, r1
 8001882:	0011      	movs	r1, r2
 8001884:	1dbb      	adds	r3, r7, #6
 8001886:	1c22      	adds	r2, r4, #0
 8001888:	801a      	strh	r2, [r3, #0]
 800188a:	1d3b      	adds	r3, r7, #4
 800188c:	1c02      	adds	r2, r0, #0
 800188e:	801a      	strh	r2, [r3, #0]
 8001890:	1cbb      	adds	r3, r7, #2
 8001892:	1c0a      	adds	r2, r1, #0
 8001894:	801a      	strh	r2, [r3, #0]
  if ((x < 0) || (x > LCD_WIDTH-1) || (y < 0) || (y > LCD_HEIGHT-1))
 8001896:	1dbb      	adds	r3, r7, #6
 8001898:	2200      	movs	r2, #0
 800189a:	5e9b      	ldrsh	r3, [r3, r2]
 800189c:	2b00      	cmp	r3, #0
 800189e:	db48      	blt.n	8001932 <LCD_DrawPixel+0xba>
 80018a0:	1dbb      	adds	r3, r7, #6
 80018a2:	2200      	movs	r2, #0
 80018a4:	5e9b      	ldrsh	r3, [r3, r2]
 80018a6:	2bef      	cmp	r3, #239	@ 0xef
 80018a8:	dc43      	bgt.n	8001932 <LCD_DrawPixel+0xba>
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	2200      	movs	r2, #0
 80018ae:	5e9b      	ldrsh	r3, [r3, r2]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	db3e      	blt.n	8001932 <LCD_DrawPixel+0xba>
 80018b4:	1d3b      	adds	r3, r7, #4
 80018b6:	2200      	movs	r2, #0
 80018b8:	5e9a      	ldrsh	r2, [r3, r2]
 80018ba:	23a0      	movs	r3, #160	@ 0xa0
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	429a      	cmp	r2, r3
 80018c0:	da37      	bge.n	8001932 <LCD_DrawPixel+0xba>
    return;

  uint8_t data[2] = {color >> 8, color & 0xFF};
 80018c2:	1cbb      	adds	r3, r7, #2
 80018c4:	881b      	ldrh	r3, [r3, #0]
 80018c6:	0a1b      	lsrs	r3, r3, #8
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	250c      	movs	r5, #12
 80018ce:	197b      	adds	r3, r7, r5
 80018d0:	701a      	strb	r2, [r3, #0]
 80018d2:	1cbb      	adds	r3, r7, #2
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	197b      	adds	r3, r7, r5
 80018da:	705a      	strb	r2, [r3, #1]
  LCD_SetAddressWindow(x, y, x, y);
 80018dc:	1d3b      	adds	r3, r7, #4
 80018de:	2400      	movs	r4, #0
 80018e0:	5f1c      	ldrsh	r4, [r3, r4]
 80018e2:	1dbb      	adds	r3, r7, #6
 80018e4:	2200      	movs	r2, #0
 80018e6:	5e9a      	ldrsh	r2, [r3, r2]
 80018e8:	1d3b      	adds	r3, r7, #4
 80018ea:	2100      	movs	r1, #0
 80018ec:	5e59      	ldrsh	r1, [r3, r1]
 80018ee:	1dbb      	adds	r3, r7, #6
 80018f0:	2000      	movs	r0, #0
 80018f2:	5e18      	ldrsh	r0, [r3, r0]
 80018f4:	0023      	movs	r3, r4
 80018f6:	f7ff ff41 	bl	800177c <LCD_SetAddressWindow>

  LCD_DC_Set();
 80018fa:	2380      	movs	r3, #128	@ 0x80
 80018fc:	0099      	lsls	r1, r3, #2
 80018fe:	23a0      	movs	r3, #160	@ 0xa0
 8001900:	05db      	lsls	r3, r3, #23
 8001902:	2201      	movs	r2, #1
 8001904:	0018      	movs	r0, r3
 8001906:	f000 fd30 	bl	800236a <HAL_GPIO_WritePin>
#ifdef LCD_CS
  LCD_CS_Clr();
 800190a:	4b0c      	ldr	r3, [pc, #48]	@ (800193c <LCD_DrawPixel+0xc4>)
 800190c:	2200      	movs	r2, #0
 800190e:	2140      	movs	r1, #64	@ 0x40
 8001910:	0018      	movs	r0, r3
 8001912:	f000 fd2a 	bl	800236a <HAL_GPIO_WritePin>
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, data, sizeof(data), HAL_MAX_DELAY);
 8001916:	2301      	movs	r3, #1
 8001918:	425b      	negs	r3, r3
 800191a:	1979      	adds	r1, r7, r5
 800191c:	4808      	ldr	r0, [pc, #32]	@ (8001940 <LCD_DrawPixel+0xc8>)
 800191e:	2202      	movs	r2, #2
 8001920:	f002 faea 	bl	8003ef8 <HAL_SPI_Transmit>
#ifdef LCD_CS
  LCD_CS_Set();
 8001924:	4b05      	ldr	r3, [pc, #20]	@ (800193c <LCD_DrawPixel+0xc4>)
 8001926:	2201      	movs	r2, #1
 8001928:	2140      	movs	r1, #64	@ 0x40
 800192a:	0018      	movs	r0, r3
 800192c:	f000 fd1d 	bl	800236a <HAL_GPIO_WritePin>
 8001930:	e000      	b.n	8001934 <LCD_DrawPixel+0xbc>
    return;
 8001932:	46c0      	nop			@ (mov r8, r8)
#endif
}
 8001934:	46bd      	mov	sp, r7
 8001936:	b004      	add	sp, #16
 8001938:	bdb0      	pop	{r4, r5, r7, pc}
 800193a:	46c0      	nop			@ (mov r8, r8)
 800193c:	50000400 	.word	0x50000400
 8001940:	200000fc 	.word	0x200000fc

08001944 <LCD_FillPixels>:
  fb[x+(y*LCD_WIDTH)] = color;
}
#endif

void LCD_FillPixels(uint32_t pixels, uint16_t color)
{
 8001944:	b590      	push	{r4, r7, lr}
 8001946:	b0a5      	sub	sp, #148	@ 0x94
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	000a      	movs	r2, r1
 800194e:	1cbb      	adds	r3, r7, #2
 8001950:	801a      	strh	r2, [r3, #0]
  if(pixels>DMA_min_Sz)
    LCD_WriteData((uint8_t*)&color, pixels);
  else{
#endif
    uint16_t fill[64];                                // Use a 64 pixel (128Byte) buffer for faster filling
    for(uint8_t t=0;t<(pixels<64 ? pixels : 64);t++){ // Fill the buffer with the color
 8001952:	238f      	movs	r3, #143	@ 0x8f
 8001954:	18fb      	adds	r3, r7, r3
 8001956:	2200      	movs	r2, #0
 8001958:	701a      	strb	r2, [r3, #0]
 800195a:	e00d      	b.n	8001978 <LCD_FillPixels+0x34>
      fill[t]=color;
 800195c:	208f      	movs	r0, #143	@ 0x8f
 800195e:	183b      	adds	r3, r7, r0
 8001960:	781a      	ldrb	r2, [r3, #0]
 8001962:	230c      	movs	r3, #12
 8001964:	18fb      	adds	r3, r7, r3
 8001966:	0052      	lsls	r2, r2, #1
 8001968:	1cb9      	adds	r1, r7, #2
 800196a:	8809      	ldrh	r1, [r1, #0]
 800196c:	52d1      	strh	r1, [r2, r3]
    for(uint8_t t=0;t<(pixels<64 ? pixels : 64);t++){ // Fill the buffer with the color
 800196e:	183b      	adds	r3, r7, r0
 8001970:	781a      	ldrb	r2, [r3, #0]
 8001972:	183b      	adds	r3, r7, r0
 8001974:	3201      	adds	r2, #1
 8001976:	701a      	strb	r2, [r3, #0]
 8001978:	238f      	movs	r3, #143	@ 0x8f
 800197a:	18fb      	adds	r3, r7, r3
 800197c:	781a      	ldrb	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2b40      	cmp	r3, #64	@ 0x40
 8001982:	d900      	bls.n	8001986 <LCD_FillPixels+0x42>
 8001984:	2340      	movs	r3, #64	@ 0x40
 8001986:	429a      	cmp	r2, r3
 8001988:	d3e8      	bcc.n	800195c <LCD_FillPixels+0x18>
    }
    while(pixels){                                    // Send 64 pixel blocks
 800198a:	e013      	b.n	80019b4 <LCD_FillPixels+0x70>
      uint8_t sz = (pixels<64 ? pixels : 64);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b40      	cmp	r3, #64	@ 0x40
 8001990:	d900      	bls.n	8001994 <LCD_FillPixels+0x50>
 8001992:	2340      	movs	r3, #64	@ 0x40
 8001994:	248e      	movs	r4, #142	@ 0x8e
 8001996:	193a      	adds	r2, r7, r4
 8001998:	7013      	strb	r3, [r2, #0]
      LCD_WriteData((uint8_t*)fill, sz);
 800199a:	193b      	adds	r3, r7, r4
 800199c:	781a      	ldrb	r2, [r3, #0]
 800199e:	230c      	movs	r3, #12
 80019a0:	18fb      	adds	r3, r7, r3
 80019a2:	0011      	movs	r1, r2
 80019a4:	0018      	movs	r0, r3
 80019a6:	f7ff fea3 	bl	80016f0 <LCD_WriteData>
      pixels-=sz;
 80019aa:	193b      	adds	r3, r7, r4
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	607b      	str	r3, [r7, #4]
    while(pixels){                                    // Send 64 pixel blocks
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1e8      	bne.n	800198c <LCD_FillPixels+0x48>
    }
#ifdef USE_DMA
  }
#endif
}
 80019ba:	46c0      	nop			@ (mov r8, r8)
 80019bc:	46c0      	nop			@ (mov r8, r8)
 80019be:	46bd      	mov	sp, r7
 80019c0:	b025      	add	sp, #148	@ 0x94
 80019c2:	bd90      	pop	{r4, r7, pc}

080019c4 <LCD_FillArea>:
 * @brief Set address of DisplayWindow and returns raw pixel draw for uGUI driver acceleration
 * @param xi&yi -> coordinates of window
 * @return none
 */
void(*LCD_FillArea(int16_t x0, int16_t y0, int16_t x1, int16_t y1))(uint16_t,uint16_t)
{
 80019c4:	b5b0      	push	{r4, r5, r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	0005      	movs	r5, r0
 80019cc:	000c      	movs	r4, r1
 80019ce:	0010      	movs	r0, r2
 80019d0:	0019      	movs	r1, r3
 80019d2:	1dbb      	adds	r3, r7, #6
 80019d4:	1c2a      	adds	r2, r5, #0
 80019d6:	801a      	strh	r2, [r3, #0]
 80019d8:	1d3b      	adds	r3, r7, #4
 80019da:	1c22      	adds	r2, r4, #0
 80019dc:	801a      	strh	r2, [r3, #0]
 80019de:	1cbb      	adds	r3, r7, #2
 80019e0:	1c02      	adds	r2, r0, #0
 80019e2:	801a      	strh	r2, [r3, #0]
 80019e4:	003b      	movs	r3, r7
 80019e6:	1c0a      	adds	r2, r1, #0
 80019e8:	801a      	strh	r2, [r3, #0]
  if(x0==-1){
 80019ea:	1dbb      	adds	r3, r7, #6
 80019ec:	2200      	movs	r2, #0
 80019ee:	5e9b      	ldrsh	r3, [r3, r2]
 80019f0:	3301      	adds	r3, #1
 80019f2:	d104      	bne.n	80019fe <LCD_FillArea+0x3a>
#ifdef USE_DMA
    setDMAMemMode(mem_increase, mode_8bit);
#else
    setSPI_Size(mode_8bit); // Set SPI to 8 bit
 80019f4:	2000      	movs	r0, #0
 80019f6:	f7ff fdf5 	bl	80015e4 <setSPI_Size>
#endif
    return NULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	e01a      	b.n	8001a34 <LCD_FillArea+0x70>
  }
  LCD_SetAddressWindow(x0,y0,x1,y1);
 80019fe:	003b      	movs	r3, r7
 8001a00:	2400      	movs	r4, #0
 8001a02:	5f1c      	ldrsh	r4, [r3, r4]
 8001a04:	1cbb      	adds	r3, r7, #2
 8001a06:	2200      	movs	r2, #0
 8001a08:	5e9a      	ldrsh	r2, [r3, r2]
 8001a0a:	1d3b      	adds	r3, r7, #4
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	5e59      	ldrsh	r1, [r3, r1]
 8001a10:	1dbb      	adds	r3, r7, #6
 8001a12:	2000      	movs	r0, #0
 8001a14:	5e18      	ldrsh	r0, [r3, r0]
 8001a16:	0023      	movs	r3, r4
 8001a18:	f7ff feb0 	bl	800177c <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
#else
    setSPI_Size(mode_16bit); // Set SPI to 16 bit
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	f7ff fde1 	bl	80015e4 <setSPI_Size>
#endif
  LCD_DC_Set();
 8001a22:	2380      	movs	r3, #128	@ 0x80
 8001a24:	0099      	lsls	r1, r3, #2
 8001a26:	23a0      	movs	r3, #160	@ 0xa0
 8001a28:	05db      	lsls	r3, r3, #23
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	f000 fc9c 	bl	800236a <HAL_GPIO_WritePin>
  return LCD_FillPixels;
 8001a32:	4b02      	ldr	r3, [pc, #8]	@ (8001a3c <LCD_FillArea+0x78>)
}
 8001a34:	0018      	movs	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	b002      	add	sp, #8
 8001a3a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a3c:	08001945 	.word	0x08001945

08001a40 <LCD_Fill>:
 * @param xEnd&yEnd -> coordinate of the end point
 * @param color -> color to Fill with
 * @return none
 */
int8_t LCD_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 8001a40:	b5b0      	push	{r4, r5, r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	0005      	movs	r5, r0
 8001a48:	000c      	movs	r4, r1
 8001a4a:	0010      	movs	r0, r2
 8001a4c:	0019      	movs	r1, r3
 8001a4e:	1dbb      	adds	r3, r7, #6
 8001a50:	1c2a      	adds	r2, r5, #0
 8001a52:	801a      	strh	r2, [r3, #0]
 8001a54:	1d3b      	adds	r3, r7, #4
 8001a56:	1c22      	adds	r2, r4, #0
 8001a58:	801a      	strh	r2, [r3, #0]
 8001a5a:	1cbb      	adds	r3, r7, #2
 8001a5c:	1c02      	adds	r2, r0, #0
 8001a5e:	801a      	strh	r2, [r3, #0]
 8001a60:	003b      	movs	r3, r7
 8001a62:	1c0a      	adds	r2, r1, #0
 8001a64:	801a      	strh	r2, [r3, #0]
  // "pixels" was of type uint16_t, which is not enough to accommodate
  // screens of size 240x320 like I use because the maximum value of
  // uint16_t can only be 65535; so, here, "pixels" was getting truncated
  // and as a result, only a small portion of the display would end up being
  // filled; hence, I replaced it here with uint32_t;
  uint32_t pixels = (xEnd-xSta+1)*(yEnd-ySta+1);
 8001a66:	1cbb      	adds	r3, r7, #2
 8001a68:	881a      	ldrh	r2, [r3, #0]
 8001a6a:	1dbb      	adds	r3, r7, #6
 8001a6c:	881b      	ldrh	r3, [r3, #0]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	3301      	adds	r3, #1
 8001a72:	003a      	movs	r2, r7
 8001a74:	8811      	ldrh	r1, [r2, #0]
 8001a76:	1d3a      	adds	r2, r7, #4
 8001a78:	8812      	ldrh	r2, [r2, #0]
 8001a7a:	1a8a      	subs	r2, r1, r2
 8001a7c:	3201      	adds	r2, #1
 8001a7e:	4353      	muls	r3, r2
 8001a80:	60fb      	str	r3, [r7, #12]
  LCD_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 8001a82:	1dbb      	adds	r3, r7, #6
 8001a84:	2000      	movs	r0, #0
 8001a86:	5e18      	ldrsh	r0, [r3, r0]
 8001a88:	1d3b      	adds	r3, r7, #4
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	5e59      	ldrsh	r1, [r3, r1]
 8001a8e:	1cbb      	adds	r3, r7, #2
 8001a90:	2200      	movs	r2, #0
 8001a92:	5e9a      	ldrsh	r2, [r3, r2]
 8001a94:	003b      	movs	r3, r7
 8001a96:	2400      	movs	r4, #0
 8001a98:	5f1b      	ldrsh	r3, [r3, r4]
 8001a9a:	f7ff fe6f 	bl	800177c <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
#else
    setSPI_Size(mode_16bit);
 8001a9e:	2001      	movs	r0, #1
 8001aa0:	f7ff fda0 	bl	80015e4 <setSPI_Size>
#endif
  LCD_FillPixels(pixels, color);
 8001aa4:	2320      	movs	r3, #32
 8001aa6:	18fb      	adds	r3, r7, r3
 8001aa8:	881a      	ldrh	r2, [r3, #0]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	0011      	movs	r1, r2
 8001aae:	0018      	movs	r0, r3
 8001ab0:	f7ff ff48 	bl	8001944 <LCD_FillPixels>
#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);
#else
  setSPI_Size(mode_8bit);
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	f7ff fd95 	bl	80015e4 <setSPI_Size>
#endif
  return UG_RESULT_OK;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	0018      	movs	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	b004      	add	sp, #16
 8001ac2:	bdb0      	pop	{r4, r5, r7, pc}

08001ac4 <LCD_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void LCD_DrawImage(uint16_t x, uint16_t y, UG_BMP* bmp)
{
 8001ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	603a      	str	r2, [r7, #0]
 8001acc:	1dbb      	adds	r3, r7, #6
 8001ace:	1c02      	adds	r2, r0, #0
 8001ad0:	801a      	strh	r2, [r3, #0]
 8001ad2:	1d3b      	adds	r3, r7, #4
 8001ad4:	1c0a      	adds	r2, r1, #0
 8001ad6:	801a      	strh	r2, [r3, #0]
  uint16_t w = bmp->width;
 8001ad8:	250e      	movs	r5, #14
 8001ada:	197b      	adds	r3, r7, r5
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	8892      	ldrh	r2, [r2, #4]
 8001ae0:	801a      	strh	r2, [r3, #0]
  uint16_t h = bmp->height;
 8001ae2:	260c      	movs	r6, #12
 8001ae4:	19bb      	adds	r3, r7, r6
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	88d2      	ldrh	r2, [r2, #6]
 8001aea:	801a      	strh	r2, [r3, #0]
  if ((x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 8001aec:	1dbb      	adds	r3, r7, #6
 8001aee:	881b      	ldrh	r3, [r3, #0]
 8001af0:	2bef      	cmp	r3, #239	@ 0xef
 8001af2:	d845      	bhi.n	8001b80 <LCD_DrawImage+0xbc>
 8001af4:	1d3b      	adds	r3, r7, #4
 8001af6:	881a      	ldrh	r2, [r3, #0]
 8001af8:	23a0      	movs	r3, #160	@ 0xa0
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d23f      	bcs.n	8001b80 <LCD_DrawImage+0xbc>
    return;
  if ((x + w - 1) > LCD_WIDTH-1)
 8001b00:	1dbb      	adds	r3, r7, #6
 8001b02:	881a      	ldrh	r2, [r3, #0]
 8001b04:	197b      	adds	r3, r7, r5
 8001b06:	881b      	ldrh	r3, [r3, #0]
 8001b08:	18d3      	adds	r3, r2, r3
 8001b0a:	2bf0      	cmp	r3, #240	@ 0xf0
 8001b0c:	dc3a      	bgt.n	8001b84 <LCD_DrawImage+0xc0>
    return;
  if ((y + h - 1) > LCD_HEIGHT-1)
 8001b0e:	1d3b      	adds	r3, r7, #4
 8001b10:	881a      	ldrh	r2, [r3, #0]
 8001b12:	19bb      	adds	r3, r7, r6
 8001b14:	881b      	ldrh	r3, [r3, #0]
 8001b16:	18d2      	adds	r2, r2, r3
 8001b18:	23a0      	movs	r3, #160	@ 0xa0
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	dc33      	bgt.n	8001b88 <LCD_DrawImage+0xc4>
    return;
  if(bmp->bpp!=BMP_BPP_16)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	7a1b      	ldrb	r3, [r3, #8]
 8001b24:	2b10      	cmp	r3, #16
 8001b26:	d131      	bne.n	8001b8c <LCD_DrawImage+0xc8>
    return;
  LCD_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8001b28:	1dbb      	adds	r3, r7, #6
 8001b2a:	2000      	movs	r0, #0
 8001b2c:	5e18      	ldrsh	r0, [r3, r0]
 8001b2e:	1d3b      	adds	r3, r7, #4
 8001b30:	2100      	movs	r1, #0
 8001b32:	5e59      	ldrsh	r1, [r3, r1]
 8001b34:	1dba      	adds	r2, r7, #6
 8001b36:	197b      	adds	r3, r7, r5
 8001b38:	8812      	ldrh	r2, [r2, #0]
 8001b3a:	881b      	ldrh	r3, [r3, #0]
 8001b3c:	18d3      	adds	r3, r2, r3
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	3b01      	subs	r3, #1
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	b21c      	sxth	r4, r3
 8001b46:	1d3a      	adds	r2, r7, #4
 8001b48:	19bb      	adds	r3, r7, r6
 8001b4a:	8812      	ldrh	r2, [r2, #0]
 8001b4c:	881b      	ldrh	r3, [r3, #0]
 8001b4e:	18d3      	adds	r3, r2, r3
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	3b01      	subs	r3, #1
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	b21b      	sxth	r3, r3
 8001b58:	0022      	movs	r2, r4
 8001b5a:	f7ff fe0f 	bl	800177c <LCD_SetAddressWindow>

#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_16bit); // Set SPI and DMA to 16 bit, enable memory increase
#else
  setSPI_Size(mode_16bit);                 // Set SPI to 16 bit
 8001b5e:	2001      	movs	r0, #1
 8001b60:	f7ff fd40 	bl	80015e4 <setSPI_Size>
#endif

  LCD_WriteData((uint8_t*)bmp->p, w*h);
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	6818      	ldr	r0, [r3, #0]
 8001b68:	197b      	adds	r3, r7, r5
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	19ba      	adds	r2, r7, r6
 8001b6e:	8812      	ldrh	r2, [r2, #0]
 8001b70:	4353      	muls	r3, r2
 8001b72:	0019      	movs	r1, r3
 8001b74:	f7ff fdbc 	bl	80016f0 <LCD_WriteData>

#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);  // Set SPI and DMA to 16 bit, enable memory increase
#else
  setSPI_Size(mode_8bit);                  // Set SPI to 8 bit
 8001b78:	2000      	movs	r0, #0
 8001b7a:	f7ff fd33 	bl	80015e4 <setSPI_Size>
 8001b7e:	e006      	b.n	8001b8e <LCD_DrawImage+0xca>
    return;
 8001b80:	46c0      	nop			@ (mov r8, r8)
 8001b82:	e004      	b.n	8001b8e <LCD_DrawImage+0xca>
    return;
 8001b84:	46c0      	nop			@ (mov r8, r8)
 8001b86:	e002      	b.n	8001b8e <LCD_DrawImage+0xca>
    return;
 8001b88:	46c0      	nop			@ (mov r8, r8)
 8001b8a:	e000      	b.n	8001b8e <LCD_DrawImage+0xca>
    return;
 8001b8c:	46c0      	nop			@ (mov r8, r8)
#endif
  }
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	b005      	add	sp, #20
 8001b92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b94 <LCD_DrawLine>:
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
int8_t LCD_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color)
{
 8001b94:	b5b0      	push	{r4, r5, r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af02      	add	r7, sp, #8
 8001b9a:	0005      	movs	r5, r0
 8001b9c:	000c      	movs	r4, r1
 8001b9e:	0010      	movs	r0, r2
 8001ba0:	0019      	movs	r1, r3
 8001ba2:	1dbb      	adds	r3, r7, #6
 8001ba4:	1c2a      	adds	r2, r5, #0
 8001ba6:	801a      	strh	r2, [r3, #0]
 8001ba8:	1d3b      	adds	r3, r7, #4
 8001baa:	1c22      	adds	r2, r4, #0
 8001bac:	801a      	strh	r2, [r3, #0]
 8001bae:	1cbb      	adds	r3, r7, #2
 8001bb0:	1c02      	adds	r2, r0, #0
 8001bb2:	801a      	strh	r2, [r3, #0]
 8001bb4:	003b      	movs	r3, r7
 8001bb6:	1c0a      	adds	r2, r1, #0
 8001bb8:	801a      	strh	r2, [r3, #0]
  if(x0==x1){                               // If horizontal
 8001bba:	1dba      	adds	r2, r7, #6
 8001bbc:	1cbb      	adds	r3, r7, #2
 8001bbe:	8812      	ldrh	r2, [r2, #0]
 8001bc0:	881b      	ldrh	r3, [r3, #0]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d113      	bne.n	8001bee <LCD_DrawLine+0x5a>
    if(y0>y1) swap(y0,y1);
 8001bc6:	1d3a      	adds	r2, r7, #4
 8001bc8:	003b      	movs	r3, r7
 8001bca:	8812      	ldrh	r2, [r2, #0]
 8001bcc:	881b      	ldrh	r3, [r3, #0]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d92a      	bls.n	8001c28 <LCD_DrawLine+0x94>
 8001bd2:	210c      	movs	r1, #12
 8001bd4:	187b      	adds	r3, r7, r1
 8001bd6:	1d3a      	adds	r2, r7, #4
 8001bd8:	8812      	ldrh	r2, [r2, #0]
 8001bda:	801a      	strh	r2, [r3, #0]
 8001bdc:	1d3b      	adds	r3, r7, #4
 8001bde:	003a      	movs	r2, r7
 8001be0:	8812      	ldrh	r2, [r2, #0]
 8001be2:	801a      	strh	r2, [r3, #0]
 8001be4:	003b      	movs	r3, r7
 8001be6:	187a      	adds	r2, r7, r1
 8001be8:	8812      	ldrh	r2, [r2, #0]
 8001bea:	801a      	strh	r2, [r3, #0]
 8001bec:	e01c      	b.n	8001c28 <LCD_DrawLine+0x94>
  } else if(y0==y1){                        // If vertical
 8001bee:	1d3a      	adds	r2, r7, #4
 8001bf0:	003b      	movs	r3, r7
 8001bf2:	8812      	ldrh	r2, [r2, #0]
 8001bf4:	881b      	ldrh	r3, [r3, #0]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d113      	bne.n	8001c22 <LCD_DrawLine+0x8e>
    if(x0>x1) swap(x0,x1);
 8001bfa:	1dba      	adds	r2, r7, #6
 8001bfc:	1cbb      	adds	r3, r7, #2
 8001bfe:	8812      	ldrh	r2, [r2, #0]
 8001c00:	881b      	ldrh	r3, [r3, #0]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d910      	bls.n	8001c28 <LCD_DrawLine+0x94>
 8001c06:	210e      	movs	r1, #14
 8001c08:	187b      	adds	r3, r7, r1
 8001c0a:	1dba      	adds	r2, r7, #6
 8001c0c:	8812      	ldrh	r2, [r2, #0]
 8001c0e:	801a      	strh	r2, [r3, #0]
 8001c10:	1dbb      	adds	r3, r7, #6
 8001c12:	1cba      	adds	r2, r7, #2
 8001c14:	8812      	ldrh	r2, [r2, #0]
 8001c16:	801a      	strh	r2, [r3, #0]
 8001c18:	1cbb      	adds	r3, r7, #2
 8001c1a:	187a      	adds	r2, r7, r1
 8001c1c:	8812      	ldrh	r2, [r2, #0]
 8001c1e:	801a      	strh	r2, [r3, #0]
 8001c20:	e002      	b.n	8001c28 <LCD_DrawLine+0x94>
  } else{                                   // Else, return fail, draw using software
    return UG_RESULT_FAIL;
 8001c22:	2301      	movs	r3, #1
 8001c24:	425b      	negs	r3, r3
 8001c26:	e00f      	b.n	8001c48 <LCD_DrawLine+0xb4>
  }

  LCD_Fill(x0,y0,x1,y1,color);              // Draw using acceleration
 8001c28:	003b      	movs	r3, r7
 8001c2a:	881c      	ldrh	r4, [r3, #0]
 8001c2c:	1cbb      	adds	r3, r7, #2
 8001c2e:	881a      	ldrh	r2, [r3, #0]
 8001c30:	1d3b      	adds	r3, r7, #4
 8001c32:	8819      	ldrh	r1, [r3, #0]
 8001c34:	1dbb      	adds	r3, r7, #6
 8001c36:	8818      	ldrh	r0, [r3, #0]
 8001c38:	2320      	movs	r3, #32
 8001c3a:	18fb      	adds	r3, r7, r3
 8001c3c:	881b      	ldrh	r3, [r3, #0]
 8001c3e:	9300      	str	r3, [sp, #0]
 8001c40:	0023      	movs	r3, r4
 8001c42:	f7ff fefd 	bl	8001a40 <LCD_Fill>
  return UG_RESULT_OK;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	0018      	movs	r0, r3
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	b004      	add	sp, #16
 8001c4e:	bdb0      	pop	{r4, r5, r7, pc}

08001c50 <LCD_PutStr>:
  UG_FontSelect(font);
  UG_PutChar(ch, x, y, color, bgcolor);
}

void LCD_PutStr(uint16_t x, uint16_t y,  char *str, UG_FONT* font, uint16_t color, uint16_t bgcolor)
{
 8001c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60ba      	str	r2, [r7, #8]
 8001c58:	607b      	str	r3, [r7, #4]
 8001c5a:	240e      	movs	r4, #14
 8001c5c:	193b      	adds	r3, r7, r4
 8001c5e:	1c02      	adds	r2, r0, #0
 8001c60:	801a      	strh	r2, [r3, #0]
 8001c62:	250c      	movs	r5, #12
 8001c64:	197b      	adds	r3, r7, r5
 8001c66:	1c0a      	adds	r2, r1, #0
 8001c68:	801a      	strh	r2, [r3, #0]
  UG_FontSelect(font);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	f003 f9d5 	bl	800501c <UG_FontSelect>
  UG_SetForecolor(color);
 8001c72:	2318      	movs	r3, #24
 8001c74:	2608      	movs	r6, #8
 8001c76:	199b      	adds	r3, r3, r6
 8001c78:	2208      	movs	r2, #8
 8001c7a:	4694      	mov	ip, r2
 8001c7c:	44bc      	add	ip, r7
 8001c7e:	4463      	add	r3, ip
 8001c80:	881b      	ldrh	r3, [r3, #0]
 8001c82:	0018      	movs	r0, r3
 8001c84:	f003 fcc6 	bl	8005614 <UG_SetForecolor>
  UG_SetBackcolor(bgcolor);
 8001c88:	231c      	movs	r3, #28
 8001c8a:	199b      	adds	r3, r3, r6
 8001c8c:	2208      	movs	r2, #8
 8001c8e:	4694      	mov	ip, r2
 8001c90:	44bc      	add	ip, r7
 8001c92:	4463      	add	r3, ip
 8001c94:	881b      	ldrh	r3, [r3, #0]
 8001c96:	0018      	movs	r0, r3
 8001c98:	f003 fcce 	bl	8005638 <UG_SetBackcolor>
  UG_PutString(x, y, str);
 8001c9c:	193b      	adds	r3, r7, r4
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	5e18      	ldrsh	r0, [r3, r0]
 8001ca2:	197b      	adds	r3, r7, r5
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	5e9b      	ldrsh	r3, [r3, r2]
 8001ca8:	68ba      	ldr	r2, [r7, #8]
 8001caa:	0019      	movs	r1, r3
 8001cac:	f003 fbf2 	bl	8005494 <UG_PutString>
}
 8001cb0:	46c0      	nop			@ (mov r8, r8)
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	b005      	add	sp, #20
 8001cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cb8 <LCD_Update>:
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
}


static void LCD_Update(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
#endif

#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);           // Set SPI and DMA to 16 bit, enable memory increase
#else
  setSPI_Size(mode_8bit);                           // Set SPI to 8 bit
 8001cbc:	2000      	movs	r0, #0
 8001cbe:	f7ff fc91 	bl	80015e4 <setSPI_Size>
#endif
}
 8001cc2:	46c0      	nop			@ (mov r8, r8)
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <LCD_init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void LCD_init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
#ifdef LCD_CS
  LCD_CS_Set();
 8001cce:	4b30      	ldr	r3, [pc, #192]	@ (8001d90 <LCD_init+0xc8>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	2140      	movs	r1, #64	@ 0x40
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	f000 fb48 	bl	800236a <HAL_GPIO_WritePin>
#endif

#ifdef LCD_RST
  LCD_RST_Clr();
 8001cda:	4b2e      	ldr	r3, [pc, #184]	@ (8001d94 <LCD_init+0xcc>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	2180      	movs	r1, #128	@ 0x80
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	f000 fb42 	bl	800236a <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001ce6:	2001      	movs	r0, #1
 8001ce8:	f000 f8d4 	bl	8001e94 <HAL_Delay>
  LCD_RST_Set();
 8001cec:	4b29      	ldr	r3, [pc, #164]	@ (8001d94 <LCD_init+0xcc>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	2180      	movs	r1, #128	@ 0x80
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	f000 fb39 	bl	800236a <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8001cf8:	20c8      	movs	r0, #200	@ 0xc8
 8001cfa:	f000 f8cb 	bl	8001e94 <HAL_Delay>
#endif

  UG_Init(&gui, &device);
 8001cfe:	4a26      	ldr	r2, [pc, #152]	@ (8001d98 <LCD_init+0xd0>)
 8001d00:	4b26      	ldr	r3, [pc, #152]	@ (8001d9c <LCD_init+0xd4>)
 8001d02:	0011      	movs	r1, r2
 8001d04:	0018      	movs	r0, r3
 8001d06:	f003 f8e5 	bl	8004ed4 <UG_Init>

#ifndef LCD_LOCAL_FB
  UG_DriverRegister(DRIVER_DRAW_LINE, LCD_DrawLine);
 8001d0a:	4b25      	ldr	r3, [pc, #148]	@ (8001da0 <LCD_init+0xd8>)
 8001d0c:	0019      	movs	r1, r3
 8001d0e:	2000      	movs	r0, #0
 8001d10:	f004 ffc8 	bl	8006ca4 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_FRAME, LCD_Fill);
 8001d14:	4b23      	ldr	r3, [pc, #140]	@ (8001da4 <LCD_init+0xdc>)
 8001d16:	0019      	movs	r1, r3
 8001d18:	2001      	movs	r0, #1
 8001d1a:	f004 ffc3 	bl	8006ca4 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_AREA, LCD_FillArea);
 8001d1e:	4b22      	ldr	r3, [pc, #136]	@ (8001da8 <LCD_init+0xe0>)
 8001d20:	0019      	movs	r1, r3
 8001d22:	2002      	movs	r0, #2
 8001d24:	f004 ffbe 	bl	8006ca4 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_DRAW_BMP, LCD_DrawImage);
 8001d28:	4b20      	ldr	r3, [pc, #128]	@ (8001dac <LCD_init+0xe4>)
 8001d2a:	0019      	movs	r1, r3
 8001d2c:	2003      	movs	r0, #3
 8001d2e:	f004 ffb9 	bl	8006ca4 <UG_DriverRegister>
#endif
  UG_FontSetHSpace(0);
 8001d32:	2000      	movs	r0, #0
 8001d34:	f003 fc92 	bl	800565c <UG_FontSetHSpace>
  UG_FontSetVSpace(0);
 8001d38:	2000      	movs	r0, #0
 8001d3a:	f003 fca3 	bl	8005684 <UG_FontSetVSpace>

  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8001d3e:	1dbb      	adds	r3, r7, #6
 8001d40:	2200      	movs	r2, #0
 8001d42:	801a      	strh	r2, [r3, #0]
 8001d44:	e017      	b.n	8001d76 <LCD_init+0xae>
    LCD_WriteCommand((uint8_t*)&init_cmd[i+1], init_cmd[i]);
 8001d46:	1dbb      	adds	r3, r7, #6
 8001d48:	881b      	ldrh	r3, [r3, #0]
 8001d4a:	1c5a      	adds	r2, r3, #1
 8001d4c:	4b18      	ldr	r3, [pc, #96]	@ (8001db0 <LCD_init+0xe8>)
 8001d4e:	18d0      	adds	r0, r2, r3
 8001d50:	1dbb      	adds	r3, r7, #6
 8001d52:	881b      	ldrh	r3, [r3, #0]
 8001d54:	4a16      	ldr	r2, [pc, #88]	@ (8001db0 <LCD_init+0xe8>)
 8001d56:	5cd3      	ldrb	r3, [r2, r3]
 8001d58:	0019      	movs	r1, r3
 8001d5a:	f7ff fc85 	bl	8001668 <LCD_WriteCommand>
    i += init_cmd[i]+2;
 8001d5e:	1dbb      	adds	r3, r7, #6
 8001d60:	881b      	ldrh	r3, [r3, #0]
 8001d62:	4a13      	ldr	r2, [pc, #76]	@ (8001db0 <LCD_init+0xe8>)
 8001d64:	5cd3      	ldrb	r3, [r2, r3]
 8001d66:	001a      	movs	r2, r3
 8001d68:	1dbb      	adds	r3, r7, #6
 8001d6a:	881b      	ldrh	r3, [r3, #0]
 8001d6c:	18d3      	adds	r3, r2, r3
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	1dbb      	adds	r3, r7, #6
 8001d72:	3202      	adds	r2, #2
 8001d74:	801a      	strh	r2, [r3, #0]
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8001d76:	1dbb      	adds	r3, r7, #6
 8001d78:	881b      	ldrh	r3, [r3, #0]
 8001d7a:	2b4d      	cmp	r3, #77	@ 0x4d
 8001d7c:	d9e3      	bls.n	8001d46 <LCD_init+0x7e>
  }

  UG_FillScreen(C_BLACK); // Clear screen
 8001d7e:	2000      	movs	r0, #0
 8001d80:	f003 f95a 	bl	8005038 <UG_FillScreen>
  UG_Update();
 8001d84:	f004 ffb4 	bl	8006cf0 <UG_Update>
}
 8001d88:	46c0      	nop			@ (mov r8, r8)
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	b002      	add	sp, #8
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	50000400 	.word	0x50000400
 8001d94:	50000800 	.word	0x50000800
 8001d98:	2000001c 	.word	0x2000001c
 8001d9c:	20000280 	.word	0x20000280
 8001da0:	08001b95 	.word	0x08001b95
 8001da4:	08001a41 	.word	0x08001a41
 8001da8:	080019c5 	.word	0x080019c5
 8001dac:	08001ac5 	.word	0x08001ac5
 8001db0:	0800a018 	.word	0x0800a018

08001db4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001dba:	1dfb      	adds	r3, r7, #7
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8001df0 <HAL_Init+0x3c>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8001df0 <HAL_Init+0x3c>)
 8001dc6:	2140      	movs	r1, #64	@ 0x40
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dcc:	2000      	movs	r0, #0
 8001dce:	f000 f811 	bl	8001df4 <HAL_InitTick>
 8001dd2:	1e03      	subs	r3, r0, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001dd6:	1dfb      	adds	r3, r7, #7
 8001dd8:	2201      	movs	r2, #1
 8001dda:	701a      	strb	r2, [r3, #0]
 8001ddc:	e001      	b.n	8001de2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001dde:	f7ff f9f5 	bl	80011cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001de2:	1dfb      	adds	r3, r7, #7
 8001de4:	781b      	ldrb	r3, [r3, #0]
}
 8001de6:	0018      	movs	r0, r3
 8001de8:	46bd      	mov	sp, r7
 8001dea:	b002      	add	sp, #8
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	46c0      	nop			@ (mov r8, r8)
 8001df0:	40022000 	.word	0x40022000

08001df4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df4:	b590      	push	{r4, r7, lr}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dfc:	4b14      	ldr	r3, [pc, #80]	@ (8001e50 <HAL_InitTick+0x5c>)
 8001dfe:	681c      	ldr	r4, [r3, #0]
 8001e00:	4b14      	ldr	r3, [pc, #80]	@ (8001e54 <HAL_InitTick+0x60>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	0019      	movs	r1, r3
 8001e06:	23fa      	movs	r3, #250	@ 0xfa
 8001e08:	0098      	lsls	r0, r3, #2
 8001e0a:	f7fe f987 	bl	800011c <__udivsi3>
 8001e0e:	0003      	movs	r3, r0
 8001e10:	0019      	movs	r1, r3
 8001e12:	0020      	movs	r0, r4
 8001e14:	f7fe f982 	bl	800011c <__udivsi3>
 8001e18:	0003      	movs	r3, r0
 8001e1a:	0018      	movs	r0, r3
 8001e1c:	f000 f905 	bl	800202a <HAL_SYSTICK_Config>
 8001e20:	1e03      	subs	r3, r0, #0
 8001e22:	d001      	beq.n	8001e28 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e00f      	b.n	8001e48 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b03      	cmp	r3, #3
 8001e2c:	d80b      	bhi.n	8001e46 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	2301      	movs	r3, #1
 8001e32:	425b      	negs	r3, r3
 8001e34:	2200      	movs	r2, #0
 8001e36:	0018      	movs	r0, r3
 8001e38:	f000 f8e2 	bl	8002000 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e3c:	4b06      	ldr	r3, [pc, #24]	@ (8001e58 <HAL_InitTick+0x64>)
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e42:	2300      	movs	r3, #0
 8001e44:	e000      	b.n	8001e48 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
}
 8001e48:	0018      	movs	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	b003      	add	sp, #12
 8001e4e:	bd90      	pop	{r4, r7, pc}
 8001e50:	20000014 	.word	0x20000014
 8001e54:	2000002c 	.word	0x2000002c
 8001e58:	20000028 	.word	0x20000028

08001e5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e60:	4b05      	ldr	r3, [pc, #20]	@ (8001e78 <HAL_IncTick+0x1c>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	001a      	movs	r2, r3
 8001e66:	4b05      	ldr	r3, [pc, #20]	@ (8001e7c <HAL_IncTick+0x20>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	18d2      	adds	r2, r2, r3
 8001e6c:	4b03      	ldr	r3, [pc, #12]	@ (8001e7c <HAL_IncTick+0x20>)
 8001e6e:	601a      	str	r2, [r3, #0]
}
 8001e70:	46c0      	nop			@ (mov r8, r8)
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	46c0      	nop			@ (mov r8, r8)
 8001e78:	2000002c 	.word	0x2000002c
 8001e7c:	200002f4 	.word	0x200002f4

08001e80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  return uwTick;
 8001e84:	4b02      	ldr	r3, [pc, #8]	@ (8001e90 <HAL_GetTick+0x10>)
 8001e86:	681b      	ldr	r3, [r3, #0]
}
 8001e88:	0018      	movs	r0, r3
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	46c0      	nop			@ (mov r8, r8)
 8001e90:	200002f4 	.word	0x200002f4

08001e94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e9c:	f7ff fff0 	bl	8001e80 <HAL_GetTick>
 8001ea0:	0003      	movs	r3, r0
 8001ea2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	d005      	beq.n	8001eba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eae:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed8 <HAL_Delay+0x44>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	001a      	movs	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	189b      	adds	r3, r3, r2
 8001eb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001eba:	46c0      	nop			@ (mov r8, r8)
 8001ebc:	f7ff ffe0 	bl	8001e80 <HAL_GetTick>
 8001ec0:	0002      	movs	r2, r0
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d8f7      	bhi.n	8001ebc <HAL_Delay+0x28>
  {
  }
}
 8001ecc:	46c0      	nop			@ (mov r8, r8)
 8001ece:	46c0      	nop			@ (mov r8, r8)
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	b004      	add	sp, #16
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	46c0      	nop			@ (mov r8, r8)
 8001ed8:	2000002c 	.word	0x2000002c

08001edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001edc:	b590      	push	{r4, r7, lr}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	0002      	movs	r2, r0
 8001ee4:	6039      	str	r1, [r7, #0]
 8001ee6:	1dfb      	adds	r3, r7, #7
 8001ee8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001eea:	1dfb      	adds	r3, r7, #7
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ef0:	d828      	bhi.n	8001f44 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ef2:	4a2f      	ldr	r2, [pc, #188]	@ (8001fb0 <__NVIC_SetPriority+0xd4>)
 8001ef4:	1dfb      	adds	r3, r7, #7
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	b25b      	sxtb	r3, r3
 8001efa:	089b      	lsrs	r3, r3, #2
 8001efc:	33c0      	adds	r3, #192	@ 0xc0
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	589b      	ldr	r3, [r3, r2]
 8001f02:	1dfa      	adds	r2, r7, #7
 8001f04:	7812      	ldrb	r2, [r2, #0]
 8001f06:	0011      	movs	r1, r2
 8001f08:	2203      	movs	r2, #3
 8001f0a:	400a      	ands	r2, r1
 8001f0c:	00d2      	lsls	r2, r2, #3
 8001f0e:	21ff      	movs	r1, #255	@ 0xff
 8001f10:	4091      	lsls	r1, r2
 8001f12:	000a      	movs	r2, r1
 8001f14:	43d2      	mvns	r2, r2
 8001f16:	401a      	ands	r2, r3
 8001f18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	019b      	lsls	r3, r3, #6
 8001f1e:	22ff      	movs	r2, #255	@ 0xff
 8001f20:	401a      	ands	r2, r3
 8001f22:	1dfb      	adds	r3, r7, #7
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	0018      	movs	r0, r3
 8001f28:	2303      	movs	r3, #3
 8001f2a:	4003      	ands	r3, r0
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f30:	481f      	ldr	r0, [pc, #124]	@ (8001fb0 <__NVIC_SetPriority+0xd4>)
 8001f32:	1dfb      	adds	r3, r7, #7
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	b25b      	sxtb	r3, r3
 8001f38:	089b      	lsrs	r3, r3, #2
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	33c0      	adds	r3, #192	@ 0xc0
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001f42:	e031      	b.n	8001fa8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f44:	4a1b      	ldr	r2, [pc, #108]	@ (8001fb4 <__NVIC_SetPriority+0xd8>)
 8001f46:	1dfb      	adds	r3, r7, #7
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	0019      	movs	r1, r3
 8001f4c:	230f      	movs	r3, #15
 8001f4e:	400b      	ands	r3, r1
 8001f50:	3b08      	subs	r3, #8
 8001f52:	089b      	lsrs	r3, r3, #2
 8001f54:	3306      	adds	r3, #6
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	18d3      	adds	r3, r2, r3
 8001f5a:	3304      	adds	r3, #4
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	1dfa      	adds	r2, r7, #7
 8001f60:	7812      	ldrb	r2, [r2, #0]
 8001f62:	0011      	movs	r1, r2
 8001f64:	2203      	movs	r2, #3
 8001f66:	400a      	ands	r2, r1
 8001f68:	00d2      	lsls	r2, r2, #3
 8001f6a:	21ff      	movs	r1, #255	@ 0xff
 8001f6c:	4091      	lsls	r1, r2
 8001f6e:	000a      	movs	r2, r1
 8001f70:	43d2      	mvns	r2, r2
 8001f72:	401a      	ands	r2, r3
 8001f74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	019b      	lsls	r3, r3, #6
 8001f7a:	22ff      	movs	r2, #255	@ 0xff
 8001f7c:	401a      	ands	r2, r3
 8001f7e:	1dfb      	adds	r3, r7, #7
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	0018      	movs	r0, r3
 8001f84:	2303      	movs	r3, #3
 8001f86:	4003      	ands	r3, r0
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f8c:	4809      	ldr	r0, [pc, #36]	@ (8001fb4 <__NVIC_SetPriority+0xd8>)
 8001f8e:	1dfb      	adds	r3, r7, #7
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	001c      	movs	r4, r3
 8001f94:	230f      	movs	r3, #15
 8001f96:	4023      	ands	r3, r4
 8001f98:	3b08      	subs	r3, #8
 8001f9a:	089b      	lsrs	r3, r3, #2
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	3306      	adds	r3, #6
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	18c3      	adds	r3, r0, r3
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	601a      	str	r2, [r3, #0]
}
 8001fa8:	46c0      	nop			@ (mov r8, r8)
 8001faa:	46bd      	mov	sp, r7
 8001fac:	b003      	add	sp, #12
 8001fae:	bd90      	pop	{r4, r7, pc}
 8001fb0:	e000e100 	.word	0xe000e100
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	1e5a      	subs	r2, r3, #1
 8001fc4:	2380      	movs	r3, #128	@ 0x80
 8001fc6:	045b      	lsls	r3, r3, #17
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d301      	bcc.n	8001fd0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e010      	b.n	8001ff2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8001ffc <SysTick_Config+0x44>)
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	3a01      	subs	r2, #1
 8001fd6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fd8:	2301      	movs	r3, #1
 8001fda:	425b      	negs	r3, r3
 8001fdc:	2103      	movs	r1, #3
 8001fde:	0018      	movs	r0, r3
 8001fe0:	f7ff ff7c 	bl	8001edc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fe4:	4b05      	ldr	r3, [pc, #20]	@ (8001ffc <SysTick_Config+0x44>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fea:	4b04      	ldr	r3, [pc, #16]	@ (8001ffc <SysTick_Config+0x44>)
 8001fec:	2207      	movs	r2, #7
 8001fee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	b002      	add	sp, #8
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	46c0      	nop			@ (mov r8, r8)
 8001ffc:	e000e010 	.word	0xe000e010

08002000 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	60b9      	str	r1, [r7, #8]
 8002008:	607a      	str	r2, [r7, #4]
 800200a:	210f      	movs	r1, #15
 800200c:	187b      	adds	r3, r7, r1
 800200e:	1c02      	adds	r2, r0, #0
 8002010:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	187b      	adds	r3, r7, r1
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	b25b      	sxtb	r3, r3
 800201a:	0011      	movs	r1, r2
 800201c:	0018      	movs	r0, r3
 800201e:	f7ff ff5d 	bl	8001edc <__NVIC_SetPriority>
}
 8002022:	46c0      	nop			@ (mov r8, r8)
 8002024:	46bd      	mov	sp, r7
 8002026:	b004      	add	sp, #16
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b082      	sub	sp, #8
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	0018      	movs	r0, r3
 8002036:	f7ff ffbf 	bl	8001fb8 <SysTick_Config>
 800203a:	0003      	movs	r3, r0
}
 800203c:	0018      	movs	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	b002      	add	sp, #8
 8002042:	bd80      	pop	{r7, pc}

08002044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002052:	2300      	movs	r3, #0
 8002054:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002056:	2300      	movs	r3, #0
 8002058:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800205a:	e14f      	b.n	80022fc <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2101      	movs	r1, #1
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	4091      	lsls	r1, r2
 8002066:	000a      	movs	r2, r1
 8002068:	4013      	ands	r3, r2
 800206a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d100      	bne.n	8002074 <HAL_GPIO_Init+0x30>
 8002072:	e140      	b.n	80022f6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	2203      	movs	r2, #3
 800207a:	4013      	ands	r3, r2
 800207c:	2b01      	cmp	r3, #1
 800207e:	d005      	beq.n	800208c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2203      	movs	r2, #3
 8002086:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002088:	2b02      	cmp	r3, #2
 800208a:	d130      	bne.n	80020ee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	2203      	movs	r2, #3
 8002098:	409a      	lsls	r2, r3
 800209a:	0013      	movs	r3, r2
 800209c:	43da      	mvns	r2, r3
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	4013      	ands	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	68da      	ldr	r2, [r3, #12]
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	409a      	lsls	r2, r3
 80020ae:	0013      	movs	r3, r2
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020c2:	2201      	movs	r2, #1
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	409a      	lsls	r2, r3
 80020c8:	0013      	movs	r3, r2
 80020ca:	43da      	mvns	r2, r3
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	4013      	ands	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	091b      	lsrs	r3, r3, #4
 80020d8:	2201      	movs	r2, #1
 80020da:	401a      	ands	r2, r3
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	409a      	lsls	r2, r3
 80020e0:	0013      	movs	r3, r2
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2203      	movs	r2, #3
 80020f4:	4013      	ands	r3, r2
 80020f6:	2b03      	cmp	r3, #3
 80020f8:	d017      	beq.n	800212a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	2203      	movs	r2, #3
 8002106:	409a      	lsls	r2, r3
 8002108:	0013      	movs	r3, r2
 800210a:	43da      	mvns	r2, r3
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	4013      	ands	r3, r2
 8002110:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	689a      	ldr	r2, [r3, #8]
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	409a      	lsls	r2, r3
 800211c:	0013      	movs	r3, r2
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	4313      	orrs	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2203      	movs	r2, #3
 8002130:	4013      	ands	r3, r2
 8002132:	2b02      	cmp	r3, #2
 8002134:	d123      	bne.n	800217e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	08da      	lsrs	r2, r3, #3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	3208      	adds	r2, #8
 800213e:	0092      	lsls	r2, r2, #2
 8002140:	58d3      	ldr	r3, [r2, r3]
 8002142:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	2207      	movs	r2, #7
 8002148:	4013      	ands	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	220f      	movs	r2, #15
 800214e:	409a      	lsls	r2, r3
 8002150:	0013      	movs	r3, r2
 8002152:	43da      	mvns	r2, r3
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	4013      	ands	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	691a      	ldr	r2, [r3, #16]
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	2107      	movs	r1, #7
 8002162:	400b      	ands	r3, r1
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	409a      	lsls	r2, r3
 8002168:	0013      	movs	r3, r2
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	4313      	orrs	r3, r2
 800216e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	08da      	lsrs	r2, r3, #3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3208      	adds	r2, #8
 8002178:	0092      	lsls	r2, r2, #2
 800217a:	6939      	ldr	r1, [r7, #16]
 800217c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	2203      	movs	r2, #3
 800218a:	409a      	lsls	r2, r3
 800218c:	0013      	movs	r3, r2
 800218e:	43da      	mvns	r2, r3
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	4013      	ands	r3, r2
 8002194:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2203      	movs	r2, #3
 800219c:	401a      	ands	r2, r3
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	409a      	lsls	r2, r3
 80021a4:	0013      	movs	r3, r2
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	23c0      	movs	r3, #192	@ 0xc0
 80021b8:	029b      	lsls	r3, r3, #10
 80021ba:	4013      	ands	r3, r2
 80021bc:	d100      	bne.n	80021c0 <HAL_GPIO_Init+0x17c>
 80021be:	e09a      	b.n	80022f6 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021c0:	4b54      	ldr	r3, [pc, #336]	@ (8002314 <HAL_GPIO_Init+0x2d0>)
 80021c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021c4:	4b53      	ldr	r3, [pc, #332]	@ (8002314 <HAL_GPIO_Init+0x2d0>)
 80021c6:	2101      	movs	r1, #1
 80021c8:	430a      	orrs	r2, r1
 80021ca:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80021cc:	4a52      	ldr	r2, [pc, #328]	@ (8002318 <HAL_GPIO_Init+0x2d4>)
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	089b      	lsrs	r3, r3, #2
 80021d2:	3302      	adds	r3, #2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	589b      	ldr	r3, [r3, r2]
 80021d8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	2203      	movs	r2, #3
 80021de:	4013      	ands	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	220f      	movs	r2, #15
 80021e4:	409a      	lsls	r2, r3
 80021e6:	0013      	movs	r3, r2
 80021e8:	43da      	mvns	r2, r3
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	4013      	ands	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	23a0      	movs	r3, #160	@ 0xa0
 80021f4:	05db      	lsls	r3, r3, #23
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d019      	beq.n	800222e <HAL_GPIO_Init+0x1ea>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a47      	ldr	r2, [pc, #284]	@ (800231c <HAL_GPIO_Init+0x2d8>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d013      	beq.n	800222a <HAL_GPIO_Init+0x1e6>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a46      	ldr	r2, [pc, #280]	@ (8002320 <HAL_GPIO_Init+0x2dc>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d00d      	beq.n	8002226 <HAL_GPIO_Init+0x1e2>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a45      	ldr	r2, [pc, #276]	@ (8002324 <HAL_GPIO_Init+0x2e0>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d007      	beq.n	8002222 <HAL_GPIO_Init+0x1de>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a44      	ldr	r2, [pc, #272]	@ (8002328 <HAL_GPIO_Init+0x2e4>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d101      	bne.n	800221e <HAL_GPIO_Init+0x1da>
 800221a:	2305      	movs	r3, #5
 800221c:	e008      	b.n	8002230 <HAL_GPIO_Init+0x1ec>
 800221e:	2306      	movs	r3, #6
 8002220:	e006      	b.n	8002230 <HAL_GPIO_Init+0x1ec>
 8002222:	2303      	movs	r3, #3
 8002224:	e004      	b.n	8002230 <HAL_GPIO_Init+0x1ec>
 8002226:	2302      	movs	r3, #2
 8002228:	e002      	b.n	8002230 <HAL_GPIO_Init+0x1ec>
 800222a:	2301      	movs	r3, #1
 800222c:	e000      	b.n	8002230 <HAL_GPIO_Init+0x1ec>
 800222e:	2300      	movs	r3, #0
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	2103      	movs	r1, #3
 8002234:	400a      	ands	r2, r1
 8002236:	0092      	lsls	r2, r2, #2
 8002238:	4093      	lsls	r3, r2
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	4313      	orrs	r3, r2
 800223e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002240:	4935      	ldr	r1, [pc, #212]	@ (8002318 <HAL_GPIO_Init+0x2d4>)
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	089b      	lsrs	r3, r3, #2
 8002246:	3302      	adds	r3, #2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800224e:	4b37      	ldr	r3, [pc, #220]	@ (800232c <HAL_GPIO_Init+0x2e8>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	43da      	mvns	r2, r3
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	4013      	ands	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	2380      	movs	r3, #128	@ 0x80
 8002264:	035b      	lsls	r3, r3, #13
 8002266:	4013      	ands	r3, r2
 8002268:	d003      	beq.n	8002272 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4313      	orrs	r3, r2
 8002270:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002272:	4b2e      	ldr	r3, [pc, #184]	@ (800232c <HAL_GPIO_Init+0x2e8>)
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002278:	4b2c      	ldr	r3, [pc, #176]	@ (800232c <HAL_GPIO_Init+0x2e8>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	43da      	mvns	r2, r3
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	4013      	ands	r3, r2
 8002286:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	2380      	movs	r3, #128	@ 0x80
 800228e:	039b      	lsls	r3, r3, #14
 8002290:	4013      	ands	r3, r2
 8002292:	d003      	beq.n	800229c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	4313      	orrs	r3, r2
 800229a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800229c:	4b23      	ldr	r3, [pc, #140]	@ (800232c <HAL_GPIO_Init+0x2e8>)
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80022a2:	4b22      	ldr	r3, [pc, #136]	@ (800232c <HAL_GPIO_Init+0x2e8>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	43da      	mvns	r2, r3
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	4013      	ands	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	2380      	movs	r3, #128	@ 0x80
 80022b8:	029b      	lsls	r3, r3, #10
 80022ba:	4013      	ands	r3, r2
 80022bc:	d003      	beq.n	80022c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80022c6:	4b19      	ldr	r3, [pc, #100]	@ (800232c <HAL_GPIO_Init+0x2e8>)
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022cc:	4b17      	ldr	r3, [pc, #92]	@ (800232c <HAL_GPIO_Init+0x2e8>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	43da      	mvns	r2, r3
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	4013      	ands	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	2380      	movs	r3, #128	@ 0x80
 80022e2:	025b      	lsls	r3, r3, #9
 80022e4:	4013      	ands	r3, r2
 80022e6:	d003      	beq.n	80022f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80022f0:	4b0e      	ldr	r3, [pc, #56]	@ (800232c <HAL_GPIO_Init+0x2e8>)
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	3301      	adds	r3, #1
 80022fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	40da      	lsrs	r2, r3
 8002304:	1e13      	subs	r3, r2, #0
 8002306:	d000      	beq.n	800230a <HAL_GPIO_Init+0x2c6>
 8002308:	e6a8      	b.n	800205c <HAL_GPIO_Init+0x18>
  }
}
 800230a:	46c0      	nop			@ (mov r8, r8)
 800230c:	46c0      	nop			@ (mov r8, r8)
 800230e:	46bd      	mov	sp, r7
 8002310:	b006      	add	sp, #24
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40021000 	.word	0x40021000
 8002318:	40010000 	.word	0x40010000
 800231c:	50000400 	.word	0x50000400
 8002320:	50000800 	.word	0x50000800
 8002324:	50000c00 	.word	0x50000c00
 8002328:	50001c00 	.word	0x50001c00
 800232c:	40010400 	.word	0x40010400

08002330 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	000a      	movs	r2, r1
 800233a:	1cbb      	adds	r3, r7, #2
 800233c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	1cba      	adds	r2, r7, #2
 8002344:	8812      	ldrh	r2, [r2, #0]
 8002346:	4013      	ands	r3, r2
 8002348:	d004      	beq.n	8002354 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800234a:	230f      	movs	r3, #15
 800234c:	18fb      	adds	r3, r7, r3
 800234e:	2201      	movs	r2, #1
 8002350:	701a      	strb	r2, [r3, #0]
 8002352:	e003      	b.n	800235c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002354:	230f      	movs	r3, #15
 8002356:	18fb      	adds	r3, r7, r3
 8002358:	2200      	movs	r2, #0
 800235a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800235c:	230f      	movs	r3, #15
 800235e:	18fb      	adds	r3, r7, r3
 8002360:	781b      	ldrb	r3, [r3, #0]
}
 8002362:	0018      	movs	r0, r3
 8002364:	46bd      	mov	sp, r7
 8002366:	b004      	add	sp, #16
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b082      	sub	sp, #8
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
 8002372:	0008      	movs	r0, r1
 8002374:	0011      	movs	r1, r2
 8002376:	1cbb      	adds	r3, r7, #2
 8002378:	1c02      	adds	r2, r0, #0
 800237a:	801a      	strh	r2, [r3, #0]
 800237c:	1c7b      	adds	r3, r7, #1
 800237e:	1c0a      	adds	r2, r1, #0
 8002380:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002382:	1c7b      	adds	r3, r7, #1
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d004      	beq.n	8002394 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800238a:	1cbb      	adds	r3, r7, #2
 800238c:	881a      	ldrh	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002392:	e003      	b.n	800239c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002394:	1cbb      	adds	r3, r7, #2
 8002396:	881a      	ldrh	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800239c:	46c0      	nop			@ (mov r8, r8)
 800239e:	46bd      	mov	sp, r7
 80023a0:	b002      	add	sp, #8
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e082      	b.n	80024bc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2241      	movs	r2, #65	@ 0x41
 80023ba:	5c9b      	ldrb	r3, [r3, r2]
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d107      	bne.n	80023d2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2240      	movs	r2, #64	@ 0x40
 80023c6:	2100      	movs	r1, #0
 80023c8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	0018      	movs	r0, r3
 80023ce:	f7fe ff11 	bl	80011f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2241      	movs	r2, #65	@ 0x41
 80023d6:	2124      	movs	r1, #36	@ 0x24
 80023d8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2101      	movs	r1, #1
 80023e6:	438a      	bics	r2, r1
 80023e8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4934      	ldr	r1, [pc, #208]	@ (80024c4 <HAL_I2C_Init+0x120>)
 80023f4:	400a      	ands	r2, r1
 80023f6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4931      	ldr	r1, [pc, #196]	@ (80024c8 <HAL_I2C_Init+0x124>)
 8002404:	400a      	ands	r2, r1
 8002406:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d108      	bne.n	8002422 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2180      	movs	r1, #128	@ 0x80
 800241a:	0209      	lsls	r1, r1, #8
 800241c:	430a      	orrs	r2, r1
 800241e:	609a      	str	r2, [r3, #8]
 8002420:	e007      	b.n	8002432 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	689a      	ldr	r2, [r3, #8]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2184      	movs	r1, #132	@ 0x84
 800242c:	0209      	lsls	r1, r1, #8
 800242e:	430a      	orrs	r2, r1
 8002430:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	2b02      	cmp	r3, #2
 8002438:	d104      	bne.n	8002444 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2280      	movs	r2, #128	@ 0x80
 8002440:	0112      	lsls	r2, r2, #4
 8002442:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	491f      	ldr	r1, [pc, #124]	@ (80024cc <HAL_I2C_Init+0x128>)
 8002450:	430a      	orrs	r2, r1
 8002452:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68da      	ldr	r2, [r3, #12]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	491a      	ldr	r1, [pc, #104]	@ (80024c8 <HAL_I2C_Init+0x124>)
 8002460:	400a      	ands	r2, r1
 8002462:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	691a      	ldr	r2, [r3, #16]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	431a      	orrs	r2, r3
 800246e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	430a      	orrs	r2, r1
 800247c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	69d9      	ldr	r1, [r3, #28]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a1a      	ldr	r2, [r3, #32]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	430a      	orrs	r2, r1
 800248c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2101      	movs	r1, #1
 800249a:	430a      	orrs	r2, r1
 800249c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2241      	movs	r2, #65	@ 0x41
 80024a8:	2120      	movs	r1, #32
 80024aa:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2242      	movs	r2, #66	@ 0x42
 80024b6:	2100      	movs	r1, #0
 80024b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	0018      	movs	r0, r3
 80024be:	46bd      	mov	sp, r7
 80024c0:	b002      	add	sp, #8
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	f0ffffff 	.word	0xf0ffffff
 80024c8:	ffff7fff 	.word	0xffff7fff
 80024cc:	02008000 	.word	0x02008000

080024d0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80024d0:	b590      	push	{r4, r7, lr}
 80024d2:	b089      	sub	sp, #36	@ 0x24
 80024d4:	af02      	add	r7, sp, #8
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	0008      	movs	r0, r1
 80024da:	607a      	str	r2, [r7, #4]
 80024dc:	0019      	movs	r1, r3
 80024de:	230a      	movs	r3, #10
 80024e0:	18fb      	adds	r3, r7, r3
 80024e2:	1c02      	adds	r2, r0, #0
 80024e4:	801a      	strh	r2, [r3, #0]
 80024e6:	2308      	movs	r3, #8
 80024e8:	18fb      	adds	r3, r7, r3
 80024ea:	1c0a      	adds	r2, r1, #0
 80024ec:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2241      	movs	r2, #65	@ 0x41
 80024f2:	5c9b      	ldrb	r3, [r3, r2]
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b20      	cmp	r3, #32
 80024f8:	d000      	beq.n	80024fc <HAL_I2C_Master_Transmit+0x2c>
 80024fa:	e0e7      	b.n	80026cc <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2240      	movs	r2, #64	@ 0x40
 8002500:	5c9b      	ldrb	r3, [r3, r2]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d101      	bne.n	800250a <HAL_I2C_Master_Transmit+0x3a>
 8002506:	2302      	movs	r3, #2
 8002508:	e0e1      	b.n	80026ce <HAL_I2C_Master_Transmit+0x1fe>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2240      	movs	r2, #64	@ 0x40
 800250e:	2101      	movs	r1, #1
 8002510:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002512:	f7ff fcb5 	bl	8001e80 <HAL_GetTick>
 8002516:	0003      	movs	r3, r0
 8002518:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800251a:	2380      	movs	r3, #128	@ 0x80
 800251c:	0219      	lsls	r1, r3, #8
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	2319      	movs	r3, #25
 8002526:	2201      	movs	r2, #1
 8002528:	f000 fa04 	bl	8002934 <I2C_WaitOnFlagUntilTimeout>
 800252c:	1e03      	subs	r3, r0, #0
 800252e:	d001      	beq.n	8002534 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e0cc      	b.n	80026ce <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2241      	movs	r2, #65	@ 0x41
 8002538:	2121      	movs	r1, #33	@ 0x21
 800253a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2242      	movs	r2, #66	@ 0x42
 8002540:	2110      	movs	r1, #16
 8002542:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2208      	movs	r2, #8
 8002554:	18ba      	adds	r2, r7, r2
 8002556:	8812      	ldrh	r2, [r2, #0]
 8002558:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002564:	b29b      	uxth	r3, r3
 8002566:	2bff      	cmp	r3, #255	@ 0xff
 8002568:	d911      	bls.n	800258e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	22ff      	movs	r2, #255	@ 0xff
 800256e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002574:	b2da      	uxtb	r2, r3
 8002576:	2380      	movs	r3, #128	@ 0x80
 8002578:	045c      	lsls	r4, r3, #17
 800257a:	230a      	movs	r3, #10
 800257c:	18fb      	adds	r3, r7, r3
 800257e:	8819      	ldrh	r1, [r3, #0]
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	4b55      	ldr	r3, [pc, #340]	@ (80026d8 <HAL_I2C_Master_Transmit+0x208>)
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	0023      	movs	r3, r4
 8002588:	f000 fc26 	bl	8002dd8 <I2C_TransferConfig>
 800258c:	e075      	b.n	800267a <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002592:	b29a      	uxth	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800259c:	b2da      	uxtb	r2, r3
 800259e:	2380      	movs	r3, #128	@ 0x80
 80025a0:	049c      	lsls	r4, r3, #18
 80025a2:	230a      	movs	r3, #10
 80025a4:	18fb      	adds	r3, r7, r3
 80025a6:	8819      	ldrh	r1, [r3, #0]
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	4b4b      	ldr	r3, [pc, #300]	@ (80026d8 <HAL_I2C_Master_Transmit+0x208>)
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	0023      	movs	r3, r4
 80025b0:	f000 fc12 	bl	8002dd8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80025b4:	e061      	b.n	800267a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	0018      	movs	r0, r3
 80025be:	f000 fa07 	bl	80029d0 <I2C_WaitOnTXISFlagUntilTimeout>
 80025c2:	1e03      	subs	r3, r0, #0
 80025c4:	d001      	beq.n	80025ca <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e081      	b.n	80026ce <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ce:	781a      	ldrb	r2, [r3, #0]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025da:	1c5a      	adds	r2, r3, #1
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	3b01      	subs	r3, #1
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025f2:	3b01      	subs	r3, #1
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025fe:	b29b      	uxth	r3, r3
 8002600:	2b00      	cmp	r3, #0
 8002602:	d03a      	beq.n	800267a <HAL_I2C_Master_Transmit+0x1aa>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002608:	2b00      	cmp	r3, #0
 800260a:	d136      	bne.n	800267a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800260c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	9300      	str	r3, [sp, #0]
 8002614:	0013      	movs	r3, r2
 8002616:	2200      	movs	r2, #0
 8002618:	2180      	movs	r1, #128	@ 0x80
 800261a:	f000 f98b 	bl	8002934 <I2C_WaitOnFlagUntilTimeout>
 800261e:	1e03      	subs	r3, r0, #0
 8002620:	d001      	beq.n	8002626 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e053      	b.n	80026ce <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800262a:	b29b      	uxth	r3, r3
 800262c:	2bff      	cmp	r3, #255	@ 0xff
 800262e:	d911      	bls.n	8002654 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	22ff      	movs	r2, #255	@ 0xff
 8002634:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800263a:	b2da      	uxtb	r2, r3
 800263c:	2380      	movs	r3, #128	@ 0x80
 800263e:	045c      	lsls	r4, r3, #17
 8002640:	230a      	movs	r3, #10
 8002642:	18fb      	adds	r3, r7, r3
 8002644:	8819      	ldrh	r1, [r3, #0]
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	2300      	movs	r3, #0
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	0023      	movs	r3, r4
 800264e:	f000 fbc3 	bl	8002dd8 <I2C_TransferConfig>
 8002652:	e012      	b.n	800267a <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002658:	b29a      	uxth	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002662:	b2da      	uxtb	r2, r3
 8002664:	2380      	movs	r3, #128	@ 0x80
 8002666:	049c      	lsls	r4, r3, #18
 8002668:	230a      	movs	r3, #10
 800266a:	18fb      	adds	r3, r7, r3
 800266c:	8819      	ldrh	r1, [r3, #0]
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	2300      	movs	r3, #0
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	0023      	movs	r3, r4
 8002676:	f000 fbaf 	bl	8002dd8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800267e:	b29b      	uxth	r3, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	d198      	bne.n	80025b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002684:	697a      	ldr	r2, [r7, #20]
 8002686:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	0018      	movs	r0, r3
 800268c:	f000 f9e6 	bl	8002a5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002690:	1e03      	subs	r3, r0, #0
 8002692:	d001      	beq.n	8002698 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e01a      	b.n	80026ce <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2220      	movs	r2, #32
 800269e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	490c      	ldr	r1, [pc, #48]	@ (80026dc <HAL_I2C_Master_Transmit+0x20c>)
 80026ac:	400a      	ands	r2, r1
 80026ae:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2241      	movs	r2, #65	@ 0x41
 80026b4:	2120      	movs	r1, #32
 80026b6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2242      	movs	r2, #66	@ 0x42
 80026bc:	2100      	movs	r1, #0
 80026be:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2240      	movs	r2, #64	@ 0x40
 80026c4:	2100      	movs	r1, #0
 80026c6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80026c8:	2300      	movs	r3, #0
 80026ca:	e000      	b.n	80026ce <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80026cc:	2302      	movs	r3, #2
  }
}
 80026ce:	0018      	movs	r0, r3
 80026d0:	46bd      	mov	sp, r7
 80026d2:	b007      	add	sp, #28
 80026d4:	bd90      	pop	{r4, r7, pc}
 80026d6:	46c0      	nop			@ (mov r8, r8)
 80026d8:	80002000 	.word	0x80002000
 80026dc:	fe00e800 	.word	0xfe00e800

080026e0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80026e0:	b590      	push	{r4, r7, lr}
 80026e2:	b089      	sub	sp, #36	@ 0x24
 80026e4:	af02      	add	r7, sp, #8
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	0008      	movs	r0, r1
 80026ea:	607a      	str	r2, [r7, #4]
 80026ec:	0019      	movs	r1, r3
 80026ee:	230a      	movs	r3, #10
 80026f0:	18fb      	adds	r3, r7, r3
 80026f2:	1c02      	adds	r2, r0, #0
 80026f4:	801a      	strh	r2, [r3, #0]
 80026f6:	2308      	movs	r3, #8
 80026f8:	18fb      	adds	r3, r7, r3
 80026fa:	1c0a      	adds	r2, r1, #0
 80026fc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2241      	movs	r2, #65	@ 0x41
 8002702:	5c9b      	ldrb	r3, [r3, r2]
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b20      	cmp	r3, #32
 8002708:	d000      	beq.n	800270c <HAL_I2C_Master_Receive+0x2c>
 800270a:	e0e8      	b.n	80028de <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2240      	movs	r2, #64	@ 0x40
 8002710:	5c9b      	ldrb	r3, [r3, r2]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d101      	bne.n	800271a <HAL_I2C_Master_Receive+0x3a>
 8002716:	2302      	movs	r3, #2
 8002718:	e0e2      	b.n	80028e0 <HAL_I2C_Master_Receive+0x200>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2240      	movs	r2, #64	@ 0x40
 800271e:	2101      	movs	r1, #1
 8002720:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002722:	f7ff fbad 	bl	8001e80 <HAL_GetTick>
 8002726:	0003      	movs	r3, r0
 8002728:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800272a:	2380      	movs	r3, #128	@ 0x80
 800272c:	0219      	lsls	r1, r3, #8
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	2319      	movs	r3, #25
 8002736:	2201      	movs	r2, #1
 8002738:	f000 f8fc 	bl	8002934 <I2C_WaitOnFlagUntilTimeout>
 800273c:	1e03      	subs	r3, r0, #0
 800273e:	d001      	beq.n	8002744 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e0cd      	b.n	80028e0 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2241      	movs	r2, #65	@ 0x41
 8002748:	2122      	movs	r1, #34	@ 0x22
 800274a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2242      	movs	r2, #66	@ 0x42
 8002750:	2110      	movs	r1, #16
 8002752:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2208      	movs	r2, #8
 8002764:	18ba      	adds	r2, r7, r2
 8002766:	8812      	ldrh	r2, [r2, #0]
 8002768:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002774:	b29b      	uxth	r3, r3
 8002776:	2bff      	cmp	r3, #255	@ 0xff
 8002778:	d911      	bls.n	800279e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	22ff      	movs	r2, #255	@ 0xff
 800277e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002784:	b2da      	uxtb	r2, r3
 8002786:	2380      	movs	r3, #128	@ 0x80
 8002788:	045c      	lsls	r4, r3, #17
 800278a:	230a      	movs	r3, #10
 800278c:	18fb      	adds	r3, r7, r3
 800278e:	8819      	ldrh	r1, [r3, #0]
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	4b55      	ldr	r3, [pc, #340]	@ (80028e8 <HAL_I2C_Master_Receive+0x208>)
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	0023      	movs	r3, r4
 8002798:	f000 fb1e 	bl	8002dd8 <I2C_TransferConfig>
 800279c:	e076      	b.n	800288c <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	2380      	movs	r3, #128	@ 0x80
 80027b0:	049c      	lsls	r4, r3, #18
 80027b2:	230a      	movs	r3, #10
 80027b4:	18fb      	adds	r3, r7, r3
 80027b6:	8819      	ldrh	r1, [r3, #0]
 80027b8:	68f8      	ldr	r0, [r7, #12]
 80027ba:	4b4b      	ldr	r3, [pc, #300]	@ (80028e8 <HAL_I2C_Master_Receive+0x208>)
 80027bc:	9300      	str	r3, [sp, #0]
 80027be:	0023      	movs	r3, r4
 80027c0:	f000 fb0a 	bl	8002dd8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80027c4:	e062      	b.n	800288c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	0018      	movs	r0, r3
 80027ce:	f000 f989 	bl	8002ae4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027d2:	1e03      	subs	r3, r0, #0
 80027d4:	d001      	beq.n	80027da <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e082      	b.n	80028e0 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ec:	1c5a      	adds	r2, r3, #1
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027f6:	3b01      	subs	r3, #1
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002802:	b29b      	uxth	r3, r3
 8002804:	3b01      	subs	r3, #1
 8002806:	b29a      	uxth	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002810:	b29b      	uxth	r3, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d03a      	beq.n	800288c <HAL_I2C_Master_Receive+0x1ac>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800281a:	2b00      	cmp	r3, #0
 800281c:	d136      	bne.n	800288c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800281e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	0013      	movs	r3, r2
 8002828:	2200      	movs	r2, #0
 800282a:	2180      	movs	r1, #128	@ 0x80
 800282c:	f000 f882 	bl	8002934 <I2C_WaitOnFlagUntilTimeout>
 8002830:	1e03      	subs	r3, r0, #0
 8002832:	d001      	beq.n	8002838 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e053      	b.n	80028e0 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800283c:	b29b      	uxth	r3, r3
 800283e:	2bff      	cmp	r3, #255	@ 0xff
 8002840:	d911      	bls.n	8002866 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	22ff      	movs	r2, #255	@ 0xff
 8002846:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800284c:	b2da      	uxtb	r2, r3
 800284e:	2380      	movs	r3, #128	@ 0x80
 8002850:	045c      	lsls	r4, r3, #17
 8002852:	230a      	movs	r3, #10
 8002854:	18fb      	adds	r3, r7, r3
 8002856:	8819      	ldrh	r1, [r3, #0]
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	2300      	movs	r3, #0
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	0023      	movs	r3, r4
 8002860:	f000 faba 	bl	8002dd8 <I2C_TransferConfig>
 8002864:	e012      	b.n	800288c <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800286a:	b29a      	uxth	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002874:	b2da      	uxtb	r2, r3
 8002876:	2380      	movs	r3, #128	@ 0x80
 8002878:	049c      	lsls	r4, r3, #18
 800287a:	230a      	movs	r3, #10
 800287c:	18fb      	adds	r3, r7, r3
 800287e:	8819      	ldrh	r1, [r3, #0]
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	2300      	movs	r3, #0
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	0023      	movs	r3, r4
 8002888:	f000 faa6 	bl	8002dd8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002890:	b29b      	uxth	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d197      	bne.n	80027c6 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	0018      	movs	r0, r3
 800289e:	f000 f8dd 	bl	8002a5c <I2C_WaitOnSTOPFlagUntilTimeout>
 80028a2:	1e03      	subs	r3, r0, #0
 80028a4:	d001      	beq.n	80028aa <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e01a      	b.n	80028e0 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2220      	movs	r2, #32
 80028b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685a      	ldr	r2, [r3, #4]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	490b      	ldr	r1, [pc, #44]	@ (80028ec <HAL_I2C_Master_Receive+0x20c>)
 80028be:	400a      	ands	r2, r1
 80028c0:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2241      	movs	r2, #65	@ 0x41
 80028c6:	2120      	movs	r1, #32
 80028c8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2242      	movs	r2, #66	@ 0x42
 80028ce:	2100      	movs	r1, #0
 80028d0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2240      	movs	r2, #64	@ 0x40
 80028d6:	2100      	movs	r1, #0
 80028d8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80028da:	2300      	movs	r3, #0
 80028dc:	e000      	b.n	80028e0 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80028de:	2302      	movs	r3, #2
  }
}
 80028e0:	0018      	movs	r0, r3
 80028e2:	46bd      	mov	sp, r7
 80028e4:	b007      	add	sp, #28
 80028e6:	bd90      	pop	{r4, r7, pc}
 80028e8:	80002400 	.word	0x80002400
 80028ec:	fe00e800 	.word	0xfe00e800

080028f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	2202      	movs	r2, #2
 8002900:	4013      	ands	r3, r2
 8002902:	2b02      	cmp	r3, #2
 8002904:	d103      	bne.n	800290e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2200      	movs	r2, #0
 800290c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	2201      	movs	r2, #1
 8002916:	4013      	ands	r3, r2
 8002918:	2b01      	cmp	r3, #1
 800291a:	d007      	beq.n	800292c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	699a      	ldr	r2, [r3, #24]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2101      	movs	r1, #1
 8002928:	430a      	orrs	r2, r1
 800292a:	619a      	str	r2, [r3, #24]
  }
}
 800292c:	46c0      	nop			@ (mov r8, r8)
 800292e:	46bd      	mov	sp, r7
 8002930:	b002      	add	sp, #8
 8002932:	bd80      	pop	{r7, pc}

08002934 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	603b      	str	r3, [r7, #0]
 8002940:	1dfb      	adds	r3, r7, #7
 8002942:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002944:	e030      	b.n	80029a8 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	3301      	adds	r3, #1
 800294a:	d02d      	beq.n	80029a8 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800294c:	f7ff fa98 	bl	8001e80 <HAL_GetTick>
 8002950:	0002      	movs	r2, r0
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	429a      	cmp	r2, r3
 800295a:	d302      	bcc.n	8002962 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d122      	bne.n	80029a8 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	68ba      	ldr	r2, [r7, #8]
 800296a:	4013      	ands	r3, r2
 800296c:	68ba      	ldr	r2, [r7, #8]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	425a      	negs	r2, r3
 8002972:	4153      	adcs	r3, r2
 8002974:	b2db      	uxtb	r3, r3
 8002976:	001a      	movs	r2, r3
 8002978:	1dfb      	adds	r3, r7, #7
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	429a      	cmp	r2, r3
 800297e:	d113      	bne.n	80029a8 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002984:	2220      	movs	r2, #32
 8002986:	431a      	orrs	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2241      	movs	r2, #65	@ 0x41
 8002990:	2120      	movs	r1, #32
 8002992:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2242      	movs	r2, #66	@ 0x42
 8002998:	2100      	movs	r1, #0
 800299a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2240      	movs	r2, #64	@ 0x40
 80029a0:	2100      	movs	r1, #0
 80029a2:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e00f      	b.n	80029c8 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	4013      	ands	r3, r2
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	425a      	negs	r2, r3
 80029b8:	4153      	adcs	r3, r2
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	001a      	movs	r2, r3
 80029be:	1dfb      	adds	r3, r7, #7
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d0bf      	beq.n	8002946 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	0018      	movs	r0, r3
 80029ca:	46bd      	mov	sp, r7
 80029cc:	b004      	add	sp, #16
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029dc:	e032      	b.n	8002a44 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	68b9      	ldr	r1, [r7, #8]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	0018      	movs	r0, r3
 80029e6:	f000 f8ff 	bl	8002be8 <I2C_IsErrorOccurred>
 80029ea:	1e03      	subs	r3, r0, #0
 80029ec:	d001      	beq.n	80029f2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e030      	b.n	8002a54 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	3301      	adds	r3, #1
 80029f6:	d025      	beq.n	8002a44 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029f8:	f7ff fa42 	bl	8001e80 <HAL_GetTick>
 80029fc:	0002      	movs	r2, r0
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	68ba      	ldr	r2, [r7, #8]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d302      	bcc.n	8002a0e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d11a      	bne.n	8002a44 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	2202      	movs	r2, #2
 8002a16:	4013      	ands	r3, r2
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d013      	beq.n	8002a44 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a20:	2220      	movs	r2, #32
 8002a22:	431a      	orrs	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2241      	movs	r2, #65	@ 0x41
 8002a2c:	2120      	movs	r1, #32
 8002a2e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2242      	movs	r2, #66	@ 0x42
 8002a34:	2100      	movs	r1, #0
 8002a36:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2240      	movs	r2, #64	@ 0x40
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e007      	b.n	8002a54 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d1c5      	bne.n	80029de <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	0018      	movs	r0, r3
 8002a56:	46bd      	mov	sp, r7
 8002a58:	b004      	add	sp, #16
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a68:	e02f      	b.n	8002aca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	68b9      	ldr	r1, [r7, #8]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	0018      	movs	r0, r3
 8002a72:	f000 f8b9 	bl	8002be8 <I2C_IsErrorOccurred>
 8002a76:	1e03      	subs	r3, r0, #0
 8002a78:	d001      	beq.n	8002a7e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e02d      	b.n	8002ada <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a7e:	f7ff f9ff 	bl	8001e80 <HAL_GetTick>
 8002a82:	0002      	movs	r2, r0
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d302      	bcc.n	8002a94 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d11a      	bne.n	8002aca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	2b20      	cmp	r3, #32
 8002aa0:	d013      	beq.n	8002aca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	431a      	orrs	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2241      	movs	r2, #65	@ 0x41
 8002ab2:	2120      	movs	r1, #32
 8002ab4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2242      	movs	r2, #66	@ 0x42
 8002aba:	2100      	movs	r1, #0
 8002abc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2240      	movs	r2, #64	@ 0x40
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e007      	b.n	8002ada <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	2b20      	cmp	r3, #32
 8002ad6:	d1c8      	bne.n	8002a6a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	0018      	movs	r0, r3
 8002adc:	46bd      	mov	sp, r7
 8002ade:	b004      	add	sp, #16
 8002ae0:	bd80      	pop	{r7, pc}
	...

08002ae4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002af0:	e06b      	b.n	8002bca <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	68b9      	ldr	r1, [r7, #8]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	0018      	movs	r0, r3
 8002afa:	f000 f875 	bl	8002be8 <I2C_IsErrorOccurred>
 8002afe:	1e03      	subs	r3, r0, #0
 8002b00:	d001      	beq.n	8002b06 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e069      	b.n	8002bda <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	2220      	movs	r2, #32
 8002b0e:	4013      	ands	r3, r2
 8002b10:	2b20      	cmp	r3, #32
 8002b12:	d138      	bne.n	8002b86 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	2204      	movs	r2, #4
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	d105      	bne.n	8002b2e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	e055      	b.n	8002bda <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	2210      	movs	r2, #16
 8002b36:	4013      	ands	r3, r2
 8002b38:	2b10      	cmp	r3, #16
 8002b3a:	d107      	bne.n	8002b4c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2210      	movs	r2, #16
 8002b42:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2204      	movs	r2, #4
 8002b48:	645a      	str	r2, [r3, #68]	@ 0x44
 8002b4a:	e002      	b.n	8002b52 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2220      	movs	r2, #32
 8002b58:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	685a      	ldr	r2, [r3, #4]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	491f      	ldr	r1, [pc, #124]	@ (8002be4 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8002b66:	400a      	ands	r2, r1
 8002b68:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2241      	movs	r2, #65	@ 0x41
 8002b6e:	2120      	movs	r1, #32
 8002b70:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2242      	movs	r2, #66	@ 0x42
 8002b76:	2100      	movs	r1, #0
 8002b78:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2240      	movs	r2, #64	@ 0x40
 8002b7e:	2100      	movs	r1, #0
 8002b80:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e029      	b.n	8002bda <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b86:	f7ff f97b 	bl	8001e80 <HAL_GetTick>
 8002b8a:	0002      	movs	r2, r0
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	68ba      	ldr	r2, [r7, #8]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d302      	bcc.n	8002b9c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d116      	bne.n	8002bca <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	2204      	movs	r2, #4
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d00f      	beq.n	8002bca <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bae:	2220      	movs	r2, #32
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2241      	movs	r2, #65	@ 0x41
 8002bba:	2120      	movs	r1, #32
 8002bbc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2240      	movs	r2, #64	@ 0x40
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e007      	b.n	8002bda <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	2204      	movs	r2, #4
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d18c      	bne.n	8002af2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	0018      	movs	r0, r3
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	b004      	add	sp, #16
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	46c0      	nop			@ (mov r8, r8)
 8002be4:	fe00e800 	.word	0xfe00e800

08002be8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b08a      	sub	sp, #40	@ 0x28
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf4:	2327      	movs	r3, #39	@ 0x27
 8002bf6:	18fb      	adds	r3, r7, r3
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002c04:	2300      	movs	r3, #0
 8002c06:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	2210      	movs	r2, #16
 8002c10:	4013      	ands	r3, r2
 8002c12:	d100      	bne.n	8002c16 <I2C_IsErrorOccurred+0x2e>
 8002c14:	e079      	b.n	8002d0a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2210      	movs	r2, #16
 8002c1c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c1e:	e057      	b.n	8002cd0 <I2C_IsErrorOccurred+0xe8>
 8002c20:	2227      	movs	r2, #39	@ 0x27
 8002c22:	18bb      	adds	r3, r7, r2
 8002c24:	18ba      	adds	r2, r7, r2
 8002c26:	7812      	ldrb	r2, [r2, #0]
 8002c28:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	d04f      	beq.n	8002cd0 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c30:	f7ff f926 	bl	8001e80 <HAL_GetTick>
 8002c34:	0002      	movs	r2, r0
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	68ba      	ldr	r2, [r7, #8]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d302      	bcc.n	8002c46 <I2C_IsErrorOccurred+0x5e>
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d144      	bne.n	8002cd0 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	2380      	movs	r3, #128	@ 0x80
 8002c4e:	01db      	lsls	r3, r3, #7
 8002c50:	4013      	ands	r3, r2
 8002c52:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002c54:	2013      	movs	r0, #19
 8002c56:	183b      	adds	r3, r7, r0
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	2142      	movs	r1, #66	@ 0x42
 8002c5c:	5c52      	ldrb	r2, [r2, r1]
 8002c5e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	699a      	ldr	r2, [r3, #24]
 8002c66:	2380      	movs	r3, #128	@ 0x80
 8002c68:	021b      	lsls	r3, r3, #8
 8002c6a:	401a      	ands	r2, r3
 8002c6c:	2380      	movs	r3, #128	@ 0x80
 8002c6e:	021b      	lsls	r3, r3, #8
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d126      	bne.n	8002cc2 <I2C_IsErrorOccurred+0xda>
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	2380      	movs	r3, #128	@ 0x80
 8002c78:	01db      	lsls	r3, r3, #7
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d021      	beq.n	8002cc2 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8002c7e:	183b      	adds	r3, r7, r0
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	2b20      	cmp	r3, #32
 8002c84:	d01d      	beq.n	8002cc2 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2180      	movs	r1, #128	@ 0x80
 8002c92:	01c9      	lsls	r1, r1, #7
 8002c94:	430a      	orrs	r2, r1
 8002c96:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002c98:	f7ff f8f2 	bl	8001e80 <HAL_GetTick>
 8002c9c:	0003      	movs	r3, r0
 8002c9e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ca0:	e00f      	b.n	8002cc2 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002ca2:	f7ff f8ed 	bl	8001e80 <HAL_GetTick>
 8002ca6:	0002      	movs	r2, r0
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b19      	cmp	r3, #25
 8002cae:	d908      	bls.n	8002cc2 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002cb0:	6a3b      	ldr	r3, [r7, #32]
 8002cb2:	2220      	movs	r2, #32
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002cb8:	2327      	movs	r3, #39	@ 0x27
 8002cba:	18fb      	adds	r3, r7, r3
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	701a      	strb	r2, [r3, #0]

              break;
 8002cc0:	e006      	b.n	8002cd0 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	2220      	movs	r2, #32
 8002cca:	4013      	ands	r3, r2
 8002ccc:	2b20      	cmp	r3, #32
 8002cce:	d1e8      	bne.n	8002ca2 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	4013      	ands	r3, r2
 8002cda:	2b20      	cmp	r3, #32
 8002cdc:	d004      	beq.n	8002ce8 <I2C_IsErrorOccurred+0x100>
 8002cde:	2327      	movs	r3, #39	@ 0x27
 8002ce0:	18fb      	adds	r3, r7, r3
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d09b      	beq.n	8002c20 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002ce8:	2327      	movs	r3, #39	@ 0x27
 8002cea:	18fb      	adds	r3, r7, r3
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d103      	bne.n	8002cfa <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002cfa:	6a3b      	ldr	r3, [r7, #32]
 8002cfc:	2204      	movs	r2, #4
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002d02:	2327      	movs	r3, #39	@ 0x27
 8002d04:	18fb      	adds	r3, r7, r3
 8002d06:	2201      	movs	r2, #1
 8002d08:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	2380      	movs	r3, #128	@ 0x80
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	4013      	ands	r3, r2
 8002d1a:	d00c      	beq.n	8002d36 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002d1c:	6a3b      	ldr	r3, [r7, #32]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	4313      	orrs	r3, r2
 8002d22:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2280      	movs	r2, #128	@ 0x80
 8002d2a:	0052      	lsls	r2, r2, #1
 8002d2c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d2e:	2327      	movs	r3, #39	@ 0x27
 8002d30:	18fb      	adds	r3, r7, r3
 8002d32:	2201      	movs	r2, #1
 8002d34:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	2380      	movs	r3, #128	@ 0x80
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	d00c      	beq.n	8002d5a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002d40:	6a3b      	ldr	r3, [r7, #32]
 8002d42:	2208      	movs	r2, #8
 8002d44:	4313      	orrs	r3, r2
 8002d46:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2280      	movs	r2, #128	@ 0x80
 8002d4e:	00d2      	lsls	r2, r2, #3
 8002d50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d52:	2327      	movs	r3, #39	@ 0x27
 8002d54:	18fb      	adds	r3, r7, r3
 8002d56:	2201      	movs	r2, #1
 8002d58:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	2380      	movs	r3, #128	@ 0x80
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4013      	ands	r3, r2
 8002d62:	d00c      	beq.n	8002d7e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002d64:	6a3b      	ldr	r3, [r7, #32]
 8002d66:	2202      	movs	r2, #2
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2280      	movs	r2, #128	@ 0x80
 8002d72:	0092      	lsls	r2, r2, #2
 8002d74:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d76:	2327      	movs	r3, #39	@ 0x27
 8002d78:	18fb      	adds	r3, r7, r3
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002d7e:	2327      	movs	r3, #39	@ 0x27
 8002d80:	18fb      	adds	r3, r7, r3
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d01d      	beq.n	8002dc4 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	f7ff fdb0 	bl	80028f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	490e      	ldr	r1, [pc, #56]	@ (8002dd4 <I2C_IsErrorOccurred+0x1ec>)
 8002d9c:	400a      	ands	r2, r1
 8002d9e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002da4:	6a3b      	ldr	r3, [r7, #32]
 8002da6:	431a      	orrs	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2241      	movs	r2, #65	@ 0x41
 8002db0:	2120      	movs	r1, #32
 8002db2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2242      	movs	r2, #66	@ 0x42
 8002db8:	2100      	movs	r1, #0
 8002dba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2240      	movs	r2, #64	@ 0x40
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002dc4:	2327      	movs	r3, #39	@ 0x27
 8002dc6:	18fb      	adds	r3, r7, r3
 8002dc8:	781b      	ldrb	r3, [r3, #0]
}
 8002dca:	0018      	movs	r0, r3
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	b00a      	add	sp, #40	@ 0x28
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	46c0      	nop			@ (mov r8, r8)
 8002dd4:	fe00e800 	.word	0xfe00e800

08002dd8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002dd8:	b590      	push	{r4, r7, lr}
 8002dda:	b087      	sub	sp, #28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	0008      	movs	r0, r1
 8002de2:	0011      	movs	r1, r2
 8002de4:	607b      	str	r3, [r7, #4]
 8002de6:	240a      	movs	r4, #10
 8002de8:	193b      	adds	r3, r7, r4
 8002dea:	1c02      	adds	r2, r0, #0
 8002dec:	801a      	strh	r2, [r3, #0]
 8002dee:	2009      	movs	r0, #9
 8002df0:	183b      	adds	r3, r7, r0
 8002df2:	1c0a      	adds	r2, r1, #0
 8002df4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002df6:	193b      	adds	r3, r7, r4
 8002df8:	881b      	ldrh	r3, [r3, #0]
 8002dfa:	059b      	lsls	r3, r3, #22
 8002dfc:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002dfe:	183b      	adds	r3, r7, r0
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	0419      	lsls	r1, r3, #16
 8002e04:	23ff      	movs	r3, #255	@ 0xff
 8002e06:	041b      	lsls	r3, r3, #16
 8002e08:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e0a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e12:	4313      	orrs	r3, r2
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	085b      	lsrs	r3, r3, #1
 8002e18:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e22:	0d51      	lsrs	r1, r2, #21
 8002e24:	2280      	movs	r2, #128	@ 0x80
 8002e26:	00d2      	lsls	r2, r2, #3
 8002e28:	400a      	ands	r2, r1
 8002e2a:	4907      	ldr	r1, [pc, #28]	@ (8002e48 <I2C_TransferConfig+0x70>)
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	43d2      	mvns	r2, r2
 8002e30:	401a      	ands	r2, r3
 8002e32:	0011      	movs	r1, r2
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	697a      	ldr	r2, [r7, #20]
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002e3e:	46c0      	nop			@ (mov r8, r8)
 8002e40:	46bd      	mov	sp, r7
 8002e42:	b007      	add	sp, #28
 8002e44:	bd90      	pop	{r4, r7, pc}
 8002e46:	46c0      	nop			@ (mov r8, r8)
 8002e48:	03ff63ff 	.word	0x03ff63ff

08002e4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2241      	movs	r2, #65	@ 0x41
 8002e5a:	5c9b      	ldrb	r3, [r3, r2]
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b20      	cmp	r3, #32
 8002e60:	d138      	bne.n	8002ed4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2240      	movs	r2, #64	@ 0x40
 8002e66:	5c9b      	ldrb	r3, [r3, r2]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d101      	bne.n	8002e70 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	e032      	b.n	8002ed6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2240      	movs	r2, #64	@ 0x40
 8002e74:	2101      	movs	r1, #1
 8002e76:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2241      	movs	r2, #65	@ 0x41
 8002e7c:	2124      	movs	r1, #36	@ 0x24
 8002e7e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	438a      	bics	r2, r1
 8002e8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4911      	ldr	r1, [pc, #68]	@ (8002ee0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002e9c:	400a      	ands	r2, r1
 8002e9e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6819      	ldr	r1, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2101      	movs	r1, #1
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2241      	movs	r2, #65	@ 0x41
 8002ec4:	2120      	movs	r1, #32
 8002ec6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2240      	movs	r2, #64	@ 0x40
 8002ecc:	2100      	movs	r1, #0
 8002ece:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	e000      	b.n	8002ed6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ed4:	2302      	movs	r3, #2
  }
}
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	b002      	add	sp, #8
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	46c0      	nop			@ (mov r8, r8)
 8002ee0:	ffffefff 	.word	0xffffefff

08002ee4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ee4:	b5b0      	push	{r4, r5, r7, lr}
 8002ee6:	b08a      	sub	sp, #40	@ 0x28
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d102      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	f000 fbaf 	bl	8003656 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ef8:	4bcf      	ldr	r3, [pc, #828]	@ (8003238 <HAL_RCC_OscConfig+0x354>)
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	220c      	movs	r2, #12
 8002efe:	4013      	ands	r3, r2
 8002f00:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f02:	4bcd      	ldr	r3, [pc, #820]	@ (8003238 <HAL_RCC_OscConfig+0x354>)
 8002f04:	68da      	ldr	r2, [r3, #12]
 8002f06:	2380      	movs	r3, #128	@ 0x80
 8002f08:	025b      	lsls	r3, r3, #9
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2201      	movs	r2, #1
 8002f14:	4013      	ands	r3, r2
 8002f16:	d100      	bne.n	8002f1a <HAL_RCC_OscConfig+0x36>
 8002f18:	e07e      	b.n	8003018 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f1a:	6a3b      	ldr	r3, [r7, #32]
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	d007      	beq.n	8002f30 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f20:	6a3b      	ldr	r3, [r7, #32]
 8002f22:	2b0c      	cmp	r3, #12
 8002f24:	d112      	bne.n	8002f4c <HAL_RCC_OscConfig+0x68>
 8002f26:	69fa      	ldr	r2, [r7, #28]
 8002f28:	2380      	movs	r3, #128	@ 0x80
 8002f2a:	025b      	lsls	r3, r3, #9
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d10d      	bne.n	8002f4c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f30:	4bc1      	ldr	r3, [pc, #772]	@ (8003238 <HAL_RCC_OscConfig+0x354>)
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	2380      	movs	r3, #128	@ 0x80
 8002f36:	029b      	lsls	r3, r3, #10
 8002f38:	4013      	ands	r3, r2
 8002f3a:	d100      	bne.n	8002f3e <HAL_RCC_OscConfig+0x5a>
 8002f3c:	e06b      	b.n	8003016 <HAL_RCC_OscConfig+0x132>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d167      	bne.n	8003016 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	f000 fb85 	bl	8003656 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	2380      	movs	r3, #128	@ 0x80
 8002f52:	025b      	lsls	r3, r3, #9
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d107      	bne.n	8002f68 <HAL_RCC_OscConfig+0x84>
 8002f58:	4bb7      	ldr	r3, [pc, #732]	@ (8003238 <HAL_RCC_OscConfig+0x354>)
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	4bb6      	ldr	r3, [pc, #728]	@ (8003238 <HAL_RCC_OscConfig+0x354>)
 8002f5e:	2180      	movs	r1, #128	@ 0x80
 8002f60:	0249      	lsls	r1, r1, #9
 8002f62:	430a      	orrs	r2, r1
 8002f64:	601a      	str	r2, [r3, #0]
 8002f66:	e027      	b.n	8002fb8 <HAL_RCC_OscConfig+0xd4>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685a      	ldr	r2, [r3, #4]
 8002f6c:	23a0      	movs	r3, #160	@ 0xa0
 8002f6e:	02db      	lsls	r3, r3, #11
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d10e      	bne.n	8002f92 <HAL_RCC_OscConfig+0xae>
 8002f74:	4bb0      	ldr	r3, [pc, #704]	@ (8003238 <HAL_RCC_OscConfig+0x354>)
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	4baf      	ldr	r3, [pc, #700]	@ (8003238 <HAL_RCC_OscConfig+0x354>)
 8002f7a:	2180      	movs	r1, #128	@ 0x80
 8002f7c:	02c9      	lsls	r1, r1, #11
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	4bad      	ldr	r3, [pc, #692]	@ (8003238 <HAL_RCC_OscConfig+0x354>)
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	4bac      	ldr	r3, [pc, #688]	@ (8003238 <HAL_RCC_OscConfig+0x354>)
 8002f88:	2180      	movs	r1, #128	@ 0x80
 8002f8a:	0249      	lsls	r1, r1, #9
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	e012      	b.n	8002fb8 <HAL_RCC_OscConfig+0xd4>
 8002f92:	4ba9      	ldr	r3, [pc, #676]	@ (8003238 <HAL_RCC_OscConfig+0x354>)
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	4ba8      	ldr	r3, [pc, #672]	@ (8003238 <HAL_RCC_OscConfig+0x354>)
 8002f98:	49a8      	ldr	r1, [pc, #672]	@ (800323c <HAL_RCC_OscConfig+0x358>)
 8002f9a:	400a      	ands	r2, r1
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	4ba6      	ldr	r3, [pc, #664]	@ (8003238 <HAL_RCC_OscConfig+0x354>)
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	2380      	movs	r3, #128	@ 0x80
 8002fa4:	025b      	lsls	r3, r3, #9
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	60fb      	str	r3, [r7, #12]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	4ba2      	ldr	r3, [pc, #648]	@ (8003238 <HAL_RCC_OscConfig+0x354>)
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	4ba1      	ldr	r3, [pc, #644]	@ (8003238 <HAL_RCC_OscConfig+0x354>)
 8002fb2:	49a3      	ldr	r1, [pc, #652]	@ (8003240 <HAL_RCC_OscConfig+0x35c>)
 8002fb4:	400a      	ands	r2, r1
 8002fb6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d015      	beq.n	8002fec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc0:	f7fe ff5e 	bl	8001e80 <HAL_GetTick>
 8002fc4:	0003      	movs	r3, r0
 8002fc6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fc8:	e009      	b.n	8002fde <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fca:	f7fe ff59 	bl	8001e80 <HAL_GetTick>
 8002fce:	0002      	movs	r2, r0
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b64      	cmp	r3, #100	@ 0x64
 8002fd6:	d902      	bls.n	8002fde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	f000 fb3c 	bl	8003656 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fde:	4b96      	ldr	r3, [pc, #600]	@ (8003238 <HAL_RCC_OscConfig+0x354>)
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	2380      	movs	r3, #128	@ 0x80
 8002fe4:	029b      	lsls	r3, r3, #10
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	d0ef      	beq.n	8002fca <HAL_RCC_OscConfig+0xe6>
 8002fea:	e015      	b.n	8003018 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fec:	f7fe ff48 	bl	8001e80 <HAL_GetTick>
 8002ff0:	0003      	movs	r3, r0
 8002ff2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ff6:	f7fe ff43 	bl	8001e80 <HAL_GetTick>
 8002ffa:	0002      	movs	r2, r0
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b64      	cmp	r3, #100	@ 0x64
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e326      	b.n	8003656 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003008:	4b8b      	ldr	r3, [pc, #556]	@ (8003238 <HAL_RCC_OscConfig+0x354>)
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	2380      	movs	r3, #128	@ 0x80
 800300e:	029b      	lsls	r3, r3, #10
 8003010:	4013      	ands	r3, r2
 8003012:	d1f0      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x112>
 8003014:	e000      	b.n	8003018 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003016:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2202      	movs	r2, #2
 800301e:	4013      	ands	r3, r2
 8003020:	d100      	bne.n	8003024 <HAL_RCC_OscConfig+0x140>
 8003022:	e08b      	b.n	800313c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800302a:	6a3b      	ldr	r3, [r7, #32]
 800302c:	2b04      	cmp	r3, #4
 800302e:	d005      	beq.n	800303c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003030:	6a3b      	ldr	r3, [r7, #32]
 8003032:	2b0c      	cmp	r3, #12
 8003034:	d13e      	bne.n	80030b4 <HAL_RCC_OscConfig+0x1d0>
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d13b      	bne.n	80030b4 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800303c:	4b7e      	ldr	r3, [pc, #504]	@ (8003238 <HAL_RCC_OscConfig+0x354>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2204      	movs	r2, #4
 8003042:	4013      	ands	r3, r2
 8003044:	d004      	beq.n	8003050 <HAL_RCC_OscConfig+0x16c>
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d101      	bne.n	8003050 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e302      	b.n	8003656 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003050:	4b79      	ldr	r3, [pc, #484]	@ (8003238 <HAL_RCC_OscConfig+0x354>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	4a7b      	ldr	r2, [pc, #492]	@ (8003244 <HAL_RCC_OscConfig+0x360>)
 8003056:	4013      	ands	r3, r2
 8003058:	0019      	movs	r1, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	021a      	lsls	r2, r3, #8
 8003060:	4b75      	ldr	r3, [pc, #468]	@ (8003238 <HAL_RCC_OscConfig+0x354>)
 8003062:	430a      	orrs	r2, r1
 8003064:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003066:	4b74      	ldr	r3, [pc, #464]	@ (8003238 <HAL_RCC_OscConfig+0x354>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2209      	movs	r2, #9
 800306c:	4393      	bics	r3, r2
 800306e:	0019      	movs	r1, r3
 8003070:	4b71      	ldr	r3, [pc, #452]	@ (8003238 <HAL_RCC_OscConfig+0x354>)
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	430a      	orrs	r2, r1
 8003076:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003078:	f000 fc40 	bl	80038fc <HAL_RCC_GetSysClockFreq>
 800307c:	0001      	movs	r1, r0
 800307e:	4b6e      	ldr	r3, [pc, #440]	@ (8003238 <HAL_RCC_OscConfig+0x354>)
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	091b      	lsrs	r3, r3, #4
 8003084:	220f      	movs	r2, #15
 8003086:	4013      	ands	r3, r2
 8003088:	4a6f      	ldr	r2, [pc, #444]	@ (8003248 <HAL_RCC_OscConfig+0x364>)
 800308a:	5cd3      	ldrb	r3, [r2, r3]
 800308c:	000a      	movs	r2, r1
 800308e:	40da      	lsrs	r2, r3
 8003090:	4b6e      	ldr	r3, [pc, #440]	@ (800324c <HAL_RCC_OscConfig+0x368>)
 8003092:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8003094:	4b6e      	ldr	r3, [pc, #440]	@ (8003250 <HAL_RCC_OscConfig+0x36c>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2513      	movs	r5, #19
 800309a:	197c      	adds	r4, r7, r5
 800309c:	0018      	movs	r0, r3
 800309e:	f7fe fea9 	bl	8001df4 <HAL_InitTick>
 80030a2:	0003      	movs	r3, r0
 80030a4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80030a6:	197b      	adds	r3, r7, r5
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d046      	beq.n	800313c <HAL_RCC_OscConfig+0x258>
      {
        return status;
 80030ae:	197b      	adds	r3, r7, r5
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	e2d0      	b.n	8003656 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d027      	beq.n	800310a <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80030ba:	4b5f      	ldr	r3, [pc, #380]	@ (8003238 <HAL_RCC_OscConfig+0x354>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2209      	movs	r2, #9
 80030c0:	4393      	bics	r3, r2
 80030c2:	0019      	movs	r1, r3
 80030c4:	4b5c      	ldr	r3, [pc, #368]	@ (8003238 <HAL_RCC_OscConfig+0x354>)
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	430a      	orrs	r2, r1
 80030ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030cc:	f7fe fed8 	bl	8001e80 <HAL_GetTick>
 80030d0:	0003      	movs	r3, r0
 80030d2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030d4:	e008      	b.n	80030e8 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030d6:	f7fe fed3 	bl	8001e80 <HAL_GetTick>
 80030da:	0002      	movs	r2, r0
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e2b6      	b.n	8003656 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030e8:	4b53      	ldr	r3, [pc, #332]	@ (8003238 <HAL_RCC_OscConfig+0x354>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2204      	movs	r2, #4
 80030ee:	4013      	ands	r3, r2
 80030f0:	d0f1      	beq.n	80030d6 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030f2:	4b51      	ldr	r3, [pc, #324]	@ (8003238 <HAL_RCC_OscConfig+0x354>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	4a53      	ldr	r2, [pc, #332]	@ (8003244 <HAL_RCC_OscConfig+0x360>)
 80030f8:	4013      	ands	r3, r2
 80030fa:	0019      	movs	r1, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	021a      	lsls	r2, r3, #8
 8003102:	4b4d      	ldr	r3, [pc, #308]	@ (8003238 <HAL_RCC_OscConfig+0x354>)
 8003104:	430a      	orrs	r2, r1
 8003106:	605a      	str	r2, [r3, #4]
 8003108:	e018      	b.n	800313c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800310a:	4b4b      	ldr	r3, [pc, #300]	@ (8003238 <HAL_RCC_OscConfig+0x354>)
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	4b4a      	ldr	r3, [pc, #296]	@ (8003238 <HAL_RCC_OscConfig+0x354>)
 8003110:	2101      	movs	r1, #1
 8003112:	438a      	bics	r2, r1
 8003114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003116:	f7fe feb3 	bl	8001e80 <HAL_GetTick>
 800311a:	0003      	movs	r3, r0
 800311c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003120:	f7fe feae 	bl	8001e80 <HAL_GetTick>
 8003124:	0002      	movs	r2, r0
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e291      	b.n	8003656 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003132:	4b41      	ldr	r3, [pc, #260]	@ (8003238 <HAL_RCC_OscConfig+0x354>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2204      	movs	r2, #4
 8003138:	4013      	ands	r3, r2
 800313a:	d1f1      	bne.n	8003120 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2210      	movs	r2, #16
 8003142:	4013      	ands	r3, r2
 8003144:	d100      	bne.n	8003148 <HAL_RCC_OscConfig+0x264>
 8003146:	e0a1      	b.n	800328c <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003148:	6a3b      	ldr	r3, [r7, #32]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d140      	bne.n	80031d0 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800314e:	4b3a      	ldr	r3, [pc, #232]	@ (8003238 <HAL_RCC_OscConfig+0x354>)
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	2380      	movs	r3, #128	@ 0x80
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4013      	ands	r3, r2
 8003158:	d005      	beq.n	8003166 <HAL_RCC_OscConfig+0x282>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e277      	b.n	8003656 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003166:	4b34      	ldr	r3, [pc, #208]	@ (8003238 <HAL_RCC_OscConfig+0x354>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	4a3a      	ldr	r2, [pc, #232]	@ (8003254 <HAL_RCC_OscConfig+0x370>)
 800316c:	4013      	ands	r3, r2
 800316e:	0019      	movs	r1, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003174:	4b30      	ldr	r3, [pc, #192]	@ (8003238 <HAL_RCC_OscConfig+0x354>)
 8003176:	430a      	orrs	r2, r1
 8003178:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800317a:	4b2f      	ldr	r3, [pc, #188]	@ (8003238 <HAL_RCC_OscConfig+0x354>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	021b      	lsls	r3, r3, #8
 8003180:	0a19      	lsrs	r1, r3, #8
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	061a      	lsls	r2, r3, #24
 8003188:	4b2b      	ldr	r3, [pc, #172]	@ (8003238 <HAL_RCC_OscConfig+0x354>)
 800318a:	430a      	orrs	r2, r1
 800318c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003192:	0b5b      	lsrs	r3, r3, #13
 8003194:	3301      	adds	r3, #1
 8003196:	2280      	movs	r2, #128	@ 0x80
 8003198:	0212      	lsls	r2, r2, #8
 800319a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800319c:	4b26      	ldr	r3, [pc, #152]	@ (8003238 <HAL_RCC_OscConfig+0x354>)
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	091b      	lsrs	r3, r3, #4
 80031a2:	210f      	movs	r1, #15
 80031a4:	400b      	ands	r3, r1
 80031a6:	4928      	ldr	r1, [pc, #160]	@ (8003248 <HAL_RCC_OscConfig+0x364>)
 80031a8:	5ccb      	ldrb	r3, [r1, r3]
 80031aa:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80031ac:	4b27      	ldr	r3, [pc, #156]	@ (800324c <HAL_RCC_OscConfig+0x368>)
 80031ae:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80031b0:	4b27      	ldr	r3, [pc, #156]	@ (8003250 <HAL_RCC_OscConfig+0x36c>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2513      	movs	r5, #19
 80031b6:	197c      	adds	r4, r7, r5
 80031b8:	0018      	movs	r0, r3
 80031ba:	f7fe fe1b 	bl	8001df4 <HAL_InitTick>
 80031be:	0003      	movs	r3, r0
 80031c0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80031c2:	197b      	adds	r3, r7, r5
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d060      	beq.n	800328c <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80031ca:	197b      	adds	r3, r7, r5
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	e242      	b.n	8003656 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	69db      	ldr	r3, [r3, #28]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d03f      	beq.n	8003258 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80031d8:	4b17      	ldr	r3, [pc, #92]	@ (8003238 <HAL_RCC_OscConfig+0x354>)
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	4b16      	ldr	r3, [pc, #88]	@ (8003238 <HAL_RCC_OscConfig+0x354>)
 80031de:	2180      	movs	r1, #128	@ 0x80
 80031e0:	0049      	lsls	r1, r1, #1
 80031e2:	430a      	orrs	r2, r1
 80031e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e6:	f7fe fe4b 	bl	8001e80 <HAL_GetTick>
 80031ea:	0003      	movs	r3, r0
 80031ec:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031f0:	f7fe fe46 	bl	8001e80 <HAL_GetTick>
 80031f4:	0002      	movs	r2, r0
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e229      	b.n	8003656 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003202:	4b0d      	ldr	r3, [pc, #52]	@ (8003238 <HAL_RCC_OscConfig+0x354>)
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	2380      	movs	r3, #128	@ 0x80
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4013      	ands	r3, r2
 800320c:	d0f0      	beq.n	80031f0 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800320e:	4b0a      	ldr	r3, [pc, #40]	@ (8003238 <HAL_RCC_OscConfig+0x354>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	4a10      	ldr	r2, [pc, #64]	@ (8003254 <HAL_RCC_OscConfig+0x370>)
 8003214:	4013      	ands	r3, r2
 8003216:	0019      	movs	r1, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800321c:	4b06      	ldr	r3, [pc, #24]	@ (8003238 <HAL_RCC_OscConfig+0x354>)
 800321e:	430a      	orrs	r2, r1
 8003220:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003222:	4b05      	ldr	r3, [pc, #20]	@ (8003238 <HAL_RCC_OscConfig+0x354>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	021b      	lsls	r3, r3, #8
 8003228:	0a19      	lsrs	r1, r3, #8
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	061a      	lsls	r2, r3, #24
 8003230:	4b01      	ldr	r3, [pc, #4]	@ (8003238 <HAL_RCC_OscConfig+0x354>)
 8003232:	430a      	orrs	r2, r1
 8003234:	605a      	str	r2, [r3, #4]
 8003236:	e029      	b.n	800328c <HAL_RCC_OscConfig+0x3a8>
 8003238:	40021000 	.word	0x40021000
 800323c:	fffeffff 	.word	0xfffeffff
 8003240:	fffbffff 	.word	0xfffbffff
 8003244:	ffffe0ff 	.word	0xffffe0ff
 8003248:	08009ff4 	.word	0x08009ff4
 800324c:	20000014 	.word	0x20000014
 8003250:	20000028 	.word	0x20000028
 8003254:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003258:	4bbd      	ldr	r3, [pc, #756]	@ (8003550 <HAL_RCC_OscConfig+0x66c>)
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	4bbc      	ldr	r3, [pc, #752]	@ (8003550 <HAL_RCC_OscConfig+0x66c>)
 800325e:	49bd      	ldr	r1, [pc, #756]	@ (8003554 <HAL_RCC_OscConfig+0x670>)
 8003260:	400a      	ands	r2, r1
 8003262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003264:	f7fe fe0c 	bl	8001e80 <HAL_GetTick>
 8003268:	0003      	movs	r3, r0
 800326a:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800326c:	e008      	b.n	8003280 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800326e:	f7fe fe07 	bl	8001e80 <HAL_GetTick>
 8003272:	0002      	movs	r2, r0
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e1ea      	b.n	8003656 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003280:	4bb3      	ldr	r3, [pc, #716]	@ (8003550 <HAL_RCC_OscConfig+0x66c>)
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	2380      	movs	r3, #128	@ 0x80
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4013      	ands	r3, r2
 800328a:	d1f0      	bne.n	800326e <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2208      	movs	r2, #8
 8003292:	4013      	ands	r3, r2
 8003294:	d036      	beq.n	8003304 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d019      	beq.n	80032d2 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800329e:	4bac      	ldr	r3, [pc, #688]	@ (8003550 <HAL_RCC_OscConfig+0x66c>)
 80032a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80032a2:	4bab      	ldr	r3, [pc, #684]	@ (8003550 <HAL_RCC_OscConfig+0x66c>)
 80032a4:	2101      	movs	r1, #1
 80032a6:	430a      	orrs	r2, r1
 80032a8:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032aa:	f7fe fde9 	bl	8001e80 <HAL_GetTick>
 80032ae:	0003      	movs	r3, r0
 80032b0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032b4:	f7fe fde4 	bl	8001e80 <HAL_GetTick>
 80032b8:	0002      	movs	r2, r0
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e1c7      	b.n	8003656 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80032c6:	4ba2      	ldr	r3, [pc, #648]	@ (8003550 <HAL_RCC_OscConfig+0x66c>)
 80032c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032ca:	2202      	movs	r2, #2
 80032cc:	4013      	ands	r3, r2
 80032ce:	d0f1      	beq.n	80032b4 <HAL_RCC_OscConfig+0x3d0>
 80032d0:	e018      	b.n	8003304 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032d2:	4b9f      	ldr	r3, [pc, #636]	@ (8003550 <HAL_RCC_OscConfig+0x66c>)
 80032d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80032d6:	4b9e      	ldr	r3, [pc, #632]	@ (8003550 <HAL_RCC_OscConfig+0x66c>)
 80032d8:	2101      	movs	r1, #1
 80032da:	438a      	bics	r2, r1
 80032dc:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032de:	f7fe fdcf 	bl	8001e80 <HAL_GetTick>
 80032e2:	0003      	movs	r3, r0
 80032e4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032e8:	f7fe fdca 	bl	8001e80 <HAL_GetTick>
 80032ec:	0002      	movs	r2, r0
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e1ad      	b.n	8003656 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80032fa:	4b95      	ldr	r3, [pc, #596]	@ (8003550 <HAL_RCC_OscConfig+0x66c>)
 80032fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032fe:	2202      	movs	r2, #2
 8003300:	4013      	ands	r3, r2
 8003302:	d1f1      	bne.n	80032e8 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2204      	movs	r2, #4
 800330a:	4013      	ands	r3, r2
 800330c:	d100      	bne.n	8003310 <HAL_RCC_OscConfig+0x42c>
 800330e:	e0ae      	b.n	800346e <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003310:	2027      	movs	r0, #39	@ 0x27
 8003312:	183b      	adds	r3, r7, r0
 8003314:	2200      	movs	r2, #0
 8003316:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003318:	4b8d      	ldr	r3, [pc, #564]	@ (8003550 <HAL_RCC_OscConfig+0x66c>)
 800331a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800331c:	2380      	movs	r3, #128	@ 0x80
 800331e:	055b      	lsls	r3, r3, #21
 8003320:	4013      	ands	r3, r2
 8003322:	d109      	bne.n	8003338 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003324:	4b8a      	ldr	r3, [pc, #552]	@ (8003550 <HAL_RCC_OscConfig+0x66c>)
 8003326:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003328:	4b89      	ldr	r3, [pc, #548]	@ (8003550 <HAL_RCC_OscConfig+0x66c>)
 800332a:	2180      	movs	r1, #128	@ 0x80
 800332c:	0549      	lsls	r1, r1, #21
 800332e:	430a      	orrs	r2, r1
 8003330:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8003332:	183b      	adds	r3, r7, r0
 8003334:	2201      	movs	r2, #1
 8003336:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003338:	4b87      	ldr	r3, [pc, #540]	@ (8003558 <HAL_RCC_OscConfig+0x674>)
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	2380      	movs	r3, #128	@ 0x80
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	4013      	ands	r3, r2
 8003342:	d11a      	bne.n	800337a <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003344:	4b84      	ldr	r3, [pc, #528]	@ (8003558 <HAL_RCC_OscConfig+0x674>)
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	4b83      	ldr	r3, [pc, #524]	@ (8003558 <HAL_RCC_OscConfig+0x674>)
 800334a:	2180      	movs	r1, #128	@ 0x80
 800334c:	0049      	lsls	r1, r1, #1
 800334e:	430a      	orrs	r2, r1
 8003350:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003352:	f7fe fd95 	bl	8001e80 <HAL_GetTick>
 8003356:	0003      	movs	r3, r0
 8003358:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800335c:	f7fe fd90 	bl	8001e80 <HAL_GetTick>
 8003360:	0002      	movs	r2, r0
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b64      	cmp	r3, #100	@ 0x64
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e173      	b.n	8003656 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336e:	4b7a      	ldr	r3, [pc, #488]	@ (8003558 <HAL_RCC_OscConfig+0x674>)
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	2380      	movs	r3, #128	@ 0x80
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	4013      	ands	r3, r2
 8003378:	d0f0      	beq.n	800335c <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	689a      	ldr	r2, [r3, #8]
 800337e:	2380      	movs	r3, #128	@ 0x80
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	429a      	cmp	r2, r3
 8003384:	d107      	bne.n	8003396 <HAL_RCC_OscConfig+0x4b2>
 8003386:	4b72      	ldr	r3, [pc, #456]	@ (8003550 <HAL_RCC_OscConfig+0x66c>)
 8003388:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800338a:	4b71      	ldr	r3, [pc, #452]	@ (8003550 <HAL_RCC_OscConfig+0x66c>)
 800338c:	2180      	movs	r1, #128	@ 0x80
 800338e:	0049      	lsls	r1, r1, #1
 8003390:	430a      	orrs	r2, r1
 8003392:	651a      	str	r2, [r3, #80]	@ 0x50
 8003394:	e031      	b.n	80033fa <HAL_RCC_OscConfig+0x516>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10c      	bne.n	80033b8 <HAL_RCC_OscConfig+0x4d4>
 800339e:	4b6c      	ldr	r3, [pc, #432]	@ (8003550 <HAL_RCC_OscConfig+0x66c>)
 80033a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80033a2:	4b6b      	ldr	r3, [pc, #428]	@ (8003550 <HAL_RCC_OscConfig+0x66c>)
 80033a4:	496b      	ldr	r1, [pc, #428]	@ (8003554 <HAL_RCC_OscConfig+0x670>)
 80033a6:	400a      	ands	r2, r1
 80033a8:	651a      	str	r2, [r3, #80]	@ 0x50
 80033aa:	4b69      	ldr	r3, [pc, #420]	@ (8003550 <HAL_RCC_OscConfig+0x66c>)
 80033ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80033ae:	4b68      	ldr	r3, [pc, #416]	@ (8003550 <HAL_RCC_OscConfig+0x66c>)
 80033b0:	496a      	ldr	r1, [pc, #424]	@ (800355c <HAL_RCC_OscConfig+0x678>)
 80033b2:	400a      	ands	r2, r1
 80033b4:	651a      	str	r2, [r3, #80]	@ 0x50
 80033b6:	e020      	b.n	80033fa <HAL_RCC_OscConfig+0x516>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	23a0      	movs	r3, #160	@ 0xa0
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d10e      	bne.n	80033e2 <HAL_RCC_OscConfig+0x4fe>
 80033c4:	4b62      	ldr	r3, [pc, #392]	@ (8003550 <HAL_RCC_OscConfig+0x66c>)
 80033c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80033c8:	4b61      	ldr	r3, [pc, #388]	@ (8003550 <HAL_RCC_OscConfig+0x66c>)
 80033ca:	2180      	movs	r1, #128	@ 0x80
 80033cc:	00c9      	lsls	r1, r1, #3
 80033ce:	430a      	orrs	r2, r1
 80033d0:	651a      	str	r2, [r3, #80]	@ 0x50
 80033d2:	4b5f      	ldr	r3, [pc, #380]	@ (8003550 <HAL_RCC_OscConfig+0x66c>)
 80033d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80033d6:	4b5e      	ldr	r3, [pc, #376]	@ (8003550 <HAL_RCC_OscConfig+0x66c>)
 80033d8:	2180      	movs	r1, #128	@ 0x80
 80033da:	0049      	lsls	r1, r1, #1
 80033dc:	430a      	orrs	r2, r1
 80033de:	651a      	str	r2, [r3, #80]	@ 0x50
 80033e0:	e00b      	b.n	80033fa <HAL_RCC_OscConfig+0x516>
 80033e2:	4b5b      	ldr	r3, [pc, #364]	@ (8003550 <HAL_RCC_OscConfig+0x66c>)
 80033e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80033e6:	4b5a      	ldr	r3, [pc, #360]	@ (8003550 <HAL_RCC_OscConfig+0x66c>)
 80033e8:	495a      	ldr	r1, [pc, #360]	@ (8003554 <HAL_RCC_OscConfig+0x670>)
 80033ea:	400a      	ands	r2, r1
 80033ec:	651a      	str	r2, [r3, #80]	@ 0x50
 80033ee:	4b58      	ldr	r3, [pc, #352]	@ (8003550 <HAL_RCC_OscConfig+0x66c>)
 80033f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80033f2:	4b57      	ldr	r3, [pc, #348]	@ (8003550 <HAL_RCC_OscConfig+0x66c>)
 80033f4:	4959      	ldr	r1, [pc, #356]	@ (800355c <HAL_RCC_OscConfig+0x678>)
 80033f6:	400a      	ands	r2, r1
 80033f8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d015      	beq.n	800342e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003402:	f7fe fd3d 	bl	8001e80 <HAL_GetTick>
 8003406:	0003      	movs	r3, r0
 8003408:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800340a:	e009      	b.n	8003420 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800340c:	f7fe fd38 	bl	8001e80 <HAL_GetTick>
 8003410:	0002      	movs	r2, r0
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	4a52      	ldr	r2, [pc, #328]	@ (8003560 <HAL_RCC_OscConfig+0x67c>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e11a      	b.n	8003656 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003420:	4b4b      	ldr	r3, [pc, #300]	@ (8003550 <HAL_RCC_OscConfig+0x66c>)
 8003422:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003424:	2380      	movs	r3, #128	@ 0x80
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4013      	ands	r3, r2
 800342a:	d0ef      	beq.n	800340c <HAL_RCC_OscConfig+0x528>
 800342c:	e014      	b.n	8003458 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800342e:	f7fe fd27 	bl	8001e80 <HAL_GetTick>
 8003432:	0003      	movs	r3, r0
 8003434:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003436:	e009      	b.n	800344c <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003438:	f7fe fd22 	bl	8001e80 <HAL_GetTick>
 800343c:	0002      	movs	r2, r0
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	4a47      	ldr	r2, [pc, #284]	@ (8003560 <HAL_RCC_OscConfig+0x67c>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d901      	bls.n	800344c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e104      	b.n	8003656 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800344c:	4b40      	ldr	r3, [pc, #256]	@ (8003550 <HAL_RCC_OscConfig+0x66c>)
 800344e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003450:	2380      	movs	r3, #128	@ 0x80
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4013      	ands	r3, r2
 8003456:	d1ef      	bne.n	8003438 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003458:	2327      	movs	r3, #39	@ 0x27
 800345a:	18fb      	adds	r3, r7, r3
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d105      	bne.n	800346e <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003462:	4b3b      	ldr	r3, [pc, #236]	@ (8003550 <HAL_RCC_OscConfig+0x66c>)
 8003464:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003466:	4b3a      	ldr	r3, [pc, #232]	@ (8003550 <HAL_RCC_OscConfig+0x66c>)
 8003468:	493e      	ldr	r1, [pc, #248]	@ (8003564 <HAL_RCC_OscConfig+0x680>)
 800346a:	400a      	ands	r2, r1
 800346c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2220      	movs	r2, #32
 8003474:	4013      	ands	r3, r2
 8003476:	d049      	beq.n	800350c <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d026      	beq.n	80034ce <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003480:	4b33      	ldr	r3, [pc, #204]	@ (8003550 <HAL_RCC_OscConfig+0x66c>)
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	4b32      	ldr	r3, [pc, #200]	@ (8003550 <HAL_RCC_OscConfig+0x66c>)
 8003486:	2101      	movs	r1, #1
 8003488:	430a      	orrs	r2, r1
 800348a:	609a      	str	r2, [r3, #8]
 800348c:	4b30      	ldr	r3, [pc, #192]	@ (8003550 <HAL_RCC_OscConfig+0x66c>)
 800348e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003490:	4b2f      	ldr	r3, [pc, #188]	@ (8003550 <HAL_RCC_OscConfig+0x66c>)
 8003492:	2101      	movs	r1, #1
 8003494:	430a      	orrs	r2, r1
 8003496:	635a      	str	r2, [r3, #52]	@ 0x34
 8003498:	4b33      	ldr	r3, [pc, #204]	@ (8003568 <HAL_RCC_OscConfig+0x684>)
 800349a:	6a1a      	ldr	r2, [r3, #32]
 800349c:	4b32      	ldr	r3, [pc, #200]	@ (8003568 <HAL_RCC_OscConfig+0x684>)
 800349e:	2180      	movs	r1, #128	@ 0x80
 80034a0:	0189      	lsls	r1, r1, #6
 80034a2:	430a      	orrs	r2, r1
 80034a4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a6:	f7fe fceb 	bl	8001e80 <HAL_GetTick>
 80034aa:	0003      	movs	r3, r0
 80034ac:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034b0:	f7fe fce6 	bl	8001e80 <HAL_GetTick>
 80034b4:	0002      	movs	r2, r0
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e0c9      	b.n	8003656 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80034c2:	4b23      	ldr	r3, [pc, #140]	@ (8003550 <HAL_RCC_OscConfig+0x66c>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	2202      	movs	r2, #2
 80034c8:	4013      	ands	r3, r2
 80034ca:	d0f1      	beq.n	80034b0 <HAL_RCC_OscConfig+0x5cc>
 80034cc:	e01e      	b.n	800350c <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80034ce:	4b20      	ldr	r3, [pc, #128]	@ (8003550 <HAL_RCC_OscConfig+0x66c>)
 80034d0:	689a      	ldr	r2, [r3, #8]
 80034d2:	4b1f      	ldr	r3, [pc, #124]	@ (8003550 <HAL_RCC_OscConfig+0x66c>)
 80034d4:	2101      	movs	r1, #1
 80034d6:	438a      	bics	r2, r1
 80034d8:	609a      	str	r2, [r3, #8]
 80034da:	4b23      	ldr	r3, [pc, #140]	@ (8003568 <HAL_RCC_OscConfig+0x684>)
 80034dc:	6a1a      	ldr	r2, [r3, #32]
 80034de:	4b22      	ldr	r3, [pc, #136]	@ (8003568 <HAL_RCC_OscConfig+0x684>)
 80034e0:	4922      	ldr	r1, [pc, #136]	@ (800356c <HAL_RCC_OscConfig+0x688>)
 80034e2:	400a      	ands	r2, r1
 80034e4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e6:	f7fe fccb 	bl	8001e80 <HAL_GetTick>
 80034ea:	0003      	movs	r3, r0
 80034ec:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034f0:	f7fe fcc6 	bl	8001e80 <HAL_GetTick>
 80034f4:	0002      	movs	r2, r0
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e0a9      	b.n	8003656 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003502:	4b13      	ldr	r3, [pc, #76]	@ (8003550 <HAL_RCC_OscConfig+0x66c>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	2202      	movs	r2, #2
 8003508:	4013      	ands	r3, r2
 800350a:	d1f1      	bne.n	80034f0 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003510:	2b00      	cmp	r3, #0
 8003512:	d100      	bne.n	8003516 <HAL_RCC_OscConfig+0x632>
 8003514:	e09e      	b.n	8003654 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003516:	6a3b      	ldr	r3, [r7, #32]
 8003518:	2b0c      	cmp	r3, #12
 800351a:	d100      	bne.n	800351e <HAL_RCC_OscConfig+0x63a>
 800351c:	e077      	b.n	800360e <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003522:	2b02      	cmp	r3, #2
 8003524:	d158      	bne.n	80035d8 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003526:	4b0a      	ldr	r3, [pc, #40]	@ (8003550 <HAL_RCC_OscConfig+0x66c>)
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	4b09      	ldr	r3, [pc, #36]	@ (8003550 <HAL_RCC_OscConfig+0x66c>)
 800352c:	4910      	ldr	r1, [pc, #64]	@ (8003570 <HAL_RCC_OscConfig+0x68c>)
 800352e:	400a      	ands	r2, r1
 8003530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003532:	f7fe fca5 	bl	8001e80 <HAL_GetTick>
 8003536:	0003      	movs	r3, r0
 8003538:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800353a:	e01b      	b.n	8003574 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800353c:	f7fe fca0 	bl	8001e80 <HAL_GetTick>
 8003540:	0002      	movs	r2, r0
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b02      	cmp	r3, #2
 8003548:	d914      	bls.n	8003574 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e083      	b.n	8003656 <HAL_RCC_OscConfig+0x772>
 800354e:	46c0      	nop			@ (mov r8, r8)
 8003550:	40021000 	.word	0x40021000
 8003554:	fffffeff 	.word	0xfffffeff
 8003558:	40007000 	.word	0x40007000
 800355c:	fffffbff 	.word	0xfffffbff
 8003560:	00001388 	.word	0x00001388
 8003564:	efffffff 	.word	0xefffffff
 8003568:	40010000 	.word	0x40010000
 800356c:	ffffdfff 	.word	0xffffdfff
 8003570:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003574:	4b3a      	ldr	r3, [pc, #232]	@ (8003660 <HAL_RCC_OscConfig+0x77c>)
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	2380      	movs	r3, #128	@ 0x80
 800357a:	049b      	lsls	r3, r3, #18
 800357c:	4013      	ands	r3, r2
 800357e:	d1dd      	bne.n	800353c <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003580:	4b37      	ldr	r3, [pc, #220]	@ (8003660 <HAL_RCC_OscConfig+0x77c>)
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	4a37      	ldr	r2, [pc, #220]	@ (8003664 <HAL_RCC_OscConfig+0x780>)
 8003586:	4013      	ands	r3, r2
 8003588:	0019      	movs	r1, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003592:	431a      	orrs	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003598:	431a      	orrs	r2, r3
 800359a:	4b31      	ldr	r3, [pc, #196]	@ (8003660 <HAL_RCC_OscConfig+0x77c>)
 800359c:	430a      	orrs	r2, r1
 800359e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035a0:	4b2f      	ldr	r3, [pc, #188]	@ (8003660 <HAL_RCC_OscConfig+0x77c>)
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	4b2e      	ldr	r3, [pc, #184]	@ (8003660 <HAL_RCC_OscConfig+0x77c>)
 80035a6:	2180      	movs	r1, #128	@ 0x80
 80035a8:	0449      	lsls	r1, r1, #17
 80035aa:	430a      	orrs	r2, r1
 80035ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ae:	f7fe fc67 	bl	8001e80 <HAL_GetTick>
 80035b2:	0003      	movs	r3, r0
 80035b4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035b8:	f7fe fc62 	bl	8001e80 <HAL_GetTick>
 80035bc:	0002      	movs	r2, r0
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e045      	b.n	8003656 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80035ca:	4b25      	ldr	r3, [pc, #148]	@ (8003660 <HAL_RCC_OscConfig+0x77c>)
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	2380      	movs	r3, #128	@ 0x80
 80035d0:	049b      	lsls	r3, r3, #18
 80035d2:	4013      	ands	r3, r2
 80035d4:	d0f0      	beq.n	80035b8 <HAL_RCC_OscConfig+0x6d4>
 80035d6:	e03d      	b.n	8003654 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035d8:	4b21      	ldr	r3, [pc, #132]	@ (8003660 <HAL_RCC_OscConfig+0x77c>)
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	4b20      	ldr	r3, [pc, #128]	@ (8003660 <HAL_RCC_OscConfig+0x77c>)
 80035de:	4922      	ldr	r1, [pc, #136]	@ (8003668 <HAL_RCC_OscConfig+0x784>)
 80035e0:	400a      	ands	r2, r1
 80035e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e4:	f7fe fc4c 	bl	8001e80 <HAL_GetTick>
 80035e8:	0003      	movs	r3, r0
 80035ea:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80035ec:	e008      	b.n	8003600 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035ee:	f7fe fc47 	bl	8001e80 <HAL_GetTick>
 80035f2:	0002      	movs	r2, r0
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d901      	bls.n	8003600 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e02a      	b.n	8003656 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003600:	4b17      	ldr	r3, [pc, #92]	@ (8003660 <HAL_RCC_OscConfig+0x77c>)
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	2380      	movs	r3, #128	@ 0x80
 8003606:	049b      	lsls	r3, r3, #18
 8003608:	4013      	ands	r3, r2
 800360a:	d1f0      	bne.n	80035ee <HAL_RCC_OscConfig+0x70a>
 800360c:	e022      	b.n	8003654 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003612:	2b01      	cmp	r3, #1
 8003614:	d101      	bne.n	800361a <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e01d      	b.n	8003656 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800361a:	4b11      	ldr	r3, [pc, #68]	@ (8003660 <HAL_RCC_OscConfig+0x77c>)
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003620:	69fa      	ldr	r2, [r7, #28]
 8003622:	2380      	movs	r3, #128	@ 0x80
 8003624:	025b      	lsls	r3, r3, #9
 8003626:	401a      	ands	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800362c:	429a      	cmp	r2, r3
 800362e:	d10f      	bne.n	8003650 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003630:	69fa      	ldr	r2, [r7, #28]
 8003632:	23f0      	movs	r3, #240	@ 0xf0
 8003634:	039b      	lsls	r3, r3, #14
 8003636:	401a      	ands	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800363c:	429a      	cmp	r2, r3
 800363e:	d107      	bne.n	8003650 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003640:	69fa      	ldr	r2, [r7, #28]
 8003642:	23c0      	movs	r3, #192	@ 0xc0
 8003644:	041b      	lsls	r3, r3, #16
 8003646:	401a      	ands	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800364c:	429a      	cmp	r2, r3
 800364e:	d001      	beq.n	8003654 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e000      	b.n	8003656 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	0018      	movs	r0, r3
 8003658:	46bd      	mov	sp, r7
 800365a:	b00a      	add	sp, #40	@ 0x28
 800365c:	bdb0      	pop	{r4, r5, r7, pc}
 800365e:	46c0      	nop			@ (mov r8, r8)
 8003660:	40021000 	.word	0x40021000
 8003664:	ff02ffff 	.word	0xff02ffff
 8003668:	feffffff 	.word	0xfeffffff

0800366c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800366c:	b5b0      	push	{r4, r5, r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d101      	bne.n	8003680 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e128      	b.n	80038d2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003680:	4b96      	ldr	r3, [pc, #600]	@ (80038dc <HAL_RCC_ClockConfig+0x270>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2201      	movs	r2, #1
 8003686:	4013      	ands	r3, r2
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	429a      	cmp	r2, r3
 800368c:	d91e      	bls.n	80036cc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800368e:	4b93      	ldr	r3, [pc, #588]	@ (80038dc <HAL_RCC_ClockConfig+0x270>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2201      	movs	r2, #1
 8003694:	4393      	bics	r3, r2
 8003696:	0019      	movs	r1, r3
 8003698:	4b90      	ldr	r3, [pc, #576]	@ (80038dc <HAL_RCC_ClockConfig+0x270>)
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80036a0:	f7fe fbee 	bl	8001e80 <HAL_GetTick>
 80036a4:	0003      	movs	r3, r0
 80036a6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a8:	e009      	b.n	80036be <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036aa:	f7fe fbe9 	bl	8001e80 <HAL_GetTick>
 80036ae:	0002      	movs	r2, r0
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	4a8a      	ldr	r2, [pc, #552]	@ (80038e0 <HAL_RCC_ClockConfig+0x274>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e109      	b.n	80038d2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036be:	4b87      	ldr	r3, [pc, #540]	@ (80038dc <HAL_RCC_ClockConfig+0x270>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2201      	movs	r2, #1
 80036c4:	4013      	ands	r3, r2
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d1ee      	bne.n	80036aa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2202      	movs	r2, #2
 80036d2:	4013      	ands	r3, r2
 80036d4:	d009      	beq.n	80036ea <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036d6:	4b83      	ldr	r3, [pc, #524]	@ (80038e4 <HAL_RCC_ClockConfig+0x278>)
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	22f0      	movs	r2, #240	@ 0xf0
 80036dc:	4393      	bics	r3, r2
 80036de:	0019      	movs	r1, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689a      	ldr	r2, [r3, #8]
 80036e4:	4b7f      	ldr	r3, [pc, #508]	@ (80038e4 <HAL_RCC_ClockConfig+0x278>)
 80036e6:	430a      	orrs	r2, r1
 80036e8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2201      	movs	r2, #1
 80036f0:	4013      	ands	r3, r2
 80036f2:	d100      	bne.n	80036f6 <HAL_RCC_ClockConfig+0x8a>
 80036f4:	e089      	b.n	800380a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d107      	bne.n	800370e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036fe:	4b79      	ldr	r3, [pc, #484]	@ (80038e4 <HAL_RCC_ClockConfig+0x278>)
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	2380      	movs	r3, #128	@ 0x80
 8003704:	029b      	lsls	r3, r3, #10
 8003706:	4013      	ands	r3, r2
 8003708:	d120      	bne.n	800374c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e0e1      	b.n	80038d2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	2b03      	cmp	r3, #3
 8003714:	d107      	bne.n	8003726 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003716:	4b73      	ldr	r3, [pc, #460]	@ (80038e4 <HAL_RCC_ClockConfig+0x278>)
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	2380      	movs	r3, #128	@ 0x80
 800371c:	049b      	lsls	r3, r3, #18
 800371e:	4013      	ands	r3, r2
 8003720:	d114      	bne.n	800374c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e0d5      	b.n	80038d2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d106      	bne.n	800373c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800372e:	4b6d      	ldr	r3, [pc, #436]	@ (80038e4 <HAL_RCC_ClockConfig+0x278>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2204      	movs	r2, #4
 8003734:	4013      	ands	r3, r2
 8003736:	d109      	bne.n	800374c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e0ca      	b.n	80038d2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800373c:	4b69      	ldr	r3, [pc, #420]	@ (80038e4 <HAL_RCC_ClockConfig+0x278>)
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	2380      	movs	r3, #128	@ 0x80
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4013      	ands	r3, r2
 8003746:	d101      	bne.n	800374c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e0c2      	b.n	80038d2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800374c:	4b65      	ldr	r3, [pc, #404]	@ (80038e4 <HAL_RCC_ClockConfig+0x278>)
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	2203      	movs	r2, #3
 8003752:	4393      	bics	r3, r2
 8003754:	0019      	movs	r1, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685a      	ldr	r2, [r3, #4]
 800375a:	4b62      	ldr	r3, [pc, #392]	@ (80038e4 <HAL_RCC_ClockConfig+0x278>)
 800375c:	430a      	orrs	r2, r1
 800375e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003760:	f7fe fb8e 	bl	8001e80 <HAL_GetTick>
 8003764:	0003      	movs	r3, r0
 8003766:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	2b02      	cmp	r3, #2
 800376e:	d111      	bne.n	8003794 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003770:	e009      	b.n	8003786 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003772:	f7fe fb85 	bl	8001e80 <HAL_GetTick>
 8003776:	0002      	movs	r2, r0
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	4a58      	ldr	r2, [pc, #352]	@ (80038e0 <HAL_RCC_ClockConfig+0x274>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e0a5      	b.n	80038d2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003786:	4b57      	ldr	r3, [pc, #348]	@ (80038e4 <HAL_RCC_ClockConfig+0x278>)
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	220c      	movs	r2, #12
 800378c:	4013      	ands	r3, r2
 800378e:	2b08      	cmp	r3, #8
 8003790:	d1ef      	bne.n	8003772 <HAL_RCC_ClockConfig+0x106>
 8003792:	e03a      	b.n	800380a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	2b03      	cmp	r3, #3
 800379a:	d111      	bne.n	80037c0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800379c:	e009      	b.n	80037b2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800379e:	f7fe fb6f 	bl	8001e80 <HAL_GetTick>
 80037a2:	0002      	movs	r2, r0
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	4a4d      	ldr	r2, [pc, #308]	@ (80038e0 <HAL_RCC_ClockConfig+0x274>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e08f      	b.n	80038d2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037b2:	4b4c      	ldr	r3, [pc, #304]	@ (80038e4 <HAL_RCC_ClockConfig+0x278>)
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	220c      	movs	r2, #12
 80037b8:	4013      	ands	r3, r2
 80037ba:	2b0c      	cmp	r3, #12
 80037bc:	d1ef      	bne.n	800379e <HAL_RCC_ClockConfig+0x132>
 80037be:	e024      	b.n	800380a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d11b      	bne.n	8003800 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80037c8:	e009      	b.n	80037de <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037ca:	f7fe fb59 	bl	8001e80 <HAL_GetTick>
 80037ce:	0002      	movs	r2, r0
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	4a42      	ldr	r2, [pc, #264]	@ (80038e0 <HAL_RCC_ClockConfig+0x274>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e079      	b.n	80038d2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80037de:	4b41      	ldr	r3, [pc, #260]	@ (80038e4 <HAL_RCC_ClockConfig+0x278>)
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	220c      	movs	r2, #12
 80037e4:	4013      	ands	r3, r2
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d1ef      	bne.n	80037ca <HAL_RCC_ClockConfig+0x15e>
 80037ea:	e00e      	b.n	800380a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037ec:	f7fe fb48 	bl	8001e80 <HAL_GetTick>
 80037f0:	0002      	movs	r2, r0
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	4a3a      	ldr	r2, [pc, #232]	@ (80038e0 <HAL_RCC_ClockConfig+0x274>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d901      	bls.n	8003800 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e068      	b.n	80038d2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003800:	4b38      	ldr	r3, [pc, #224]	@ (80038e4 <HAL_RCC_ClockConfig+0x278>)
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	220c      	movs	r2, #12
 8003806:	4013      	ands	r3, r2
 8003808:	d1f0      	bne.n	80037ec <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800380a:	4b34      	ldr	r3, [pc, #208]	@ (80038dc <HAL_RCC_ClockConfig+0x270>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2201      	movs	r2, #1
 8003810:	4013      	ands	r3, r2
 8003812:	683a      	ldr	r2, [r7, #0]
 8003814:	429a      	cmp	r2, r3
 8003816:	d21e      	bcs.n	8003856 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003818:	4b30      	ldr	r3, [pc, #192]	@ (80038dc <HAL_RCC_ClockConfig+0x270>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2201      	movs	r2, #1
 800381e:	4393      	bics	r3, r2
 8003820:	0019      	movs	r1, r3
 8003822:	4b2e      	ldr	r3, [pc, #184]	@ (80038dc <HAL_RCC_ClockConfig+0x270>)
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	430a      	orrs	r2, r1
 8003828:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800382a:	f7fe fb29 	bl	8001e80 <HAL_GetTick>
 800382e:	0003      	movs	r3, r0
 8003830:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003832:	e009      	b.n	8003848 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003834:	f7fe fb24 	bl	8001e80 <HAL_GetTick>
 8003838:	0002      	movs	r2, r0
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	4a28      	ldr	r2, [pc, #160]	@ (80038e0 <HAL_RCC_ClockConfig+0x274>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d901      	bls.n	8003848 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e044      	b.n	80038d2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003848:	4b24      	ldr	r3, [pc, #144]	@ (80038dc <HAL_RCC_ClockConfig+0x270>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2201      	movs	r2, #1
 800384e:	4013      	ands	r3, r2
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	429a      	cmp	r2, r3
 8003854:	d1ee      	bne.n	8003834 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2204      	movs	r2, #4
 800385c:	4013      	ands	r3, r2
 800385e:	d009      	beq.n	8003874 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003860:	4b20      	ldr	r3, [pc, #128]	@ (80038e4 <HAL_RCC_ClockConfig+0x278>)
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	4a20      	ldr	r2, [pc, #128]	@ (80038e8 <HAL_RCC_ClockConfig+0x27c>)
 8003866:	4013      	ands	r3, r2
 8003868:	0019      	movs	r1, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68da      	ldr	r2, [r3, #12]
 800386e:	4b1d      	ldr	r3, [pc, #116]	@ (80038e4 <HAL_RCC_ClockConfig+0x278>)
 8003870:	430a      	orrs	r2, r1
 8003872:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2208      	movs	r2, #8
 800387a:	4013      	ands	r3, r2
 800387c:	d00a      	beq.n	8003894 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800387e:	4b19      	ldr	r3, [pc, #100]	@ (80038e4 <HAL_RCC_ClockConfig+0x278>)
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	4a1a      	ldr	r2, [pc, #104]	@ (80038ec <HAL_RCC_ClockConfig+0x280>)
 8003884:	4013      	ands	r3, r2
 8003886:	0019      	movs	r1, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	00da      	lsls	r2, r3, #3
 800388e:	4b15      	ldr	r3, [pc, #84]	@ (80038e4 <HAL_RCC_ClockConfig+0x278>)
 8003890:	430a      	orrs	r2, r1
 8003892:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003894:	f000 f832 	bl	80038fc <HAL_RCC_GetSysClockFreq>
 8003898:	0001      	movs	r1, r0
 800389a:	4b12      	ldr	r3, [pc, #72]	@ (80038e4 <HAL_RCC_ClockConfig+0x278>)
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	091b      	lsrs	r3, r3, #4
 80038a0:	220f      	movs	r2, #15
 80038a2:	4013      	ands	r3, r2
 80038a4:	4a12      	ldr	r2, [pc, #72]	@ (80038f0 <HAL_RCC_ClockConfig+0x284>)
 80038a6:	5cd3      	ldrb	r3, [r2, r3]
 80038a8:	000a      	movs	r2, r1
 80038aa:	40da      	lsrs	r2, r3
 80038ac:	4b11      	ldr	r3, [pc, #68]	@ (80038f4 <HAL_RCC_ClockConfig+0x288>)
 80038ae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80038b0:	4b11      	ldr	r3, [pc, #68]	@ (80038f8 <HAL_RCC_ClockConfig+0x28c>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	250b      	movs	r5, #11
 80038b6:	197c      	adds	r4, r7, r5
 80038b8:	0018      	movs	r0, r3
 80038ba:	f7fe fa9b 	bl	8001df4 <HAL_InitTick>
 80038be:	0003      	movs	r3, r0
 80038c0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80038c2:	197b      	adds	r3, r7, r5
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d002      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80038ca:	197b      	adds	r3, r7, r5
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	e000      	b.n	80038d2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	0018      	movs	r0, r3
 80038d4:	46bd      	mov	sp, r7
 80038d6:	b004      	add	sp, #16
 80038d8:	bdb0      	pop	{r4, r5, r7, pc}
 80038da:	46c0      	nop			@ (mov r8, r8)
 80038dc:	40022000 	.word	0x40022000
 80038e0:	00001388 	.word	0x00001388
 80038e4:	40021000 	.word	0x40021000
 80038e8:	fffff8ff 	.word	0xfffff8ff
 80038ec:	ffffc7ff 	.word	0xffffc7ff
 80038f0:	08009ff4 	.word	0x08009ff4
 80038f4:	20000014 	.word	0x20000014
 80038f8:	20000028 	.word	0x20000028

080038fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038fc:	b5b0      	push	{r4, r5, r7, lr}
 80038fe:	b08e      	sub	sp, #56	@ 0x38
 8003900:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003902:	4b4c      	ldr	r3, [pc, #304]	@ (8003a34 <HAL_RCC_GetSysClockFreq+0x138>)
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003908:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800390a:	230c      	movs	r3, #12
 800390c:	4013      	ands	r3, r2
 800390e:	2b0c      	cmp	r3, #12
 8003910:	d014      	beq.n	800393c <HAL_RCC_GetSysClockFreq+0x40>
 8003912:	d900      	bls.n	8003916 <HAL_RCC_GetSysClockFreq+0x1a>
 8003914:	e07b      	b.n	8003a0e <HAL_RCC_GetSysClockFreq+0x112>
 8003916:	2b04      	cmp	r3, #4
 8003918:	d002      	beq.n	8003920 <HAL_RCC_GetSysClockFreq+0x24>
 800391a:	2b08      	cmp	r3, #8
 800391c:	d00b      	beq.n	8003936 <HAL_RCC_GetSysClockFreq+0x3a>
 800391e:	e076      	b.n	8003a0e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003920:	4b44      	ldr	r3, [pc, #272]	@ (8003a34 <HAL_RCC_GetSysClockFreq+0x138>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2210      	movs	r2, #16
 8003926:	4013      	ands	r3, r2
 8003928:	d002      	beq.n	8003930 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800392a:	4b43      	ldr	r3, [pc, #268]	@ (8003a38 <HAL_RCC_GetSysClockFreq+0x13c>)
 800392c:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800392e:	e07c      	b.n	8003a2a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003930:	4b42      	ldr	r3, [pc, #264]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0x140>)
 8003932:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003934:	e079      	b.n	8003a2a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003936:	4b42      	ldr	r3, [pc, #264]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0x144>)
 8003938:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800393a:	e076      	b.n	8003a2a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800393c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800393e:	0c9a      	lsrs	r2, r3, #18
 8003940:	230f      	movs	r3, #15
 8003942:	401a      	ands	r2, r3
 8003944:	4b3f      	ldr	r3, [pc, #252]	@ (8003a44 <HAL_RCC_GetSysClockFreq+0x148>)
 8003946:	5c9b      	ldrb	r3, [r3, r2]
 8003948:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800394a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800394c:	0d9a      	lsrs	r2, r3, #22
 800394e:	2303      	movs	r3, #3
 8003950:	4013      	ands	r3, r2
 8003952:	3301      	adds	r3, #1
 8003954:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003956:	4b37      	ldr	r3, [pc, #220]	@ (8003a34 <HAL_RCC_GetSysClockFreq+0x138>)
 8003958:	68da      	ldr	r2, [r3, #12]
 800395a:	2380      	movs	r3, #128	@ 0x80
 800395c:	025b      	lsls	r3, r3, #9
 800395e:	4013      	ands	r3, r2
 8003960:	d01a      	beq.n	8003998 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003964:	61bb      	str	r3, [r7, #24]
 8003966:	2300      	movs	r3, #0
 8003968:	61fb      	str	r3, [r7, #28]
 800396a:	4a35      	ldr	r2, [pc, #212]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0x144>)
 800396c:	2300      	movs	r3, #0
 800396e:	69b8      	ldr	r0, [r7, #24]
 8003970:	69f9      	ldr	r1, [r7, #28]
 8003972:	f7fc fd69 	bl	8000448 <__aeabi_lmul>
 8003976:	0002      	movs	r2, r0
 8003978:	000b      	movs	r3, r1
 800397a:	0010      	movs	r0, r2
 800397c:	0019      	movs	r1, r3
 800397e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003980:	613b      	str	r3, [r7, #16]
 8003982:	2300      	movs	r3, #0
 8003984:	617b      	str	r3, [r7, #20]
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	f7fc fd3d 	bl	8000408 <__aeabi_uldivmod>
 800398e:	0002      	movs	r2, r0
 8003990:	000b      	movs	r3, r1
 8003992:	0013      	movs	r3, r2
 8003994:	637b      	str	r3, [r7, #52]	@ 0x34
 8003996:	e037      	b.n	8003a08 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003998:	4b26      	ldr	r3, [pc, #152]	@ (8003a34 <HAL_RCC_GetSysClockFreq+0x138>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2210      	movs	r2, #16
 800399e:	4013      	ands	r3, r2
 80039a0:	d01a      	beq.n	80039d8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80039a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039a4:	60bb      	str	r3, [r7, #8]
 80039a6:	2300      	movs	r3, #0
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	4a23      	ldr	r2, [pc, #140]	@ (8003a38 <HAL_RCC_GetSysClockFreq+0x13c>)
 80039ac:	2300      	movs	r3, #0
 80039ae:	68b8      	ldr	r0, [r7, #8]
 80039b0:	68f9      	ldr	r1, [r7, #12]
 80039b2:	f7fc fd49 	bl	8000448 <__aeabi_lmul>
 80039b6:	0002      	movs	r2, r0
 80039b8:	000b      	movs	r3, r1
 80039ba:	0010      	movs	r0, r2
 80039bc:	0019      	movs	r1, r3
 80039be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c0:	603b      	str	r3, [r7, #0]
 80039c2:	2300      	movs	r3, #0
 80039c4:	607b      	str	r3, [r7, #4]
 80039c6:	683a      	ldr	r2, [r7, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f7fc fd1d 	bl	8000408 <__aeabi_uldivmod>
 80039ce:	0002      	movs	r2, r0
 80039d0:	000b      	movs	r3, r1
 80039d2:	0013      	movs	r3, r2
 80039d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80039d6:	e017      	b.n	8003a08 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80039d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039da:	0018      	movs	r0, r3
 80039dc:	2300      	movs	r3, #0
 80039de:	0019      	movs	r1, r3
 80039e0:	4a16      	ldr	r2, [pc, #88]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0x140>)
 80039e2:	2300      	movs	r3, #0
 80039e4:	f7fc fd30 	bl	8000448 <__aeabi_lmul>
 80039e8:	0002      	movs	r2, r0
 80039ea:	000b      	movs	r3, r1
 80039ec:	0010      	movs	r0, r2
 80039ee:	0019      	movs	r1, r3
 80039f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f2:	001c      	movs	r4, r3
 80039f4:	2300      	movs	r3, #0
 80039f6:	001d      	movs	r5, r3
 80039f8:	0022      	movs	r2, r4
 80039fa:	002b      	movs	r3, r5
 80039fc:	f7fc fd04 	bl	8000408 <__aeabi_uldivmod>
 8003a00:	0002      	movs	r2, r0
 8003a02:	000b      	movs	r3, r1
 8003a04:	0013      	movs	r3, r2
 8003a06:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8003a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a0a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003a0c:	e00d      	b.n	8003a2a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003a0e:	4b09      	ldr	r3, [pc, #36]	@ (8003a34 <HAL_RCC_GetSysClockFreq+0x138>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	0b5b      	lsrs	r3, r3, #13
 8003a14:	2207      	movs	r2, #7
 8003a16:	4013      	ands	r3, r2
 8003a18:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003a1a:	6a3b      	ldr	r3, [r7, #32]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	2280      	movs	r2, #128	@ 0x80
 8003a20:	0212      	lsls	r2, r2, #8
 8003a22:	409a      	lsls	r2, r3
 8003a24:	0013      	movs	r3, r2
 8003a26:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003a28:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8003a2c:	0018      	movs	r0, r3
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	b00e      	add	sp, #56	@ 0x38
 8003a32:	bdb0      	pop	{r4, r5, r7, pc}
 8003a34:	40021000 	.word	0x40021000
 8003a38:	003d0900 	.word	0x003d0900
 8003a3c:	00f42400 	.word	0x00f42400
 8003a40:	007a1200 	.word	0x007a1200
 8003a44:	0800a00c 	.word	0x0800a00c

08003a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a4c:	4b02      	ldr	r3, [pc, #8]	@ (8003a58 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
}
 8003a50:	0018      	movs	r0, r3
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	46c0      	nop			@ (mov r8, r8)
 8003a58:	20000014 	.word	0x20000014

08003a5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a60:	f7ff fff2 	bl	8003a48 <HAL_RCC_GetHCLKFreq>
 8003a64:	0001      	movs	r1, r0
 8003a66:	4b06      	ldr	r3, [pc, #24]	@ (8003a80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	0a1b      	lsrs	r3, r3, #8
 8003a6c:	2207      	movs	r2, #7
 8003a6e:	4013      	ands	r3, r2
 8003a70:	4a04      	ldr	r2, [pc, #16]	@ (8003a84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a72:	5cd3      	ldrb	r3, [r2, r3]
 8003a74:	40d9      	lsrs	r1, r3
 8003a76:	000b      	movs	r3, r1
}
 8003a78:	0018      	movs	r0, r3
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	46c0      	nop			@ (mov r8, r8)
 8003a80:	40021000 	.word	0x40021000
 8003a84:	0800a004 	.word	0x0800a004

08003a88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a8c:	f7ff ffdc 	bl	8003a48 <HAL_RCC_GetHCLKFreq>
 8003a90:	0001      	movs	r1, r0
 8003a92:	4b06      	ldr	r3, [pc, #24]	@ (8003aac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	0adb      	lsrs	r3, r3, #11
 8003a98:	2207      	movs	r2, #7
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	4a04      	ldr	r2, [pc, #16]	@ (8003ab0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a9e:	5cd3      	ldrb	r3, [r2, r3]
 8003aa0:	40d9      	lsrs	r1, r3
 8003aa2:	000b      	movs	r3, r1
}
 8003aa4:	0018      	movs	r0, r3
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	46c0      	nop			@ (mov r8, r8)
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	0800a004 	.word	0x0800a004

08003ab4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003abc:	2317      	movs	r3, #23
 8003abe:	18fb      	adds	r3, r7, r3
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	4013      	ands	r3, r2
 8003acc:	d106      	bne.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	2380      	movs	r3, #128	@ 0x80
 8003ad4:	011b      	lsls	r3, r3, #4
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	d100      	bne.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x28>
 8003ada:	e104      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003adc:	4bb1      	ldr	r3, [pc, #708]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003ade:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ae0:	2380      	movs	r3, #128	@ 0x80
 8003ae2:	055b      	lsls	r3, r3, #21
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	d10a      	bne.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ae8:	4bae      	ldr	r3, [pc, #696]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003aea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003aec:	4bad      	ldr	r3, [pc, #692]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003aee:	2180      	movs	r1, #128	@ 0x80
 8003af0:	0549      	lsls	r1, r1, #21
 8003af2:	430a      	orrs	r2, r1
 8003af4:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8003af6:	2317      	movs	r3, #23
 8003af8:	18fb      	adds	r3, r7, r3
 8003afa:	2201      	movs	r2, #1
 8003afc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003afe:	4baa      	ldr	r3, [pc, #680]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	2380      	movs	r3, #128	@ 0x80
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	4013      	ands	r3, r2
 8003b08:	d11a      	bne.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b0a:	4ba7      	ldr	r3, [pc, #668]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	4ba6      	ldr	r3, [pc, #664]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b10:	2180      	movs	r1, #128	@ 0x80
 8003b12:	0049      	lsls	r1, r1, #1
 8003b14:	430a      	orrs	r2, r1
 8003b16:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b18:	f7fe f9b2 	bl	8001e80 <HAL_GetTick>
 8003b1c:	0003      	movs	r3, r0
 8003b1e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b20:	e008      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b22:	f7fe f9ad 	bl	8001e80 <HAL_GetTick>
 8003b26:	0002      	movs	r2, r0
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b64      	cmp	r3, #100	@ 0x64
 8003b2e:	d901      	bls.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e133      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b34:	4b9c      	ldr	r3, [pc, #624]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	2380      	movs	r3, #128	@ 0x80
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	d0f0      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003b40:	4b98      	ldr	r3, [pc, #608]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	23c0      	movs	r3, #192	@ 0xc0
 8003b46:	039b      	lsls	r3, r3, #14
 8003b48:	4013      	ands	r3, r2
 8003b4a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	23c0      	movs	r3, #192	@ 0xc0
 8003b52:	039b      	lsls	r3, r3, #14
 8003b54:	4013      	ands	r3, r2
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d107      	bne.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689a      	ldr	r2, [r3, #8]
 8003b60:	23c0      	movs	r3, #192	@ 0xc0
 8003b62:	039b      	lsls	r3, r3, #14
 8003b64:	4013      	ands	r3, r2
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d013      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	23c0      	movs	r3, #192	@ 0xc0
 8003b72:	029b      	lsls	r3, r3, #10
 8003b74:	401a      	ands	r2, r3
 8003b76:	23c0      	movs	r3, #192	@ 0xc0
 8003b78:	029b      	lsls	r3, r3, #10
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d10a      	bne.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003b7e:	4b89      	ldr	r3, [pc, #548]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	2380      	movs	r3, #128	@ 0x80
 8003b84:	029b      	lsls	r3, r3, #10
 8003b86:	401a      	ands	r2, r3
 8003b88:	2380      	movs	r3, #128	@ 0x80
 8003b8a:	029b      	lsls	r3, r3, #10
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d101      	bne.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e103      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003b94:	4b83      	ldr	r3, [pc, #524]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003b96:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003b98:	23c0      	movs	r3, #192	@ 0xc0
 8003b9a:	029b      	lsls	r3, r3, #10
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d049      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	23c0      	movs	r3, #192	@ 0xc0
 8003bac:	029b      	lsls	r3, r3, #10
 8003bae:	4013      	ands	r3, r2
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d004      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2220      	movs	r2, #32
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	d10d      	bne.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	23c0      	movs	r3, #192	@ 0xc0
 8003bc6:	029b      	lsls	r3, r3, #10
 8003bc8:	4013      	ands	r3, r2
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d034      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	2380      	movs	r3, #128	@ 0x80
 8003bd6:	011b      	lsls	r3, r3, #4
 8003bd8:	4013      	ands	r3, r2
 8003bda:	d02e      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003bdc:	4b71      	ldr	r3, [pc, #452]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003bde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003be0:	4a72      	ldr	r2, [pc, #456]	@ (8003dac <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003be2:	4013      	ands	r3, r2
 8003be4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003be6:	4b6f      	ldr	r3, [pc, #444]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003be8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003bea:	4b6e      	ldr	r3, [pc, #440]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003bec:	2180      	movs	r1, #128	@ 0x80
 8003bee:	0309      	lsls	r1, r1, #12
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bf4:	4b6b      	ldr	r3, [pc, #428]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003bf6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003bf8:	4b6a      	ldr	r3, [pc, #424]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003bfa:	496d      	ldr	r1, [pc, #436]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003bfc:	400a      	ands	r2, r1
 8003bfe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003c00:	4b68      	ldr	r3, [pc, #416]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	2380      	movs	r3, #128	@ 0x80
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	d014      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c10:	f7fe f936 	bl	8001e80 <HAL_GetTick>
 8003c14:	0003      	movs	r3, r0
 8003c16:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c18:	e009      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c1a:	f7fe f931 	bl	8001e80 <HAL_GetTick>
 8003c1e:	0002      	movs	r2, r0
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	4a63      	ldr	r2, [pc, #396]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d901      	bls.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e0b6      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c2e:	4b5d      	ldr	r3, [pc, #372]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c30:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003c32:	2380      	movs	r3, #128	@ 0x80
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	4013      	ands	r3, r2
 8003c38:	d0ef      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	2380      	movs	r3, #128	@ 0x80
 8003c40:	011b      	lsls	r3, r3, #4
 8003c42:	4013      	ands	r3, r2
 8003c44:	d01f      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	689a      	ldr	r2, [r3, #8]
 8003c4a:	23c0      	movs	r3, #192	@ 0xc0
 8003c4c:	029b      	lsls	r3, r3, #10
 8003c4e:	401a      	ands	r2, r3
 8003c50:	23c0      	movs	r3, #192	@ 0xc0
 8003c52:	029b      	lsls	r3, r3, #10
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d10c      	bne.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003c58:	4b52      	ldr	r3, [pc, #328]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a56      	ldr	r2, [pc, #344]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003c5e:	4013      	ands	r3, r2
 8003c60:	0019      	movs	r1, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	689a      	ldr	r2, [r3, #8]
 8003c66:	23c0      	movs	r3, #192	@ 0xc0
 8003c68:	039b      	lsls	r3, r3, #14
 8003c6a:	401a      	ands	r2, r3
 8003c6c:	4b4d      	ldr	r3, [pc, #308]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	601a      	str	r2, [r3, #0]
 8003c72:	4b4c      	ldr	r3, [pc, #304]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c74:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689a      	ldr	r2, [r3, #8]
 8003c7a:	23c0      	movs	r3, #192	@ 0xc0
 8003c7c:	029b      	lsls	r3, r3, #10
 8003c7e:	401a      	ands	r2, r3
 8003c80:	4b48      	ldr	r3, [pc, #288]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c82:	430a      	orrs	r2, r1
 8003c84:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	d01f      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	23c0      	movs	r3, #192	@ 0xc0
 8003c96:	029b      	lsls	r3, r3, #10
 8003c98:	401a      	ands	r2, r3
 8003c9a:	23c0      	movs	r3, #192	@ 0xc0
 8003c9c:	029b      	lsls	r3, r3, #10
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d10c      	bne.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003ca2:	4b40      	ldr	r3, [pc, #256]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a44      	ldr	r2, [pc, #272]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003ca8:	4013      	ands	r3, r2
 8003caa:	0019      	movs	r1, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685a      	ldr	r2, [r3, #4]
 8003cb0:	23c0      	movs	r3, #192	@ 0xc0
 8003cb2:	039b      	lsls	r3, r3, #14
 8003cb4:	401a      	ands	r2, r3
 8003cb6:	4b3b      	ldr	r3, [pc, #236]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	4b39      	ldr	r3, [pc, #228]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003cbe:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	23c0      	movs	r3, #192	@ 0xc0
 8003cc6:	029b      	lsls	r3, r3, #10
 8003cc8:	401a      	ands	r2, r3
 8003cca:	4b36      	ldr	r3, [pc, #216]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003cd0:	2317      	movs	r3, #23
 8003cd2:	18fb      	adds	r3, r7, r3
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d105      	bne.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cda:	4b32      	ldr	r3, [pc, #200]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003cdc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003cde:	4b31      	ldr	r3, [pc, #196]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003ce0:	4936      	ldr	r1, [pc, #216]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003ce2:	400a      	ands	r2, r1
 8003ce4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2201      	movs	r2, #1
 8003cec:	4013      	ands	r3, r2
 8003cee:	d009      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cf0:	4b2c      	ldr	r3, [pc, #176]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003cf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cf4:	2203      	movs	r2, #3
 8003cf6:	4393      	bics	r3, r2
 8003cf8:	0019      	movs	r1, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68da      	ldr	r2, [r3, #12]
 8003cfe:	4b29      	ldr	r3, [pc, #164]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d00:	430a      	orrs	r2, r1
 8003d02:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2202      	movs	r2, #2
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	d009      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d0e:	4b25      	ldr	r3, [pc, #148]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d12:	220c      	movs	r2, #12
 8003d14:	4393      	bics	r3, r2
 8003d16:	0019      	movs	r1, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	691a      	ldr	r2, [r3, #16]
 8003d1c:	4b21      	ldr	r3, [pc, #132]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2204      	movs	r2, #4
 8003d28:	4013      	ands	r3, r2
 8003d2a:	d009      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d30:	4a23      	ldr	r2, [pc, #140]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8003d32:	4013      	ands	r3, r2
 8003d34:	0019      	movs	r1, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	695a      	ldr	r2, [r3, #20]
 8003d3a:	4b1a      	ldr	r3, [pc, #104]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2208      	movs	r2, #8
 8003d46:	4013      	ands	r3, r2
 8003d48:	d009      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d4a:	4b16      	ldr	r3, [pc, #88]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d4e:	4a1d      	ldr	r2, [pc, #116]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d50:	4013      	ands	r3, r2
 8003d52:	0019      	movs	r1, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	699a      	ldr	r2, [r3, #24]
 8003d58:	4b12      	ldr	r3, [pc, #72]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2240      	movs	r2, #64	@ 0x40
 8003d64:	4013      	ands	r3, r2
 8003d66:	d009      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d68:	4b0e      	ldr	r3, [pc, #56]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d6c:	4a16      	ldr	r2, [pc, #88]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003d6e:	4013      	ands	r3, r2
 8003d70:	0019      	movs	r1, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a1a      	ldr	r2, [r3, #32]
 8003d76:	4b0b      	ldr	r3, [pc, #44]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2280      	movs	r2, #128	@ 0x80
 8003d82:	4013      	ands	r3, r2
 8003d84:	d009      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003d86:	4b07      	ldr	r3, [pc, #28]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d8a:	4a10      	ldr	r2, [pc, #64]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	0019      	movs	r1, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	69da      	ldr	r2, [r3, #28]
 8003d94:	4b03      	ldr	r3, [pc, #12]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d96:	430a      	orrs	r2, r1
 8003d98:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	b006      	add	sp, #24
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	40021000 	.word	0x40021000
 8003da8:	40007000 	.word	0x40007000
 8003dac:	fffcffff 	.word	0xfffcffff
 8003db0:	fff7ffff 	.word	0xfff7ffff
 8003db4:	00001388 	.word	0x00001388
 8003db8:	ffcfffff 	.word	0xffcfffff
 8003dbc:	efffffff 	.word	0xefffffff
 8003dc0:	fffff3ff 	.word	0xfffff3ff
 8003dc4:	ffffcfff 	.word	0xffffcfff
 8003dc8:	fbffffff 	.word	0xfbffffff
 8003dcc:	fff3ffff 	.word	0xfff3ffff

08003dd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e083      	b.n	8003eea <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d109      	bne.n	8003dfe <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685a      	ldr	r2, [r3, #4]
 8003dee:	2382      	movs	r3, #130	@ 0x82
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d009      	beq.n	8003e0a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	61da      	str	r2, [r3, #28]
 8003dfc:	e005      	b.n	8003e0a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2251      	movs	r2, #81	@ 0x51
 8003e14:	5c9b      	ldrb	r3, [r3, r2]
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d107      	bne.n	8003e2c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2250      	movs	r2, #80	@ 0x50
 8003e20:	2100      	movs	r1, #0
 8003e22:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	0018      	movs	r0, r3
 8003e28:	f7fd fa2a 	bl	8001280 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2251      	movs	r2, #81	@ 0x51
 8003e30:	2102      	movs	r1, #2
 8003e32:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2140      	movs	r1, #64	@ 0x40
 8003e40:	438a      	bics	r2, r1
 8003e42:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	2382      	movs	r3, #130	@ 0x82
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	401a      	ands	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6899      	ldr	r1, [r3, #8]
 8003e52:	2384      	movs	r3, #132	@ 0x84
 8003e54:	021b      	lsls	r3, r3, #8
 8003e56:	400b      	ands	r3, r1
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68d9      	ldr	r1, [r3, #12]
 8003e5e:	2380      	movs	r3, #128	@ 0x80
 8003e60:	011b      	lsls	r3, r3, #4
 8003e62:	400b      	ands	r3, r1
 8003e64:	431a      	orrs	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	2102      	movs	r1, #2
 8003e6c:	400b      	ands	r3, r1
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	2101      	movs	r1, #1
 8003e76:	400b      	ands	r3, r1
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6999      	ldr	r1, [r3, #24]
 8003e7e:	2380      	movs	r3, #128	@ 0x80
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	400b      	ands	r3, r1
 8003e84:	431a      	orrs	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	2138      	movs	r1, #56	@ 0x38
 8003e8c:	400b      	ands	r3, r1
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a1b      	ldr	r3, [r3, #32]
 8003e94:	2180      	movs	r1, #128	@ 0x80
 8003e96:	400b      	ands	r3, r1
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	0011      	movs	r1, r2
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ea0:	2380      	movs	r3, #128	@ 0x80
 8003ea2:	019b      	lsls	r3, r3, #6
 8003ea4:	401a      	ands	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	0c1b      	lsrs	r3, r3, #16
 8003eb4:	2204      	movs	r2, #4
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	0019      	movs	r1, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ebe:	2210      	movs	r2, #16
 8003ec0:	401a      	ands	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	69da      	ldr	r2, [r3, #28]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4907      	ldr	r1, [pc, #28]	@ (8003ef4 <HAL_SPI_Init+0x124>)
 8003ed6:	400a      	ands	r2, r1
 8003ed8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2251      	movs	r2, #81	@ 0x51
 8003ee4:	2101      	movs	r1, #1
 8003ee6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	0018      	movs	r0, r3
 8003eec:	46bd      	mov	sp, r7
 8003eee:	b002      	add	sp, #8
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	46c0      	nop			@ (mov r8, r8)
 8003ef4:	fffff7ff 	.word	0xfffff7ff

08003ef8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b088      	sub	sp, #32
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	603b      	str	r3, [r7, #0]
 8003f04:	1dbb      	adds	r3, r7, #6
 8003f06:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f08:	231f      	movs	r3, #31
 8003f0a:	18fb      	adds	r3, r7, r3
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2250      	movs	r2, #80	@ 0x50
 8003f14:	5c9b      	ldrb	r3, [r3, r2]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d101      	bne.n	8003f1e <HAL_SPI_Transmit+0x26>
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	e145      	b.n	80041aa <HAL_SPI_Transmit+0x2b2>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2250      	movs	r2, #80	@ 0x50
 8003f22:	2101      	movs	r1, #1
 8003f24:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f26:	f7fd ffab 	bl	8001e80 <HAL_GetTick>
 8003f2a:	0003      	movs	r3, r0
 8003f2c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003f2e:	2316      	movs	r3, #22
 8003f30:	18fb      	adds	r3, r7, r3
 8003f32:	1dba      	adds	r2, r7, #6
 8003f34:	8812      	ldrh	r2, [r2, #0]
 8003f36:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2251      	movs	r2, #81	@ 0x51
 8003f3c:	5c9b      	ldrb	r3, [r3, r2]
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d004      	beq.n	8003f4e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003f44:	231f      	movs	r3, #31
 8003f46:	18fb      	adds	r3, r7, r3
 8003f48:	2202      	movs	r2, #2
 8003f4a:	701a      	strb	r2, [r3, #0]
    goto error;
 8003f4c:	e126      	b.n	800419c <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d003      	beq.n	8003f5c <HAL_SPI_Transmit+0x64>
 8003f54:	1dbb      	adds	r3, r7, #6
 8003f56:	881b      	ldrh	r3, [r3, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d104      	bne.n	8003f66 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003f5c:	231f      	movs	r3, #31
 8003f5e:	18fb      	adds	r3, r7, r3
 8003f60:	2201      	movs	r2, #1
 8003f62:	701a      	strb	r2, [r3, #0]
    goto error;
 8003f64:	e11a      	b.n	800419c <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2251      	movs	r2, #81	@ 0x51
 8003f6a:	2103      	movs	r1, #3
 8003f6c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	68ba      	ldr	r2, [r7, #8]
 8003f78:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	1dba      	adds	r2, r7, #6
 8003f7e:	8812      	ldrh	r2, [r2, #0]
 8003f80:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	1dba      	adds	r2, r7, #6
 8003f86:	8812      	ldrh	r2, [r2, #0]
 8003f88:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	689a      	ldr	r2, [r3, #8]
 8003fac:	2380      	movs	r3, #128	@ 0x80
 8003fae:	021b      	lsls	r3, r3, #8
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d110      	bne.n	8003fd6 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2140      	movs	r1, #64	@ 0x40
 8003fc0:	438a      	bics	r2, r1
 8003fc2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2180      	movs	r1, #128	@ 0x80
 8003fd0:	01c9      	lsls	r1, r1, #7
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2240      	movs	r2, #64	@ 0x40
 8003fde:	4013      	ands	r3, r2
 8003fe0:	2b40      	cmp	r3, #64	@ 0x40
 8003fe2:	d007      	beq.n	8003ff4 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2140      	movs	r1, #64	@ 0x40
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	68da      	ldr	r2, [r3, #12]
 8003ff8:	2380      	movs	r3, #128	@ 0x80
 8003ffa:	011b      	lsls	r3, r3, #4
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d152      	bne.n	80040a6 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d004      	beq.n	8004012 <HAL_SPI_Transmit+0x11a>
 8004008:	2316      	movs	r3, #22
 800400a:	18fb      	adds	r3, r7, r3
 800400c:	881b      	ldrh	r3, [r3, #0]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d143      	bne.n	800409a <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004016:	881a      	ldrh	r2, [r3, #0]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004022:	1c9a      	adds	r2, r3, #2
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800402c:	b29b      	uxth	r3, r3
 800402e:	3b01      	subs	r3, #1
 8004030:	b29a      	uxth	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004036:	e030      	b.n	800409a <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	2202      	movs	r2, #2
 8004040:	4013      	ands	r3, r2
 8004042:	2b02      	cmp	r3, #2
 8004044:	d112      	bne.n	800406c <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800404a:	881a      	ldrh	r2, [r3, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004056:	1c9a      	adds	r2, r3, #2
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004060:	b29b      	uxth	r3, r3
 8004062:	3b01      	subs	r3, #1
 8004064:	b29a      	uxth	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	86da      	strh	r2, [r3, #54]	@ 0x36
 800406a:	e016      	b.n	800409a <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800406c:	f7fd ff08 	bl	8001e80 <HAL_GetTick>
 8004070:	0002      	movs	r2, r0
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	683a      	ldr	r2, [r7, #0]
 8004078:	429a      	cmp	r2, r3
 800407a:	d802      	bhi.n	8004082 <HAL_SPI_Transmit+0x18a>
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	3301      	adds	r3, #1
 8004080:	d102      	bne.n	8004088 <HAL_SPI_Transmit+0x190>
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d108      	bne.n	800409a <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8004088:	231f      	movs	r3, #31
 800408a:	18fb      	adds	r3, r7, r3
 800408c:	2203      	movs	r2, #3
 800408e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2251      	movs	r2, #81	@ 0x51
 8004094:	2101      	movs	r1, #1
 8004096:	5499      	strb	r1, [r3, r2]
          goto error;
 8004098:	e080      	b.n	800419c <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800409e:	b29b      	uxth	r3, r3
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1c9      	bne.n	8004038 <HAL_SPI_Transmit+0x140>
 80040a4:	e053      	b.n	800414e <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d004      	beq.n	80040b8 <HAL_SPI_Transmit+0x1c0>
 80040ae:	2316      	movs	r3, #22
 80040b0:	18fb      	adds	r3, r7, r3
 80040b2:	881b      	ldrh	r3, [r3, #0]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d145      	bne.n	8004144 <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	330c      	adds	r3, #12
 80040c2:	7812      	ldrb	r2, [r2, #0]
 80040c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ca:	1c5a      	adds	r2, r3, #1
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	3b01      	subs	r3, #1
 80040d8:	b29a      	uxth	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80040de:	e031      	b.n	8004144 <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	2202      	movs	r2, #2
 80040e8:	4013      	ands	r3, r2
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d113      	bne.n	8004116 <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	330c      	adds	r3, #12
 80040f8:	7812      	ldrb	r2, [r2, #0]
 80040fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004100:	1c5a      	adds	r2, r3, #1
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800410a:	b29b      	uxth	r3, r3
 800410c:	3b01      	subs	r3, #1
 800410e:	b29a      	uxth	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004114:	e016      	b.n	8004144 <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004116:	f7fd feb3 	bl	8001e80 <HAL_GetTick>
 800411a:	0002      	movs	r2, r0
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	429a      	cmp	r2, r3
 8004124:	d802      	bhi.n	800412c <HAL_SPI_Transmit+0x234>
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	3301      	adds	r3, #1
 800412a:	d102      	bne.n	8004132 <HAL_SPI_Transmit+0x23a>
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d108      	bne.n	8004144 <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 8004132:	231f      	movs	r3, #31
 8004134:	18fb      	adds	r3, r7, r3
 8004136:	2203      	movs	r2, #3
 8004138:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2251      	movs	r2, #81	@ 0x51
 800413e:	2101      	movs	r1, #1
 8004140:	5499      	strb	r1, [r3, r2]
          goto error;
 8004142:	e02b      	b.n	800419c <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004148:	b29b      	uxth	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1c8      	bne.n	80040e0 <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800414e:	69ba      	ldr	r2, [r7, #24]
 8004150:	6839      	ldr	r1, [r7, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	0018      	movs	r0, r3
 8004156:	f000 f8bb 	bl	80042d0 <SPI_EndRxTxTransaction>
 800415a:	1e03      	subs	r3, r0, #0
 800415c:	d002      	beq.n	8004164 <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2220      	movs	r2, #32
 8004162:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10a      	bne.n	8004182 <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800416c:	2300      	movs	r3, #0
 800416e:	613b      	str	r3, [r7, #16]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	613b      	str	r3, [r7, #16]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	613b      	str	r3, [r7, #16]
 8004180:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004186:	2b00      	cmp	r3, #0
 8004188:	d004      	beq.n	8004194 <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 800418a:	231f      	movs	r3, #31
 800418c:	18fb      	adds	r3, r7, r3
 800418e:	2201      	movs	r2, #1
 8004190:	701a      	strb	r2, [r3, #0]
 8004192:	e003      	b.n	800419c <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2251      	movs	r2, #81	@ 0x51
 8004198:	2101      	movs	r1, #1
 800419a:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2250      	movs	r2, #80	@ 0x50
 80041a0:	2100      	movs	r1, #0
 80041a2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80041a4:	231f      	movs	r3, #31
 80041a6:	18fb      	adds	r3, r7, r3
 80041a8:	781b      	ldrb	r3, [r3, #0]
}
 80041aa:	0018      	movs	r0, r3
 80041ac:	46bd      	mov	sp, r7
 80041ae:	b008      	add	sp, #32
 80041b0:	bd80      	pop	{r7, pc}
	...

080041b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b088      	sub	sp, #32
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	603b      	str	r3, [r7, #0]
 80041c0:	1dfb      	adds	r3, r7, #7
 80041c2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80041c4:	f7fd fe5c 	bl	8001e80 <HAL_GetTick>
 80041c8:	0002      	movs	r2, r0
 80041ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041cc:	1a9b      	subs	r3, r3, r2
 80041ce:	683a      	ldr	r2, [r7, #0]
 80041d0:	18d3      	adds	r3, r2, r3
 80041d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80041d4:	f7fd fe54 	bl	8001e80 <HAL_GetTick>
 80041d8:	0003      	movs	r3, r0
 80041da:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80041dc:	4b3a      	ldr	r3, [pc, #232]	@ (80042c8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	015b      	lsls	r3, r3, #5
 80041e2:	0d1b      	lsrs	r3, r3, #20
 80041e4:	69fa      	ldr	r2, [r7, #28]
 80041e6:	4353      	muls	r3, r2
 80041e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041ea:	e058      	b.n	800429e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	3301      	adds	r3, #1
 80041f0:	d055      	beq.n	800429e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041f2:	f7fd fe45 	bl	8001e80 <HAL_GetTick>
 80041f6:	0002      	movs	r2, r0
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	69fa      	ldr	r2, [r7, #28]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d902      	bls.n	8004208 <SPI_WaitFlagStateUntilTimeout+0x54>
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d142      	bne.n	800428e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	21e0      	movs	r1, #224	@ 0xe0
 8004214:	438a      	bics	r2, r1
 8004216:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	685a      	ldr	r2, [r3, #4]
 800421c:	2382      	movs	r3, #130	@ 0x82
 800421e:	005b      	lsls	r3, r3, #1
 8004220:	429a      	cmp	r2, r3
 8004222:	d113      	bne.n	800424c <SPI_WaitFlagStateUntilTimeout+0x98>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	2380      	movs	r3, #128	@ 0x80
 800422a:	021b      	lsls	r3, r3, #8
 800422c:	429a      	cmp	r2, r3
 800422e:	d005      	beq.n	800423c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	689a      	ldr	r2, [r3, #8]
 8004234:	2380      	movs	r3, #128	@ 0x80
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	429a      	cmp	r2, r3
 800423a:	d107      	bne.n	800424c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2140      	movs	r1, #64	@ 0x40
 8004248:	438a      	bics	r2, r1
 800424a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004250:	2380      	movs	r3, #128	@ 0x80
 8004252:	019b      	lsls	r3, r3, #6
 8004254:	429a      	cmp	r2, r3
 8004256:	d110      	bne.n	800427a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	491a      	ldr	r1, [pc, #104]	@ (80042cc <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004264:	400a      	ands	r2, r1
 8004266:	601a      	str	r2, [r3, #0]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2180      	movs	r1, #128	@ 0x80
 8004274:	0189      	lsls	r1, r1, #6
 8004276:	430a      	orrs	r2, r1
 8004278:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2251      	movs	r2, #81	@ 0x51
 800427e:	2101      	movs	r1, #1
 8004280:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2250      	movs	r2, #80	@ 0x50
 8004286:	2100      	movs	r1, #0
 8004288:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e017      	b.n	80042be <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d101      	bne.n	8004298 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004294:	2300      	movs	r3, #0
 8004296:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	3b01      	subs	r3, #1
 800429c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	68ba      	ldr	r2, [r7, #8]
 80042a6:	4013      	ands	r3, r2
 80042a8:	68ba      	ldr	r2, [r7, #8]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	425a      	negs	r2, r3
 80042ae:	4153      	adcs	r3, r2
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	001a      	movs	r2, r3
 80042b4:	1dfb      	adds	r3, r7, #7
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d197      	bne.n	80041ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	0018      	movs	r0, r3
 80042c0:	46bd      	mov	sp, r7
 80042c2:	b008      	add	sp, #32
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	46c0      	nop			@ (mov r8, r8)
 80042c8:	20000014 	.word	0x20000014
 80042cc:	ffffdfff 	.word	0xffffdfff

080042d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b088      	sub	sp, #32
 80042d4:	af02      	add	r7, sp, #8
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80042dc:	4b1d      	ldr	r3, [pc, #116]	@ (8004354 <SPI_EndRxTxTransaction+0x84>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	491d      	ldr	r1, [pc, #116]	@ (8004358 <SPI_EndRxTxTransaction+0x88>)
 80042e2:	0018      	movs	r0, r3
 80042e4:	f7fb ff1a 	bl	800011c <__udivsi3>
 80042e8:	0003      	movs	r3, r0
 80042ea:	001a      	movs	r2, r3
 80042ec:	0013      	movs	r3, r2
 80042ee:	015b      	lsls	r3, r3, #5
 80042f0:	1a9b      	subs	r3, r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	189b      	adds	r3, r3, r2
 80042f6:	00db      	lsls	r3, r3, #3
 80042f8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	685a      	ldr	r2, [r3, #4]
 80042fe:	2382      	movs	r3, #130	@ 0x82
 8004300:	005b      	lsls	r3, r3, #1
 8004302:	429a      	cmp	r2, r3
 8004304:	d112      	bne.n	800432c <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004306:	68ba      	ldr	r2, [r7, #8]
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	0013      	movs	r3, r2
 8004310:	2200      	movs	r2, #0
 8004312:	2180      	movs	r1, #128	@ 0x80
 8004314:	f7ff ff4e 	bl	80041b4 <SPI_WaitFlagStateUntilTimeout>
 8004318:	1e03      	subs	r3, r0, #0
 800431a:	d016      	beq.n	800434a <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004320:	2220      	movs	r2, #32
 8004322:	431a      	orrs	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e00f      	b.n	800434c <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00a      	beq.n	8004348 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	3b01      	subs	r3, #1
 8004336:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	2280      	movs	r2, #128	@ 0x80
 8004340:	4013      	ands	r3, r2
 8004342:	2b80      	cmp	r3, #128	@ 0x80
 8004344:	d0f2      	beq.n	800432c <SPI_EndRxTxTransaction+0x5c>
 8004346:	e000      	b.n	800434a <SPI_EndRxTxTransaction+0x7a>
        break;
 8004348:	46c0      	nop			@ (mov r8, r8)
  }

  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	0018      	movs	r0, r3
 800434e:	46bd      	mov	sp, r7
 8004350:	b006      	add	sp, #24
 8004352:	bd80      	pop	{r7, pc}
 8004354:	20000014 	.word	0x20000014
 8004358:	016e3600 	.word	0x016e3600

0800435c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e044      	b.n	80043f8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004372:	2b00      	cmp	r3, #0
 8004374:	d107      	bne.n	8004386 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2278      	movs	r2, #120	@ 0x78
 800437a:	2100      	movs	r1, #0
 800437c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	0018      	movs	r0, r3
 8004382:	f7fc ffe3 	bl	800134c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2224      	movs	r2, #36	@ 0x24
 800438a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2101      	movs	r1, #1
 8004398:	438a      	bics	r2, r1
 800439a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	0018      	movs	r0, r3
 80043a0:	f000 f8d0 	bl	8004544 <UART_SetConfig>
 80043a4:	0003      	movs	r3, r0
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d101      	bne.n	80043ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e024      	b.n	80043f8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d003      	beq.n	80043be <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	0018      	movs	r0, r3
 80043ba:	f000 fb47 	bl	8004a4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	685a      	ldr	r2, [r3, #4]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	490d      	ldr	r1, [pc, #52]	@ (8004400 <HAL_UART_Init+0xa4>)
 80043ca:	400a      	ands	r2, r1
 80043cc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	689a      	ldr	r2, [r3, #8]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	212a      	movs	r1, #42	@ 0x2a
 80043da:	438a      	bics	r2, r1
 80043dc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2101      	movs	r1, #1
 80043ea:	430a      	orrs	r2, r1
 80043ec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	0018      	movs	r0, r3
 80043f2:	f000 fbdf 	bl	8004bb4 <UART_CheckIdleState>
 80043f6:	0003      	movs	r3, r0
}
 80043f8:	0018      	movs	r0, r3
 80043fa:	46bd      	mov	sp, r7
 80043fc:	b002      	add	sp, #8
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	ffffb7ff 	.word	0xffffb7ff

08004404 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b08a      	sub	sp, #40	@ 0x28
 8004408:	af02      	add	r7, sp, #8
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	603b      	str	r3, [r7, #0]
 8004410:	1dbb      	adds	r3, r7, #6
 8004412:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004418:	2b20      	cmp	r3, #32
 800441a:	d000      	beq.n	800441e <HAL_UART_Transmit+0x1a>
 800441c:	e08c      	b.n	8004538 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d003      	beq.n	800442c <HAL_UART_Transmit+0x28>
 8004424:	1dbb      	adds	r3, r7, #6
 8004426:	881b      	ldrh	r3, [r3, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d101      	bne.n	8004430 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e084      	b.n	800453a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	2380      	movs	r3, #128	@ 0x80
 8004436:	015b      	lsls	r3, r3, #5
 8004438:	429a      	cmp	r2, r3
 800443a:	d109      	bne.n	8004450 <HAL_UART_Transmit+0x4c>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d105      	bne.n	8004450 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	2201      	movs	r2, #1
 8004448:	4013      	ands	r3, r2
 800444a:	d001      	beq.n	8004450 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e074      	b.n	800453a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2284      	movs	r2, #132	@ 0x84
 8004454:	2100      	movs	r1, #0
 8004456:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2221      	movs	r2, #33	@ 0x21
 800445c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800445e:	f7fd fd0f 	bl	8001e80 <HAL_GetTick>
 8004462:	0003      	movs	r3, r0
 8004464:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	1dba      	adds	r2, r7, #6
 800446a:	2150      	movs	r1, #80	@ 0x50
 800446c:	8812      	ldrh	r2, [r2, #0]
 800446e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	1dba      	adds	r2, r7, #6
 8004474:	2152      	movs	r1, #82	@ 0x52
 8004476:	8812      	ldrh	r2, [r2, #0]
 8004478:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	689a      	ldr	r2, [r3, #8]
 800447e:	2380      	movs	r3, #128	@ 0x80
 8004480:	015b      	lsls	r3, r3, #5
 8004482:	429a      	cmp	r2, r3
 8004484:	d108      	bne.n	8004498 <HAL_UART_Transmit+0x94>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d104      	bne.n	8004498 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800448e:	2300      	movs	r3, #0
 8004490:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	61bb      	str	r3, [r7, #24]
 8004496:	e003      	b.n	80044a0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800449c:	2300      	movs	r3, #0
 800449e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80044a0:	e02f      	b.n	8004502 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	0013      	movs	r3, r2
 80044ac:	2200      	movs	r2, #0
 80044ae:	2180      	movs	r1, #128	@ 0x80
 80044b0:	f000 fc28 	bl	8004d04 <UART_WaitOnFlagUntilTimeout>
 80044b4:	1e03      	subs	r3, r0, #0
 80044b6:	d004      	beq.n	80044c2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2220      	movs	r2, #32
 80044bc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e03b      	b.n	800453a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10b      	bne.n	80044e0 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	881b      	ldrh	r3, [r3, #0]
 80044cc:	001a      	movs	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	05d2      	lsls	r2, r2, #23
 80044d4:	0dd2      	lsrs	r2, r2, #23
 80044d6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	3302      	adds	r3, #2
 80044dc:	61bb      	str	r3, [r7, #24]
 80044de:	e007      	b.n	80044f0 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	781a      	ldrb	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	3301      	adds	r3, #1
 80044ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2252      	movs	r2, #82	@ 0x52
 80044f4:	5a9b      	ldrh	r3, [r3, r2]
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	3b01      	subs	r3, #1
 80044fa:	b299      	uxth	r1, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2252      	movs	r2, #82	@ 0x52
 8004500:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2252      	movs	r2, #82	@ 0x52
 8004506:	5a9b      	ldrh	r3, [r3, r2]
 8004508:	b29b      	uxth	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1c9      	bne.n	80044a2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	0013      	movs	r3, r2
 8004518:	2200      	movs	r2, #0
 800451a:	2140      	movs	r1, #64	@ 0x40
 800451c:	f000 fbf2 	bl	8004d04 <UART_WaitOnFlagUntilTimeout>
 8004520:	1e03      	subs	r3, r0, #0
 8004522:	d004      	beq.n	800452e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2220      	movs	r2, #32
 8004528:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e005      	b.n	800453a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2220      	movs	r2, #32
 8004532:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004534:	2300      	movs	r3, #0
 8004536:	e000      	b.n	800453a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8004538:	2302      	movs	r3, #2
  }
}
 800453a:	0018      	movs	r0, r3
 800453c:	46bd      	mov	sp, r7
 800453e:	b008      	add	sp, #32
 8004540:	bd80      	pop	{r7, pc}
	...

08004544 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004544:	b5b0      	push	{r4, r5, r7, lr}
 8004546:	b08e      	sub	sp, #56	@ 0x38
 8004548:	af00      	add	r7, sp, #0
 800454a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800454c:	231a      	movs	r3, #26
 800454e:	2218      	movs	r2, #24
 8004550:	189b      	adds	r3, r3, r2
 8004552:	19db      	adds	r3, r3, r7
 8004554:	2200      	movs	r2, #0
 8004556:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	689a      	ldr	r2, [r3, #8]
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	431a      	orrs	r2, r3
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	431a      	orrs	r2, r3
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	69db      	ldr	r3, [r3, #28]
 800456c:	4313      	orrs	r3, r2
 800456e:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4ac6      	ldr	r2, [pc, #792]	@ (8004890 <UART_SetConfig+0x34c>)
 8004578:	4013      	ands	r3, r2
 800457a:	0019      	movs	r1, r3
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004582:	430a      	orrs	r2, r1
 8004584:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	4ac1      	ldr	r2, [pc, #772]	@ (8004894 <UART_SetConfig+0x350>)
 800458e:	4013      	ands	r3, r2
 8004590:	0019      	movs	r1, r3
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	68da      	ldr	r2, [r3, #12]
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4abb      	ldr	r2, [pc, #748]	@ (8004898 <UART_SetConfig+0x354>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d004      	beq.n	80045b8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80045b4:	4313      	orrs	r3, r2
 80045b6:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	4ab7      	ldr	r2, [pc, #732]	@ (800489c <UART_SetConfig+0x358>)
 80045c0:	4013      	ands	r3, r2
 80045c2:	0019      	movs	r1, r3
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80045ca:	430a      	orrs	r2, r1
 80045cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4ab3      	ldr	r2, [pc, #716]	@ (80048a0 <UART_SetConfig+0x35c>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d131      	bne.n	800463c <UART_SetConfig+0xf8>
 80045d8:	4bb2      	ldr	r3, [pc, #712]	@ (80048a4 <UART_SetConfig+0x360>)
 80045da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045dc:	2203      	movs	r2, #3
 80045de:	4013      	ands	r3, r2
 80045e0:	2b03      	cmp	r3, #3
 80045e2:	d01d      	beq.n	8004620 <UART_SetConfig+0xdc>
 80045e4:	d823      	bhi.n	800462e <UART_SetConfig+0xea>
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d00c      	beq.n	8004604 <UART_SetConfig+0xc0>
 80045ea:	d820      	bhi.n	800462e <UART_SetConfig+0xea>
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d002      	beq.n	80045f6 <UART_SetConfig+0xb2>
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d00e      	beq.n	8004612 <UART_SetConfig+0xce>
 80045f4:	e01b      	b.n	800462e <UART_SetConfig+0xea>
 80045f6:	231b      	movs	r3, #27
 80045f8:	2218      	movs	r2, #24
 80045fa:	189b      	adds	r3, r3, r2
 80045fc:	19db      	adds	r3, r3, r7
 80045fe:	2201      	movs	r2, #1
 8004600:	701a      	strb	r2, [r3, #0]
 8004602:	e09c      	b.n	800473e <UART_SetConfig+0x1fa>
 8004604:	231b      	movs	r3, #27
 8004606:	2218      	movs	r2, #24
 8004608:	189b      	adds	r3, r3, r2
 800460a:	19db      	adds	r3, r3, r7
 800460c:	2202      	movs	r2, #2
 800460e:	701a      	strb	r2, [r3, #0]
 8004610:	e095      	b.n	800473e <UART_SetConfig+0x1fa>
 8004612:	231b      	movs	r3, #27
 8004614:	2218      	movs	r2, #24
 8004616:	189b      	adds	r3, r3, r2
 8004618:	19db      	adds	r3, r3, r7
 800461a:	2204      	movs	r2, #4
 800461c:	701a      	strb	r2, [r3, #0]
 800461e:	e08e      	b.n	800473e <UART_SetConfig+0x1fa>
 8004620:	231b      	movs	r3, #27
 8004622:	2218      	movs	r2, #24
 8004624:	189b      	adds	r3, r3, r2
 8004626:	19db      	adds	r3, r3, r7
 8004628:	2208      	movs	r2, #8
 800462a:	701a      	strb	r2, [r3, #0]
 800462c:	e087      	b.n	800473e <UART_SetConfig+0x1fa>
 800462e:	231b      	movs	r3, #27
 8004630:	2218      	movs	r2, #24
 8004632:	189b      	adds	r3, r3, r2
 8004634:	19db      	adds	r3, r3, r7
 8004636:	2210      	movs	r2, #16
 8004638:	701a      	strb	r2, [r3, #0]
 800463a:	e080      	b.n	800473e <UART_SetConfig+0x1fa>
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a99      	ldr	r2, [pc, #612]	@ (80048a8 <UART_SetConfig+0x364>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d131      	bne.n	80046aa <UART_SetConfig+0x166>
 8004646:	4b97      	ldr	r3, [pc, #604]	@ (80048a4 <UART_SetConfig+0x360>)
 8004648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800464a:	220c      	movs	r2, #12
 800464c:	4013      	ands	r3, r2
 800464e:	2b0c      	cmp	r3, #12
 8004650:	d01d      	beq.n	800468e <UART_SetConfig+0x14a>
 8004652:	d823      	bhi.n	800469c <UART_SetConfig+0x158>
 8004654:	2b08      	cmp	r3, #8
 8004656:	d00c      	beq.n	8004672 <UART_SetConfig+0x12e>
 8004658:	d820      	bhi.n	800469c <UART_SetConfig+0x158>
 800465a:	2b00      	cmp	r3, #0
 800465c:	d002      	beq.n	8004664 <UART_SetConfig+0x120>
 800465e:	2b04      	cmp	r3, #4
 8004660:	d00e      	beq.n	8004680 <UART_SetConfig+0x13c>
 8004662:	e01b      	b.n	800469c <UART_SetConfig+0x158>
 8004664:	231b      	movs	r3, #27
 8004666:	2218      	movs	r2, #24
 8004668:	189b      	adds	r3, r3, r2
 800466a:	19db      	adds	r3, r3, r7
 800466c:	2200      	movs	r2, #0
 800466e:	701a      	strb	r2, [r3, #0]
 8004670:	e065      	b.n	800473e <UART_SetConfig+0x1fa>
 8004672:	231b      	movs	r3, #27
 8004674:	2218      	movs	r2, #24
 8004676:	189b      	adds	r3, r3, r2
 8004678:	19db      	adds	r3, r3, r7
 800467a:	2202      	movs	r2, #2
 800467c:	701a      	strb	r2, [r3, #0]
 800467e:	e05e      	b.n	800473e <UART_SetConfig+0x1fa>
 8004680:	231b      	movs	r3, #27
 8004682:	2218      	movs	r2, #24
 8004684:	189b      	adds	r3, r3, r2
 8004686:	19db      	adds	r3, r3, r7
 8004688:	2204      	movs	r2, #4
 800468a:	701a      	strb	r2, [r3, #0]
 800468c:	e057      	b.n	800473e <UART_SetConfig+0x1fa>
 800468e:	231b      	movs	r3, #27
 8004690:	2218      	movs	r2, #24
 8004692:	189b      	adds	r3, r3, r2
 8004694:	19db      	adds	r3, r3, r7
 8004696:	2208      	movs	r2, #8
 8004698:	701a      	strb	r2, [r3, #0]
 800469a:	e050      	b.n	800473e <UART_SetConfig+0x1fa>
 800469c:	231b      	movs	r3, #27
 800469e:	2218      	movs	r2, #24
 80046a0:	189b      	adds	r3, r3, r2
 80046a2:	19db      	adds	r3, r3, r7
 80046a4:	2210      	movs	r2, #16
 80046a6:	701a      	strb	r2, [r3, #0]
 80046a8:	e049      	b.n	800473e <UART_SetConfig+0x1fa>
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a7a      	ldr	r2, [pc, #488]	@ (8004898 <UART_SetConfig+0x354>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d13e      	bne.n	8004732 <UART_SetConfig+0x1ee>
 80046b4:	4b7b      	ldr	r3, [pc, #492]	@ (80048a4 <UART_SetConfig+0x360>)
 80046b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80046b8:	23c0      	movs	r3, #192	@ 0xc0
 80046ba:	011b      	lsls	r3, r3, #4
 80046bc:	4013      	ands	r3, r2
 80046be:	22c0      	movs	r2, #192	@ 0xc0
 80046c0:	0112      	lsls	r2, r2, #4
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d027      	beq.n	8004716 <UART_SetConfig+0x1d2>
 80046c6:	22c0      	movs	r2, #192	@ 0xc0
 80046c8:	0112      	lsls	r2, r2, #4
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d82a      	bhi.n	8004724 <UART_SetConfig+0x1e0>
 80046ce:	2280      	movs	r2, #128	@ 0x80
 80046d0:	0112      	lsls	r2, r2, #4
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d011      	beq.n	80046fa <UART_SetConfig+0x1b6>
 80046d6:	2280      	movs	r2, #128	@ 0x80
 80046d8:	0112      	lsls	r2, r2, #4
 80046da:	4293      	cmp	r3, r2
 80046dc:	d822      	bhi.n	8004724 <UART_SetConfig+0x1e0>
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d004      	beq.n	80046ec <UART_SetConfig+0x1a8>
 80046e2:	2280      	movs	r2, #128	@ 0x80
 80046e4:	00d2      	lsls	r2, r2, #3
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d00e      	beq.n	8004708 <UART_SetConfig+0x1c4>
 80046ea:	e01b      	b.n	8004724 <UART_SetConfig+0x1e0>
 80046ec:	231b      	movs	r3, #27
 80046ee:	2218      	movs	r2, #24
 80046f0:	189b      	adds	r3, r3, r2
 80046f2:	19db      	adds	r3, r3, r7
 80046f4:	2200      	movs	r2, #0
 80046f6:	701a      	strb	r2, [r3, #0]
 80046f8:	e021      	b.n	800473e <UART_SetConfig+0x1fa>
 80046fa:	231b      	movs	r3, #27
 80046fc:	2218      	movs	r2, #24
 80046fe:	189b      	adds	r3, r3, r2
 8004700:	19db      	adds	r3, r3, r7
 8004702:	2202      	movs	r2, #2
 8004704:	701a      	strb	r2, [r3, #0]
 8004706:	e01a      	b.n	800473e <UART_SetConfig+0x1fa>
 8004708:	231b      	movs	r3, #27
 800470a:	2218      	movs	r2, #24
 800470c:	189b      	adds	r3, r3, r2
 800470e:	19db      	adds	r3, r3, r7
 8004710:	2204      	movs	r2, #4
 8004712:	701a      	strb	r2, [r3, #0]
 8004714:	e013      	b.n	800473e <UART_SetConfig+0x1fa>
 8004716:	231b      	movs	r3, #27
 8004718:	2218      	movs	r2, #24
 800471a:	189b      	adds	r3, r3, r2
 800471c:	19db      	adds	r3, r3, r7
 800471e:	2208      	movs	r2, #8
 8004720:	701a      	strb	r2, [r3, #0]
 8004722:	e00c      	b.n	800473e <UART_SetConfig+0x1fa>
 8004724:	231b      	movs	r3, #27
 8004726:	2218      	movs	r2, #24
 8004728:	189b      	adds	r3, r3, r2
 800472a:	19db      	adds	r3, r3, r7
 800472c:	2210      	movs	r2, #16
 800472e:	701a      	strb	r2, [r3, #0]
 8004730:	e005      	b.n	800473e <UART_SetConfig+0x1fa>
 8004732:	231b      	movs	r3, #27
 8004734:	2218      	movs	r2, #24
 8004736:	189b      	adds	r3, r3, r2
 8004738:	19db      	adds	r3, r3, r7
 800473a:	2210      	movs	r2, #16
 800473c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a55      	ldr	r2, [pc, #340]	@ (8004898 <UART_SetConfig+0x354>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d000      	beq.n	800474a <UART_SetConfig+0x206>
 8004748:	e084      	b.n	8004854 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800474a:	231b      	movs	r3, #27
 800474c:	2218      	movs	r2, #24
 800474e:	189b      	adds	r3, r3, r2
 8004750:	19db      	adds	r3, r3, r7
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	2b08      	cmp	r3, #8
 8004756:	d01d      	beq.n	8004794 <UART_SetConfig+0x250>
 8004758:	dc20      	bgt.n	800479c <UART_SetConfig+0x258>
 800475a:	2b04      	cmp	r3, #4
 800475c:	d015      	beq.n	800478a <UART_SetConfig+0x246>
 800475e:	dc1d      	bgt.n	800479c <UART_SetConfig+0x258>
 8004760:	2b00      	cmp	r3, #0
 8004762:	d002      	beq.n	800476a <UART_SetConfig+0x226>
 8004764:	2b02      	cmp	r3, #2
 8004766:	d005      	beq.n	8004774 <UART_SetConfig+0x230>
 8004768:	e018      	b.n	800479c <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800476a:	f7ff f977 	bl	8003a5c <HAL_RCC_GetPCLK1Freq>
 800476e:	0003      	movs	r3, r0
 8004770:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004772:	e01c      	b.n	80047ae <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004774:	4b4b      	ldr	r3, [pc, #300]	@ (80048a4 <UART_SetConfig+0x360>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2210      	movs	r2, #16
 800477a:	4013      	ands	r3, r2
 800477c:	d002      	beq.n	8004784 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800477e:	4b4b      	ldr	r3, [pc, #300]	@ (80048ac <UART_SetConfig+0x368>)
 8004780:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004782:	e014      	b.n	80047ae <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8004784:	4b4a      	ldr	r3, [pc, #296]	@ (80048b0 <UART_SetConfig+0x36c>)
 8004786:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004788:	e011      	b.n	80047ae <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800478a:	f7ff f8b7 	bl	80038fc <HAL_RCC_GetSysClockFreq>
 800478e:	0003      	movs	r3, r0
 8004790:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004792:	e00c      	b.n	80047ae <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004794:	2380      	movs	r3, #128	@ 0x80
 8004796:	021b      	lsls	r3, r3, #8
 8004798:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800479a:	e008      	b.n	80047ae <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 800479c:	2300      	movs	r3, #0
 800479e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80047a0:	231a      	movs	r3, #26
 80047a2:	2218      	movs	r2, #24
 80047a4:	189b      	adds	r3, r3, r2
 80047a6:	19db      	adds	r3, r3, r7
 80047a8:	2201      	movs	r2, #1
 80047aa:	701a      	strb	r2, [r3, #0]
        break;
 80047ac:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80047ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d100      	bne.n	80047b6 <UART_SetConfig+0x272>
 80047b4:	e132      	b.n	8004a1c <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	0013      	movs	r3, r2
 80047bc:	005b      	lsls	r3, r3, #1
 80047be:	189b      	adds	r3, r3, r2
 80047c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d305      	bcc.n	80047d2 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d906      	bls.n	80047e0 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 80047d2:	231a      	movs	r3, #26
 80047d4:	2218      	movs	r2, #24
 80047d6:	189b      	adds	r3, r3, r2
 80047d8:	19db      	adds	r3, r3, r7
 80047da:	2201      	movs	r2, #1
 80047dc:	701a      	strb	r2, [r3, #0]
 80047de:	e11d      	b.n	8004a1c <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80047e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047e2:	613b      	str	r3, [r7, #16]
 80047e4:	2300      	movs	r3, #0
 80047e6:	617b      	str	r3, [r7, #20]
 80047e8:	6939      	ldr	r1, [r7, #16]
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	000b      	movs	r3, r1
 80047ee:	0e1b      	lsrs	r3, r3, #24
 80047f0:	0010      	movs	r0, r2
 80047f2:	0205      	lsls	r5, r0, #8
 80047f4:	431d      	orrs	r5, r3
 80047f6:	000b      	movs	r3, r1
 80047f8:	021c      	lsls	r4, r3, #8
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	085b      	lsrs	r3, r3, #1
 8004800:	60bb      	str	r3, [r7, #8]
 8004802:	2300      	movs	r3, #0
 8004804:	60fb      	str	r3, [r7, #12]
 8004806:	68b8      	ldr	r0, [r7, #8]
 8004808:	68f9      	ldr	r1, [r7, #12]
 800480a:	1900      	adds	r0, r0, r4
 800480c:	4169      	adcs	r1, r5
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	603b      	str	r3, [r7, #0]
 8004814:	2300      	movs	r3, #0
 8004816:	607b      	str	r3, [r7, #4]
 8004818:	683a      	ldr	r2, [r7, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f7fb fdf4 	bl	8000408 <__aeabi_uldivmod>
 8004820:	0002      	movs	r2, r0
 8004822:	000b      	movs	r3, r1
 8004824:	0013      	movs	r3, r2
 8004826:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004828:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800482a:	23c0      	movs	r3, #192	@ 0xc0
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	429a      	cmp	r2, r3
 8004830:	d309      	bcc.n	8004846 <UART_SetConfig+0x302>
 8004832:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004834:	2380      	movs	r3, #128	@ 0x80
 8004836:	035b      	lsls	r3, r3, #13
 8004838:	429a      	cmp	r2, r3
 800483a:	d204      	bcs.n	8004846 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004842:	60da      	str	r2, [r3, #12]
 8004844:	e0ea      	b.n	8004a1c <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8004846:	231a      	movs	r3, #26
 8004848:	2218      	movs	r2, #24
 800484a:	189b      	adds	r3, r3, r2
 800484c:	19db      	adds	r3, r3, r7
 800484e:	2201      	movs	r2, #1
 8004850:	701a      	strb	r2, [r3, #0]
 8004852:	e0e3      	b.n	8004a1c <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	69da      	ldr	r2, [r3, #28]
 8004858:	2380      	movs	r3, #128	@ 0x80
 800485a:	021b      	lsls	r3, r3, #8
 800485c:	429a      	cmp	r2, r3
 800485e:	d000      	beq.n	8004862 <UART_SetConfig+0x31e>
 8004860:	e085      	b.n	800496e <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8004862:	231b      	movs	r3, #27
 8004864:	2218      	movs	r2, #24
 8004866:	189b      	adds	r3, r3, r2
 8004868:	19db      	adds	r3, r3, r7
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	2b08      	cmp	r3, #8
 800486e:	d837      	bhi.n	80048e0 <UART_SetConfig+0x39c>
 8004870:	009a      	lsls	r2, r3, #2
 8004872:	4b10      	ldr	r3, [pc, #64]	@ (80048b4 <UART_SetConfig+0x370>)
 8004874:	18d3      	adds	r3, r2, r3
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800487a:	f7ff f8ef 	bl	8003a5c <HAL_RCC_GetPCLK1Freq>
 800487e:	0003      	movs	r3, r0
 8004880:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004882:	e036      	b.n	80048f2 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004884:	f7ff f900 	bl	8003a88 <HAL_RCC_GetPCLK2Freq>
 8004888:	0003      	movs	r3, r0
 800488a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800488c:	e031      	b.n	80048f2 <UART_SetConfig+0x3ae>
 800488e:	46c0      	nop			@ (mov r8, r8)
 8004890:	efff69f3 	.word	0xefff69f3
 8004894:	ffffcfff 	.word	0xffffcfff
 8004898:	40004800 	.word	0x40004800
 800489c:	fffff4ff 	.word	0xfffff4ff
 80048a0:	40013800 	.word	0x40013800
 80048a4:	40021000 	.word	0x40021000
 80048a8:	40004400 	.word	0x40004400
 80048ac:	003d0900 	.word	0x003d0900
 80048b0:	00f42400 	.word	0x00f42400
 80048b4:	0800a068 	.word	0x0800a068
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048b8:	4b60      	ldr	r3, [pc, #384]	@ (8004a3c <UART_SetConfig+0x4f8>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2210      	movs	r2, #16
 80048be:	4013      	ands	r3, r2
 80048c0:	d002      	beq.n	80048c8 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80048c2:	4b5f      	ldr	r3, [pc, #380]	@ (8004a40 <UART_SetConfig+0x4fc>)
 80048c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80048c6:	e014      	b.n	80048f2 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 80048c8:	4b5e      	ldr	r3, [pc, #376]	@ (8004a44 <UART_SetConfig+0x500>)
 80048ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80048cc:	e011      	b.n	80048f2 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048ce:	f7ff f815 	bl	80038fc <HAL_RCC_GetSysClockFreq>
 80048d2:	0003      	movs	r3, r0
 80048d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80048d6:	e00c      	b.n	80048f2 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048d8:	2380      	movs	r3, #128	@ 0x80
 80048da:	021b      	lsls	r3, r3, #8
 80048dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80048de:	e008      	b.n	80048f2 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 80048e0:	2300      	movs	r3, #0
 80048e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80048e4:	231a      	movs	r3, #26
 80048e6:	2218      	movs	r2, #24
 80048e8:	189b      	adds	r3, r3, r2
 80048ea:	19db      	adds	r3, r3, r7
 80048ec:	2201      	movs	r2, #1
 80048ee:	701a      	strb	r2, [r3, #0]
        break;
 80048f0:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d100      	bne.n	80048fa <UART_SetConfig+0x3b6>
 80048f8:	e090      	b.n	8004a1c <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048fc:	005a      	lsls	r2, r3, #1
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	085b      	lsrs	r3, r3, #1
 8004904:	18d2      	adds	r2, r2, r3
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	0019      	movs	r1, r3
 800490c:	0010      	movs	r0, r2
 800490e:	f7fb fc05 	bl	800011c <__udivsi3>
 8004912:	0003      	movs	r3, r0
 8004914:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004918:	2b0f      	cmp	r3, #15
 800491a:	d921      	bls.n	8004960 <UART_SetConfig+0x41c>
 800491c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800491e:	2380      	movs	r3, #128	@ 0x80
 8004920:	025b      	lsls	r3, r3, #9
 8004922:	429a      	cmp	r2, r3
 8004924:	d21c      	bcs.n	8004960 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004928:	b29a      	uxth	r2, r3
 800492a:	200e      	movs	r0, #14
 800492c:	2418      	movs	r4, #24
 800492e:	1903      	adds	r3, r0, r4
 8004930:	19db      	adds	r3, r3, r7
 8004932:	210f      	movs	r1, #15
 8004934:	438a      	bics	r2, r1
 8004936:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800493a:	085b      	lsrs	r3, r3, #1
 800493c:	b29b      	uxth	r3, r3
 800493e:	2207      	movs	r2, #7
 8004940:	4013      	ands	r3, r2
 8004942:	b299      	uxth	r1, r3
 8004944:	1903      	adds	r3, r0, r4
 8004946:	19db      	adds	r3, r3, r7
 8004948:	1902      	adds	r2, r0, r4
 800494a:	19d2      	adds	r2, r2, r7
 800494c:	8812      	ldrh	r2, [r2, #0]
 800494e:	430a      	orrs	r2, r1
 8004950:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	1902      	adds	r2, r0, r4
 8004958:	19d2      	adds	r2, r2, r7
 800495a:	8812      	ldrh	r2, [r2, #0]
 800495c:	60da      	str	r2, [r3, #12]
 800495e:	e05d      	b.n	8004a1c <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8004960:	231a      	movs	r3, #26
 8004962:	2218      	movs	r2, #24
 8004964:	189b      	adds	r3, r3, r2
 8004966:	19db      	adds	r3, r3, r7
 8004968:	2201      	movs	r2, #1
 800496a:	701a      	strb	r2, [r3, #0]
 800496c:	e056      	b.n	8004a1c <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800496e:	231b      	movs	r3, #27
 8004970:	2218      	movs	r2, #24
 8004972:	189b      	adds	r3, r3, r2
 8004974:	19db      	adds	r3, r3, r7
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	2b08      	cmp	r3, #8
 800497a:	d822      	bhi.n	80049c2 <UART_SetConfig+0x47e>
 800497c:	009a      	lsls	r2, r3, #2
 800497e:	4b32      	ldr	r3, [pc, #200]	@ (8004a48 <UART_SetConfig+0x504>)
 8004980:	18d3      	adds	r3, r2, r3
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004986:	f7ff f869 	bl	8003a5c <HAL_RCC_GetPCLK1Freq>
 800498a:	0003      	movs	r3, r0
 800498c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800498e:	e021      	b.n	80049d4 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004990:	f7ff f87a 	bl	8003a88 <HAL_RCC_GetPCLK2Freq>
 8004994:	0003      	movs	r3, r0
 8004996:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004998:	e01c      	b.n	80049d4 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800499a:	4b28      	ldr	r3, [pc, #160]	@ (8004a3c <UART_SetConfig+0x4f8>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2210      	movs	r2, #16
 80049a0:	4013      	ands	r3, r2
 80049a2:	d002      	beq.n	80049aa <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80049a4:	4b26      	ldr	r3, [pc, #152]	@ (8004a40 <UART_SetConfig+0x4fc>)
 80049a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80049a8:	e014      	b.n	80049d4 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 80049aa:	4b26      	ldr	r3, [pc, #152]	@ (8004a44 <UART_SetConfig+0x500>)
 80049ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80049ae:	e011      	b.n	80049d4 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049b0:	f7fe ffa4 	bl	80038fc <HAL_RCC_GetSysClockFreq>
 80049b4:	0003      	movs	r3, r0
 80049b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80049b8:	e00c      	b.n	80049d4 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049ba:	2380      	movs	r3, #128	@ 0x80
 80049bc:	021b      	lsls	r3, r3, #8
 80049be:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80049c0:	e008      	b.n	80049d4 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 80049c2:	2300      	movs	r3, #0
 80049c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80049c6:	231a      	movs	r3, #26
 80049c8:	2218      	movs	r2, #24
 80049ca:	189b      	adds	r3, r3, r2
 80049cc:	19db      	adds	r3, r3, r7
 80049ce:	2201      	movs	r2, #1
 80049d0:	701a      	strb	r2, [r3, #0]
        break;
 80049d2:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80049d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d020      	beq.n	8004a1c <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	085a      	lsrs	r2, r3, #1
 80049e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049e2:	18d2      	adds	r2, r2, r3
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	0019      	movs	r1, r3
 80049ea:	0010      	movs	r0, r2
 80049ec:	f7fb fb96 	bl	800011c <__udivsi3>
 80049f0:	0003      	movs	r3, r0
 80049f2:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f6:	2b0f      	cmp	r3, #15
 80049f8:	d90a      	bls.n	8004a10 <UART_SetConfig+0x4cc>
 80049fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80049fc:	2380      	movs	r3, #128	@ 0x80
 80049fe:	025b      	lsls	r3, r3, #9
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d205      	bcs.n	8004a10 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	60da      	str	r2, [r3, #12]
 8004a0e:	e005      	b.n	8004a1c <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8004a10:	231a      	movs	r3, #26
 8004a12:	2218      	movs	r2, #24
 8004a14:	189b      	adds	r3, r3, r2
 8004a16:	19db      	adds	r3, r3, r7
 8004a18:	2201      	movs	r2, #1
 8004a1a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	2200      	movs	r2, #0
 8004a26:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004a28:	231a      	movs	r3, #26
 8004a2a:	2218      	movs	r2, #24
 8004a2c:	189b      	adds	r3, r3, r2
 8004a2e:	19db      	adds	r3, r3, r7
 8004a30:	781b      	ldrb	r3, [r3, #0]
}
 8004a32:	0018      	movs	r0, r3
 8004a34:	46bd      	mov	sp, r7
 8004a36:	b00e      	add	sp, #56	@ 0x38
 8004a38:	bdb0      	pop	{r4, r5, r7, pc}
 8004a3a:	46c0      	nop			@ (mov r8, r8)
 8004a3c:	40021000 	.word	0x40021000
 8004a40:	003d0900 	.word	0x003d0900
 8004a44:	00f42400 	.word	0x00f42400
 8004a48:	0800a08c 	.word	0x0800a08c

08004a4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a58:	2201      	movs	r2, #1
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	d00b      	beq.n	8004a76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	4a4a      	ldr	r2, [pc, #296]	@ (8004b90 <UART_AdvFeatureConfig+0x144>)
 8004a66:	4013      	ands	r3, r2
 8004a68:	0019      	movs	r1, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	430a      	orrs	r2, r1
 8004a74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	d00b      	beq.n	8004a98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	4a43      	ldr	r2, [pc, #268]	@ (8004b94 <UART_AdvFeatureConfig+0x148>)
 8004a88:	4013      	ands	r3, r2
 8004a8a:	0019      	movs	r1, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	430a      	orrs	r2, r1
 8004a96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9c:	2204      	movs	r2, #4
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	d00b      	beq.n	8004aba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	4a3b      	ldr	r2, [pc, #236]	@ (8004b98 <UART_AdvFeatureConfig+0x14c>)
 8004aaa:	4013      	ands	r3, r2
 8004aac:	0019      	movs	r1, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004abe:	2208      	movs	r2, #8
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	d00b      	beq.n	8004adc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	4a34      	ldr	r2, [pc, #208]	@ (8004b9c <UART_AdvFeatureConfig+0x150>)
 8004acc:	4013      	ands	r3, r2
 8004ace:	0019      	movs	r1, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae0:	2210      	movs	r2, #16
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	d00b      	beq.n	8004afe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	4a2c      	ldr	r2, [pc, #176]	@ (8004ba0 <UART_AdvFeatureConfig+0x154>)
 8004aee:	4013      	ands	r3, r2
 8004af0:	0019      	movs	r1, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b02:	2220      	movs	r2, #32
 8004b04:	4013      	ands	r3, r2
 8004b06:	d00b      	beq.n	8004b20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	4a25      	ldr	r2, [pc, #148]	@ (8004ba4 <UART_AdvFeatureConfig+0x158>)
 8004b10:	4013      	ands	r3, r2
 8004b12:	0019      	movs	r1, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b24:	2240      	movs	r2, #64	@ 0x40
 8004b26:	4013      	ands	r3, r2
 8004b28:	d01d      	beq.n	8004b66 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	4a1d      	ldr	r2, [pc, #116]	@ (8004ba8 <UART_AdvFeatureConfig+0x15c>)
 8004b32:	4013      	ands	r3, r2
 8004b34:	0019      	movs	r1, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b46:	2380      	movs	r3, #128	@ 0x80
 8004b48:	035b      	lsls	r3, r3, #13
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d10b      	bne.n	8004b66 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	4a15      	ldr	r2, [pc, #84]	@ (8004bac <UART_AdvFeatureConfig+0x160>)
 8004b56:	4013      	ands	r3, r2
 8004b58:	0019      	movs	r1, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b6a:	2280      	movs	r2, #128	@ 0x80
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	d00b      	beq.n	8004b88 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	4a0e      	ldr	r2, [pc, #56]	@ (8004bb0 <UART_AdvFeatureConfig+0x164>)
 8004b78:	4013      	ands	r3, r2
 8004b7a:	0019      	movs	r1, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	430a      	orrs	r2, r1
 8004b86:	605a      	str	r2, [r3, #4]
  }
}
 8004b88:	46c0      	nop			@ (mov r8, r8)
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	b002      	add	sp, #8
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	fffdffff 	.word	0xfffdffff
 8004b94:	fffeffff 	.word	0xfffeffff
 8004b98:	fffbffff 	.word	0xfffbffff
 8004b9c:	ffff7fff 	.word	0xffff7fff
 8004ba0:	ffffefff 	.word	0xffffefff
 8004ba4:	ffffdfff 	.word	0xffffdfff
 8004ba8:	ffefffff 	.word	0xffefffff
 8004bac:	ff9fffff 	.word	0xff9fffff
 8004bb0:	fff7ffff 	.word	0xfff7ffff

08004bb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b092      	sub	sp, #72	@ 0x48
 8004bb8:	af02      	add	r7, sp, #8
 8004bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2284      	movs	r2, #132	@ 0x84
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004bc4:	f7fd f95c 	bl	8001e80 <HAL_GetTick>
 8004bc8:	0003      	movs	r3, r0
 8004bca:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2208      	movs	r2, #8
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	2b08      	cmp	r3, #8
 8004bd8:	d12c      	bne.n	8004c34 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bdc:	2280      	movs	r2, #128	@ 0x80
 8004bde:	0391      	lsls	r1, r2, #14
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	4a46      	ldr	r2, [pc, #280]	@ (8004cfc <UART_CheckIdleState+0x148>)
 8004be4:	9200      	str	r2, [sp, #0]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f000 f88c 	bl	8004d04 <UART_WaitOnFlagUntilTimeout>
 8004bec:	1e03      	subs	r3, r0, #0
 8004bee:	d021      	beq.n	8004c34 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bf0:	f3ef 8310 	mrs	r3, PRIMASK
 8004bf4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004bf8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c00:	f383 8810 	msr	PRIMASK, r3
}
 8004c04:	46c0      	nop			@ (mov r8, r8)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2180      	movs	r1, #128	@ 0x80
 8004c12:	438a      	bics	r2, r1
 8004c14:	601a      	str	r2, [r3, #0]
 8004c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c1c:	f383 8810 	msr	PRIMASK, r3
}
 8004c20:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2220      	movs	r2, #32
 8004c26:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2278      	movs	r2, #120	@ 0x78
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e05f      	b.n	8004cf4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2204      	movs	r2, #4
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	2b04      	cmp	r3, #4
 8004c40:	d146      	bne.n	8004cd0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c44:	2280      	movs	r2, #128	@ 0x80
 8004c46:	03d1      	lsls	r1, r2, #15
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	4a2c      	ldr	r2, [pc, #176]	@ (8004cfc <UART_CheckIdleState+0x148>)
 8004c4c:	9200      	str	r2, [sp, #0]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f000 f858 	bl	8004d04 <UART_WaitOnFlagUntilTimeout>
 8004c54:	1e03      	subs	r3, r0, #0
 8004c56:	d03b      	beq.n	8004cd0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c58:	f3ef 8310 	mrs	r3, PRIMASK
 8004c5c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c60:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c62:	2301      	movs	r3, #1
 8004c64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	f383 8810 	msr	PRIMASK, r3
}
 8004c6c:	46c0      	nop			@ (mov r8, r8)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4921      	ldr	r1, [pc, #132]	@ (8004d00 <UART_CheckIdleState+0x14c>)
 8004c7a:	400a      	ands	r2, r1
 8004c7c:	601a      	str	r2, [r3, #0]
 8004c7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c80:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	f383 8810 	msr	PRIMASK, r3
}
 8004c88:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c8a:	f3ef 8310 	mrs	r3, PRIMASK
 8004c8e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004c90:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c92:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c94:	2301      	movs	r3, #1
 8004c96:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	f383 8810 	msr	PRIMASK, r3
}
 8004c9e:	46c0      	nop			@ (mov r8, r8)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	689a      	ldr	r2, [r3, #8]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2101      	movs	r1, #1
 8004cac:	438a      	bics	r2, r1
 8004cae:	609a      	str	r2, [r3, #8]
 8004cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cb2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cb4:	6a3b      	ldr	r3, [r7, #32]
 8004cb6:	f383 8810 	msr	PRIMASK, r3
}
 8004cba:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2280      	movs	r2, #128	@ 0x80
 8004cc0:	2120      	movs	r1, #32
 8004cc2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2278      	movs	r2, #120	@ 0x78
 8004cc8:	2100      	movs	r1, #0
 8004cca:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e011      	b.n	8004cf4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2280      	movs	r2, #128	@ 0x80
 8004cda:	2120      	movs	r1, #32
 8004cdc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2278      	movs	r2, #120	@ 0x78
 8004cee:	2100      	movs	r1, #0
 8004cf0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	0018      	movs	r0, r3
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	b010      	add	sp, #64	@ 0x40
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	01ffffff 	.word	0x01ffffff
 8004d00:	fffffedf 	.word	0xfffffedf

08004d04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	603b      	str	r3, [r7, #0]
 8004d10:	1dfb      	adds	r3, r7, #7
 8004d12:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d14:	e04b      	b.n	8004dae <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	3301      	adds	r3, #1
 8004d1a:	d048      	beq.n	8004dae <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d1c:	f7fd f8b0 	bl	8001e80 <HAL_GetTick>
 8004d20:	0002      	movs	r2, r0
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	69ba      	ldr	r2, [r7, #24]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d302      	bcc.n	8004d32 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e04b      	b.n	8004dce <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2204      	movs	r2, #4
 8004d3e:	4013      	ands	r3, r2
 8004d40:	d035      	beq.n	8004dae <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	69db      	ldr	r3, [r3, #28]
 8004d48:	2208      	movs	r2, #8
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	2b08      	cmp	r3, #8
 8004d4e:	d111      	bne.n	8004d74 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2208      	movs	r2, #8
 8004d56:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	0018      	movs	r0, r3
 8004d5c:	f000 f83c 	bl	8004dd8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2284      	movs	r2, #132	@ 0x84
 8004d64:	2108      	movs	r1, #8
 8004d66:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2278      	movs	r2, #120	@ 0x78
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e02c      	b.n	8004dce <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	69da      	ldr	r2, [r3, #28]
 8004d7a:	2380      	movs	r3, #128	@ 0x80
 8004d7c:	011b      	lsls	r3, r3, #4
 8004d7e:	401a      	ands	r2, r3
 8004d80:	2380      	movs	r3, #128	@ 0x80
 8004d82:	011b      	lsls	r3, r3, #4
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d112      	bne.n	8004dae <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2280      	movs	r2, #128	@ 0x80
 8004d8e:	0112      	lsls	r2, r2, #4
 8004d90:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	0018      	movs	r0, r3
 8004d96:	f000 f81f 	bl	8004dd8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2284      	movs	r2, #132	@ 0x84
 8004d9e:	2120      	movs	r1, #32
 8004da0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2278      	movs	r2, #120	@ 0x78
 8004da6:	2100      	movs	r1, #0
 8004da8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e00f      	b.n	8004dce <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	69db      	ldr	r3, [r3, #28]
 8004db4:	68ba      	ldr	r2, [r7, #8]
 8004db6:	4013      	ands	r3, r2
 8004db8:	68ba      	ldr	r2, [r7, #8]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	425a      	negs	r2, r3
 8004dbe:	4153      	adcs	r3, r2
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	001a      	movs	r2, r3
 8004dc4:	1dfb      	adds	r3, r7, #7
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d0a4      	beq.n	8004d16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	0018      	movs	r0, r3
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	b004      	add	sp, #16
 8004dd4:	bd80      	pop	{r7, pc}
	...

08004dd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b08e      	sub	sp, #56	@ 0x38
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004de0:	f3ef 8310 	mrs	r3, PRIMASK
 8004de4:	617b      	str	r3, [r7, #20]
  return(result);
 8004de6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004de8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dea:	2301      	movs	r3, #1
 8004dec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	f383 8810 	msr	PRIMASK, r3
}
 8004df4:	46c0      	nop			@ (mov r8, r8)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4926      	ldr	r1, [pc, #152]	@ (8004e9c <UART_EndRxTransfer+0xc4>)
 8004e02:	400a      	ands	r2, r1
 8004e04:	601a      	str	r2, [r3, #0]
 8004e06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e08:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	f383 8810 	msr	PRIMASK, r3
}
 8004e10:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e12:	f3ef 8310 	mrs	r3, PRIMASK
 8004e16:	623b      	str	r3, [r7, #32]
  return(result);
 8004e18:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e1a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e22:	f383 8810 	msr	PRIMASK, r3
}
 8004e26:	46c0      	nop			@ (mov r8, r8)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689a      	ldr	r2, [r3, #8]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2101      	movs	r1, #1
 8004e34:	438a      	bics	r2, r1
 8004e36:	609a      	str	r2, [r3, #8]
 8004e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e3e:	f383 8810 	msr	PRIMASK, r3
}
 8004e42:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d118      	bne.n	8004e7e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e4c:	f3ef 8310 	mrs	r3, PRIMASK
 8004e50:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e52:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e56:	2301      	movs	r3, #1
 8004e58:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f383 8810 	msr	PRIMASK, r3
}
 8004e60:	46c0      	nop			@ (mov r8, r8)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2110      	movs	r1, #16
 8004e6e:	438a      	bics	r2, r1
 8004e70:	601a      	str	r2, [r3, #0]
 8004e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	f383 8810 	msr	PRIMASK, r3
}
 8004e7c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2280      	movs	r2, #128	@ 0x80
 8004e82:	2120      	movs	r1, #32
 8004e84:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004e92:	46c0      	nop			@ (mov r8, r8)
 8004e94:	46bd      	mov	sp, r7
 8004e96:	b00e      	add	sp, #56	@ 0x38
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	46c0      	nop			@ (mov r8, r8)
 8004e9c:	fffffedf 	.word	0xfffffedf

08004ea0 <ptr_8to16>:
static UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p);
#ifdef UGUI_USE_UTF8
static UG_U16 _UG_DecodeUTF8(char **str);
#endif

static UG_U16 ptr_8to16(const UG_U8* p){
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  UG_U16 d = *p++;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	1c5a      	adds	r2, r3, #1
 8004eac:	607a      	str	r2, [r7, #4]
 8004eae:	781a      	ldrb	r2, [r3, #0]
 8004eb0:	210e      	movs	r1, #14
 8004eb2:	187b      	adds	r3, r7, r1
 8004eb4:	801a      	strh	r2, [r3, #0]
  return ((d<<8) | *p);
 8004eb6:	187b      	adds	r3, r7, r1
 8004eb8:	881b      	ldrh	r3, [r3, #0]
 8004eba:	021b      	lsls	r3, r3, #8
 8004ebc:	b21a      	sxth	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	b21b      	sxth	r3, r3
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	b21b      	sxth	r3, r3
 8004ec8:	b29b      	uxth	r3, r3
}
 8004eca:	0018      	movs	r0, r3
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	b004      	add	sp, #16
 8004ed0:	bd80      	pop	{r7, pc}
	...

08004ed4 <UG_Init>:

/* Pointer to the gui */
static UG_GUI* gui;

UG_S16 UG_Init( UG_GUI* g, UG_DEVICE *device )
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
   UG_U8 i;

   g->device = device;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	683a      	ldr	r2, [r7, #0]
 8004ee2:	601a      	str	r2, [r3, #0]
#if defined(UGUI_USE_CONSOLE)
   g->console.x_start = 4;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2204      	movs	r2, #4
 8004ee8:	839a      	strh	r2, [r3, #28]
   g->console.y_start = 4;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2204      	movs	r2, #4
 8004eee:	83da      	strh	r2, [r3, #30]
   g->console.x_end = g->device->x_dim - g->console.x_start-1;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	5e9b      	ldrsh	r3, [r3, r2]
 8004ef8:	b29a      	uxth	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	211c      	movs	r1, #28
 8004efe:	5e5b      	ldrsh	r3, [r3, r1]
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	3b01      	subs	r3, #1
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	b21a      	sxth	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	841a      	strh	r2, [r3, #32]
   g->console.y_end = g->device->y_dim - g->console.x_start-1;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2202      	movs	r2, #2
 8004f16:	5e9b      	ldrsh	r3, [r3, r2]
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	211c      	movs	r1, #28
 8004f1e:	5e5b      	ldrsh	r3, [r3, r1]
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	3b01      	subs	r3, #1
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	b21a      	sxth	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	845a      	strh	r2, [r3, #34]	@ 0x22
   g->console.x_pos = g->console.x_end;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2220      	movs	r2, #32
 8004f34:	5e9a      	ldrsh	r2, [r3, r2]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	831a      	strh	r2, [r3, #24]
   g->console.y_pos = g->console.y_end;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2222      	movs	r2, #34	@ 0x22
 8004f3e:	5e9a      	ldrsh	r2, [r3, r2]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	835a      	strh	r2, [r3, #26]
#endif
   g->char_h_space = 1;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2249      	movs	r2, #73	@ 0x49
 8004f48:	2101      	movs	r1, #1
 8004f4a:	5499      	strb	r1, [r3, r2]
   g->char_v_space = 1;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	224a      	movs	r2, #74	@ 0x4a
 8004f50:	2101      	movs	r1, #1
 8004f52:	5499      	strb	r1, [r3, r2]
   g->font=NULL;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	629a      	str	r2, [r3, #40]	@ 0x28
   g->currentFont.bytes_per_char = 0;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	861a      	strh	r2, [r3, #48]	@ 0x30
   g->currentFont.char_height = 0;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	222f      	movs	r2, #47	@ 0x2f
 8004f64:	2100      	movs	r1, #0
 8004f66:	5499      	strb	r1, [r3, r2]
   g->currentFont.char_width = 0;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	222e      	movs	r2, #46	@ 0x2e
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	5499      	strb	r1, [r3, r2]
   g->currentFont.number_of_chars = 0;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	865a      	strh	r2, [r3, #50]	@ 0x32
   g->currentFont.number_of_offsets = 0;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	869a      	strh	r2, [r3, #52]	@ 0x34
   g->currentFont.widths = NULL;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	639a      	str	r2, [r3, #56]	@ 0x38
   g->currentFont.offsets = NULL;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	63da      	str	r2, [r3, #60]	@ 0x3c
   g->currentFont.data = NULL;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	641a      	str	r2, [r3, #64]	@ 0x40
   g->currentFont.font = NULL;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	645a      	str	r2, [r3, #68]	@ 0x44
   g->desktop_color = C_DESKTOP_COLOR;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2250      	movs	r2, #80	@ 0x50
 8004f98:	491e      	ldr	r1, [pc, #120]	@ (8005014 <UG_Init+0x140>)
 8004f9a:	5299      	strh	r1, [r3, r2]
   g->fore_color = C_WHITE;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	224c      	movs	r2, #76	@ 0x4c
 8004fa0:	2101      	movs	r1, #1
 8004fa2:	4249      	negs	r1, r1
 8004fa4:	5299      	strh	r1, [r3, r2]
   g->back_color = C_BLACK;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	224e      	movs	r2, #78	@ 0x4e
 8004faa:	2100      	movs	r1, #0
 8004fac:	5299      	strh	r1, [r3, r2]
   g->next_window = NULL;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	60da      	str	r2, [r3, #12]
   g->active_window = NULL;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	611a      	str	r2, [r3, #16]
   g->last_window = NULL;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	615a      	str	r2, [r3, #20]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8004fc0:	230f      	movs	r3, #15
 8004fc2:	18fb      	adds	r3, r7, r3
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	701a      	strb	r2, [r3, #0]
 8004fc8:	e017      	b.n	8004ffa <UG_Init+0x126>
   {
      g->driver[i].driver = NULL;
 8004fca:	210f      	movs	r1, #15
 8004fcc:	187b      	adds	r3, r7, r1
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	330a      	adds	r3, #10
 8004fd4:	00db      	lsls	r3, r3, #3
 8004fd6:	18d3      	adds	r3, r2, r3
 8004fd8:	3304      	adds	r3, #4
 8004fda:	2200      	movs	r2, #0
 8004fdc:	601a      	str	r2, [r3, #0]
      g->driver[i].state = 0;
 8004fde:	187b      	adds	r3, r7, r1
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	330a      	adds	r3, #10
 8004fe6:	00db      	lsls	r3, r3, #3
 8004fe8:	18d3      	adds	r3, r2, r3
 8004fea:	3308      	adds	r3, #8
 8004fec:	2200      	movs	r2, #0
 8004fee:	701a      	strb	r2, [r3, #0]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8004ff0:	187b      	adds	r3, r7, r1
 8004ff2:	781a      	ldrb	r2, [r3, #0]
 8004ff4:	187b      	adds	r3, r7, r1
 8004ff6:	3201      	adds	r2, #1
 8004ff8:	701a      	strb	r2, [r3, #0]
 8004ffa:	230f      	movs	r3, #15
 8004ffc:	18fb      	adds	r3, r7, r3
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	2b03      	cmp	r3, #3
 8005002:	d9e2      	bls.n	8004fca <UG_Init+0xf6>
   }

   gui = g;
 8005004:	4b04      	ldr	r3, [pc, #16]	@ (8005018 <UG_Init+0x144>)
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	601a      	str	r2, [r3, #0]
   return 1;
 800500a:	2301      	movs	r3, #1
}
 800500c:	0018      	movs	r0, r3
 800500e:	46bd      	mov	sp, r7
 8005010:	b004      	add	sp, #16
 8005012:	bd80      	pop	{r7, pc}
 8005014:	00005c5d 	.word	0x00005c5d
 8005018:	200002f8 	.word	0x200002f8

0800501c <UG_FontSelect>:

/*
 * Sets the GUI font
 */
void UG_FontSelect( UG_FONT* font )
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  gui->font = font;
 8005024:	4b03      	ldr	r3, [pc, #12]	@ (8005034 <UG_FontSelect+0x18>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800502c:	46c0      	nop			@ (mov r8, r8)
 800502e:	46bd      	mov	sp, r7
 8005030:	b002      	add	sp, #8
 8005032:	bd80      	pop	{r7, pc}
 8005034:	200002f8 	.word	0x200002f8

08005038 <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af02      	add	r7, sp, #8
 800503e:	0002      	movs	r2, r0
 8005040:	1dbb      	adds	r3, r7, #6
 8005042:	801a      	strh	r2, [r3, #0]
   UG_FillFrame(0,0,gui->device->x_dim-1,gui->device->y_dim-1,c);
 8005044:	4b0e      	ldr	r3, [pc, #56]	@ (8005080 <UG_FillScreen+0x48>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2200      	movs	r2, #0
 800504c:	5e9b      	ldrsh	r3, [r3, r2]
 800504e:	b29b      	uxth	r3, r3
 8005050:	3b01      	subs	r3, #1
 8005052:	b29b      	uxth	r3, r3
 8005054:	b21a      	sxth	r2, r3
 8005056:	4b0a      	ldr	r3, [pc, #40]	@ (8005080 <UG_FillScreen+0x48>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2102      	movs	r1, #2
 800505e:	5e5b      	ldrsh	r3, [r3, r1]
 8005060:	b29b      	uxth	r3, r3
 8005062:	3b01      	subs	r3, #1
 8005064:	b29b      	uxth	r3, r3
 8005066:	b219      	sxth	r1, r3
 8005068:	1dbb      	adds	r3, r7, #6
 800506a:	881b      	ldrh	r3, [r3, #0]
 800506c:	9300      	str	r3, [sp, #0]
 800506e:	000b      	movs	r3, r1
 8005070:	2100      	movs	r1, #0
 8005072:	2000      	movs	r0, #0
 8005074:	f000 f806 	bl	8005084 <UG_FillFrame>
}
 8005078:	46c0      	nop			@ (mov r8, r8)
 800507a:	46bd      	mov	sp, r7
 800507c:	b002      	add	sp, #8
 800507e:	bd80      	pop	{r7, pc}
 8005080:	200002f8 	.word	0x200002f8

08005084 <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8005084:	b5b0      	push	{r4, r5, r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af02      	add	r7, sp, #8
 800508a:	0005      	movs	r5, r0
 800508c:	000c      	movs	r4, r1
 800508e:	0010      	movs	r0, r2
 8005090:	0019      	movs	r1, r3
 8005092:	1dbb      	adds	r3, r7, #6
 8005094:	1c2a      	adds	r2, r5, #0
 8005096:	801a      	strh	r2, [r3, #0]
 8005098:	1d3b      	adds	r3, r7, #4
 800509a:	1c22      	adds	r2, r4, #0
 800509c:	801a      	strh	r2, [r3, #0]
 800509e:	1cbb      	adds	r3, r7, #2
 80050a0:	1c02      	adds	r2, r0, #0
 80050a2:	801a      	strh	r2, [r3, #0]
 80050a4:	003b      	movs	r3, r7
 80050a6:	1c0a      	adds	r2, r1, #0
 80050a8:	801a      	strh	r2, [r3, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 80050aa:	1cba      	adds	r2, r7, #2
 80050ac:	1dbb      	adds	r3, r7, #6
 80050ae:	2100      	movs	r1, #0
 80050b0:	5e52      	ldrsh	r2, [r2, r1]
 80050b2:	2100      	movs	r1, #0
 80050b4:	5e5b      	ldrsh	r3, [r3, r1]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	da0c      	bge.n	80050d4 <UG_FillFrame+0x50>
     swap(x1,x2);
 80050ba:	210a      	movs	r1, #10
 80050bc:	187b      	adds	r3, r7, r1
 80050be:	1dba      	adds	r2, r7, #6
 80050c0:	8812      	ldrh	r2, [r2, #0]
 80050c2:	801a      	strh	r2, [r3, #0]
 80050c4:	1dbb      	adds	r3, r7, #6
 80050c6:	1cba      	adds	r2, r7, #2
 80050c8:	8812      	ldrh	r2, [r2, #0]
 80050ca:	801a      	strh	r2, [r3, #0]
 80050cc:	1cbb      	adds	r3, r7, #2
 80050ce:	187a      	adds	r2, r7, r1
 80050d0:	8812      	ldrh	r2, [r2, #0]
 80050d2:	801a      	strh	r2, [r3, #0]
   if ( y2 < y1 )
 80050d4:	003a      	movs	r2, r7
 80050d6:	1d3b      	adds	r3, r7, #4
 80050d8:	2100      	movs	r1, #0
 80050da:	5e52      	ldrsh	r2, [r2, r1]
 80050dc:	2100      	movs	r1, #0
 80050de:	5e5b      	ldrsh	r3, [r3, r1]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	da0c      	bge.n	80050fe <UG_FillFrame+0x7a>
     swap(y1,y2);
 80050e4:	2108      	movs	r1, #8
 80050e6:	187b      	adds	r3, r7, r1
 80050e8:	1d3a      	adds	r2, r7, #4
 80050ea:	8812      	ldrh	r2, [r2, #0]
 80050ec:	801a      	strh	r2, [r3, #0]
 80050ee:	1d3b      	adds	r3, r7, #4
 80050f0:	003a      	movs	r2, r7
 80050f2:	8812      	ldrh	r2, [r2, #0]
 80050f4:	801a      	strh	r2, [r3, #0]
 80050f6:	003b      	movs	r3, r7
 80050f8:	187a      	adds	r2, r7, r1
 80050fa:	8812      	ldrh	r2, [r2, #0]
 80050fc:	801a      	strh	r2, [r3, #0]

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 80050fe:	4b33      	ldr	r3, [pc, #204]	@ (80051cc <UG_FillFrame+0x148>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2260      	movs	r2, #96	@ 0x60
 8005104:	5c9b      	ldrb	r3, [r3, r2]
 8005106:	001a      	movs	r2, r3
 8005108:	2302      	movs	r3, #2
 800510a:	4013      	ands	r3, r2
 800510c:	d017      	beq.n	800513e <UG_FillFrame+0xba>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800510e:	4b2f      	ldr	r3, [pc, #188]	@ (80051cc <UG_FillFrame+0x148>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005114:	001d      	movs	r5, r3
 8005116:	003b      	movs	r3, r7
 8005118:	2400      	movs	r4, #0
 800511a:	5f1c      	ldrsh	r4, [r3, r4]
 800511c:	1cbb      	adds	r3, r7, #2
 800511e:	2200      	movs	r2, #0
 8005120:	5e9a      	ldrsh	r2, [r3, r2]
 8005122:	1d3b      	adds	r3, r7, #4
 8005124:	2100      	movs	r1, #0
 8005126:	5e59      	ldrsh	r1, [r3, r1]
 8005128:	1dbb      	adds	r3, r7, #6
 800512a:	2000      	movs	r0, #0
 800512c:	5e18      	ldrsh	r0, [r3, r0]
 800512e:	2320      	movs	r3, #32
 8005130:	18fb      	adds	r3, r7, r3
 8005132:	881b      	ldrh	r3, [r3, #0]
 8005134:	9300      	str	r3, [sp, #0]
 8005136:	0023      	movs	r3, r4
 8005138:	47a8      	blx	r5
 800513a:	1e03      	subs	r3, r0, #0
 800513c:	d041      	beq.n	80051c2 <UG_FillFrame+0x13e>
   }

   for( m=y1; m<=y2; m++ )
 800513e:	230c      	movs	r3, #12
 8005140:	18fb      	adds	r3, r7, r3
 8005142:	1d3a      	adds	r2, r7, #4
 8005144:	8812      	ldrh	r2, [r2, #0]
 8005146:	801a      	strh	r2, [r3, #0]
 8005148:	e031      	b.n	80051ae <UG_FillFrame+0x12a>
   {
      for( n=x1; n<=x2; n++ )
 800514a:	230e      	movs	r3, #14
 800514c:	18fb      	adds	r3, r7, r3
 800514e:	1dba      	adds	r2, r7, #6
 8005150:	8812      	ldrh	r2, [r2, #0]
 8005152:	801a      	strh	r2, [r3, #0]
 8005154:	e019      	b.n	800518a <UG_FillFrame+0x106>
      {
         gui->device->pset(n,m,c);
 8005156:	4b1d      	ldr	r3, [pc, #116]	@ (80051cc <UG_FillFrame+0x148>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	685c      	ldr	r4, [r3, #4]
 800515e:	2320      	movs	r3, #32
 8005160:	18fb      	adds	r3, r7, r3
 8005162:	881a      	ldrh	r2, [r3, #0]
 8005164:	230c      	movs	r3, #12
 8005166:	18fb      	adds	r3, r7, r3
 8005168:	2100      	movs	r1, #0
 800516a:	5e59      	ldrsh	r1, [r3, r1]
 800516c:	250e      	movs	r5, #14
 800516e:	197b      	adds	r3, r7, r5
 8005170:	2000      	movs	r0, #0
 8005172:	5e1b      	ldrsh	r3, [r3, r0]
 8005174:	0018      	movs	r0, r3
 8005176:	47a0      	blx	r4
      for( n=x1; n<=x2; n++ )
 8005178:	0029      	movs	r1, r5
 800517a:	187b      	adds	r3, r7, r1
 800517c:	2200      	movs	r2, #0
 800517e:	5e9b      	ldrsh	r3, [r3, r2]
 8005180:	b29b      	uxth	r3, r3
 8005182:	3301      	adds	r3, #1
 8005184:	b29a      	uxth	r2, r3
 8005186:	187b      	adds	r3, r7, r1
 8005188:	801a      	strh	r2, [r3, #0]
 800518a:	230e      	movs	r3, #14
 800518c:	18fa      	adds	r2, r7, r3
 800518e:	1cbb      	adds	r3, r7, #2
 8005190:	2100      	movs	r1, #0
 8005192:	5e52      	ldrsh	r2, [r2, r1]
 8005194:	2100      	movs	r1, #0
 8005196:	5e5b      	ldrsh	r3, [r3, r1]
 8005198:	429a      	cmp	r2, r3
 800519a:	dddc      	ble.n	8005156 <UG_FillFrame+0xd2>
   for( m=y1; m<=y2; m++ )
 800519c:	210c      	movs	r1, #12
 800519e:	187b      	adds	r3, r7, r1
 80051a0:	2200      	movs	r2, #0
 80051a2:	5e9b      	ldrsh	r3, [r3, r2]
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	3301      	adds	r3, #1
 80051a8:	b29a      	uxth	r2, r3
 80051aa:	187b      	adds	r3, r7, r1
 80051ac:	801a      	strh	r2, [r3, #0]
 80051ae:	230c      	movs	r3, #12
 80051b0:	18fa      	adds	r2, r7, r3
 80051b2:	003b      	movs	r3, r7
 80051b4:	2100      	movs	r1, #0
 80051b6:	5e52      	ldrsh	r2, [r2, r1]
 80051b8:	2100      	movs	r1, #0
 80051ba:	5e5b      	ldrsh	r3, [r3, r1]
 80051bc:	429a      	cmp	r2, r3
 80051be:	ddc4      	ble.n	800514a <UG_FillFrame+0xc6>
 80051c0:	e000      	b.n	80051c4 <UG_FillFrame+0x140>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 80051c2:	46c0      	nop			@ (mov r8, r8)
      }
   }
}
 80051c4:	46bd      	mov	sp, r7
 80051c6:	b004      	add	sp, #16
 80051c8:	bdb0      	pop	{r4, r5, r7, pc}
 80051ca:	46c0      	nop			@ (mov r8, r8)
 80051cc:	200002f8 	.word	0x200002f8

080051d0 <UG_DrawLine>:
      }
   }
}

void UG_DrawLine( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 80051d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051d2:	b08b      	sub	sp, #44	@ 0x2c
 80051d4:	af02      	add	r7, sp, #8
 80051d6:	0005      	movs	r5, r0
 80051d8:	000c      	movs	r4, r1
 80051da:	0010      	movs	r0, r2
 80051dc:	0019      	movs	r1, r3
 80051de:	1dbb      	adds	r3, r7, #6
 80051e0:	1c2a      	adds	r2, r5, #0
 80051e2:	801a      	strh	r2, [r3, #0]
 80051e4:	1d3b      	adds	r3, r7, #4
 80051e6:	1c22      	adds	r2, r4, #0
 80051e8:	801a      	strh	r2, [r3, #0]
 80051ea:	1cbb      	adds	r3, r7, #2
 80051ec:	1c02      	adds	r2, r0, #0
 80051ee:	801a      	strh	r2, [r3, #0]
 80051f0:	003b      	movs	r3, r7
 80051f2:	1c0a      	adds	r2, r1, #0
 80051f4:	801a      	strh	r2, [r3, #0]
   UG_S16 n, dx, dy, sgndx, sgndy, dxabs, dyabs, x, y, drawx, drawy;

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 80051f6:	4ba6      	ldr	r3, [pc, #664]	@ (8005490 <UG_DrawLine+0x2c0>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2258      	movs	r2, #88	@ 0x58
 80051fc:	5c9b      	ldrb	r3, [r3, r2]
 80051fe:	001a      	movs	r2, r3
 8005200:	2302      	movs	r3, #2
 8005202:	4013      	ands	r3, r2
 8005204:	d01a      	beq.n	800523c <UG_DrawLine+0x6c>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8005206:	4ba2      	ldr	r3, [pc, #648]	@ (8005490 <UG_DrawLine+0x2c0>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800520c:	001d      	movs	r5, r3
 800520e:	003b      	movs	r3, r7
 8005210:	2400      	movs	r4, #0
 8005212:	5f1c      	ldrsh	r4, [r3, r4]
 8005214:	1cbb      	adds	r3, r7, #2
 8005216:	2200      	movs	r2, #0
 8005218:	5e9a      	ldrsh	r2, [r3, r2]
 800521a:	1d3b      	adds	r3, r7, #4
 800521c:	2100      	movs	r1, #0
 800521e:	5e59      	ldrsh	r1, [r3, r1]
 8005220:	1dbb      	adds	r3, r7, #6
 8005222:	2000      	movs	r0, #0
 8005224:	5e18      	ldrsh	r0, [r3, r0]
 8005226:	2330      	movs	r3, #48	@ 0x30
 8005228:	2608      	movs	r6, #8
 800522a:	199b      	adds	r3, r3, r6
 800522c:	19db      	adds	r3, r3, r7
 800522e:	881b      	ldrh	r3, [r3, #0]
 8005230:	9300      	str	r3, [sp, #0]
 8005232:	0023      	movs	r3, r4
 8005234:	47a8      	blx	r5
 8005236:	1e03      	subs	r3, r0, #0
 8005238:	d100      	bne.n	800523c <UG_DrawLine+0x6c>
 800523a:	e125      	b.n	8005488 <UG_DrawLine+0x2b8>
   }

   dx = x2 - x1;
 800523c:	1cbb      	adds	r3, r7, #2
 800523e:	881a      	ldrh	r2, [r3, #0]
 8005240:	1dbb      	adds	r3, r7, #6
 8005242:	881b      	ldrh	r3, [r3, #0]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	b29a      	uxth	r2, r3
 8005248:	2114      	movs	r1, #20
 800524a:	187b      	adds	r3, r7, r1
 800524c:	801a      	strh	r2, [r3, #0]
   dy = y2 - y1;
 800524e:	003b      	movs	r3, r7
 8005250:	881a      	ldrh	r2, [r3, #0]
 8005252:	1d3b      	adds	r3, r7, #4
 8005254:	881b      	ldrh	r3, [r3, #0]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	b29a      	uxth	r2, r3
 800525a:	2012      	movs	r0, #18
 800525c:	183b      	adds	r3, r7, r0
 800525e:	801a      	strh	r2, [r3, #0]
   dxabs = (dx>0)?dx:-dx;
 8005260:	187b      	adds	r3, r7, r1
 8005262:	2200      	movs	r2, #0
 8005264:	5e9b      	ldrsh	r3, [r3, r2]
 8005266:	17da      	asrs	r2, r3, #31
 8005268:	189b      	adds	r3, r3, r2
 800526a:	4053      	eors	r3, r2
 800526c:	b29a      	uxth	r2, r3
 800526e:	2310      	movs	r3, #16
 8005270:	18fb      	adds	r3, r7, r3
 8005272:	801a      	strh	r2, [r3, #0]
   dyabs = (dy>0)?dy:-dy;
 8005274:	183b      	adds	r3, r7, r0
 8005276:	2200      	movs	r2, #0
 8005278:	5e9b      	ldrsh	r3, [r3, r2]
 800527a:	17da      	asrs	r2, r3, #31
 800527c:	189b      	adds	r3, r3, r2
 800527e:	4053      	eors	r3, r2
 8005280:	b29a      	uxth	r2, r3
 8005282:	230e      	movs	r3, #14
 8005284:	18fb      	adds	r3, r7, r3
 8005286:	801a      	strh	r2, [r3, #0]
   sgndx = (dx>0)?1:-1;
 8005288:	187b      	adds	r3, r7, r1
 800528a:	2200      	movs	r2, #0
 800528c:	5e9b      	ldrsh	r3, [r3, r2]
 800528e:	2b00      	cmp	r3, #0
 8005290:	dd01      	ble.n	8005296 <UG_DrawLine+0xc6>
 8005292:	2201      	movs	r2, #1
 8005294:	e001      	b.n	800529a <UG_DrawLine+0xca>
 8005296:	2301      	movs	r3, #1
 8005298:	425a      	negs	r2, r3
 800529a:	230c      	movs	r3, #12
 800529c:	18fb      	adds	r3, r7, r3
 800529e:	801a      	strh	r2, [r3, #0]
   sgndy = (dy>0)?1:-1;
 80052a0:	2312      	movs	r3, #18
 80052a2:	18fb      	adds	r3, r7, r3
 80052a4:	2200      	movs	r2, #0
 80052a6:	5e9b      	ldrsh	r3, [r3, r2]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	dd01      	ble.n	80052b0 <UG_DrawLine+0xe0>
 80052ac:	2201      	movs	r2, #1
 80052ae:	e001      	b.n	80052b4 <UG_DrawLine+0xe4>
 80052b0:	2301      	movs	r3, #1
 80052b2:	425a      	negs	r2, r3
 80052b4:	230a      	movs	r3, #10
 80052b6:	18fb      	adds	r3, r7, r3
 80052b8:	801a      	strh	r2, [r3, #0]
   x = dyabs >> 1;
 80052ba:	231c      	movs	r3, #28
 80052bc:	18fb      	adds	r3, r7, r3
 80052be:	250e      	movs	r5, #14
 80052c0:	197a      	adds	r2, r7, r5
 80052c2:	2100      	movs	r1, #0
 80052c4:	5e52      	ldrsh	r2, [r2, r1]
 80052c6:	1052      	asrs	r2, r2, #1
 80052c8:	801a      	strh	r2, [r3, #0]
   y = dxabs >> 1;
 80052ca:	231a      	movs	r3, #26
 80052cc:	18fb      	adds	r3, r7, r3
 80052ce:	2610      	movs	r6, #16
 80052d0:	19ba      	adds	r2, r7, r6
 80052d2:	2100      	movs	r1, #0
 80052d4:	5e52      	ldrsh	r2, [r2, r1]
 80052d6:	1052      	asrs	r2, r2, #1
 80052d8:	801a      	strh	r2, [r3, #0]
   drawx = x1;
 80052da:	2018      	movs	r0, #24
 80052dc:	183b      	adds	r3, r7, r0
 80052de:	1dba      	adds	r2, r7, #6
 80052e0:	8812      	ldrh	r2, [r2, #0]
 80052e2:	801a      	strh	r2, [r3, #0]
   drawy = y1;
 80052e4:	2116      	movs	r1, #22
 80052e6:	187b      	adds	r3, r7, r1
 80052e8:	1d3a      	adds	r2, r7, #4
 80052ea:	8812      	ldrh	r2, [r2, #0]
 80052ec:	801a      	strh	r2, [r3, #0]

   gui->device->pset(drawx, drawy,c);
 80052ee:	4b68      	ldr	r3, [pc, #416]	@ (8005490 <UG_DrawLine+0x2c0>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	685c      	ldr	r4, [r3, #4]
 80052f6:	2330      	movs	r3, #48	@ 0x30
 80052f8:	2208      	movs	r2, #8
 80052fa:	189b      	adds	r3, r3, r2
 80052fc:	19db      	adds	r3, r3, r7
 80052fe:	881a      	ldrh	r2, [r3, #0]
 8005300:	187b      	adds	r3, r7, r1
 8005302:	2100      	movs	r1, #0
 8005304:	5e59      	ldrsh	r1, [r3, r1]
 8005306:	183b      	adds	r3, r7, r0
 8005308:	2000      	movs	r0, #0
 800530a:	5e1b      	ldrsh	r3, [r3, r0]
 800530c:	0018      	movs	r0, r3
 800530e:	47a0      	blx	r4

   if( dxabs >= dyabs )
 8005310:	19ba      	adds	r2, r7, r6
 8005312:	197b      	adds	r3, r7, r5
 8005314:	2100      	movs	r1, #0
 8005316:	5e52      	ldrsh	r2, [r2, r1]
 8005318:	2100      	movs	r1, #0
 800531a:	5e5b      	ldrsh	r3, [r3, r1]
 800531c:	429a      	cmp	r2, r3
 800531e:	db59      	blt.n	80053d4 <UG_DrawLine+0x204>
   {
      for( n=0; n<dxabs; n++ )
 8005320:	231e      	movs	r3, #30
 8005322:	18fb      	adds	r3, r7, r3
 8005324:	2200      	movs	r2, #0
 8005326:	801a      	strh	r2, [r3, #0]
 8005328:	e049      	b.n	80053be <UG_DrawLine+0x1ee>
      {
         y += dyabs;
 800532a:	211a      	movs	r1, #26
 800532c:	187b      	adds	r3, r7, r1
 800532e:	881a      	ldrh	r2, [r3, #0]
 8005330:	230e      	movs	r3, #14
 8005332:	18fb      	adds	r3, r7, r3
 8005334:	881b      	ldrh	r3, [r3, #0]
 8005336:	18d3      	adds	r3, r2, r3
 8005338:	b29a      	uxth	r2, r3
 800533a:	187b      	adds	r3, r7, r1
 800533c:	801a      	strh	r2, [r3, #0]
         if( y >= dxabs )
 800533e:	187a      	adds	r2, r7, r1
 8005340:	2010      	movs	r0, #16
 8005342:	183b      	adds	r3, r7, r0
 8005344:	2400      	movs	r4, #0
 8005346:	5f12      	ldrsh	r2, [r2, r4]
 8005348:	2400      	movs	r4, #0
 800534a:	5f1b      	ldrsh	r3, [r3, r4]
 800534c:	429a      	cmp	r2, r3
 800534e:	db11      	blt.n	8005374 <UG_DrawLine+0x1a4>
         {
            y -= dxabs;
 8005350:	187b      	adds	r3, r7, r1
 8005352:	881a      	ldrh	r2, [r3, #0]
 8005354:	183b      	adds	r3, r7, r0
 8005356:	881b      	ldrh	r3, [r3, #0]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	b29a      	uxth	r2, r3
 800535c:	187b      	adds	r3, r7, r1
 800535e:	801a      	strh	r2, [r3, #0]
            drawy += sgndy;
 8005360:	2116      	movs	r1, #22
 8005362:	187b      	adds	r3, r7, r1
 8005364:	881a      	ldrh	r2, [r3, #0]
 8005366:	230a      	movs	r3, #10
 8005368:	18fb      	adds	r3, r7, r3
 800536a:	881b      	ldrh	r3, [r3, #0]
 800536c:	18d3      	adds	r3, r2, r3
 800536e:	b29a      	uxth	r2, r3
 8005370:	187b      	adds	r3, r7, r1
 8005372:	801a      	strh	r2, [r3, #0]
         }
         drawx += sgndx;
 8005374:	2018      	movs	r0, #24
 8005376:	183b      	adds	r3, r7, r0
 8005378:	881a      	ldrh	r2, [r3, #0]
 800537a:	230c      	movs	r3, #12
 800537c:	18fb      	adds	r3, r7, r3
 800537e:	881b      	ldrh	r3, [r3, #0]
 8005380:	18d3      	adds	r3, r2, r3
 8005382:	b29a      	uxth	r2, r3
 8005384:	183b      	adds	r3, r7, r0
 8005386:	801a      	strh	r2, [r3, #0]
         gui->device->pset(drawx, drawy,c);
 8005388:	4b41      	ldr	r3, [pc, #260]	@ (8005490 <UG_DrawLine+0x2c0>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	685c      	ldr	r4, [r3, #4]
 8005390:	2330      	movs	r3, #48	@ 0x30
 8005392:	2208      	movs	r2, #8
 8005394:	189b      	adds	r3, r3, r2
 8005396:	19db      	adds	r3, r3, r7
 8005398:	881a      	ldrh	r2, [r3, #0]
 800539a:	2316      	movs	r3, #22
 800539c:	18fb      	adds	r3, r7, r3
 800539e:	2100      	movs	r1, #0
 80053a0:	5e59      	ldrsh	r1, [r3, r1]
 80053a2:	183b      	adds	r3, r7, r0
 80053a4:	2000      	movs	r0, #0
 80053a6:	5e1b      	ldrsh	r3, [r3, r0]
 80053a8:	0018      	movs	r0, r3
 80053aa:	47a0      	blx	r4
      for( n=0; n<dxabs; n++ )
 80053ac:	211e      	movs	r1, #30
 80053ae:	187b      	adds	r3, r7, r1
 80053b0:	2200      	movs	r2, #0
 80053b2:	5e9b      	ldrsh	r3, [r3, r2]
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	3301      	adds	r3, #1
 80053b8:	b29a      	uxth	r2, r3
 80053ba:	187b      	adds	r3, r7, r1
 80053bc:	801a      	strh	r2, [r3, #0]
 80053be:	231e      	movs	r3, #30
 80053c0:	18fa      	adds	r2, r7, r3
 80053c2:	2310      	movs	r3, #16
 80053c4:	18fb      	adds	r3, r7, r3
 80053c6:	2100      	movs	r1, #0
 80053c8:	5e52      	ldrsh	r2, [r2, r1]
 80053ca:	2100      	movs	r1, #0
 80053cc:	5e5b      	ldrsh	r3, [r3, r1]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	dbab      	blt.n	800532a <UG_DrawLine+0x15a>
 80053d2:	e05a      	b.n	800548a <UG_DrawLine+0x2ba>
      }
   }
   else
   {
      for( n=0; n<dyabs; n++ )
 80053d4:	231e      	movs	r3, #30
 80053d6:	18fb      	adds	r3, r7, r3
 80053d8:	2200      	movs	r2, #0
 80053da:	801a      	strh	r2, [r3, #0]
 80053dc:	e049      	b.n	8005472 <UG_DrawLine+0x2a2>
      {
         x += dxabs;
 80053de:	211c      	movs	r1, #28
 80053e0:	187b      	adds	r3, r7, r1
 80053e2:	881a      	ldrh	r2, [r3, #0]
 80053e4:	2310      	movs	r3, #16
 80053e6:	18fb      	adds	r3, r7, r3
 80053e8:	881b      	ldrh	r3, [r3, #0]
 80053ea:	18d3      	adds	r3, r2, r3
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	187b      	adds	r3, r7, r1
 80053f0:	801a      	strh	r2, [r3, #0]
         if( x >= dyabs )
 80053f2:	187a      	adds	r2, r7, r1
 80053f4:	200e      	movs	r0, #14
 80053f6:	183b      	adds	r3, r7, r0
 80053f8:	2400      	movs	r4, #0
 80053fa:	5f12      	ldrsh	r2, [r2, r4]
 80053fc:	2400      	movs	r4, #0
 80053fe:	5f1b      	ldrsh	r3, [r3, r4]
 8005400:	429a      	cmp	r2, r3
 8005402:	db11      	blt.n	8005428 <UG_DrawLine+0x258>
         {
            x -= dyabs;
 8005404:	187b      	adds	r3, r7, r1
 8005406:	881a      	ldrh	r2, [r3, #0]
 8005408:	183b      	adds	r3, r7, r0
 800540a:	881b      	ldrh	r3, [r3, #0]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	b29a      	uxth	r2, r3
 8005410:	187b      	adds	r3, r7, r1
 8005412:	801a      	strh	r2, [r3, #0]
            drawx += sgndx;
 8005414:	2118      	movs	r1, #24
 8005416:	187b      	adds	r3, r7, r1
 8005418:	881a      	ldrh	r2, [r3, #0]
 800541a:	230c      	movs	r3, #12
 800541c:	18fb      	adds	r3, r7, r3
 800541e:	881b      	ldrh	r3, [r3, #0]
 8005420:	18d3      	adds	r3, r2, r3
 8005422:	b29a      	uxth	r2, r3
 8005424:	187b      	adds	r3, r7, r1
 8005426:	801a      	strh	r2, [r3, #0]
         }
         drawy += sgndy;
 8005428:	2116      	movs	r1, #22
 800542a:	187b      	adds	r3, r7, r1
 800542c:	881a      	ldrh	r2, [r3, #0]
 800542e:	230a      	movs	r3, #10
 8005430:	18fb      	adds	r3, r7, r3
 8005432:	881b      	ldrh	r3, [r3, #0]
 8005434:	18d3      	adds	r3, r2, r3
 8005436:	b29a      	uxth	r2, r3
 8005438:	187b      	adds	r3, r7, r1
 800543a:	801a      	strh	r2, [r3, #0]
         gui->device->pset(drawx, drawy,c);
 800543c:	4b14      	ldr	r3, [pc, #80]	@ (8005490 <UG_DrawLine+0x2c0>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	685c      	ldr	r4, [r3, #4]
 8005444:	2330      	movs	r3, #48	@ 0x30
 8005446:	2208      	movs	r2, #8
 8005448:	189b      	adds	r3, r3, r2
 800544a:	19db      	adds	r3, r3, r7
 800544c:	881a      	ldrh	r2, [r3, #0]
 800544e:	187b      	adds	r3, r7, r1
 8005450:	2100      	movs	r1, #0
 8005452:	5e59      	ldrsh	r1, [r3, r1]
 8005454:	2318      	movs	r3, #24
 8005456:	18fb      	adds	r3, r7, r3
 8005458:	2000      	movs	r0, #0
 800545a:	5e1b      	ldrsh	r3, [r3, r0]
 800545c:	0018      	movs	r0, r3
 800545e:	47a0      	blx	r4
      for( n=0; n<dyabs; n++ )
 8005460:	211e      	movs	r1, #30
 8005462:	187b      	adds	r3, r7, r1
 8005464:	2200      	movs	r2, #0
 8005466:	5e9b      	ldrsh	r3, [r3, r2]
 8005468:	b29b      	uxth	r3, r3
 800546a:	3301      	adds	r3, #1
 800546c:	b29a      	uxth	r2, r3
 800546e:	187b      	adds	r3, r7, r1
 8005470:	801a      	strh	r2, [r3, #0]
 8005472:	231e      	movs	r3, #30
 8005474:	18fa      	adds	r2, r7, r3
 8005476:	230e      	movs	r3, #14
 8005478:	18fb      	adds	r3, r7, r3
 800547a:	2100      	movs	r1, #0
 800547c:	5e52      	ldrsh	r2, [r2, r1]
 800547e:	2100      	movs	r1, #0
 8005480:	5e5b      	ldrsh	r3, [r3, r1]
 8005482:	429a      	cmp	r2, r3
 8005484:	dbab      	blt.n	80053de <UG_DrawLine+0x20e>
 8005486:	e000      	b.n	800548a <UG_DrawLine+0x2ba>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8005488:	46c0      	nop			@ (mov r8, r8)
      }
   }  
}
 800548a:	46bd      	mov	sp, r7
 800548c:	b009      	add	sp, #36	@ 0x24
 800548e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005490:	200002f8 	.word	0x200002f8

08005494 <UG_PutString>:
    UG_DrawLine(a, y, b + 1, y, c);
  }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 8005494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005496:	b087      	sub	sp, #28
 8005498:	af02      	add	r7, sp, #8
 800549a:	603a      	str	r2, [r7, #0]
 800549c:	1dbb      	adds	r3, r7, #6
 800549e:	1c02      	adds	r2, r0, #0
 80054a0:	801a      	strh	r2, [r3, #0]
 80054a2:	1d3b      	adds	r3, r7, #4
 80054a4:	1c0a      	adds	r2, r1, #0
 80054a6:	801a      	strh	r2, [r3, #0]
   UG_S16 xp,yp,cw;
   UG_CHAR chr;

   xp=x;
 80054a8:	230e      	movs	r3, #14
 80054aa:	18fb      	adds	r3, r7, r3
 80054ac:	1dba      	adds	r2, r7, #6
 80054ae:	8812      	ldrh	r2, [r2, #0]
 80054b0:	801a      	strh	r2, [r3, #0]
   yp=y;
 80054b2:	230c      	movs	r3, #12
 80054b4:	18fb      	adds	r3, r7, r3
 80054b6:	1d3a      	adds	r2, r7, #4
 80054b8:	8812      	ldrh	r2, [r2, #0]
 80054ba:	801a      	strh	r2, [r3, #0]

   _UG_FontSelect(gui->font);
 80054bc:	4b54      	ldr	r3, [pc, #336]	@ (8005610 <UG_PutString+0x17c>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054c2:	0018      	movs	r0, r3
 80054c4:	f000 faf0 	bl	8005aa8 <_UG_FontSelect>
   while ( *str != 0 )
 80054c8:	e084      	b.n	80055d4 <UG_PutString+0x140>
   {
      #ifdef UGUI_USE_UTF8
      if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80054ca:	4b51      	ldr	r3, [pc, #324]	@ (8005610 <UG_PutString+0x17c>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	222d      	movs	r2, #45	@ 0x2d
 80054d0:	5c9b      	ldrb	r3, [r3, r2]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d108      	bne.n	80054e8 <UG_PutString+0x54>
         chr = _UG_DecodeUTF8(&str);
 80054d6:	230a      	movs	r3, #10
 80054d8:	18fc      	adds	r4, r7, r3
 80054da:	003b      	movs	r3, r7
 80054dc:	0018      	movs	r0, r3
 80054de:	f000 f8e5 	bl	80056ac <_UG_DecodeUTF8>
 80054e2:	0003      	movs	r3, r0
 80054e4:	8023      	strh	r3, [r4, #0]
 80054e6:	e006      	b.n	80054f6 <UG_PutString+0x62>
      }
      else{
         chr = *str++;
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	1c5a      	adds	r2, r3, #1
 80054ec:	603a      	str	r2, [r7, #0]
 80054ee:	781a      	ldrb	r2, [r3, #0]
 80054f0:	230a      	movs	r3, #10
 80054f2:	18fb      	adds	r3, r7, r3
 80054f4:	801a      	strh	r2, [r3, #0]
      }
      #else
      chr = *str++;
      #endif

      if ( chr == '\n' )
 80054f6:	230a      	movs	r3, #10
 80054f8:	18fb      	adds	r3, r7, r3
 80054fa:	881b      	ldrh	r3, [r3, #0]
 80054fc:	2b0a      	cmp	r3, #10
 80054fe:	d107      	bne.n	8005510 <UG_PutString+0x7c>
      {
         xp = gui->device->x_dim;
 8005500:	4b43      	ldr	r3, [pc, #268]	@ (8005610 <UG_PutString+0x17c>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	230e      	movs	r3, #14
 8005508:	18fb      	adds	r3, r7, r3
 800550a:	8812      	ldrh	r2, [r2, #0]
 800550c:	801a      	strh	r2, [r3, #0]
         continue;
 800550e:	e061      	b.n	80055d4 <UG_PutString+0x140>
      }
      cw = _UG_GetCharData(chr,NULL);
 8005510:	2508      	movs	r5, #8
 8005512:	197c      	adds	r4, r7, r5
 8005514:	230a      	movs	r3, #10
 8005516:	18fb      	adds	r3, r7, r3
 8005518:	881b      	ldrh	r3, [r3, #0]
 800551a:	2100      	movs	r1, #0
 800551c:	0018      	movs	r0, r3
 800551e:	f000 f973 	bl	8005808 <_UG_GetCharData>
 8005522:	0003      	movs	r3, r0
 8005524:	8023      	strh	r3, [r4, #0]
      if(cw==-1) continue;
 8005526:	0028      	movs	r0, r5
 8005528:	183b      	adds	r3, r7, r0
 800552a:	2200      	movs	r2, #0
 800552c:	5e9b      	ldrsh	r3, [r3, r2]
 800552e:	3301      	adds	r3, #1
 8005530:	d04f      	beq.n	80055d2 <UG_PutString+0x13e>
      if ( xp + cw > gui->device->x_dim - 1 )
 8005532:	4b37      	ldr	r3, [pc, #220]	@ (8005610 <UG_PutString+0x17c>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2200      	movs	r2, #0
 800553a:	5e9b      	ldrsh	r3, [r3, r2]
 800553c:	0019      	movs	r1, r3
 800553e:	240e      	movs	r4, #14
 8005540:	193b      	adds	r3, r7, r4
 8005542:	2200      	movs	r2, #0
 8005544:	5e9a      	ldrsh	r2, [r3, r2]
 8005546:	183b      	adds	r3, r7, r0
 8005548:	2000      	movs	r0, #0
 800554a:	5e1b      	ldrsh	r3, [r3, r0]
 800554c:	18d3      	adds	r3, r2, r3
 800554e:	4299      	cmp	r1, r3
 8005550:	dc16      	bgt.n	8005580 <UG_PutString+0xec>
      {
         xp = x;
 8005552:	193b      	adds	r3, r7, r4
 8005554:	1dba      	adds	r2, r7, #6
 8005556:	8812      	ldrh	r2, [r2, #0]
 8005558:	801a      	strh	r2, [r3, #0]
         yp +=  gui->currentFont.char_height+gui->char_v_space;
 800555a:	4b2d      	ldr	r3, [pc, #180]	@ (8005610 <UG_PutString+0x17c>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	222f      	movs	r2, #47	@ 0x2f
 8005560:	5c9b      	ldrb	r3, [r3, r2]
 8005562:	b21a      	sxth	r2, r3
 8005564:	4b2a      	ldr	r3, [pc, #168]	@ (8005610 <UG_PutString+0x17c>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	214a      	movs	r1, #74	@ 0x4a
 800556a:	565b      	ldrsb	r3, [r3, r1]
 800556c:	18d3      	adds	r3, r2, r3
 800556e:	b21b      	sxth	r3, r3
 8005570:	b29a      	uxth	r2, r3
 8005572:	210c      	movs	r1, #12
 8005574:	187b      	adds	r3, r7, r1
 8005576:	881b      	ldrh	r3, [r3, #0]
 8005578:	18d3      	adds	r3, r2, r3
 800557a:	b29a      	uxth	r2, r3
 800557c:	187b      	adds	r3, r7, r1
 800557e:	801a      	strh	r2, [r3, #0]
      }

      _UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 8005580:	4b23      	ldr	r3, [pc, #140]	@ (8005610 <UG_PutString+0x17c>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	224c      	movs	r2, #76	@ 0x4c
 8005586:	5a9d      	ldrh	r5, [r3, r2]
 8005588:	4b21      	ldr	r3, [pc, #132]	@ (8005610 <UG_PutString+0x17c>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	224e      	movs	r2, #78	@ 0x4e
 800558e:	5a9b      	ldrh	r3, [r3, r2]
 8005590:	220c      	movs	r2, #12
 8005592:	18ba      	adds	r2, r7, r2
 8005594:	2400      	movs	r4, #0
 8005596:	5f14      	ldrsh	r4, [r2, r4]
 8005598:	260e      	movs	r6, #14
 800559a:	19ba      	adds	r2, r7, r6
 800559c:	2100      	movs	r1, #0
 800559e:	5e51      	ldrsh	r1, [r2, r1]
 80055a0:	220a      	movs	r2, #10
 80055a2:	18ba      	adds	r2, r7, r2
 80055a4:	8810      	ldrh	r0, [r2, #0]
 80055a6:	9300      	str	r3, [sp, #0]
 80055a8:	002b      	movs	r3, r5
 80055aa:	0022      	movs	r2, r4
 80055ac:	f000 fb00 	bl	8005bb0 <_UG_PutChar>

      xp += cw + gui->char_h_space;
 80055b0:	4b17      	ldr	r3, [pc, #92]	@ (8005610 <UG_PutString+0x17c>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2249      	movs	r2, #73	@ 0x49
 80055b6:	569b      	ldrsb	r3, [r3, r2]
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	2308      	movs	r3, #8
 80055bc:	18fb      	adds	r3, r7, r3
 80055be:	881b      	ldrh	r3, [r3, #0]
 80055c0:	18d3      	adds	r3, r2, r3
 80055c2:	b29a      	uxth	r2, r3
 80055c4:	19bb      	adds	r3, r7, r6
 80055c6:	881b      	ldrh	r3, [r3, #0]
 80055c8:	18d3      	adds	r3, r2, r3
 80055ca:	b29a      	uxth	r2, r3
 80055cc:	19bb      	adds	r3, r7, r6
 80055ce:	801a      	strh	r2, [r3, #0]
 80055d0:	e000      	b.n	80055d4 <UG_PutString+0x140>
      if(cw==-1) continue;
 80055d2:	46c0      	nop			@ (mov r8, r8)
   while ( *str != 0 )
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d000      	beq.n	80055de <UG_PutString+0x14a>
 80055dc:	e775      	b.n	80054ca <UG_PutString+0x36>
   }
   if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 80055de:	4b0c      	ldr	r3, [pc, #48]	@ (8005610 <UG_PutString+0x17c>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2268      	movs	r2, #104	@ 0x68
 80055e4:	5c9b      	ldrb	r3, [r3, r2]
 80055e6:	001a      	movs	r2, r3
 80055e8:	2302      	movs	r3, #2
 80055ea:	4013      	ands	r3, r2
 80055ec:	d00c      	beq.n	8005608 <UG_PutString+0x174>
     ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 80055ee:	4b08      	ldr	r3, [pc, #32]	@ (8005610 <UG_PutString+0x17c>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055f4:	001c      	movs	r4, r3
 80055f6:	2301      	movs	r3, #1
 80055f8:	425b      	negs	r3, r3
 80055fa:	2201      	movs	r2, #1
 80055fc:	4252      	negs	r2, r2
 80055fe:	2101      	movs	r1, #1
 8005600:	4249      	negs	r1, r1
 8005602:	2001      	movs	r0, #1
 8005604:	4240      	negs	r0, r0
 8005606:	47a0      	blx	r4
}
 8005608:	46c0      	nop			@ (mov r8, r8)
 800560a:	46bd      	mov	sp, r7
 800560c:	b005      	add	sp, #20
 800560e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005610:	200002f8 	.word	0x200002f8

08005614 <UG_SetForecolor>:
   gui->console.back_color = c;
}
#endif

void UG_SetForecolor( UG_COLOR c )
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	0002      	movs	r2, r0
 800561c:	1dbb      	adds	r3, r7, #6
 800561e:	801a      	strh	r2, [r3, #0]
   gui->fore_color = c;
 8005620:	4b04      	ldr	r3, [pc, #16]	@ (8005634 <UG_SetForecolor+0x20>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	1dba      	adds	r2, r7, #6
 8005626:	214c      	movs	r1, #76	@ 0x4c
 8005628:	8812      	ldrh	r2, [r2, #0]
 800562a:	525a      	strh	r2, [r3, r1]
}
 800562c:	46c0      	nop			@ (mov r8, r8)
 800562e:	46bd      	mov	sp, r7
 8005630:	b002      	add	sp, #8
 8005632:	bd80      	pop	{r7, pc}
 8005634:	200002f8 	.word	0x200002f8

08005638 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	0002      	movs	r2, r0
 8005640:	1dbb      	adds	r3, r7, #6
 8005642:	801a      	strh	r2, [r3, #0]
   gui->back_color = c;
 8005644:	4b04      	ldr	r3, [pc, #16]	@ (8005658 <UG_SetBackcolor+0x20>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	1dba      	adds	r2, r7, #6
 800564a:	214e      	movs	r1, #78	@ 0x4e
 800564c:	8812      	ldrh	r2, [r2, #0]
 800564e:	525a      	strh	r2, [r3, r1]
}
 8005650:	46c0      	nop			@ (mov r8, r8)
 8005652:	46bd      	mov	sp, r7
 8005654:	b002      	add	sp, #8
 8005656:	bd80      	pop	{r7, pc}
 8005658:	200002f8 	.word	0x200002f8

0800565c <UG_FontSetHSpace>:
{
   return gui->device->y_dim;
}

void UG_FontSetHSpace( UG_U16 s )
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	0002      	movs	r2, r0
 8005664:	1dbb      	adds	r3, r7, #6
 8005666:	801a      	strh	r2, [r3, #0]
   gui->char_h_space = s;
 8005668:	4b05      	ldr	r3, [pc, #20]	@ (8005680 <UG_FontSetHSpace+0x24>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	1dba      	adds	r2, r7, #6
 800566e:	8812      	ldrh	r2, [r2, #0]
 8005670:	b251      	sxtb	r1, r2
 8005672:	2249      	movs	r2, #73	@ 0x49
 8005674:	5499      	strb	r1, [r3, r2]
}
 8005676:	46c0      	nop			@ (mov r8, r8)
 8005678:	46bd      	mov	sp, r7
 800567a:	b002      	add	sp, #8
 800567c:	bd80      	pop	{r7, pc}
 800567e:	46c0      	nop			@ (mov r8, r8)
 8005680:	200002f8 	.word	0x200002f8

08005684 <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
 800568a:	0002      	movs	r2, r0
 800568c:	1dbb      	adds	r3, r7, #6
 800568e:	801a      	strh	r2, [r3, #0]
   gui->char_v_space = s;
 8005690:	4b05      	ldr	r3, [pc, #20]	@ (80056a8 <UG_FontSetVSpace+0x24>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	1dba      	adds	r2, r7, #6
 8005696:	8812      	ldrh	r2, [r2, #0]
 8005698:	b251      	sxtb	r1, r2
 800569a:	224a      	movs	r2, #74	@ 0x4a
 800569c:	5499      	strb	r1, [r3, r2]
}
 800569e:	46c0      	nop			@ (mov r8, r8)
 80056a0:	46bd      	mov	sp, r7
 80056a2:	b002      	add	sp, #8
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	46c0      	nop			@ (mov r8, r8)
 80056a8:	200002f8 	.word	0x200002f8

080056ac <_UG_DecodeUTF8>:
 *
 * Based on https://github.com/olikraus/u8g2/blob/master/csrc/u8x8_8x8.c
 *
 */
 #ifdef UGUI_USE_UTF8
UG_CHAR _UG_DecodeUTF8(char **str) {
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]

  char c=**str;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	210f      	movs	r1, #15
 80056ba:	187b      	adds	r3, r7, r1
 80056bc:	7812      	ldrb	r2, [r2, #0]
 80056be:	701a      	strb	r2, [r3, #0]

  if ( c < 0x80 )                 // Fast detection for simple ASCII
 80056c0:	187b      	adds	r3, r7, r1
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	b25b      	sxtb	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	db08      	blt.n	80056dc <_UG_DecodeUTF8+0x30>
  {
    *str = *str+1;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	1c5a      	adds	r2, r3, #1
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	601a      	str	r2, [r3, #0]
    return c;
 80056d4:	187b      	adds	r3, r7, r1
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	b29b      	uxth	r3, r3
 80056da:	e091      	b.n	8005800 <_UG_DecodeUTF8+0x154>
  }

  UG_U8 bytes_left=0;
 80056dc:	230e      	movs	r3, #14
 80056de:	18fb      	adds	r3, r7, r3
 80056e0:	2200      	movs	r2, #0
 80056e2:	701a      	strb	r2, [r3, #0]
  UG_CHAR encoding=0;
 80056e4:	230c      	movs	r3, #12
 80056e6:	18fb      	adds	r3, r7, r3
 80056e8:	2200      	movs	r2, #0
 80056ea:	801a      	strh	r2, [r3, #0]

  while(**str)
 80056ec:	e07d      	b.n	80057ea <_UG_DecodeUTF8+0x13e>
  {
    c=**str;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	210f      	movs	r1, #15
 80056f4:	187b      	adds	r3, r7, r1
 80056f6:	7812      	ldrb	r2, [r2, #0]
 80056f8:	701a      	strb	r2, [r3, #0]
    *str = *str+1;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	1c5a      	adds	r2, r3, #1
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	601a      	str	r2, [r3, #0]
    if ( bytes_left == 0 )
 8005704:	220e      	movs	r2, #14
 8005706:	18bb      	adds	r3, r7, r2
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d14f      	bne.n	80057ae <_UG_DecodeUTF8+0x102>
    {
      if ( c < 0xe0 )             // 2 byte sequence
 800570e:	187b      	adds	r3, r7, r1
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	2bdf      	cmp	r3, #223	@ 0xdf
 8005714:	d809      	bhi.n	800572a <_UG_DecodeUTF8+0x7e>
      {
        bytes_left = 1;
 8005716:	18bb      	adds	r3, r7, r2
 8005718:	2201      	movs	r2, #1
 800571a:	701a      	strb	r2, [r3, #0]
        c &= 0x01f;
 800571c:	187b      	adds	r3, r7, r1
 800571e:	187a      	adds	r2, r7, r1
 8005720:	7812      	ldrb	r2, [r2, #0]
 8005722:	211f      	movs	r1, #31
 8005724:	400a      	ands	r2, r1
 8005726:	701a      	strb	r2, [r3, #0]
 8005728:	e03a      	b.n	80057a0 <_UG_DecodeUTF8+0xf4>
      }
      else if ( c < 0xf0 )        // 3 byte sequence
 800572a:	210f      	movs	r1, #15
 800572c:	187b      	adds	r3, r7, r1
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	2bef      	cmp	r3, #239	@ 0xef
 8005732:	d80a      	bhi.n	800574a <_UG_DecodeUTF8+0x9e>
      {
        bytes_left = 2;
 8005734:	230e      	movs	r3, #14
 8005736:	18fb      	adds	r3, r7, r3
 8005738:	2202      	movs	r2, #2
 800573a:	701a      	strb	r2, [r3, #0]
        c &= 15;
 800573c:	187b      	adds	r3, r7, r1
 800573e:	187a      	adds	r2, r7, r1
 8005740:	7812      	ldrb	r2, [r2, #0]
 8005742:	210f      	movs	r1, #15
 8005744:	400a      	ands	r2, r1
 8005746:	701a      	strb	r2, [r3, #0]
 8005748:	e02a      	b.n	80057a0 <_UG_DecodeUTF8+0xf4>
      }
      else if ( c < 0xf8 )        // 4 byte sequence
 800574a:	210f      	movs	r1, #15
 800574c:	187b      	adds	r3, r7, r1
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	2bf7      	cmp	r3, #247	@ 0xf7
 8005752:	d80a      	bhi.n	800576a <_UG_DecodeUTF8+0xbe>
      {
        bytes_left = 3;
 8005754:	230e      	movs	r3, #14
 8005756:	18fb      	adds	r3, r7, r3
 8005758:	2203      	movs	r2, #3
 800575a:	701a      	strb	r2, [r3, #0]
        c &= 7;
 800575c:	187b      	adds	r3, r7, r1
 800575e:	187a      	adds	r2, r7, r1
 8005760:	7812      	ldrb	r2, [r2, #0]
 8005762:	2107      	movs	r1, #7
 8005764:	400a      	ands	r2, r1
 8005766:	701a      	strb	r2, [r3, #0]
 8005768:	e01a      	b.n	80057a0 <_UG_DecodeUTF8+0xf4>
      }
      else if ( c < 0xfc )        // 5 byte sequence
 800576a:	210f      	movs	r1, #15
 800576c:	187b      	adds	r3, r7, r1
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	2bfb      	cmp	r3, #251	@ 0xfb
 8005772:	d80a      	bhi.n	800578a <_UG_DecodeUTF8+0xde>
      {
        bytes_left = 4;
 8005774:	230e      	movs	r3, #14
 8005776:	18fb      	adds	r3, r7, r3
 8005778:	2204      	movs	r2, #4
 800577a:	701a      	strb	r2, [r3, #0]
        c &= 3;
 800577c:	187b      	adds	r3, r7, r1
 800577e:	187a      	adds	r2, r7, r1
 8005780:	7812      	ldrb	r2, [r2, #0]
 8005782:	2103      	movs	r1, #3
 8005784:	400a      	ands	r2, r1
 8005786:	701a      	strb	r2, [r3, #0]
 8005788:	e00a      	b.n	80057a0 <_UG_DecodeUTF8+0xf4>
      }
      else                        // 6 byte sequence
      {
        bytes_left = 5;
 800578a:	230e      	movs	r3, #14
 800578c:	18fb      	adds	r3, r7, r3
 800578e:	2205      	movs	r2, #5
 8005790:	701a      	strb	r2, [r3, #0]
        c &= 1;
 8005792:	220f      	movs	r2, #15
 8005794:	18bb      	adds	r3, r7, r2
 8005796:	18ba      	adds	r2, r7, r2
 8005798:	7812      	ldrb	r2, [r2, #0]
 800579a:	2101      	movs	r1, #1
 800579c:	400a      	ands	r2, r1
 800579e:	701a      	strb	r2, [r3, #0]
      }
      encoding = c;
 80057a0:	230c      	movs	r3, #12
 80057a2:	18fb      	adds	r3, r7, r3
 80057a4:	220f      	movs	r2, #15
 80057a6:	18ba      	adds	r2, r7, r2
 80057a8:	7812      	ldrb	r2, [r2, #0]
 80057aa:	801a      	strh	r2, [r3, #0]
 80057ac:	e01d      	b.n	80057ea <_UG_DecodeUTF8+0x13e>
    }
    else
    {
      encoding<<=6;
 80057ae:	210c      	movs	r1, #12
 80057b0:	187b      	adds	r3, r7, r1
 80057b2:	187a      	adds	r2, r7, r1
 80057b4:	8812      	ldrh	r2, [r2, #0]
 80057b6:	0192      	lsls	r2, r2, #6
 80057b8:	801a      	strh	r2, [r3, #0]
      encoding |= (c & 0x3F);
 80057ba:	230f      	movs	r3, #15
 80057bc:	18fb      	adds	r3, r7, r3
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	b21b      	sxth	r3, r3
 80057c2:	223f      	movs	r2, #63	@ 0x3f
 80057c4:	4013      	ands	r3, r2
 80057c6:	b21a      	sxth	r2, r3
 80057c8:	187b      	adds	r3, r7, r1
 80057ca:	2000      	movs	r0, #0
 80057cc:	5e1b      	ldrsh	r3, [r3, r0]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	b21a      	sxth	r2, r3
 80057d2:	187b      	adds	r3, r7, r1
 80057d4:	801a      	strh	r2, [r3, #0]
      if ( --bytes_left == 0 )
 80057d6:	210e      	movs	r1, #14
 80057d8:	187b      	adds	r3, r7, r1
 80057da:	187a      	adds	r2, r7, r1
 80057dc:	7812      	ldrb	r2, [r2, #0]
 80057de:	3a01      	subs	r2, #1
 80057e0:	701a      	strb	r2, [r3, #0]
 80057e2:	187b      	adds	r3, r7, r1
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d006      	beq.n	80057f8 <_UG_DecodeUTF8+0x14c>
  while(**str)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d000      	beq.n	80057f6 <_UG_DecodeUTF8+0x14a>
 80057f4:	e77b      	b.n	80056ee <_UG_DecodeUTF8+0x42>
 80057f6:	e000      	b.n	80057fa <_UG_DecodeUTF8+0x14e>
        break;
 80057f8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return encoding;
 80057fa:	230c      	movs	r3, #12
 80057fc:	18fb      	adds	r3, r7, r3
 80057fe:	881b      	ldrh	r3, [r3, #0]
}
 8005800:	0018      	movs	r0, r3
 8005802:	46bd      	mov	sp, r7
 8005804:	b004      	add	sp, #16
 8005806:	bd80      	pop	{r7, pc}

08005808 <_UG_GetCharData>:
#endif

/*
 *  Load char bitmap address into p, return the font width
 */
UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p){
 8005808:	b5b0      	push	{r4, r5, r7, lr}
 800580a:	b086      	sub	sp, #24
 800580c:	af00      	add	r7, sp, #0
 800580e:	0002      	movs	r2, r0
 8005810:	6039      	str	r1, [r7, #0]
 8005812:	1dbb      	adds	r3, r7, #6
 8005814:	801a      	strh	r2, [r3, #0]
  static UG_CHAR last_encoding;
  static UG_S16 last_width;
  static const UG_U8 * last_p;
  static UG_FONT * last_font;
  UG_U16 start=0;
 8005816:	2316      	movs	r3, #22
 8005818:	18fb      	adds	r3, r7, r3
 800581a:	2200      	movs	r2, #0
 800581c:	801a      	strh	r2, [r3, #0]
  UG_U16 skip=0;
 800581e:	2314      	movs	r3, #20
 8005820:	18fb      	adds	r3, r7, r3
 8005822:	2200      	movs	r2, #0
 8005824:	801a      	strh	r2, [r3, #0]
  UG_U16 t=0;
 8005826:	2312      	movs	r3, #18
 8005828:	18fb      	adds	r3, r7, r3
 800582a:	2200      	movs	r2, #0
 800582c:	801a      	strh	r2, [r3, #0]
  UG_U8 range=0;
 800582e:	2311      	movs	r3, #17
 8005830:	18fb      	adds	r3, r7, r3
 8005832:	2200      	movs	r2, #0
 8005834:	701a      	strb	r2, [r3, #0]
  UG_U8 found=0;
 8005836:	2310      	movs	r3, #16
 8005838:	18fb      	adds	r3, r7, r3
 800583a:	2200      	movs	r2, #0
 800583c:	701a      	strb	r2, [r3, #0]

  if( gui->currentFont.font==last_font && encoding==last_encoding){       // If called with the same arguments, return cached data
 800583e:	4b94      	ldr	r3, [pc, #592]	@ (8005a90 <_UG_GetCharData+0x288>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005844:	4b93      	ldr	r3, [pc, #588]	@ (8005a94 <_UG_GetCharData+0x28c>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	429a      	cmp	r2, r3
 800584a:	d110      	bne.n	800586e <_UG_GetCharData+0x66>
 800584c:	4b92      	ldr	r3, [pc, #584]	@ (8005a98 <_UG_GetCharData+0x290>)
 800584e:	881b      	ldrh	r3, [r3, #0]
 8005850:	1dba      	adds	r2, r7, #6
 8005852:	8812      	ldrh	r2, [r2, #0]
 8005854:	429a      	cmp	r2, r3
 8005856:	d10a      	bne.n	800586e <_UG_GetCharData+0x66>
    if(p){
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d003      	beq.n	8005866 <_UG_GetCharData+0x5e>
      *p=last_p;                                                    // Load char bitmap address
 800585e:	4b8f      	ldr	r3, [pc, #572]	@ (8005a9c <_UG_GetCharData+0x294>)
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	601a      	str	r2, [r3, #0]
    }
    return last_width;
 8005866:	4b8e      	ldr	r3, [pc, #568]	@ (8005aa0 <_UG_GetCharData+0x298>)
 8005868:	2200      	movs	r2, #0
 800586a:	5e9b      	ldrsh	r3, [r3, r2]
 800586c:	e10b      	b.n	8005a86 <_UG_GetCharData+0x27e>
  }

  if( gui->currentFont.is_old_font){                                      // Compatibility with old fonts charset
 800586e:	4b88      	ldr	r3, [pc, #544]	@ (8005a90 <_UG_GetCharData+0x288>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	222d      	movs	r2, #45	@ 0x2d
 8005874:	5c9b      	ldrb	r3, [r3, r2]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d100      	bne.n	800587c <_UG_GetCharData+0x74>
 800587a:	e0b8      	b.n	80059ee <_UG_GetCharData+0x1e6>
    switch ( encoding )
 800587c:	1dbb      	adds	r3, r7, #6
 800587e:	881b      	ldrh	r3, [r3, #0]
 8005880:	2bfc      	cmp	r3, #252	@ 0xfc
 8005882:	dd00      	ble.n	8005886 <_UG_GetCharData+0x7e>
 8005884:	e0b3      	b.n	80059ee <_UG_GetCharData+0x1e6>
 8005886:	2bd6      	cmp	r3, #214	@ 0xd6
 8005888:	da08      	bge.n	800589c <_UG_GetCharData+0x94>
 800588a:	2bc4      	cmp	r3, #196	@ 0xc4
 800588c:	d023      	beq.n	80058d6 <_UG_GetCharData+0xce>
 800588e:	dd00      	ble.n	8005892 <_UG_GetCharData+0x8a>
 8005890:	e0ad      	b.n	80059ee <_UG_GetCharData+0x1e6>
 8005892:	2bb0      	cmp	r3, #176	@ 0xb0
 8005894:	d027      	beq.n	80058e6 <_UG_GetCharData+0xde>
 8005896:	2bb5      	cmp	r3, #181	@ 0xb5
 8005898:	d021      	beq.n	80058de <_UG_GetCharData+0xd6>
 800589a:	e028      	b.n	80058ee <_UG_GetCharData+0xe6>
 800589c:	3bd6      	subs	r3, #214	@ 0xd6
 800589e:	2b26      	cmp	r3, #38	@ 0x26
 80058a0:	d900      	bls.n	80058a4 <_UG_GetCharData+0x9c>
 80058a2:	e0a4      	b.n	80059ee <_UG_GetCharData+0x1e6>
 80058a4:	009a      	lsls	r2, r3, #2
 80058a6:	4b7f      	ldr	r3, [pc, #508]	@ (8005aa4 <_UG_GetCharData+0x29c>)
 80058a8:	18d3      	adds	r3, r2, r3
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	469f      	mov	pc, r3
    {
       case 0xF6: encoding = 0x94; break; // ö
 80058ae:	1dbb      	adds	r3, r7, #6
 80058b0:	2294      	movs	r2, #148	@ 0x94
 80058b2:	801a      	strh	r2, [r3, #0]
 80058b4:	e01b      	b.n	80058ee <_UG_GetCharData+0xe6>
       case 0xD6: encoding = 0x99; break; // Ö
 80058b6:	1dbb      	adds	r3, r7, #6
 80058b8:	2299      	movs	r2, #153	@ 0x99
 80058ba:	801a      	strh	r2, [r3, #0]
 80058bc:	e017      	b.n	80058ee <_UG_GetCharData+0xe6>
       case 0xFC: encoding = 0x81; break; // ü
 80058be:	1dbb      	adds	r3, r7, #6
 80058c0:	2281      	movs	r2, #129	@ 0x81
 80058c2:	801a      	strh	r2, [r3, #0]
 80058c4:	e013      	b.n	80058ee <_UG_GetCharData+0xe6>
       case 0xDC: encoding = 0x9A; break; // Ü
 80058c6:	1dbb      	adds	r3, r7, #6
 80058c8:	229a      	movs	r2, #154	@ 0x9a
 80058ca:	801a      	strh	r2, [r3, #0]
 80058cc:	e00f      	b.n	80058ee <_UG_GetCharData+0xe6>
       case 0xE4: encoding = 0x84; break; // ä
 80058ce:	1dbb      	adds	r3, r7, #6
 80058d0:	2284      	movs	r2, #132	@ 0x84
 80058d2:	801a      	strh	r2, [r3, #0]
 80058d4:	e00b      	b.n	80058ee <_UG_GetCharData+0xe6>
       case 0xC4: encoding = 0x8E; break; // Ä
 80058d6:	1dbb      	adds	r3, r7, #6
 80058d8:	228e      	movs	r2, #142	@ 0x8e
 80058da:	801a      	strh	r2, [r3, #0]
 80058dc:	e007      	b.n	80058ee <_UG_GetCharData+0xe6>
       case 0xB5: encoding = 0xE6; break; // µ
 80058de:	1dbb      	adds	r3, r7, #6
 80058e0:	22e6      	movs	r2, #230	@ 0xe6
 80058e2:	801a      	strh	r2, [r3, #0]
 80058e4:	e003      	b.n	80058ee <_UG_GetCharData+0xe6>
       case 0xB0: encoding = 0xF8; break; // °
 80058e6:	1dbb      	adds	r3, r7, #6
 80058e8:	22f8      	movs	r2, #248	@ 0xf8
 80058ea:	801a      	strh	r2, [r3, #0]
 80058ec:	46c0      	nop			@ (mov r8, r8)
    }
  }

  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 80058ee:	e07e      	b.n	80059ee <_UG_GetCharData+0x1e6>
  {
    UG_U16 curr_offset = ptr_8to16( gui->currentFont.offsets+(t*2));    // Offsets are 16-bit, splitted in 2 byte values
 80058f0:	4b67      	ldr	r3, [pc, #412]	@ (8005a90 <_UG_GetCharData+0x288>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058f6:	2212      	movs	r2, #18
 80058f8:	18ba      	adds	r2, r7, r2
 80058fa:	8812      	ldrh	r2, [r2, #0]
 80058fc:	0052      	lsls	r2, r2, #1
 80058fe:	189b      	adds	r3, r3, r2
 8005900:	250e      	movs	r5, #14
 8005902:	197c      	adds	r4, r7, r5
 8005904:	0018      	movs	r0, r3
 8005906:	f7ff facb 	bl	8004ea0 <ptr_8to16>
 800590a:	0003      	movs	r3, r0
 800590c:	8023      	strh	r3, [r4, #0]

    if(curr_offset&0x8000)                                          // If the offset has the MSB bit set, it means it's the a range start
 800590e:	002a      	movs	r2, r5
 8005910:	18bb      	adds	r3, r7, r2
 8005912:	2100      	movs	r1, #0
 8005914:	5e5b      	ldrsh	r3, [r3, r1]
 8005916:	2b00      	cmp	r3, #0
 8005918:	da0b      	bge.n	8005932 <_UG_GetCharData+0x12a>
    {
      start=curr_offset&0x7FFF;                                     // Store range start
 800591a:	2316      	movs	r3, #22
 800591c:	18fb      	adds	r3, r7, r3
 800591e:	18ba      	adds	r2, r7, r2
 8005920:	8812      	ldrh	r2, [r2, #0]
 8005922:	0452      	lsls	r2, r2, #17
 8005924:	0c52      	lsrs	r2, r2, #17
 8005926:	801a      	strh	r2, [r3, #0]
      range=1;                                                      // Set flag
 8005928:	2311      	movs	r3, #17
 800592a:	18fb      	adds	r3, r7, r3
 800592c:	2201      	movs	r2, #1
 800592e:	701a      	strb	r2, [r3, #0]
 8005930:	e057      	b.n	80059e2 <_UG_GetCharData+0x1da>
    }
    else if(range)                                                  // If range previously set, this is the range end
 8005932:	2311      	movs	r3, #17
 8005934:	18fb      	adds	r3, r7, r3
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d039      	beq.n	80059b0 <_UG_GetCharData+0x1a8>
    {
      if(encoding>=start && encoding<=curr_offset)            // If the encoding is between the range
 800593c:	1dba      	adds	r2, r7, #6
 800593e:	2116      	movs	r1, #22
 8005940:	187b      	adds	r3, r7, r1
 8005942:	8812      	ldrh	r2, [r2, #0]
 8005944:	881b      	ldrh	r3, [r3, #0]
 8005946:	429a      	cmp	r2, r3
 8005948:	d317      	bcc.n	800597a <_UG_GetCharData+0x172>
 800594a:	1dba      	adds	r2, r7, #6
 800594c:	230e      	movs	r3, #14
 800594e:	18fb      	adds	r3, r7, r3
 8005950:	8812      	ldrh	r2, [r2, #0]
 8005952:	881b      	ldrh	r3, [r3, #0]
 8005954:	429a      	cmp	r2, r3
 8005956:	d810      	bhi.n	800597a <_UG_GetCharData+0x172>
      {
        skip += (encoding-start);                             // Calculate the skip value
 8005958:	1dba      	adds	r2, r7, #6
 800595a:	187b      	adds	r3, r7, r1
 800595c:	8812      	ldrh	r2, [r2, #0]
 800595e:	881b      	ldrh	r3, [r3, #0]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	b299      	uxth	r1, r3
 8005964:	2214      	movs	r2, #20
 8005966:	18bb      	adds	r3, r7, r2
 8005968:	18ba      	adds	r2, r7, r2
 800596a:	8812      	ldrh	r2, [r2, #0]
 800596c:	188a      	adds	r2, r1, r2
 800596e:	801a      	strh	r2, [r3, #0]
        found=1;
 8005970:	2310      	movs	r3, #16
 8005972:	18fb      	adds	r3, r7, r3
 8005974:	2201      	movs	r2, #1
 8005976:	701a      	strb	r2, [r3, #0]
        break;
 8005978:	e046      	b.n	8005a08 <_UG_GetCharData+0x200>
      }
      else if(encoding<start)                                 // If the encoding is lower than current range start, the char is not in the font
 800597a:	1dba      	adds	r2, r7, #6
 800597c:	2116      	movs	r1, #22
 800597e:	187b      	adds	r3, r7, r1
 8005980:	8812      	ldrh	r2, [r2, #0]
 8005982:	881b      	ldrh	r3, [r3, #0]
 8005984:	429a      	cmp	r2, r3
 8005986:	d33c      	bcc.n	8005a02 <_UG_GetCharData+0x1fa>
        break;

      skip += ((curr_offset-start)+1);                        // Encoding not found in the current range, increase skip size and clear range flasg
 8005988:	230e      	movs	r3, #14
 800598a:	18fa      	adds	r2, r7, r3
 800598c:	187b      	adds	r3, r7, r1
 800598e:	8812      	ldrh	r2, [r2, #0]
 8005990:	881b      	ldrh	r3, [r3, #0]
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	b29a      	uxth	r2, r3
 8005996:	2114      	movs	r1, #20
 8005998:	187b      	adds	r3, r7, r1
 800599a:	881b      	ldrh	r3, [r3, #0]
 800599c:	18d3      	adds	r3, r2, r3
 800599e:	b29a      	uxth	r2, r3
 80059a0:	187b      	adds	r3, r7, r1
 80059a2:	3201      	adds	r2, #1
 80059a4:	801a      	strh	r2, [r3, #0]
      range=0;
 80059a6:	2311      	movs	r3, #17
 80059a8:	18fb      	adds	r3, r7, r3
 80059aa:	2200      	movs	r2, #0
 80059ac:	701a      	strb	r2, [r3, #0]
 80059ae:	e018      	b.n	80059e2 <_UG_GetCharData+0x1da>
    }
    else                                                            // Range not set, this is a single char offset
    {
      if(encoding==curr_offset)                                     // If matching the current offset char
 80059b0:	1dba      	adds	r2, r7, #6
 80059b2:	230e      	movs	r3, #14
 80059b4:	18fb      	adds	r3, r7, r3
 80059b6:	8812      	ldrh	r2, [r2, #0]
 80059b8:	881b      	ldrh	r3, [r3, #0]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d104      	bne.n	80059c8 <_UG_GetCharData+0x1c0>
      {
        found=1;
 80059be:	2310      	movs	r3, #16
 80059c0:	18fb      	adds	r3, r7, r3
 80059c2:	2201      	movs	r2, #1
 80059c4:	701a      	strb	r2, [r3, #0]
        break;
 80059c6:	e01f      	b.n	8005a08 <_UG_GetCharData+0x200>
      }
      else if (encoding<curr_offset)                                // If the encoding is lower than current range, the char is not in the font
 80059c8:	1dba      	adds	r2, r7, #6
 80059ca:	230e      	movs	r3, #14
 80059cc:	18fb      	adds	r3, r7, r3
 80059ce:	8812      	ldrh	r2, [r2, #0]
 80059d0:	881b      	ldrh	r3, [r3, #0]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d317      	bcc.n	8005a06 <_UG_GetCharData+0x1fe>
      {
        break;
      }
      skip++;                                                       // Else, increase skip and keep searching
 80059d6:	2114      	movs	r1, #20
 80059d8:	187b      	adds	r3, r7, r1
 80059da:	881a      	ldrh	r2, [r3, #0]
 80059dc:	187b      	adds	r3, r7, r1
 80059de:	3201      	adds	r2, #1
 80059e0:	801a      	strh	r2, [r3, #0]
  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 80059e2:	2112      	movs	r1, #18
 80059e4:	187b      	adds	r3, r7, r1
 80059e6:	881a      	ldrh	r2, [r3, #0]
 80059e8:	187b      	adds	r3, r7, r1
 80059ea:	3201      	adds	r2, #1
 80059ec:	801a      	strh	r2, [r3, #0]
 80059ee:	4b28      	ldr	r3, [pc, #160]	@ (8005a90 <_UG_GetCharData+0x288>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80059f4:	2212      	movs	r2, #18
 80059f6:	18ba      	adds	r2, r7, r2
 80059f8:	8812      	ldrh	r2, [r2, #0]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d200      	bcs.n	8005a00 <_UG_GetCharData+0x1f8>
 80059fe:	e777      	b.n	80058f0 <_UG_GetCharData+0xe8>
 8005a00:	e002      	b.n	8005a08 <_UG_GetCharData+0x200>
        break;
 8005a02:	46c0      	nop			@ (mov r8, r8)
 8005a04:	e000      	b.n	8005a08 <_UG_GetCharData+0x200>
        break;
 8005a06:	46c0      	nop			@ (mov r8, r8)
    }
  }

  if(found)                                                         // If char found
 8005a08:	2310      	movs	r3, #16
 8005a0a:	18fb      	adds	r3, r7, r3
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d037      	beq.n	8005a82 <_UG_GetCharData+0x27a>
  {
    last_font =  gui->currentFont.font;                                     // Update cached data
 8005a12:	4b1f      	ldr	r3, [pc, #124]	@ (8005a90 <_UG_GetCharData+0x288>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a18:	4b1e      	ldr	r3, [pc, #120]	@ (8005a94 <_UG_GetCharData+0x28c>)
 8005a1a:	601a      	str	r2, [r3, #0]
    last_encoding = encoding;
 8005a1c:	4b1e      	ldr	r3, [pc, #120]	@ (8005a98 <_UG_GetCharData+0x290>)
 8005a1e:	1dba      	adds	r2, r7, #6
 8005a20:	8812      	ldrh	r2, [r2, #0]
 8005a22:	801a      	strh	r2, [r3, #0]
    last_p = ( gui->currentFont.data+(skip* gui->currentFont.bytes_per_char));
 8005a24:	4b1a      	ldr	r3, [pc, #104]	@ (8005a90 <_UG_GetCharData+0x288>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a2a:	2014      	movs	r0, #20
 8005a2c:	183b      	adds	r3, r7, r0
 8005a2e:	8819      	ldrh	r1, [r3, #0]
 8005a30:	4b17      	ldr	r3, [pc, #92]	@ (8005a90 <_UG_GetCharData+0x288>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8005a36:	434b      	muls	r3, r1
 8005a38:	18d2      	adds	r2, r2, r3
 8005a3a:	4b18      	ldr	r3, [pc, #96]	@ (8005a9c <_UG_GetCharData+0x294>)
 8005a3c:	601a      	str	r2, [r3, #0]
    if( gui->currentFont.widths){                                                // If width table available
 8005a3e:	4b14      	ldr	r3, [pc, #80]	@ (8005a90 <_UG_GetCharData+0x288>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d00a      	beq.n	8005a5e <_UG_GetCharData+0x256>
      last_width = *( gui->currentFont.widths+skip);                        // Use width from table
 8005a48:	4b11      	ldr	r3, [pc, #68]	@ (8005a90 <_UG_GetCharData+0x288>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a4e:	183b      	adds	r3, r7, r0
 8005a50:	881b      	ldrh	r3, [r3, #0]
 8005a52:	18d3      	adds	r3, r2, r3
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	b21a      	sxth	r2, r3
 8005a58:	4b11      	ldr	r3, [pc, #68]	@ (8005aa0 <_UG_GetCharData+0x298>)
 8005a5a:	801a      	strh	r2, [r3, #0]
 8005a5c:	e006      	b.n	8005a6c <_UG_GetCharData+0x264>
    }
    else{
      last_width =  gui->currentFont.char_width;                            // Else use width from char width
 8005a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8005a90 <_UG_GetCharData+0x288>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	222e      	movs	r2, #46	@ 0x2e
 8005a64:	5c9b      	ldrb	r3, [r3, r2]
 8005a66:	b21a      	sxth	r2, r3
 8005a68:	4b0d      	ldr	r3, [pc, #52]	@ (8005aa0 <_UG_GetCharData+0x298>)
 8005a6a:	801a      	strh	r2, [r3, #0]
    }


    if(p){
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d003      	beq.n	8005a7a <_UG_GetCharData+0x272>
      *p=last_p;                                                    // Load char bitmap address
 8005a72:	4b0a      	ldr	r3, [pc, #40]	@ (8005a9c <_UG_GetCharData+0x294>)
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	601a      	str	r2, [r3, #0]
    }
    return(last_width);                                             // Return char width
 8005a7a:	4b09      	ldr	r3, [pc, #36]	@ (8005aa0 <_UG_GetCharData+0x298>)
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	5e9b      	ldrsh	r3, [r3, r2]
 8005a80:	e001      	b.n	8005a86 <_UG_GetCharData+0x27e>
  }
  return -1;                                                        // -1 = char not found
 8005a82:	2301      	movs	r3, #1
 8005a84:	425b      	negs	r3, r3
}
 8005a86:	0018      	movs	r0, r3
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	b006      	add	sp, #24
 8005a8c:	bdb0      	pop	{r4, r5, r7, pc}
 8005a8e:	46c0      	nop			@ (mov r8, r8)
 8005a90:	200002f8 	.word	0x200002f8
 8005a94:	200002fc 	.word	0x200002fc
 8005a98:	20000300 	.word	0x20000300
 8005a9c:	20000304 	.word	0x20000304
 8005aa0:	20000308 	.word	0x20000308
 8005aa4:	0800d0e8 	.word	0x0800d0e8

08005aa8 <_UG_FontSelect>:

/*
 * Updates the current font data
 */
void _UG_FontSelect( UG_FONT *font){
 8005aa8:	b590      	push	{r4, r7, lr}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  if( gui->currentFont.font==font)
 8005ab0:	4b3e      	ldr	r3, [pc, #248]	@ (8005bac <_UG_FontSelect+0x104>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d073      	beq.n	8005ba4 <_UG_FontSelect+0xfc>
    return;
   gui->currentFont.font = font;                          // Save Font pointer
 8005abc:	4b3b      	ldr	r3, [pc, #236]	@ (8005bac <_UG_FontSelect+0x104>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	645a      	str	r2, [r3, #68]	@ 0x44
   gui->currentFont.font_type = 0x7F & *font;             // Byte    0: Font_type
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	781a      	ldrb	r2, [r3, #0]
 8005ac8:	4b38      	ldr	r3, [pc, #224]	@ (8005bac <_UG_FontSelect+0x104>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	217f      	movs	r1, #127	@ 0x7f
 8005ace:	400a      	ands	r2, r1
 8005ad0:	b2d1      	uxtb	r1, r2
 8005ad2:	222c      	movs	r2, #44	@ 0x2c
 8005ad4:	5499      	strb	r1, [r3, r2]
   gui->currentFont.is_old_font = (0x80 & *font++)&&1;    // Byte    0: Bit 7 indicates old or new font type. 1=old font, 0=new font
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	1c5a      	adds	r2, r3, #1
 8005ada:	607a      	str	r2, [r7, #4]
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	b25b      	sxtb	r3, r3
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	da01      	bge.n	8005ae8 <_UG_FontSelect+0x40>
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	e000      	b.n	8005aea <_UG_FontSelect+0x42>
 8005ae8:	2200      	movs	r2, #0
 8005aea:	4b30      	ldr	r3, [pc, #192]	@ (8005bac <_UG_FontSelect+0x104>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	b2d1      	uxtb	r1, r2
 8005af0:	222d      	movs	r2, #45	@ 0x2d
 8005af2:	5499      	strb	r1, [r3, r2]
   gui->currentFont.char_width = *font++;                 // Byte    1: Char width
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	1c5a      	adds	r2, r3, #1
 8005af8:	607a      	str	r2, [r7, #4]
 8005afa:	4a2c      	ldr	r2, [pc, #176]	@ (8005bac <_UG_FontSelect+0x104>)
 8005afc:	6812      	ldr	r2, [r2, #0]
 8005afe:	7819      	ldrb	r1, [r3, #0]
 8005b00:	232e      	movs	r3, #46	@ 0x2e
 8005b02:	54d1      	strb	r1, [r2, r3]
   gui->currentFont.char_height = *font++;                // Byte    2: Char height
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	1c5a      	adds	r2, r3, #1
 8005b08:	607a      	str	r2, [r7, #4]
 8005b0a:	4a28      	ldr	r2, [pc, #160]	@ (8005bac <_UG_FontSelect+0x104>)
 8005b0c:	6812      	ldr	r2, [r2, #0]
 8005b0e:	7819      	ldrb	r1, [r3, #0]
 8005b10:	232f      	movs	r3, #47	@ 0x2f
 8005b12:	54d1      	strb	r1, [r2, r3]
   gui->currentFont.number_of_chars = ptr_8to16(font);    // Bytes 3+4: Number of chars
 8005b14:	4b25      	ldr	r3, [pc, #148]	@ (8005bac <_UG_FontSelect+0x104>)
 8005b16:	681c      	ldr	r4, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	0018      	movs	r0, r3
 8005b1c:	f7ff f9c0 	bl	8004ea0 <ptr_8to16>
 8005b20:	0003      	movs	r3, r0
 8005b22:	8663      	strh	r3, [r4, #50]	@ 0x32
  font+=2;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	3302      	adds	r3, #2
 8005b28:	607b      	str	r3, [r7, #4]
   gui->currentFont.number_of_offsets = ptr_8to16(font);  // Bytes 5+6: Number of offsets
 8005b2a:	4b20      	ldr	r3, [pc, #128]	@ (8005bac <_UG_FontSelect+0x104>)
 8005b2c:	681c      	ldr	r4, [r3, #0]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	0018      	movs	r0, r3
 8005b32:	f7ff f9b5 	bl	8004ea0 <ptr_8to16>
 8005b36:	0003      	movs	r3, r0
 8005b38:	86a3      	strh	r3, [r4, #52]	@ 0x34
  font+=2;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	3302      	adds	r3, #2
 8005b3e:	607b      	str	r3, [r7, #4]
   gui->currentFont.bytes_per_char = ptr_8to16(font);     // Bytes 7+8: Bytes per char
 8005b40:	4b1a      	ldr	r3, [pc, #104]	@ (8005bac <_UG_FontSelect+0x104>)
 8005b42:	681c      	ldr	r4, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	0018      	movs	r0, r3
 8005b48:	f7ff f9aa 	bl	8004ea0 <ptr_8to16>
 8005b4c:	0003      	movs	r3, r0
 8005b4e:	8623      	strh	r3, [r4, #48]	@ 0x30
  font+=2;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	3302      	adds	r3, #2
 8005b54:	607b      	str	r3, [r7, #4]
  if(*font++){                                    // Byte 9: 1=Width table present, 0=not present
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	1c5a      	adds	r2, r3, #1
 8005b5a:	607a      	str	r2, [r7, #4]
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00b      	beq.n	8005b7a <_UG_FontSelect+0xd2>
     gui->currentFont.widths = font;                      // Save pointer to width table
 8005b62:	4b12      	ldr	r3, [pc, #72]	@ (8005bac <_UG_FontSelect+0x104>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	639a      	str	r2, [r3, #56]	@ 0x38
    font+= gui->currentFont.number_of_chars;              // Increase number of chars
 8005b6a:	4b10      	ldr	r3, [pc, #64]	@ (8005bac <_UG_FontSelect+0x104>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005b70:	001a      	movs	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	189b      	adds	r3, r3, r2
 8005b76:	607b      	str	r3, [r7, #4]
 8005b78:	e003      	b.n	8005b82 <_UG_FontSelect+0xda>
  }
  else{
     gui->currentFont.widths = NULL;                      // No width table
 8005b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8005bac <_UG_FontSelect+0x104>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	639a      	str	r2, [r3, #56]	@ 0x38
  }
   gui->currentFont.offsets = font;                       // Save pointer to offset table
 8005b82:	4b0a      	ldr	r3, [pc, #40]	@ (8005bac <_UG_FontSelect+0x104>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	63da      	str	r2, [r3, #60]	@ 0x3c
  font += ( gui->currentFont.number_of_offsets*2);        // Increase pointer by number of offsets*2 (2-byte values)
 8005b8a:	4b08      	ldr	r3, [pc, #32]	@ (8005bac <_UG_FontSelect+0x104>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8005b90:	005b      	lsls	r3, r3, #1
 8005b92:	001a      	movs	r2, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	189b      	adds	r3, r3, r2
 8005b98:	607b      	str	r3, [r7, #4]
   gui->currentFont.data = font;                          // Save pointer to bitmap data
 8005b9a:	4b04      	ldr	r3, [pc, #16]	@ (8005bac <_UG_FontSelect+0x104>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	641a      	str	r2, [r3, #64]	@ 0x40
 8005ba2:	e000      	b.n	8005ba6 <_UG_FontSelect+0xfe>
    return;
 8005ba4:	46c0      	nop			@ (mov r8, r8)
}
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	b003      	add	sp, #12
 8005baa:	bd90      	pop	{r4, r7, pc}
 8005bac:	200002f8 	.word	0x200002f8

08005bb0 <_UG_PutChar>:

UG_S16 _UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc)
{
 8005bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bb2:	46c6      	mov	lr, r8
 8005bb4:	b500      	push	{lr}
 8005bb6:	b08c      	sub	sp, #48	@ 0x30
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	0005      	movs	r5, r0
 8005bbc:	000c      	movs	r4, r1
 8005bbe:	0010      	movs	r0, r2
 8005bc0:	0019      	movs	r1, r3
 8005bc2:	1dbb      	adds	r3, r7, #6
 8005bc4:	1c2a      	adds	r2, r5, #0
 8005bc6:	801a      	strh	r2, [r3, #0]
 8005bc8:	1d3b      	adds	r3, r7, #4
 8005bca:	1c22      	adds	r2, r4, #0
 8005bcc:	801a      	strh	r2, [r3, #0]
 8005bce:	1cbb      	adds	r3, r7, #2
 8005bd0:	1c02      	adds	r2, r0, #0
 8005bd2:	801a      	strh	r2, [r3, #0]
 8005bd4:	003b      	movs	r3, r7
 8005bd6:	1c0a      	adds	r2, r1, #0
 8005bd8:	801a      	strh	r2, [r3, #0]
   UG_U16 x0=0,y0=0,i,j,k,bn,fpixels=0,bpixels=0;
 8005bda:	232e      	movs	r3, #46	@ 0x2e
 8005bdc:	18fb      	adds	r3, r7, r3
 8005bde:	2200      	movs	r2, #0
 8005be0:	801a      	strh	r2, [r3, #0]
 8005be2:	232c      	movs	r3, #44	@ 0x2c
 8005be4:	18fb      	adds	r3, r7, r3
 8005be6:	2200      	movs	r2, #0
 8005be8:	801a      	strh	r2, [r3, #0]
 8005bea:	2322      	movs	r3, #34	@ 0x22
 8005bec:	18fb      	adds	r3, r7, r3
 8005bee:	2200      	movs	r2, #0
 8005bf0:	801a      	strh	r2, [r3, #0]
 8005bf2:	2320      	movs	r3, #32
 8005bf4:	18fb      	adds	r3, r7, r3
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	801a      	strh	r2, [r3, #0]
   UG_S16 c;
   UG_U8 b,trans=gui->transparent_font,driver=(gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED);
 8005bfa:	4bd3      	ldr	r3, [pc, #844]	@ (8005f48 <_UG_PutChar+0x398>)
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	2317      	movs	r3, #23
 8005c00:	18fb      	adds	r3, r7, r3
 8005c02:	2148      	movs	r1, #72	@ 0x48
 8005c04:	5c52      	ldrb	r2, [r2, r1]
 8005c06:	701a      	strb	r2, [r3, #0]
 8005c08:	4bcf      	ldr	r3, [pc, #828]	@ (8005f48 <_UG_PutChar+0x398>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2268      	movs	r2, #104	@ 0x68
 8005c0e:	5c9a      	ldrb	r2, [r3, r2]
 8005c10:	2316      	movs	r3, #22
 8005c12:	18fb      	adds	r3, r7, r3
 8005c14:	2102      	movs	r1, #2
 8005c16:	400a      	ands	r2, r1
 8005c18:	701a      	strb	r2, [r3, #0]
   const UG_U8 * data;                              // Pointer to current char bitmap
   UG_COLOR color;
   void(*push_pixels)(UG_U16, UG_COLOR) = NULL;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	61bb      	str	r3, [r7, #24]

   UG_S16 actual_char_width = _UG_GetCharData(chr, &data);
 8005c1e:	2514      	movs	r5, #20
 8005c20:	197c      	adds	r4, r7, r5
 8005c22:	2308      	movs	r3, #8
 8005c24:	18fa      	adds	r2, r7, r3
 8005c26:	1dbb      	adds	r3, r7, #6
 8005c28:	881b      	ldrh	r3, [r3, #0]
 8005c2a:	0011      	movs	r1, r2
 8005c2c:	0018      	movs	r0, r3
 8005c2e:	f7ff fdeb 	bl	8005808 <_UG_GetCharData>
 8005c32:	0003      	movs	r3, r0
 8005c34:	8023      	strh	r3, [r4, #0]
   if(actual_char_width==-1)
 8005c36:	197b      	adds	r3, r7, r5
 8005c38:	2200      	movs	r2, #0
 8005c3a:	5e9b      	ldrsh	r3, [r3, r2]
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	d102      	bne.n	8005c46 <_UG_PutChar+0x96>
        return -1;                                     // Char not presnt in the font
 8005c40:	2301      	movs	r3, #1
 8005c42:	425b      	negs	r3, r3
 8005c44:	e34d      	b.n	80062e2 <_UG_PutChar+0x732>

   bn =  gui->currentFont.char_width;
 8005c46:	4bc0      	ldr	r3, [pc, #768]	@ (8005f48 <_UG_PutChar+0x398>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	222e      	movs	r2, #46	@ 0x2e
 8005c4c:	5c9a      	ldrb	r2, [r3, r2]
 8005c4e:	2124      	movs	r1, #36	@ 0x24
 8005c50:	187b      	adds	r3, r7, r1
 8005c52:	801a      	strh	r2, [r3, #0]
   if ( !bn ){
 8005c54:	187b      	adds	r3, r7, r1
 8005c56:	881b      	ldrh	r3, [r3, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d101      	bne.n	8005c60 <_UG_PutChar+0xb0>
     return 0;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	e340      	b.n	80062e2 <_UG_PutChar+0x732>
   }
   bn >>= 3;
 8005c60:	2124      	movs	r1, #36	@ 0x24
 8005c62:	187b      	adds	r3, r7, r1
 8005c64:	187a      	adds	r2, r7, r1
 8005c66:	8812      	ldrh	r2, [r2, #0]
 8005c68:	08d2      	lsrs	r2, r2, #3
 8005c6a:	801a      	strh	r2, [r3, #0]
   if (  gui->currentFont.char_width % 8 ) bn++;
 8005c6c:	4bb6      	ldr	r3, [pc, #728]	@ (8005f48 <_UG_PutChar+0x398>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	222e      	movs	r2, #46	@ 0x2e
 8005c72:	5c9b      	ldrb	r3, [r3, r2]
 8005c74:	2207      	movs	r2, #7
 8005c76:	4013      	ands	r3, r2
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d004      	beq.n	8005c88 <_UG_PutChar+0xd8>
 8005c7e:	187b      	adds	r3, r7, r1
 8005c80:	881a      	ldrh	r2, [r3, #0]
 8005c82:	187b      	adds	r3, r7, r1
 8005c84:	3201      	adds	r2, #1
 8005c86:	801a      	strh	r2, [r3, #0]

   /* Is hardware acceleration available? */
   if (driver)
 8005c88:	2316      	movs	r3, #22
 8005c8a:	18fb      	adds	r3, r7, r3
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d023      	beq.n	8005cda <_UG_PutChar+0x12a>
   {
     push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+ gui->currentFont.char_height-1);
 8005c92:	4bad      	ldr	r3, [pc, #692]	@ (8005f48 <_UG_PutChar+0x398>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c98:	001d      	movs	r5, r3
 8005c9a:	1d3b      	adds	r3, r7, #4
 8005c9c:	881a      	ldrh	r2, [r3, #0]
 8005c9e:	2314      	movs	r3, #20
 8005ca0:	18fb      	adds	r3, r7, r3
 8005ca2:	881b      	ldrh	r3, [r3, #0]
 8005ca4:	18d3      	adds	r3, r2, r3
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	b21a      	sxth	r2, r3
 8005cae:	4ba6      	ldr	r3, [pc, #664]	@ (8005f48 <_UG_PutChar+0x398>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	212f      	movs	r1, #47	@ 0x2f
 8005cb4:	5c5b      	ldrb	r3, [r3, r1]
 8005cb6:	0019      	movs	r1, r3
 8005cb8:	1cbb      	adds	r3, r7, #2
 8005cba:	881b      	ldrh	r3, [r3, #0]
 8005cbc:	18cb      	adds	r3, r1, r3
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	b21c      	sxth	r4, r3
 8005cc6:	1cbb      	adds	r3, r7, #2
 8005cc8:	2100      	movs	r1, #0
 8005cca:	5e59      	ldrsh	r1, [r3, r1]
 8005ccc:	1d3b      	adds	r3, r7, #4
 8005cce:	2000      	movs	r0, #0
 8005cd0:	5e18      	ldrsh	r0, [r3, r0]
 8005cd2:	0023      	movs	r3, r4
 8005cd4:	47a8      	blx	r5
 8005cd6:	0003      	movs	r3, r0
 8005cd8:	61bb      	str	r3, [r7, #24]
   }

   if ( gui->currentFont.font_type == FONT_TYPE_1BPP)
 8005cda:	4b9b      	ldr	r3, [pc, #620]	@ (8005f48 <_UG_PutChar+0x398>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	222c      	movs	r2, #44	@ 0x2c
 8005ce0:	5c9b      	ldrb	r3, [r3, r2]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d000      	beq.n	8005ce8 <_UG_PutChar+0x138>
 8005ce6:	e256      	b.n	8006196 <_UG_PutChar+0x5e6>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8005ce8:	2328      	movs	r3, #40	@ 0x28
 8005cea:	18fb      	adds	r3, r7, r3
 8005cec:	2200      	movs	r2, #0
 8005cee:	801a      	strh	r2, [r3, #0]
 8005cf0:	e184      	b.n	8005ffc <_UG_PutChar+0x44c>
     {
       c=0;
 8005cf2:	231e      	movs	r3, #30
 8005cf4:	18fb      	adds	r3, r7, r3
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	801a      	strh	r2, [r3, #0]
       for( i=0;i<bn;i++ )
 8005cfa:	232a      	movs	r3, #42	@ 0x2a
 8005cfc:	18fb      	adds	r3, r7, r3
 8005cfe:	2200      	movs	r2, #0
 8005d00:	801a      	strh	r2, [r3, #0]
 8005d02:	e16c      	b.n	8005fde <_UG_PutChar+0x42e>
       {
         b = *data++;
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	1c5a      	adds	r2, r3, #1
 8005d08:	60ba      	str	r2, [r7, #8]
 8005d0a:	221d      	movs	r2, #29
 8005d0c:	18ba      	adds	r2, r7, r2
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	7013      	strb	r3, [r2, #0]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8005d12:	2326      	movs	r3, #38	@ 0x26
 8005d14:	18fb      	adds	r3, r7, r3
 8005d16:	2200      	movs	r2, #0
 8005d18:	801a      	strh	r2, [r3, #0]
 8005d1a:	e14a      	b.n	8005fb2 <_UG_PutChar+0x402>
         {
           if(b & 0x01 )                    // Foreground pixel detected
 8005d1c:	231d      	movs	r3, #29
 8005d1e:	18fb      	adds	r3, r7, r3
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	2201      	movs	r2, #1
 8005d24:	4013      	ands	r3, r2
 8005d26:	d055      	beq.n	8005dd4 <_UG_PutChar+0x224>
           {
             if(driver)
 8005d28:	2316      	movs	r3, #22
 8005d2a:	18fb      	adds	r3, r7, r3
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d038      	beq.n	8005da4 <_UG_PutChar+0x1f4>
             {                              // Accelerated output
               if(bpixels && !trans)        // Draw accumulated background pixels, only if transparent mode disabled
 8005d32:	2220      	movs	r2, #32
 8005d34:	18bb      	adds	r3, r7, r2
 8005d36:	881b      	ldrh	r3, [r3, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d010      	beq.n	8005d5e <_UG_PutChar+0x1ae>
 8005d3c:	2317      	movs	r3, #23
 8005d3e:	18fb      	adds	r3, r7, r3
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d10b      	bne.n	8005d5e <_UG_PutChar+0x1ae>
               {
                 push_pixels(bpixels,bc);   // Drawing accumulated pixels removes a lot of overhead, drawing speed is at least 3x faster
 8005d46:	2348      	movs	r3, #72	@ 0x48
 8005d48:	18fb      	adds	r3, r7, r3
 8005d4a:	8819      	ldrh	r1, [r3, #0]
 8005d4c:	0014      	movs	r4, r2
 8005d4e:	18bb      	adds	r3, r7, r2
 8005d50:	881a      	ldrh	r2, [r3, #0]
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	0010      	movs	r0, r2
 8005d56:	4798      	blx	r3
                 bpixels=0;
 8005d58:	193b      	adds	r3, r7, r4
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	801a      	strh	r2, [r3, #0]
               }
               if(!fpixels && trans)        // Store first foreground pixel position for transparent drawing
 8005d5e:	2322      	movs	r3, #34	@ 0x22
 8005d60:	18fb      	adds	r3, r7, r3
 8005d62:	881b      	ldrh	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d116      	bne.n	8005d96 <_UG_PutChar+0x1e6>
 8005d68:	2317      	movs	r3, #23
 8005d6a:	18fb      	adds	r3, r7, r3
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d011      	beq.n	8005d96 <_UG_PutChar+0x1e6>
               {
                 x0=x+c;
 8005d72:	1d3b      	adds	r3, r7, #4
 8005d74:	8819      	ldrh	r1, [r3, #0]
 8005d76:	231e      	movs	r3, #30
 8005d78:	18fb      	adds	r3, r7, r3
 8005d7a:	881a      	ldrh	r2, [r3, #0]
 8005d7c:	232e      	movs	r3, #46	@ 0x2e
 8005d7e:	18fb      	adds	r3, r7, r3
 8005d80:	188a      	adds	r2, r1, r2
 8005d82:	801a      	strh	r2, [r3, #0]
                 y0=y+j;
 8005d84:	1cbb      	adds	r3, r7, #2
 8005d86:	8819      	ldrh	r1, [r3, #0]
 8005d88:	232c      	movs	r3, #44	@ 0x2c
 8005d8a:	18fb      	adds	r3, r7, r3
 8005d8c:	2228      	movs	r2, #40	@ 0x28
 8005d8e:	18ba      	adds	r2, r7, r2
 8005d90:	8812      	ldrh	r2, [r2, #0]
 8005d92:	188a      	adds	r2, r1, r2
 8005d94:	801a      	strh	r2, [r3, #0]
               }
               fpixels++;                   // Instead writing every pixel, count consecutive pixels, then send accumulated pixels in a single transaction
 8005d96:	2122      	movs	r1, #34	@ 0x22
 8005d98:	187b      	adds	r3, r7, r1
 8005d9a:	881a      	ldrh	r2, [r3, #0]
 8005d9c:	187b      	adds	r3, r7, r1
 8005d9e:	3201      	adds	r2, #1
 8005da0:	801a      	strh	r2, [r3, #0]
 8005da2:	e0f1      	b.n	8005f88 <_UG_PutChar+0x3d8>
             }
             else
             {                              // Not accelerated output
               gui->device->pset(x+c,y+j,fc);
 8005da4:	4b68      	ldr	r3, [pc, #416]	@ (8005f48 <_UG_PutChar+0x398>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	1d3a      	adds	r2, r7, #4
 8005dae:	8811      	ldrh	r1, [r2, #0]
 8005db0:	221e      	movs	r2, #30
 8005db2:	18ba      	adds	r2, r7, r2
 8005db4:	8812      	ldrh	r2, [r2, #0]
 8005db6:	188a      	adds	r2, r1, r2
 8005db8:	b292      	uxth	r2, r2
 8005dba:	b210      	sxth	r0, r2
 8005dbc:	1cba      	adds	r2, r7, #2
 8005dbe:	8811      	ldrh	r1, [r2, #0]
 8005dc0:	2228      	movs	r2, #40	@ 0x28
 8005dc2:	18ba      	adds	r2, r7, r2
 8005dc4:	8812      	ldrh	r2, [r2, #0]
 8005dc6:	188a      	adds	r2, r1, r2
 8005dc8:	b292      	uxth	r2, r2
 8005dca:	b211      	sxth	r1, r2
 8005dcc:	003a      	movs	r2, r7
 8005dce:	8812      	ldrh	r2, [r2, #0]
 8005dd0:	4798      	blx	r3
 8005dd2:	e0d9      	b.n	8005f88 <_UG_PutChar+0x3d8>
             }
           }
           else                             // Background pixel detected
           {
             if(driver)
 8005dd4:	2316      	movs	r3, #22
 8005dd6:	18fb      	adds	r3, r7, r3
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d100      	bne.n	8005de0 <_UG_PutChar+0x230>
 8005dde:	e0b5      	b.n	8005f4c <_UG_PutChar+0x39c>
             {                              // Accelerated output
               if(fpixels)                  // Draw accumulated foreground pixels
 8005de0:	2222      	movs	r2, #34	@ 0x22
 8005de2:	18bb      	adds	r3, r7, r2
 8005de4:	881b      	ldrh	r3, [r3, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d100      	bne.n	8005dec <_UG_PutChar+0x23c>
 8005dea:	e0a5      	b.n	8005f38 <_UG_PutChar+0x388>
               {
                 if(!trans)                 // In transparent mode, we don't need to address pixel areas, so just keep pushing pixels
 8005dec:	2317      	movs	r3, #23
 8005dee:	18fb      	adds	r3, r7, r3
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d000      	beq.n	8005df8 <_UG_PutChar+0x248>
 8005df6:	e099      	b.n	8005f2c <_UG_PutChar+0x37c>
                 {
                   push_pixels(fpixels,fc);
 8005df8:	003b      	movs	r3, r7
 8005dfa:	8819      	ldrh	r1, [r3, #0]
 8005dfc:	0014      	movs	r4, r2
 8005dfe:	18bb      	adds	r3, r7, r2
 8005e00:	881a      	ldrh	r2, [r3, #0]
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	0010      	movs	r0, r2
 8005e06:	4798      	blx	r3
                   fpixels=0;
 8005e08:	193b      	adds	r3, r7, r4
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	801a      	strh	r2, [r3, #0]
 8005e0e:	e093      	b.n	8005f38 <_UG_PutChar+0x388>
                 }
                 else{                                // In transparent mode, drawing needs to be broken in smaller parts, avoiding the background areas
                   while(fpixels)
                   {
                     UG_U16 width = (x+actual_char_width)-x0;         // Detect available pixels in the current row from current x position
 8005e10:	1d3b      	adds	r3, r7, #4
 8005e12:	881a      	ldrh	r2, [r3, #0]
 8005e14:	2314      	movs	r3, #20
 8005e16:	18fb      	adds	r3, r7, r3
 8005e18:	881b      	ldrh	r3, [r3, #0]
 8005e1a:	18d3      	adds	r3, r2, r3
 8005e1c:	b299      	uxth	r1, r3
 8005e1e:	200e      	movs	r0, #14
 8005e20:	183b      	adds	r3, r7, r0
 8005e22:	242e      	movs	r4, #46	@ 0x2e
 8005e24:	193a      	adds	r2, r7, r4
 8005e26:	8812      	ldrh	r2, [r2, #0]
 8005e28:	1a8a      	subs	r2, r1, r2
 8005e2a:	801a      	strh	r2, [r3, #0]
                     if(x0==x || fpixels<width)                       // If pixel draw count is lower than available pixels, or drawing at start of the row, drawn as-is
 8005e2c:	193b      	adds	r3, r7, r4
 8005e2e:	881a      	ldrh	r2, [r3, #0]
 8005e30:	1d3b      	adds	r3, r7, #4
 8005e32:	2100      	movs	r1, #0
 8005e34:	5e5b      	ldrsh	r3, [r3, r1]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d006      	beq.n	8005e48 <_UG_PutChar+0x298>
 8005e3a:	2322      	movs	r3, #34	@ 0x22
 8005e3c:	18fa      	adds	r2, r7, r3
 8005e3e:	183b      	adds	r3, r7, r0
 8005e40:	8812      	ldrh	r2, [r2, #0]
 8005e42:	881b      	ldrh	r3, [r3, #0]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d23a      	bcs.n	8005ebe <_UG_PutChar+0x30e>
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8005e48:	4b3f      	ldr	r3, [pc, #252]	@ (8005f48 <_UG_PutChar+0x398>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e4e:	4698      	mov	r8, r3
 8005e50:	222e      	movs	r2, #46	@ 0x2e
 8005e52:	18bb      	adds	r3, r7, r2
 8005e54:	2400      	movs	r4, #0
 8005e56:	5f1c      	ldrsh	r4, [r3, r4]
 8005e58:	232c      	movs	r3, #44	@ 0x2c
 8005e5a:	18fb      	adds	r3, r7, r3
 8005e5c:	2000      	movs	r0, #0
 8005e5e:	5e1d      	ldrsh	r5, [r3, r0]
 8005e60:	18ba      	adds	r2, r7, r2
 8005e62:	200e      	movs	r0, #14
 8005e64:	183b      	adds	r3, r7, r0
 8005e66:	8812      	ldrh	r2, [r2, #0]
 8005e68:	881b      	ldrh	r3, [r3, #0]
 8005e6a:	18d3      	adds	r3, r2, r3
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	b21e      	sxth	r6, r3
 8005e74:	2322      	movs	r3, #34	@ 0x22
 8005e76:	18fb      	adds	r3, r7, r3
 8005e78:	881a      	ldrh	r2, [r3, #0]
 8005e7a:	2014      	movs	r0, #20
 8005e7c:	183b      	adds	r3, r7, r0
 8005e7e:	2000      	movs	r0, #0
 8005e80:	5e1b      	ldrsh	r3, [r3, r0]
 8005e82:	0019      	movs	r1, r3
 8005e84:	0010      	movs	r0, r2
 8005e86:	f7fa f9d3 	bl	8000230 <__divsi3>
 8005e8a:	0003      	movs	r3, r0
 8005e8c:	b29a      	uxth	r2, r3
 8005e8e:	212c      	movs	r1, #44	@ 0x2c
 8005e90:	187b      	adds	r3, r7, r1
 8005e92:	881b      	ldrh	r3, [r3, #0]
 8005e94:	18d3      	adds	r3, r2, r3
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	b21b      	sxth	r3, r3
 8005e9a:	0032      	movs	r2, r6
 8005e9c:	0029      	movs	r1, r5
 8005e9e:	0020      	movs	r0, r4
 8005ea0:	47c0      	blx	r8
 8005ea2:	0003      	movs	r3, r0
 8005ea4:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8005ea6:	003b      	movs	r3, r7
 8005ea8:	8819      	ldrh	r1, [r3, #0]
 8005eaa:	2422      	movs	r4, #34	@ 0x22
 8005eac:	193b      	adds	r3, r7, r4
 8005eae:	881a      	ldrh	r2, [r3, #0]
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	0010      	movs	r0, r2
 8005eb4:	4798      	blx	r3
                       fpixels=0;
 8005eb6:	193b      	adds	r3, r7, r4
 8005eb8:	2200      	movs	r2, #0
 8005eba:	801a      	strh	r2, [r3, #0]
 8005ebc:	e036      	b.n	8005f2c <_UG_PutChar+0x37c>
                     }
                     else                                             // If  pixel draw count is higher than available pixels, there's at least second line, drawn this row first
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8005ebe:	4b22      	ldr	r3, [pc, #136]	@ (8005f48 <_UG_PutChar+0x398>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ec4:	001c      	movs	r4, r3
 8005ec6:	262e      	movs	r6, #46	@ 0x2e
 8005ec8:	19bb      	adds	r3, r7, r6
 8005eca:	2000      	movs	r0, #0
 8005ecc:	5e18      	ldrsh	r0, [r3, r0]
 8005ece:	252c      	movs	r5, #44	@ 0x2c
 8005ed0:	197b      	adds	r3, r7, r5
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	5e9a      	ldrsh	r2, [r3, r2]
 8005ed6:	4694      	mov	ip, r2
 8005ed8:	19ba      	adds	r2, r7, r6
 8005eda:	230e      	movs	r3, #14
 8005edc:	18fb      	adds	r3, r7, r3
 8005ede:	8812      	ldrh	r2, [r2, #0]
 8005ee0:	881b      	ldrh	r3, [r3, #0]
 8005ee2:	18d3      	adds	r3, r2, r3
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	b21a      	sxth	r2, r3
 8005eec:	197b      	adds	r3, r7, r5
 8005eee:	2100      	movs	r1, #0
 8005ef0:	5e5b      	ldrsh	r3, [r3, r1]
 8005ef2:	4661      	mov	r1, ip
 8005ef4:	47a0      	blx	r4
 8005ef6:	0003      	movs	r3, r0
 8005ef8:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8005efa:	003b      	movs	r3, r7
 8005efc:	8819      	ldrh	r1, [r3, #0]
 8005efe:	2422      	movs	r4, #34	@ 0x22
 8005f00:	193b      	adds	r3, r7, r4
 8005f02:	881a      	ldrh	r2, [r3, #0]
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	0010      	movs	r0, r2
 8005f08:	4798      	blx	r3
                       fpixels -= width;
 8005f0a:	193b      	adds	r3, r7, r4
 8005f0c:	1939      	adds	r1, r7, r4
 8005f0e:	220e      	movs	r2, #14
 8005f10:	18ba      	adds	r2, r7, r2
 8005f12:	8809      	ldrh	r1, [r1, #0]
 8005f14:	8812      	ldrh	r2, [r2, #0]
 8005f16:	1a8a      	subs	r2, r1, r2
 8005f18:	801a      	strh	r2, [r3, #0]
                       x0=x;
 8005f1a:	19bb      	adds	r3, r7, r6
 8005f1c:	1d3a      	adds	r2, r7, #4
 8005f1e:	8812      	ldrh	r2, [r2, #0]
 8005f20:	801a      	strh	r2, [r3, #0]
                       y0++;
 8005f22:	197b      	adds	r3, r7, r5
 8005f24:	881a      	ldrh	r2, [r3, #0]
 8005f26:	197b      	adds	r3, r7, r5
 8005f28:	3201      	adds	r2, #1
 8005f2a:	801a      	strh	r2, [r3, #0]
                   while(fpixels)
 8005f2c:	2322      	movs	r3, #34	@ 0x22
 8005f2e:	18fb      	adds	r3, r7, r3
 8005f30:	881b      	ldrh	r3, [r3, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d000      	beq.n	8005f38 <_UG_PutChar+0x388>
 8005f36:	e76b      	b.n	8005e10 <_UG_PutChar+0x260>
                     }
                   }
                 }
               }
               bpixels++;
 8005f38:	2120      	movs	r1, #32
 8005f3a:	187b      	adds	r3, r7, r1
 8005f3c:	881a      	ldrh	r2, [r3, #0]
 8005f3e:	187b      	adds	r3, r7, r1
 8005f40:	3201      	adds	r2, #1
 8005f42:	801a      	strh	r2, [r3, #0]
 8005f44:	e020      	b.n	8005f88 <_UG_PutChar+0x3d8>
 8005f46:	46c0      	nop			@ (mov r8, r8)
 8005f48:	200002f8 	.word	0x200002f8
             }
             else if(!trans)                           // Not accelerated output
 8005f4c:	2317      	movs	r3, #23
 8005f4e:	18fb      	adds	r3, r7, r3
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d118      	bne.n	8005f88 <_UG_PutChar+0x3d8>
             {
               gui->device->pset(x+c,y+j,bc);
 8005f56:	4bbd      	ldr	r3, [pc, #756]	@ (800624c <_UG_PutChar+0x69c>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685c      	ldr	r4, [r3, #4]
 8005f5e:	1d3b      	adds	r3, r7, #4
 8005f60:	881a      	ldrh	r2, [r3, #0]
 8005f62:	231e      	movs	r3, #30
 8005f64:	18fb      	adds	r3, r7, r3
 8005f66:	881b      	ldrh	r3, [r3, #0]
 8005f68:	18d3      	adds	r3, r2, r3
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	b218      	sxth	r0, r3
 8005f6e:	1cbb      	adds	r3, r7, #2
 8005f70:	881a      	ldrh	r2, [r3, #0]
 8005f72:	2328      	movs	r3, #40	@ 0x28
 8005f74:	18fb      	adds	r3, r7, r3
 8005f76:	881b      	ldrh	r3, [r3, #0]
 8005f78:	18d3      	adds	r3, r2, r3
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	b219      	sxth	r1, r3
 8005f7e:	2348      	movs	r3, #72	@ 0x48
 8005f80:	18fb      	adds	r3, r7, r3
 8005f82:	881b      	ldrh	r3, [r3, #0]
 8005f84:	001a      	movs	r2, r3
 8005f86:	47a0      	blx	r4
             }
           }
           b >>= 1;
 8005f88:	221d      	movs	r2, #29
 8005f8a:	18bb      	adds	r3, r7, r2
 8005f8c:	18ba      	adds	r2, r7, r2
 8005f8e:	7812      	ldrb	r2, [r2, #0]
 8005f90:	0852      	lsrs	r2, r2, #1
 8005f92:	701a      	strb	r2, [r3, #0]
           c++;
 8005f94:	211e      	movs	r1, #30
 8005f96:	187b      	adds	r3, r7, r1
 8005f98:	2200      	movs	r2, #0
 8005f9a:	5e9b      	ldrsh	r3, [r3, r2]
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	187b      	adds	r3, r7, r1
 8005fa4:	801a      	strh	r2, [r3, #0]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8005fa6:	2126      	movs	r1, #38	@ 0x26
 8005fa8:	187b      	adds	r3, r7, r1
 8005faa:	881a      	ldrh	r2, [r3, #0]
 8005fac:	187b      	adds	r3, r7, r1
 8005fae:	3201      	adds	r2, #1
 8005fb0:	801a      	strh	r2, [r3, #0]
 8005fb2:	2326      	movs	r3, #38	@ 0x26
 8005fb4:	18fb      	adds	r3, r7, r3
 8005fb6:	881b      	ldrh	r3, [r3, #0]
 8005fb8:	2b07      	cmp	r3, #7
 8005fba:	d80a      	bhi.n	8005fd2 <_UG_PutChar+0x422>
 8005fbc:	231e      	movs	r3, #30
 8005fbe:	18fa      	adds	r2, r7, r3
 8005fc0:	2314      	movs	r3, #20
 8005fc2:	18fb      	adds	r3, r7, r3
 8005fc4:	2100      	movs	r1, #0
 8005fc6:	5e52      	ldrsh	r2, [r2, r1]
 8005fc8:	2100      	movs	r1, #0
 8005fca:	5e5b      	ldrsh	r3, [r3, r1]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	da00      	bge.n	8005fd2 <_UG_PutChar+0x422>
 8005fd0:	e6a4      	b.n	8005d1c <_UG_PutChar+0x16c>
       for( i=0;i<bn;i++ )
 8005fd2:	212a      	movs	r1, #42	@ 0x2a
 8005fd4:	187b      	adds	r3, r7, r1
 8005fd6:	881a      	ldrh	r2, [r3, #0]
 8005fd8:	187b      	adds	r3, r7, r1
 8005fda:	3201      	adds	r2, #1
 8005fdc:	801a      	strh	r2, [r3, #0]
 8005fde:	232a      	movs	r3, #42	@ 0x2a
 8005fe0:	18fa      	adds	r2, r7, r3
 8005fe2:	2324      	movs	r3, #36	@ 0x24
 8005fe4:	18fb      	adds	r3, r7, r3
 8005fe6:	8812      	ldrh	r2, [r2, #0]
 8005fe8:	881b      	ldrh	r3, [r3, #0]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d200      	bcs.n	8005ff0 <_UG_PutChar+0x440>
 8005fee:	e689      	b.n	8005d04 <_UG_PutChar+0x154>
     for( j=0;j< gui->currentFont.char_height;j++ )
 8005ff0:	2128      	movs	r1, #40	@ 0x28
 8005ff2:	187b      	adds	r3, r7, r1
 8005ff4:	881a      	ldrh	r2, [r3, #0]
 8005ff6:	187b      	adds	r3, r7, r1
 8005ff8:	3201      	adds	r2, #1
 8005ffa:	801a      	strh	r2, [r3, #0]
 8005ffc:	4b93      	ldr	r3, [pc, #588]	@ (800624c <_UG_PutChar+0x69c>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	222f      	movs	r2, #47	@ 0x2f
 8006002:	5c9b      	ldrb	r3, [r3, r2]
 8006004:	001a      	movs	r2, r3
 8006006:	2328      	movs	r3, #40	@ 0x28
 8006008:	18fb      	adds	r3, r7, r3
 800600a:	881b      	ldrh	r3, [r3, #0]
 800600c:	4293      	cmp	r3, r2
 800600e:	d200      	bcs.n	8006012 <_UG_PutChar+0x462>
 8006010:	e66f      	b.n	8005cf2 <_UG_PutChar+0x142>
        }
       }
     }
     if(driver){                                            // After finishing, ensure there're no remaining pixels left, make another pass
 8006012:	2316      	movs	r3, #22
 8006014:	18fb      	adds	r3, r7, r3
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d100      	bne.n	800601e <_UG_PutChar+0x46e>
 800601c:	e15d      	b.n	80062da <_UG_PutChar+0x72a>
       if(bpixels && !trans)
 800601e:	2220      	movs	r2, #32
 8006020:	18bb      	adds	r3, r7, r2
 8006022:	881b      	ldrh	r3, [r3, #0]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d00d      	beq.n	8006044 <_UG_PutChar+0x494>
 8006028:	2317      	movs	r3, #23
 800602a:	18fb      	adds	r3, r7, r3
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d108      	bne.n	8006044 <_UG_PutChar+0x494>
       {
         push_pixels(bpixels,bc);
 8006032:	2348      	movs	r3, #72	@ 0x48
 8006034:	18fb      	adds	r3, r7, r3
 8006036:	8819      	ldrh	r1, [r3, #0]
 8006038:	18bb      	adds	r3, r7, r2
 800603a:	881a      	ldrh	r2, [r3, #0]
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	0010      	movs	r0, r2
 8006040:	4798      	blx	r3
 8006042:	e14a      	b.n	80062da <_UG_PutChar+0x72a>
       }
       else if(fpixels)
 8006044:	2222      	movs	r2, #34	@ 0x22
 8006046:	18bb      	adds	r3, r7, r2
 8006048:	881b      	ldrh	r3, [r3, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d100      	bne.n	8006050 <_UG_PutChar+0x4a0>
 800604e:	e144      	b.n	80062da <_UG_PutChar+0x72a>
       {
         if(!trans)
 8006050:	2317      	movs	r3, #23
 8006052:	18fb      	adds	r3, r7, r3
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d000      	beq.n	800605c <_UG_PutChar+0x4ac>
 800605a:	e095      	b.n	8006188 <_UG_PutChar+0x5d8>
         {
           push_pixels(fpixels,fc);
 800605c:	003b      	movs	r3, r7
 800605e:	8819      	ldrh	r1, [r3, #0]
 8006060:	18bb      	adds	r3, r7, r2
 8006062:	881a      	ldrh	r2, [r3, #0]
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	0010      	movs	r0, r2
 8006068:	4798      	blx	r3
 800606a:	e136      	b.n	80062da <_UG_PutChar+0x72a>
         }
         else
         {
           while(fpixels)
           {
             UG_U16 width = (x+actual_char_width)-x0;
 800606c:	1d3b      	adds	r3, r7, #4
 800606e:	881a      	ldrh	r2, [r3, #0]
 8006070:	2314      	movs	r3, #20
 8006072:	18fb      	adds	r3, r7, r3
 8006074:	881b      	ldrh	r3, [r3, #0]
 8006076:	18d3      	adds	r3, r2, r3
 8006078:	b299      	uxth	r1, r3
 800607a:	2010      	movs	r0, #16
 800607c:	183b      	adds	r3, r7, r0
 800607e:	242e      	movs	r4, #46	@ 0x2e
 8006080:	193a      	adds	r2, r7, r4
 8006082:	8812      	ldrh	r2, [r2, #0]
 8006084:	1a8a      	subs	r2, r1, r2
 8006086:	801a      	strh	r2, [r3, #0]
             if(x0==x || fpixels<width)
 8006088:	193b      	adds	r3, r7, r4
 800608a:	881a      	ldrh	r2, [r3, #0]
 800608c:	1d3b      	adds	r3, r7, #4
 800608e:	2100      	movs	r1, #0
 8006090:	5e5b      	ldrsh	r3, [r3, r1]
 8006092:	429a      	cmp	r2, r3
 8006094:	d006      	beq.n	80060a4 <_UG_PutChar+0x4f4>
 8006096:	2322      	movs	r3, #34	@ 0x22
 8006098:	18fa      	adds	r2, r7, r3
 800609a:	183b      	adds	r3, r7, r0
 800609c:	8812      	ldrh	r2, [r2, #0]
 800609e:	881b      	ldrh	r3, [r3, #0]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d23a      	bcs.n	800611a <_UG_PutChar+0x56a>
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 80060a4:	4b69      	ldr	r3, [pc, #420]	@ (800624c <_UG_PutChar+0x69c>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060aa:	4698      	mov	r8, r3
 80060ac:	222e      	movs	r2, #46	@ 0x2e
 80060ae:	18bb      	adds	r3, r7, r2
 80060b0:	2400      	movs	r4, #0
 80060b2:	5f1c      	ldrsh	r4, [r3, r4]
 80060b4:	232c      	movs	r3, #44	@ 0x2c
 80060b6:	18fb      	adds	r3, r7, r3
 80060b8:	2000      	movs	r0, #0
 80060ba:	5e1d      	ldrsh	r5, [r3, r0]
 80060bc:	18ba      	adds	r2, r7, r2
 80060be:	2010      	movs	r0, #16
 80060c0:	183b      	adds	r3, r7, r0
 80060c2:	8812      	ldrh	r2, [r2, #0]
 80060c4:	881b      	ldrh	r3, [r3, #0]
 80060c6:	18d3      	adds	r3, r2, r3
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	3b01      	subs	r3, #1
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	b21e      	sxth	r6, r3
 80060d0:	2322      	movs	r3, #34	@ 0x22
 80060d2:	18fb      	adds	r3, r7, r3
 80060d4:	881a      	ldrh	r2, [r3, #0]
 80060d6:	2014      	movs	r0, #20
 80060d8:	183b      	adds	r3, r7, r0
 80060da:	2000      	movs	r0, #0
 80060dc:	5e1b      	ldrsh	r3, [r3, r0]
 80060de:	0019      	movs	r1, r3
 80060e0:	0010      	movs	r0, r2
 80060e2:	f7fa f8a5 	bl	8000230 <__divsi3>
 80060e6:	0003      	movs	r3, r0
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	212c      	movs	r1, #44	@ 0x2c
 80060ec:	187b      	adds	r3, r7, r1
 80060ee:	881b      	ldrh	r3, [r3, #0]
 80060f0:	18d3      	adds	r3, r2, r3
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	b21b      	sxth	r3, r3
 80060f6:	0032      	movs	r2, r6
 80060f8:	0029      	movs	r1, r5
 80060fa:	0020      	movs	r0, r4
 80060fc:	47c0      	blx	r8
 80060fe:	0003      	movs	r3, r0
 8006100:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8006102:	003b      	movs	r3, r7
 8006104:	8819      	ldrh	r1, [r3, #0]
 8006106:	2422      	movs	r4, #34	@ 0x22
 8006108:	193b      	adds	r3, r7, r4
 800610a:	881a      	ldrh	r2, [r3, #0]
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	0010      	movs	r0, r2
 8006110:	4798      	blx	r3
               fpixels=0;
 8006112:	193b      	adds	r3, r7, r4
 8006114:	2200      	movs	r2, #0
 8006116:	801a      	strh	r2, [r3, #0]
 8006118:	e036      	b.n	8006188 <_UG_PutChar+0x5d8>
             }
             else
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 800611a:	4b4c      	ldr	r3, [pc, #304]	@ (800624c <_UG_PutChar+0x69c>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006120:	001c      	movs	r4, r3
 8006122:	262e      	movs	r6, #46	@ 0x2e
 8006124:	19bb      	adds	r3, r7, r6
 8006126:	2000      	movs	r0, #0
 8006128:	5e18      	ldrsh	r0, [r3, r0]
 800612a:	252c      	movs	r5, #44	@ 0x2c
 800612c:	197b      	adds	r3, r7, r5
 800612e:	2200      	movs	r2, #0
 8006130:	5e9a      	ldrsh	r2, [r3, r2]
 8006132:	4694      	mov	ip, r2
 8006134:	19ba      	adds	r2, r7, r6
 8006136:	2310      	movs	r3, #16
 8006138:	18fb      	adds	r3, r7, r3
 800613a:	8812      	ldrh	r2, [r2, #0]
 800613c:	881b      	ldrh	r3, [r3, #0]
 800613e:	18d3      	adds	r3, r2, r3
 8006140:	b29b      	uxth	r3, r3
 8006142:	3b01      	subs	r3, #1
 8006144:	b29b      	uxth	r3, r3
 8006146:	b21a      	sxth	r2, r3
 8006148:	197b      	adds	r3, r7, r5
 800614a:	2100      	movs	r1, #0
 800614c:	5e5b      	ldrsh	r3, [r3, r1]
 800614e:	4661      	mov	r1, ip
 8006150:	47a0      	blx	r4
 8006152:	0003      	movs	r3, r0
 8006154:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8006156:	003b      	movs	r3, r7
 8006158:	8819      	ldrh	r1, [r3, #0]
 800615a:	2422      	movs	r4, #34	@ 0x22
 800615c:	193b      	adds	r3, r7, r4
 800615e:	881a      	ldrh	r2, [r3, #0]
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	0010      	movs	r0, r2
 8006164:	4798      	blx	r3
               fpixels -= width;
 8006166:	193b      	adds	r3, r7, r4
 8006168:	1939      	adds	r1, r7, r4
 800616a:	2210      	movs	r2, #16
 800616c:	18ba      	adds	r2, r7, r2
 800616e:	8809      	ldrh	r1, [r1, #0]
 8006170:	8812      	ldrh	r2, [r2, #0]
 8006172:	1a8a      	subs	r2, r1, r2
 8006174:	801a      	strh	r2, [r3, #0]
               x0=x;
 8006176:	19bb      	adds	r3, r7, r6
 8006178:	1d3a      	adds	r2, r7, #4
 800617a:	8812      	ldrh	r2, [r2, #0]
 800617c:	801a      	strh	r2, [r3, #0]
               y0++;
 800617e:	197b      	adds	r3, r7, r5
 8006180:	881a      	ldrh	r2, [r3, #0]
 8006182:	197b      	adds	r3, r7, r5
 8006184:	3201      	adds	r2, #1
 8006186:	801a      	strh	r2, [r3, #0]
           while(fpixels)
 8006188:	2322      	movs	r3, #34	@ 0x22
 800618a:	18fb      	adds	r3, r7, r3
 800618c:	881b      	ldrh	r3, [r3, #0]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d000      	beq.n	8006194 <_UG_PutChar+0x5e4>
 8006192:	e76b      	b.n	800606c <_UG_PutChar+0x4bc>
 8006194:	e0a1      	b.n	80062da <_UG_PutChar+0x72a>
         }
       }
     }
   }
   #if defined(UGUI_USE_COLOR_RGB888) || defined(UGUI_USE_COLOR_RGB565)
   else if ( gui->currentFont.font_type == FONT_TYPE_8BPP)
 8006196:	4b2d      	ldr	r3, [pc, #180]	@ (800624c <_UG_PutChar+0x69c>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	222c      	movs	r2, #44	@ 0x2c
 800619c:	5c9b      	ldrb	r3, [r3, r2]
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d000      	beq.n	80061a4 <_UG_PutChar+0x5f4>
 80061a2:	e09a      	b.n	80062da <_UG_PutChar+0x72a>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 80061a4:	2328      	movs	r3, #40	@ 0x28
 80061a6:	18fb      	adds	r3, r7, r3
 80061a8:	2200      	movs	r2, #0
 80061aa:	801a      	strh	r2, [r3, #0]
 80061ac:	e08a      	b.n	80062c4 <_UG_PutChar+0x714>
     {
       for( i=0;i<actual_char_width;i++ )
 80061ae:	232a      	movs	r3, #42	@ 0x2a
 80061b0:	18fb      	adds	r3, r7, r3
 80061b2:	2200      	movs	r2, #0
 80061b4:	801a      	strh	r2, [r3, #0]
 80061b6:	e069      	b.n	800628c <_UG_PutChar+0x6dc>
       {
         b = *data++;
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	1c5a      	adds	r2, r3, #1
 80061bc:	60ba      	str	r2, [r7, #8]
 80061be:	241d      	movs	r4, #29
 80061c0:	193a      	adds	r2, r7, r4
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	7013      	strb	r3, [r2, #0]
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 80061c6:	003b      	movs	r3, r7
 80061c8:	881b      	ldrh	r3, [r3, #0]
 80061ca:	22ff      	movs	r2, #255	@ 0xff
 80061cc:	4013      	ands	r3, r2
 80061ce:	193a      	adds	r2, r7, r4
 80061d0:	7812      	ldrb	r2, [r2, #0]
 80061d2:	435a      	muls	r2, r3
 80061d4:	2548      	movs	r5, #72	@ 0x48
 80061d6:	197b      	adds	r3, r7, r5
 80061d8:	881b      	ldrh	r3, [r3, #0]
 80061da:	21ff      	movs	r1, #255	@ 0xff
 80061dc:	400b      	ands	r3, r1
 80061de:	1939      	adds	r1, r7, r4
 80061e0:	7809      	ldrb	r1, [r1, #0]
 80061e2:	2080      	movs	r0, #128	@ 0x80
 80061e4:	0040      	lsls	r0, r0, #1
 80061e6:	1a41      	subs	r1, r0, r1
 80061e8:	434b      	muls	r3, r1
 80061ea:	18d3      	adds	r3, r2, r3
 80061ec:	121b      	asrs	r3, r3, #8
 80061ee:	b21b      	sxth	r3, r3
 80061f0:	22ff      	movs	r2, #255	@ 0xff
 80061f2:	4013      	ands	r3, r2
 80061f4:	b21a      	sxth	r2, r3
                 ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     //Green component
 80061f6:	003b      	movs	r3, r7
 80061f8:	8819      	ldrh	r1, [r3, #0]
 80061fa:	23ff      	movs	r3, #255	@ 0xff
 80061fc:	021b      	lsls	r3, r3, #8
 80061fe:	400b      	ands	r3, r1
 8006200:	1939      	adds	r1, r7, r4
 8006202:	7809      	ldrb	r1, [r1, #0]
 8006204:	4359      	muls	r1, r3
 8006206:	197b      	adds	r3, r7, r5
 8006208:	8818      	ldrh	r0, [r3, #0]
 800620a:	23ff      	movs	r3, #255	@ 0xff
 800620c:	021b      	lsls	r3, r3, #8
 800620e:	4003      	ands	r3, r0
 8006210:	1938      	adds	r0, r7, r4
 8006212:	7800      	ldrb	r0, [r0, #0]
 8006214:	2480      	movs	r4, #128	@ 0x80
 8006216:	0064      	lsls	r4, r4, #1
 8006218:	1a20      	subs	r0, r4, r0
 800621a:	4343      	muls	r3, r0
 800621c:	18cb      	adds	r3, r1, r3
 800621e:	121b      	asrs	r3, r3, #8
 8006220:	b21b      	sxth	r3, r3
 8006222:	21ff      	movs	r1, #255	@ 0xff
 8006224:	438b      	bics	r3, r1
 8006226:	b21b      	sxth	r3, r3
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8006228:	4313      	orrs	r3, r2
 800622a:	b21a      	sxth	r2, r3
 800622c:	2112      	movs	r1, #18
 800622e:	187b      	adds	r3, r7, r1
 8006230:	801a      	strh	r2, [r3, #0]
                 ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); //Red component
         if(driver)
 8006232:	2316      	movs	r3, #22
 8006234:	18fb      	adds	r3, r7, r3
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d009      	beq.n	8006250 <_UG_PutChar+0x6a0>
         {
           push_pixels(1,color);                                                          // Accelerated output
 800623c:	187b      	adds	r3, r7, r1
 800623e:	881a      	ldrh	r2, [r3, #0]
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	0011      	movs	r1, r2
 8006244:	2001      	movs	r0, #1
 8006246:	4798      	blx	r3
 8006248:	e01a      	b.n	8006280 <_UG_PutChar+0x6d0>
 800624a:	46c0      	nop			@ (mov r8, r8)
 800624c:	200002f8 	.word	0x200002f8
         }
         else
         {
           gui->device->pset(x+i,y+j,color);                                                // Not accelerated output
 8006250:	4b27      	ldr	r3, [pc, #156]	@ (80062f0 <_UG_PutChar+0x740>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	1d3a      	adds	r2, r7, #4
 800625a:	8811      	ldrh	r1, [r2, #0]
 800625c:	222a      	movs	r2, #42	@ 0x2a
 800625e:	18ba      	adds	r2, r7, r2
 8006260:	8812      	ldrh	r2, [r2, #0]
 8006262:	188a      	adds	r2, r1, r2
 8006264:	b292      	uxth	r2, r2
 8006266:	b210      	sxth	r0, r2
 8006268:	1cba      	adds	r2, r7, #2
 800626a:	8811      	ldrh	r1, [r2, #0]
 800626c:	2228      	movs	r2, #40	@ 0x28
 800626e:	18ba      	adds	r2, r7, r2
 8006270:	8812      	ldrh	r2, [r2, #0]
 8006272:	188a      	adds	r2, r1, r2
 8006274:	b292      	uxth	r2, r2
 8006276:	b211      	sxth	r1, r2
 8006278:	2212      	movs	r2, #18
 800627a:	18ba      	adds	r2, r7, r2
 800627c:	8812      	ldrh	r2, [r2, #0]
 800627e:	4798      	blx	r3
       for( i=0;i<actual_char_width;i++ )
 8006280:	212a      	movs	r1, #42	@ 0x2a
 8006282:	187b      	adds	r3, r7, r1
 8006284:	881a      	ldrh	r2, [r3, #0]
 8006286:	187b      	adds	r3, r7, r1
 8006288:	3201      	adds	r2, #1
 800628a:	801a      	strh	r2, [r3, #0]
 800628c:	232a      	movs	r3, #42	@ 0x2a
 800628e:	18fb      	adds	r3, r7, r3
 8006290:	881a      	ldrh	r2, [r3, #0]
 8006292:	2014      	movs	r0, #20
 8006294:	183b      	adds	r3, r7, r0
 8006296:	2100      	movs	r1, #0
 8006298:	5e5b      	ldrsh	r3, [r3, r1]
 800629a:	429a      	cmp	r2, r3
 800629c:	da00      	bge.n	80062a0 <_UG_PutChar+0x6f0>
 800629e:	e78b      	b.n	80061b8 <_UG_PutChar+0x608>
         }
       }
       data +=  gui->currentFont.char_width - actual_char_width;
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	4b13      	ldr	r3, [pc, #76]	@ (80062f0 <_UG_PutChar+0x740>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	212e      	movs	r1, #46	@ 0x2e
 80062a8:	5c5b      	ldrb	r3, [r3, r1]
 80062aa:	0019      	movs	r1, r3
 80062ac:	183b      	adds	r3, r7, r0
 80062ae:	2000      	movs	r0, #0
 80062b0:	5e1b      	ldrsh	r3, [r3, r0]
 80062b2:	1acb      	subs	r3, r1, r3
 80062b4:	18d3      	adds	r3, r2, r3
 80062b6:	60bb      	str	r3, [r7, #8]
     for( j=0;j< gui->currentFont.char_height;j++ )
 80062b8:	2128      	movs	r1, #40	@ 0x28
 80062ba:	187b      	adds	r3, r7, r1
 80062bc:	881a      	ldrh	r2, [r3, #0]
 80062be:	187b      	adds	r3, r7, r1
 80062c0:	3201      	adds	r2, #1
 80062c2:	801a      	strh	r2, [r3, #0]
 80062c4:	4b0a      	ldr	r3, [pc, #40]	@ (80062f0 <_UG_PutChar+0x740>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	222f      	movs	r2, #47	@ 0x2f
 80062ca:	5c9b      	ldrb	r3, [r3, r2]
 80062cc:	001a      	movs	r2, r3
 80062ce:	2328      	movs	r3, #40	@ 0x28
 80062d0:	18fb      	adds	r3, r7, r3
 80062d2:	881b      	ldrh	r3, [r3, #0]
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d200      	bcs.n	80062da <_UG_PutChar+0x72a>
 80062d8:	e769      	b.n	80061ae <_UG_PutChar+0x5fe>
     }
   }
   #endif
   return (actual_char_width);
 80062da:	2314      	movs	r3, #20
 80062dc:	18fb      	adds	r3, r7, r3
 80062de:	2200      	movs	r2, #0
 80062e0:	5e9b      	ldrsh	r3, [r3, r2]
}
 80062e2:	0018      	movs	r0, r3
 80062e4:	46bd      	mov	sp, r7
 80062e6:	b00c      	add	sp, #48	@ 0x30
 80062e8:	bc80      	pop	{r7}
 80062ea:	46b8      	mov	r8, r7
 80062ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062ee:	46c0      	nop			@ (mov r8, r8)
 80062f0:	200002f8 	.word	0x200002f8

080062f4 <_UG_ProcessTouchData>:

#ifdef UGUI_USE_TOUCH
static void _UG_ProcessTouchData( UG_WINDOW* wnd )
{
 80062f4:	b590      	push	{r4, r7, lr}
 80062f6:	b089      	sub	sp, #36	@ 0x24
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
   UG_OBJECT* obj;
   UG_U8 objstate;
   UG_U8 objtouch;
   UG_U8 tchstate;

   xp = gui->touch.xp;
 80062fc:	4b77      	ldr	r3, [pc, #476]	@ (80064dc <_UG_ProcessTouchData+0x1e8>)
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	231a      	movs	r3, #26
 8006302:	18fb      	adds	r3, r7, r3
 8006304:	88d2      	ldrh	r2, [r2, #6]
 8006306:	801a      	strh	r2, [r3, #0]
   yp = gui->touch.yp;
 8006308:	4b74      	ldr	r3, [pc, #464]	@ (80064dc <_UG_ProcessTouchData+0x1e8>)
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	2318      	movs	r3, #24
 800630e:	18fb      	adds	r3, r7, r3
 8006310:	8912      	ldrh	r2, [r2, #8]
 8006312:	801a      	strh	r2, [r3, #0]
   tchstate = gui->touch.state;
 8006314:	4b71      	ldr	r3, [pc, #452]	@ (80064dc <_UG_ProcessTouchData+0x1e8>)
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	2317      	movs	r3, #23
 800631a:	18fb      	adds	r3, r7, r3
 800631c:	7912      	ldrb	r2, [r2, #4]
 800631e:	701a      	strb	r2, [r3, #0]

   objcnt = wnd->objcnt;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	781a      	ldrb	r2, [r3, #0]
 8006324:	2314      	movs	r3, #20
 8006326:	18fb      	adds	r3, r7, r3
 8006328:	801a      	strh	r2, [r3, #0]
   for(i=0; i<objcnt; i++)
 800632a:	231e      	movs	r3, #30
 800632c:	18fb      	adds	r3, r7, r3
 800632e:	2200      	movs	r2, #0
 8006330:	801a      	strh	r2, [r3, #0]
 8006332:	e0c5      	b.n	80064c0 <_UG_ProcessTouchData+0x1cc>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	685a      	ldr	r2, [r3, #4]
 8006338:	231e      	movs	r3, #30
 800633a:	18fb      	adds	r3, r7, r3
 800633c:	881b      	ldrh	r3, [r3, #0]
 800633e:	015b      	lsls	r3, r3, #5
 8006340:	18d3      	adds	r3, r2, r3
 8006342:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8006344:	200f      	movs	r0, #15
 8006346:	183b      	adds	r3, r7, r0
 8006348:	693a      	ldr	r2, [r7, #16]
 800634a:	7812      	ldrb	r2, [r2, #0]
 800634c:	701a      	strb	r2, [r3, #0]
      objtouch = obj->touch_state;
 800634e:	211d      	movs	r1, #29
 8006350:	187b      	adds	r3, r7, r1
 8006352:	693a      	ldr	r2, [r7, #16]
 8006354:	7852      	ldrb	r2, [r2, #1]
 8006356:	701a      	strb	r2, [r3, #0]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) && (objstate & OBJ_STATE_VISIBLE) && !(objstate & OBJ_STATE_REDRAW))
 8006358:	183b      	adds	r3, r7, r0
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	2201      	movs	r2, #1
 800635e:	4013      	ands	r3, r2
 8006360:	d000      	beq.n	8006364 <_UG_ProcessTouchData+0x70>
 8006362:	e0a2      	b.n	80064aa <_UG_ProcessTouchData+0x1b6>
 8006364:	183b      	adds	r3, r7, r0
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	2202      	movs	r2, #2
 800636a:	4013      	ands	r3, r2
 800636c:	d100      	bne.n	8006370 <_UG_ProcessTouchData+0x7c>
 800636e:	e09c      	b.n	80064aa <_UG_ProcessTouchData+0x1b6>
 8006370:	183b      	adds	r3, r7, r0
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	2208      	movs	r2, #8
 8006376:	4013      	ands	r3, r2
 8006378:	d100      	bne.n	800637c <_UG_ProcessTouchData+0x88>
 800637a:	e096      	b.n	80064aa <_UG_ProcessTouchData+0x1b6>
 800637c:	183b      	adds	r3, r7, r0
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	2240      	movs	r2, #64	@ 0x40
 8006382:	4013      	ands	r3, r2
 8006384:	d000      	beq.n	8006388 <_UG_ProcessTouchData+0x94>
 8006386:	e090      	b.n	80064aa <_UG_ProcessTouchData+0x1b6>
      {
         /* Process touch data */
         if ( (tchstate) && xp != -1 )
 8006388:	2317      	movs	r3, #23
 800638a:	18fb      	adds	r3, r7, r3
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d05f      	beq.n	8006452 <_UG_ProcessTouchData+0x15e>
 8006392:	231a      	movs	r3, #26
 8006394:	18fb      	adds	r3, r7, r3
 8006396:	2200      	movs	r2, #0
 8006398:	5e9b      	ldrsh	r3, [r3, r2]
 800639a:	3301      	adds	r3, #1
 800639c:	d059      	beq.n	8006452 <_UG_ProcessTouchData+0x15e>
         {
            if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 800639e:	187b      	adds	r3, r7, r1
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	2240      	movs	r2, #64	@ 0x40
 80063a4:	4013      	ands	r3, r2
 80063a6:	d10c      	bne.n	80063c2 <_UG_ProcessTouchData+0xce>
            {
               objtouch |= OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_CHANGED;
 80063a8:	187b      	adds	r3, r7, r1
 80063aa:	0008      	movs	r0, r1
 80063ac:	187a      	adds	r2, r7, r1
 80063ae:	7812      	ldrb	r2, [r2, #0]
 80063b0:	2105      	movs	r1, #5
 80063b2:	430a      	orrs	r2, r1
 80063b4:	701a      	strb	r2, [r3, #0]
               objtouch &= ~(OBJ_TOUCH_STATE_RELEASED_ON_OBJECT | OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT);
 80063b6:	183b      	adds	r3, r7, r0
 80063b8:	183a      	adds	r2, r7, r0
 80063ba:	7812      	ldrb	r2, [r2, #0]
 80063bc:	2118      	movs	r1, #24
 80063be:	438a      	bics	r2, r1
 80063c0:	701a      	strb	r2, [r3, #0]
            }
            objtouch &= ~OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 80063c2:	201d      	movs	r0, #29
 80063c4:	183b      	adds	r3, r7, r0
 80063c6:	183a      	adds	r2, r7, r0
 80063c8:	7812      	ldrb	r2, [r2, #0]
 80063ca:	2120      	movs	r1, #32
 80063cc:	438a      	bics	r2, r1
 80063ce:	701a      	strb	r2, [r3, #0]
            if ( xp >= obj->a_abs.xs )
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	2208      	movs	r2, #8
 80063d4:	5e9b      	ldrsh	r3, [r3, r2]
 80063d6:	211a      	movs	r1, #26
 80063d8:	187a      	adds	r2, r7, r1
 80063da:	2400      	movs	r4, #0
 80063dc:	5f12      	ldrsh	r2, [r2, r4]
 80063de:	429a      	cmp	r2, r3
 80063e0:	db2f      	blt.n	8006442 <_UG_ProcessTouchData+0x14e>
            {
               if ( xp <= obj->a_abs.xe )
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	220c      	movs	r2, #12
 80063e6:	5e9b      	ldrsh	r3, [r3, r2]
 80063e8:	187a      	adds	r2, r7, r1
 80063ea:	2100      	movs	r1, #0
 80063ec:	5e52      	ldrsh	r2, [r2, r1]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	dc27      	bgt.n	8006442 <_UG_ProcessTouchData+0x14e>
               {
                  if ( yp >= obj->a_abs.ys )
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	220a      	movs	r2, #10
 80063f6:	5e9b      	ldrsh	r3, [r3, r2]
 80063f8:	2118      	movs	r1, #24
 80063fa:	187a      	adds	r2, r7, r1
 80063fc:	2400      	movs	r4, #0
 80063fe:	5f12      	ldrsh	r2, [r2, r4]
 8006400:	429a      	cmp	r2, r3
 8006402:	db1e      	blt.n	8006442 <_UG_ProcessTouchData+0x14e>
                  {
                     if ( yp <= obj->a_abs.ye )
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	220e      	movs	r2, #14
 8006408:	5e9b      	ldrsh	r3, [r3, r2]
 800640a:	187a      	adds	r2, r7, r1
 800640c:	2100      	movs	r1, #0
 800640e:	5e52      	ldrsh	r2, [r2, r1]
 8006410:	429a      	cmp	r2, r3
 8006412:	dc16      	bgt.n	8006442 <_UG_ProcessTouchData+0x14e>
                     {
                        objtouch |= OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 8006414:	183b      	adds	r3, r7, r0
 8006416:	183a      	adds	r2, r7, r0
 8006418:	7812      	ldrb	r2, [r2, #0]
 800641a:	2120      	movs	r1, #32
 800641c:	430a      	orrs	r2, r1
 800641e:	701a      	strb	r2, [r3, #0]
                        if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 8006420:	183b      	adds	r3, r7, r0
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	2240      	movs	r2, #64	@ 0x40
 8006426:	4013      	ands	r3, r2
 8006428:	d10b      	bne.n	8006442 <_UG_ProcessTouchData+0x14e>
                        {
                           objtouch &= ~OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT;
 800642a:	183b      	adds	r3, r7, r0
 800642c:	183a      	adds	r2, r7, r0
 800642e:	7812      	ldrb	r2, [r2, #0]
 8006430:	2104      	movs	r1, #4
 8006432:	438a      	bics	r2, r1
 8006434:	701a      	strb	r2, [r3, #0]
                           objtouch |= OBJ_TOUCH_STATE_PRESSED_ON_OBJECT;
 8006436:	183b      	adds	r3, r7, r0
 8006438:	183a      	adds	r2, r7, r0
 800643a:	7812      	ldrb	r2, [r2, #0]
 800643c:	2102      	movs	r1, #2
 800643e:	430a      	orrs	r2, r1
 8006440:	701a      	strb	r2, [r3, #0]
                        }
                     }
                  }
               }
            }
            objtouch |= OBJ_TOUCH_STATE_IS_PRESSED;
 8006442:	221d      	movs	r2, #29
 8006444:	18bb      	adds	r3, r7, r2
 8006446:	18ba      	adds	r2, r7, r2
 8006448:	7812      	ldrb	r2, [r2, #0]
 800644a:	2140      	movs	r1, #64	@ 0x40
 800644c:	430a      	orrs	r2, r1
 800644e:	701a      	strb	r2, [r3, #0]
 8006450:	e02b      	b.n	80064aa <_UG_ProcessTouchData+0x1b6>
         }
         else if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 8006452:	211d      	movs	r1, #29
 8006454:	187b      	adds	r3, r7, r1
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	2240      	movs	r2, #64	@ 0x40
 800645a:	4013      	ands	r3, r2
 800645c:	d025      	beq.n	80064aa <_UG_ProcessTouchData+0x1b6>
         {
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT )
 800645e:	187b      	adds	r3, r7, r1
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	2220      	movs	r2, #32
 8006464:	4013      	ands	r3, r2
 8006466:	d006      	beq.n	8006476 <_UG_ProcessTouchData+0x182>
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_ON_OBJECT;
 8006468:	187b      	adds	r3, r7, r1
 800646a:	187a      	adds	r2, r7, r1
 800646c:	7812      	ldrb	r2, [r2, #0]
 800646e:	2108      	movs	r1, #8
 8006470:	430a      	orrs	r2, r1
 8006472:	701a      	strb	r2, [r3, #0]
 8006474:	e006      	b.n	8006484 <_UG_ProcessTouchData+0x190>
            }
            else
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT;
 8006476:	221d      	movs	r2, #29
 8006478:	18bb      	adds	r3, r7, r2
 800647a:	18ba      	adds	r2, r7, r2
 800647c:	7812      	ldrb	r2, [r2, #0]
 800647e:	2110      	movs	r1, #16
 8006480:	430a      	orrs	r2, r1
 8006482:	701a      	strb	r2, [r3, #0]
            }
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 8006484:	211d      	movs	r1, #29
 8006486:	187b      	adds	r3, r7, r1
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	2240      	movs	r2, #64	@ 0x40
 800648c:	4013      	ands	r3, r2
 800648e:	d005      	beq.n	800649c <_UG_ProcessTouchData+0x1a8>
            {
               objtouch |= OBJ_TOUCH_STATE_CHANGED;
 8006490:	187b      	adds	r3, r7, r1
 8006492:	187a      	adds	r2, r7, r1
 8006494:	7812      	ldrb	r2, [r2, #0]
 8006496:	2101      	movs	r1, #1
 8006498:	430a      	orrs	r2, r1
 800649a:	701a      	strb	r2, [r3, #0]
            }
            objtouch &= ~(OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_PRESSED_ON_OBJECT | OBJ_TOUCH_STATE_IS_PRESSED);
 800649c:	221d      	movs	r2, #29
 800649e:	18bb      	adds	r3, r7, r2
 80064a0:	18ba      	adds	r2, r7, r2
 80064a2:	7812      	ldrb	r2, [r2, #0]
 80064a4:	2146      	movs	r1, #70	@ 0x46
 80064a6:	438a      	bics	r2, r1
 80064a8:	701a      	strb	r2, [r3, #0]
         }
      }
      obj->touch_state = objtouch;
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	221d      	movs	r2, #29
 80064ae:	18ba      	adds	r2, r7, r2
 80064b0:	7812      	ldrb	r2, [r2, #0]
 80064b2:	705a      	strb	r2, [r3, #1]
   for(i=0; i<objcnt; i++)
 80064b4:	211e      	movs	r1, #30
 80064b6:	187b      	adds	r3, r7, r1
 80064b8:	881a      	ldrh	r2, [r3, #0]
 80064ba:	187b      	adds	r3, r7, r1
 80064bc:	3201      	adds	r2, #1
 80064be:	801a      	strh	r2, [r3, #0]
 80064c0:	231e      	movs	r3, #30
 80064c2:	18fa      	adds	r2, r7, r3
 80064c4:	2314      	movs	r3, #20
 80064c6:	18fb      	adds	r3, r7, r3
 80064c8:	8812      	ldrh	r2, [r2, #0]
 80064ca:	881b      	ldrh	r3, [r3, #0]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d200      	bcs.n	80064d2 <_UG_ProcessTouchData+0x1de>
 80064d0:	e730      	b.n	8006334 <_UG_ProcessTouchData+0x40>
   }
}
 80064d2:	46c0      	nop			@ (mov r8, r8)
 80064d4:	46c0      	nop			@ (mov r8, r8)
 80064d6:	46bd      	mov	sp, r7
 80064d8:	b009      	add	sp, #36	@ 0x24
 80064da:	bd90      	pop	{r4, r7, pc}
 80064dc:	200002f8 	.word	0x200002f8

080064e0 <_UG_UpdateObjects>:
#endif

static void _UG_UpdateObjects( UG_WINDOW* wnd )
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b086      	sub	sp, #24
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
   #ifdef UGUI_USE_TOUCH
   UG_U8 objtouch;
   #endif

   /* Check each object, if it needs to be updated? */
   objcnt = wnd->objcnt;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	781a      	ldrb	r2, [r3, #0]
 80064ec:	2314      	movs	r3, #20
 80064ee:	18fb      	adds	r3, r7, r3
 80064f0:	801a      	strh	r2, [r3, #0]
   for(i=0; i<objcnt; i++)
 80064f2:	2316      	movs	r3, #22
 80064f4:	18fb      	adds	r3, r7, r3
 80064f6:	2200      	movs	r2, #0
 80064f8:	801a      	strh	r2, [r3, #0]
 80064fa:	e043      	b.n	8006584 <_UG_UpdateObjects+0xa4>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	685a      	ldr	r2, [r3, #4]
 8006500:	2316      	movs	r3, #22
 8006502:	18fb      	adds	r3, r7, r3
 8006504:	881b      	ldrh	r3, [r3, #0]
 8006506:	015b      	lsls	r3, r3, #5
 8006508:	18d3      	adds	r3, r2, r3
 800650a:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 800650c:	210f      	movs	r1, #15
 800650e:	187b      	adds	r3, r7, r1
 8006510:	693a      	ldr	r2, [r7, #16]
 8006512:	7812      	ldrb	r2, [r2, #0]
 8006514:	701a      	strb	r2, [r3, #0]
      #ifdef UGUI_USE_TOUCH
      objtouch = obj->touch_state;
 8006516:	230e      	movs	r3, #14
 8006518:	18fb      	adds	r3, r7, r3
 800651a:	693a      	ldr	r2, [r7, #16]
 800651c:	7852      	ldrb	r2, [r2, #1]
 800651e:	701a      	strb	r2, [r3, #0]
      #endif
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8006520:	187b      	adds	r3, r7, r1
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	2201      	movs	r2, #1
 8006526:	4013      	ands	r3, r2
 8006528:	d126      	bne.n	8006578 <_UG_UpdateObjects+0x98>
 800652a:	187b      	adds	r3, r7, r1
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	2202      	movs	r2, #2
 8006530:	4013      	ands	r3, r2
 8006532:	d021      	beq.n	8006578 <_UG_UpdateObjects+0x98>
      {
         if ( objstate & OBJ_STATE_UPDATE )
 8006534:	187b      	adds	r3, r7, r1
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	2220      	movs	r2, #32
 800653a:	4013      	ands	r3, r2
 800653c:	d005      	beq.n	800654a <_UG_UpdateObjects+0x6a>
         {
            obj->update(wnd,obj);
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	6939      	ldr	r1, [r7, #16]
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	0010      	movs	r0, r2
 8006548:	4798      	blx	r3
         }
         #ifdef UGUI_USE_TOUCH
         if ( (objstate & OBJ_STATE_VISIBLE) && (objstate & OBJ_STATE_TOUCH_ENABLE) )
 800654a:	210f      	movs	r1, #15
 800654c:	187b      	adds	r3, r7, r1
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	2208      	movs	r2, #8
 8006552:	4013      	ands	r3, r2
 8006554:	d010      	beq.n	8006578 <_UG_UpdateObjects+0x98>
 8006556:	187b      	adds	r3, r7, r1
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	b25b      	sxtb	r3, r3
 800655c:	2b00      	cmp	r3, #0
 800655e:	da0b      	bge.n	8006578 <_UG_UpdateObjects+0x98>
         {
            if ( (objtouch & (OBJ_TOUCH_STATE_CHANGED | OBJ_TOUCH_STATE_IS_PRESSED)) )
 8006560:	230e      	movs	r3, #14
 8006562:	18fb      	adds	r3, r7, r3
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	2241      	movs	r2, #65	@ 0x41
 8006568:	4013      	ands	r3, r2
 800656a:	d005      	beq.n	8006578 <_UG_UpdateObjects+0x98>
            {
               obj->update(wnd,obj);
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	6939      	ldr	r1, [r7, #16]
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	0010      	movs	r0, r2
 8006576:	4798      	blx	r3
   for(i=0; i<objcnt; i++)
 8006578:	2116      	movs	r1, #22
 800657a:	187b      	adds	r3, r7, r1
 800657c:	881a      	ldrh	r2, [r3, #0]
 800657e:	187b      	adds	r3, r7, r1
 8006580:	3201      	adds	r2, #1
 8006582:	801a      	strh	r2, [r3, #0]
 8006584:	2316      	movs	r3, #22
 8006586:	18fa      	adds	r2, r7, r3
 8006588:	2314      	movs	r3, #20
 800658a:	18fb      	adds	r3, r7, r3
 800658c:	8812      	ldrh	r2, [r2, #0]
 800658e:	881b      	ldrh	r3, [r3, #0]
 8006590:	429a      	cmp	r2, r3
 8006592:	d3b3      	bcc.n	80064fc <_UG_UpdateObjects+0x1c>
            }
         }
         #endif
      }
   }
}
 8006594:	46c0      	nop			@ (mov r8, r8)
 8006596:	46c0      	nop			@ (mov r8, r8)
 8006598:	46bd      	mov	sp, r7
 800659a:	b006      	add	sp, #24
 800659c:	bd80      	pop	{r7, pc}
	...

080065a0 <_UG_HandleEvents>:

static void _UG_HandleEvents( UG_WINDOW* wnd )
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b086      	sub	sp, #24
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_U8 objstate;
   static UG_MESSAGE msg;
   msg.src = NULL;
 80065a8:	4b2a      	ldr	r3, [pc, #168]	@ (8006654 <_UG_HandleEvents+0xb4>)
 80065aa:	2200      	movs	r2, #0
 80065ac:	605a      	str	r2, [r3, #4]

   /* Handle window-related events */
   //ToDo

   /* Handle object-related events */
   msg.type = MSG_TYPE_OBJECT;
 80065ae:	4b29      	ldr	r3, [pc, #164]	@ (8006654 <_UG_HandleEvents+0xb4>)
 80065b0:	2202      	movs	r2, #2
 80065b2:	701a      	strb	r2, [r3, #0]
   objcnt = wnd->objcnt;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	781a      	ldrb	r2, [r3, #0]
 80065b8:	2314      	movs	r3, #20
 80065ba:	18fb      	adds	r3, r7, r3
 80065bc:	801a      	strh	r2, [r3, #0]
   for(i=0; i<objcnt; i++)
 80065be:	2316      	movs	r3, #22
 80065c0:	18fb      	adds	r3, r7, r3
 80065c2:	2200      	movs	r2, #0
 80065c4:	801a      	strh	r2, [r3, #0]
 80065c6:	e037      	b.n	8006638 <_UG_HandleEvents+0x98>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685a      	ldr	r2, [r3, #4]
 80065cc:	2316      	movs	r3, #22
 80065ce:	18fb      	adds	r3, r7, r3
 80065d0:	881b      	ldrh	r3, [r3, #0]
 80065d2:	015b      	lsls	r3, r3, #5
 80065d4:	18d3      	adds	r3, r2, r3
 80065d6:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 80065d8:	210f      	movs	r1, #15
 80065da:	187b      	adds	r3, r7, r1
 80065dc:	693a      	ldr	r2, [r7, #16]
 80065de:	7812      	ldrb	r2, [r2, #0]
 80065e0:	701a      	strb	r2, [r3, #0]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 80065e2:	187b      	adds	r3, r7, r1
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	2201      	movs	r2, #1
 80065e8:	4013      	ands	r3, r2
 80065ea:	d11f      	bne.n	800662c <_UG_HandleEvents+0x8c>
 80065ec:	187b      	adds	r3, r7, r1
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	2202      	movs	r2, #2
 80065f2:	4013      	ands	r3, r2
 80065f4:	d01a      	beq.n	800662c <_UG_HandleEvents+0x8c>
      {
         if ( obj->event != OBJ_EVENT_NONE )
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	7e9b      	ldrb	r3, [r3, #26]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d016      	beq.n	800662c <_UG_HandleEvents+0x8c>
         {
            msg.src = obj;
 80065fe:	4b15      	ldr	r3, [pc, #84]	@ (8006654 <_UG_HandleEvents+0xb4>)
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	605a      	str	r2, [r3, #4]
            msg.id = obj->type;
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	7e1a      	ldrb	r2, [r3, #24]
 8006608:	4b12      	ldr	r3, [pc, #72]	@ (8006654 <_UG_HandleEvents+0xb4>)
 800660a:	705a      	strb	r2, [r3, #1]
            msg.sub_id = obj->id;
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	7e5a      	ldrb	r2, [r3, #25]
 8006610:	4b10      	ldr	r3, [pc, #64]	@ (8006654 <_UG_HandleEvents+0xb4>)
 8006612:	709a      	strb	r2, [r3, #2]
            msg.event = obj->event;
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	7e9a      	ldrb	r2, [r3, #26]
 8006618:	4b0e      	ldr	r3, [pc, #56]	@ (8006654 <_UG_HandleEvents+0xb4>)
 800661a:	70da      	strb	r2, [r3, #3]

            wnd->cb( &msg );
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006620:	4a0c      	ldr	r2, [pc, #48]	@ (8006654 <_UG_HandleEvents+0xb4>)
 8006622:	0010      	movs	r0, r2
 8006624:	4798      	blx	r3

            obj->event = OBJ_EVENT_NONE;
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	2200      	movs	r2, #0
 800662a:	769a      	strb	r2, [r3, #26]
   for(i=0; i<objcnt; i++)
 800662c:	2116      	movs	r1, #22
 800662e:	187b      	adds	r3, r7, r1
 8006630:	881a      	ldrh	r2, [r3, #0]
 8006632:	187b      	adds	r3, r7, r1
 8006634:	3201      	adds	r2, #1
 8006636:	801a      	strh	r2, [r3, #0]
 8006638:	2316      	movs	r3, #22
 800663a:	18fa      	adds	r2, r7, r3
 800663c:	2314      	movs	r3, #20
 800663e:	18fb      	adds	r3, r7, r3
 8006640:	8812      	ldrh	r2, [r2, #0]
 8006642:	881b      	ldrh	r3, [r3, #0]
 8006644:	429a      	cmp	r2, r3
 8006646:	d3bf      	bcc.n	80065c8 <_UG_HandleEvents+0x28>
         }
      }
   }
}
 8006648:	46c0      	nop			@ (mov r8, r8)
 800664a:	46c0      	nop			@ (mov r8, r8)
 800664c:	46bd      	mov	sp, r7
 800664e:	b006      	add	sp, #24
 8006650:	bd80      	pop	{r7, pc}
 8006652:	46c0      	nop			@ (mov r8, r8)
 8006654:	2000030c 	.word	0x2000030c

08006658 <_UG_PutText>:
/* -------------------------------------------------------------------------------- */
/* -- INTERNAL API FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */

void _UG_PutText(UG_TEXT* txt)
{
 8006658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800665a:	b08f      	sub	sp, #60	@ 0x3c
 800665c:	af02      	add	r7, sp, #8
 800665e:	6078      	str	r0, [r7, #4]
   if(!txt->font || !txt->str){
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d100      	bne.n	800666a <_UG_PutText+0x12>
 8006668:	e1b6      	b.n	80069d8 <_UG_PutText+0x380>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d100      	bne.n	8006674 <_UG_PutText+0x1c>
 8006672:	e1b1      	b.n	80069d8 <_UG_PutText+0x380>
     return;
   }

   UG_S16 ye=txt->a.ye;
 8006674:	2122      	movs	r1, #34	@ 0x22
 8006676:	187b      	adds	r3, r7, r1
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	89d2      	ldrh	r2, [r2, #14]
 800667c:	801a      	strh	r2, [r3, #0]
   UG_S16 ys=txt->a.ys;
 800667e:	2020      	movs	r0, #32
 8006680:	183b      	adds	r3, r7, r0
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	8952      	ldrh	r2, [r2, #10]
 8006686:	801a      	strh	r2, [r3, #0]
   UG_S16 char_height=UG_GetFontHeight(txt->font);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	3302      	adds	r3, #2
 800668e:	781a      	ldrb	r2, [r3, #0]
 8006690:	241e      	movs	r4, #30
 8006692:	193b      	adds	r3, r7, r4
 8006694:	801a      	strh	r2, [r3, #0]

   if ( (ye - ys) < char_height ){
 8006696:	187b      	adds	r3, r7, r1
 8006698:	2200      	movs	r2, #0
 800669a:	5e9a      	ldrsh	r2, [r3, r2]
 800669c:	183b      	adds	r3, r7, r0
 800669e:	2100      	movs	r1, #0
 80066a0:	5e5b      	ldrsh	r3, [r3, r1]
 80066a2:	1ad2      	subs	r2, r2, r3
 80066a4:	193b      	adds	r3, r7, r4
 80066a6:	2100      	movs	r1, #0
 80066a8:	5e5b      	ldrsh	r3, [r3, r1]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	da00      	bge.n	80066b0 <_UG_PutText+0x58>
 80066ae:	e195      	b.n	80069dc <_UG_PutText+0x384>
     return;
   }

   UG_U16 sl,rc,wl;
   UG_S16 xp,yp;
   UG_S16 xs=txt->a.xs;
 80066b0:	231c      	movs	r3, #28
 80066b2:	18fb      	adds	r3, r7, r3
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	8912      	ldrh	r2, [r2, #8]
 80066b8:	801a      	strh	r2, [r3, #0]
   UG_S16 xe=txt->a.xe;
 80066ba:	231a      	movs	r3, #26
 80066bc:	18fb      	adds	r3, r7, r3
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	8992      	ldrh	r2, [r2, #12]
 80066c2:	801a      	strh	r2, [r3, #0]
   UG_U8  align=txt->align;
 80066c4:	2319      	movs	r3, #25
 80066c6:	18fb      	adds	r3, r7, r3
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	7d12      	ldrb	r2, [r2, #20]
 80066cc:	701a      	strb	r2, [r3, #0]
   UG_S16 char_h_space=txt->h_space;
 80066ce:	2316      	movs	r3, #22
 80066d0:	18fb      	adds	r3, r7, r3
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	8ad2      	ldrh	r2, [r2, #22]
 80066d6:	801a      	strh	r2, [r3, #0]
   UG_S16 char_v_space=txt->v_space;
 80066d8:	2314      	movs	r3, #20
 80066da:	18fb      	adds	r3, r7, r3
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	8b12      	ldrh	r2, [r2, #24]
 80066e0:	801a      	strh	r2, [r3, #0]
   UG_S16 w;
   UG_CHAR chr;
   char* str = txt->str;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	60fb      	str	r3, [r7, #12]
   char* c = str;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	60bb      	str	r3, [r7, #8]

   _UG_FontSelect(txt->font);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	0018      	movs	r0, r3
 80066f2:	f7ff f9d9 	bl	8005aa8 <_UG_FontSelect>

   rc=1;
 80066f6:	232c      	movs	r3, #44	@ 0x2c
 80066f8:	18fb      	adds	r3, r7, r3
 80066fa:	2201      	movs	r2, #1
 80066fc:	801a      	strh	r2, [r3, #0]
   c=str;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	60bb      	str	r3, [r7, #8]

   while (1)
   {
     #ifdef UGUI_USE_UTF8
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8006702:	4bbb      	ldr	r3, [pc, #748]	@ (80069f0 <_UG_PutText+0x398>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	222d      	movs	r2, #45	@ 0x2d
 8006708:	5c9b      	ldrb	r3, [r3, r2]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d109      	bne.n	8006722 <_UG_PutText+0xca>
       chr = _UG_DecodeUTF8(&c);
 800670e:	2324      	movs	r3, #36	@ 0x24
 8006710:	18fc      	adds	r4, r7, r3
 8006712:	2308      	movs	r3, #8
 8006714:	18fb      	adds	r3, r7, r3
 8006716:	0018      	movs	r0, r3
 8006718:	f7fe ffc8 	bl	80056ac <_UG_DecodeUTF8>
 800671c:	0003      	movs	r3, r0
 800671e:	8023      	strh	r3, [r4, #0]
 8006720:	e006      	b.n	8006730 <_UG_PutText+0xd8>
     }
     else{
       chr = *c++;
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	1c5a      	adds	r2, r3, #1
 8006726:	60ba      	str	r2, [r7, #8]
 8006728:	781a      	ldrb	r2, [r3, #0]
 800672a:	2324      	movs	r3, #36	@ 0x24
 800672c:	18fb      	adds	r3, r7, r3
 800672e:	801a      	strh	r2, [r3, #0]
     }
     #else
     chr = *c++;
     #endif
     if(!chr) break;
 8006730:	2224      	movs	r2, #36	@ 0x24
 8006732:	18bb      	adds	r3, r7, r2
 8006734:	881b      	ldrh	r3, [r3, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00a      	beq.n	8006750 <_UG_PutText+0xf8>
     if ( chr == '\n' ) rc++;
 800673a:	18bb      	adds	r3, r7, r2
 800673c:	881b      	ldrh	r3, [r3, #0]
 800673e:	2b0a      	cmp	r3, #10
 8006740:	d1df      	bne.n	8006702 <_UG_PutText+0xaa>
 8006742:	212c      	movs	r1, #44	@ 0x2c
 8006744:	187b      	adds	r3, r7, r1
 8006746:	881a      	ldrh	r2, [r3, #0]
 8006748:	187b      	adds	r3, r7, r1
 800674a:	3201      	adds	r2, #1
 800674c:	801a      	strh	r2, [r3, #0]
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 800674e:	e7d8      	b.n	8006702 <_UG_PutText+0xaa>
     if(!chr) break;
 8006750:	46c0      	nop			@ (mov r8, r8)
   }

   yp = 0;
 8006752:	2126      	movs	r1, #38	@ 0x26
 8006754:	187b      	adds	r3, r7, r1
 8006756:	2200      	movs	r2, #0
 8006758:	801a      	strh	r2, [r3, #0]
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 800675a:	2319      	movs	r3, #25
 800675c:	18fb      	adds	r3, r7, r3
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	2230      	movs	r2, #48	@ 0x30
 8006762:	4013      	ands	r3, r2
 8006764:	d02f      	beq.n	80067c6 <_UG_PutText+0x16e>
   {
      yp = ye - ys + 1;
 8006766:	2322      	movs	r3, #34	@ 0x22
 8006768:	18fb      	adds	r3, r7, r3
 800676a:	881a      	ldrh	r2, [r3, #0]
 800676c:	2320      	movs	r3, #32
 800676e:	18fb      	adds	r3, r7, r3
 8006770:	881b      	ldrh	r3, [r3, #0]
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	b29b      	uxth	r3, r3
 8006776:	3301      	adds	r3, #1
 8006778:	b29a      	uxth	r2, r3
 800677a:	0008      	movs	r0, r1
 800677c:	183b      	adds	r3, r7, r0
 800677e:	801a      	strh	r2, [r3, #0]
      yp -= char_height*rc;
 8006780:	183b      	adds	r3, r7, r0
 8006782:	881a      	ldrh	r2, [r3, #0]
 8006784:	231e      	movs	r3, #30
 8006786:	18fb      	adds	r3, r7, r3
 8006788:	881b      	ldrh	r3, [r3, #0]
 800678a:	242c      	movs	r4, #44	@ 0x2c
 800678c:	1939      	adds	r1, r7, r4
 800678e:	8809      	ldrh	r1, [r1, #0]
 8006790:	434b      	muls	r3, r1
 8006792:	b29b      	uxth	r3, r3
 8006794:	1ad3      	subs	r3, r2, r3
 8006796:	b29a      	uxth	r2, r3
 8006798:	183b      	adds	r3, r7, r0
 800679a:	801a      	strh	r2, [r3, #0]
      yp -= char_v_space*(rc-1);
 800679c:	183b      	adds	r3, r7, r0
 800679e:	881a      	ldrh	r2, [r3, #0]
 80067a0:	193b      	adds	r3, r7, r4
 80067a2:	881b      	ldrh	r3, [r3, #0]
 80067a4:	3b01      	subs	r3, #1
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	2114      	movs	r1, #20
 80067aa:	1879      	adds	r1, r7, r1
 80067ac:	8809      	ldrh	r1, [r1, #0]
 80067ae:	434b      	muls	r3, r1
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	b29a      	uxth	r2, r3
 80067b6:	183b      	adds	r3, r7, r0
 80067b8:	801a      	strh	r2, [r3, #0]
      if ( yp < 0 ){
 80067ba:	183b      	adds	r3, r7, r0
 80067bc:	2200      	movs	r2, #0
 80067be:	5e9b      	ldrsh	r3, [r3, r2]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	da00      	bge.n	80067c6 <_UG_PutText+0x16e>
 80067c4:	e10c      	b.n	80069e0 <_UG_PutText+0x388>
        return;
      }
   }
   if ( align & ALIGN_V_CENTER ) yp >>= 1;
 80067c6:	2319      	movs	r3, #25
 80067c8:	18fb      	adds	r3, r7, r3
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	2210      	movs	r2, #16
 80067ce:	4013      	ands	r3, r2
 80067d0:	d006      	beq.n	80067e0 <_UG_PutText+0x188>
 80067d2:	2226      	movs	r2, #38	@ 0x26
 80067d4:	18bb      	adds	r3, r7, r2
 80067d6:	18ba      	adds	r2, r7, r2
 80067d8:	2100      	movs	r1, #0
 80067da:	5e52      	ldrsh	r2, [r2, r1]
 80067dc:	1052      	asrs	r2, r2, #1
 80067de:	801a      	strh	r2, [r3, #0]
   yp += ys;
 80067e0:	2126      	movs	r1, #38	@ 0x26
 80067e2:	187b      	adds	r3, r7, r1
 80067e4:	881a      	ldrh	r2, [r3, #0]
 80067e6:	2320      	movs	r3, #32
 80067e8:	18fb      	adds	r3, r7, r3
 80067ea:	881b      	ldrh	r3, [r3, #0]
 80067ec:	18d3      	adds	r3, r2, r3
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	187b      	adds	r3, r7, r1
 80067f2:	801a      	strh	r2, [r3, #0]

   while( 1 )
   {
      sl=0;
 80067f4:	232e      	movs	r3, #46	@ 0x2e
 80067f6:	18fb      	adds	r3, r7, r3
 80067f8:	2200      	movs	r2, #0
 80067fa:	801a      	strh	r2, [r3, #0]
      c=str;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	60bb      	str	r3, [r7, #8]
      wl = 0;
 8006800:	232a      	movs	r3, #42	@ 0x2a
 8006802:	18fb      	adds	r3, r7, r3
 8006804:	2200      	movs	r2, #0
 8006806:	801a      	strh	r2, [r3, #0]
      while(1)
      {
        #ifdef UGUI_USE_UTF8
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8006808:	4b79      	ldr	r3, [pc, #484]	@ (80069f0 <_UG_PutText+0x398>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	222d      	movs	r2, #45	@ 0x2d
 800680e:	5c9b      	ldrb	r3, [r3, r2]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d109      	bne.n	8006828 <_UG_PutText+0x1d0>
          chr = _UG_DecodeUTF8(&c);
 8006814:	2324      	movs	r3, #36	@ 0x24
 8006816:	18fc      	adds	r4, r7, r3
 8006818:	2308      	movs	r3, #8
 800681a:	18fb      	adds	r3, r7, r3
 800681c:	0018      	movs	r0, r3
 800681e:	f7fe ff45 	bl	80056ac <_UG_DecodeUTF8>
 8006822:	0003      	movs	r3, r0
 8006824:	8023      	strh	r3, [r4, #0]
 8006826:	e006      	b.n	8006836 <_UG_PutText+0x1de>
        }
        else{
          chr = *c++;
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	1c5a      	adds	r2, r3, #1
 800682c:	60ba      	str	r2, [r7, #8]
 800682e:	781a      	ldrb	r2, [r3, #0]
 8006830:	2324      	movs	r3, #36	@ 0x24
 8006832:	18fb      	adds	r3, r7, r3
 8006834:	801a      	strh	r2, [r3, #0]
        }
        #else
        chr = *c++;
        #endif
        if( chr == 0 || chr == '\n'){
 8006836:	2224      	movs	r2, #36	@ 0x24
 8006838:	18bb      	adds	r3, r7, r2
 800683a:	881b      	ldrh	r3, [r3, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d029      	beq.n	8006894 <_UG_PutText+0x23c>
 8006840:	18bb      	adds	r3, r7, r2
 8006842:	881b      	ldrh	r3, [r3, #0]
 8006844:	2b0a      	cmp	r3, #10
 8006846:	d025      	beq.n	8006894 <_UG_PutText+0x23c>
          break;
        }
         w = _UG_GetCharData(chr, NULL);
 8006848:	2512      	movs	r5, #18
 800684a:	197c      	adds	r4, r7, r5
 800684c:	18bb      	adds	r3, r7, r2
 800684e:	881b      	ldrh	r3, [r3, #0]
 8006850:	2100      	movs	r1, #0
 8006852:	0018      	movs	r0, r3
 8006854:	f7fe ffd8 	bl	8005808 <_UG_GetCharData>
 8006858:	0003      	movs	r3, r0
 800685a:	8023      	strh	r3, [r4, #0]
         if (w == -1){continue;}
 800685c:	0029      	movs	r1, r5
 800685e:	187b      	adds	r3, r7, r1
 8006860:	2200      	movs	r2, #0
 8006862:	5e9b      	ldrsh	r3, [r3, r2]
 8006864:	3301      	adds	r3, #1
 8006866:	d013      	beq.n	8006890 <_UG_PutText+0x238>
         sl++;
 8006868:	202e      	movs	r0, #46	@ 0x2e
 800686a:	183b      	adds	r3, r7, r0
 800686c:	881a      	ldrh	r2, [r3, #0]
 800686e:	183b      	adds	r3, r7, r0
 8006870:	3201      	adds	r2, #1
 8006872:	801a      	strh	r2, [r3, #0]
         wl += w + char_h_space;
 8006874:	187b      	adds	r3, r7, r1
 8006876:	881a      	ldrh	r2, [r3, #0]
 8006878:	2316      	movs	r3, #22
 800687a:	18fb      	adds	r3, r7, r3
 800687c:	881b      	ldrh	r3, [r3, #0]
 800687e:	18d3      	adds	r3, r2, r3
 8006880:	b299      	uxth	r1, r3
 8006882:	222a      	movs	r2, #42	@ 0x2a
 8006884:	18bb      	adds	r3, r7, r2
 8006886:	18ba      	adds	r2, r7, r2
 8006888:	8812      	ldrh	r2, [r2, #0]
 800688a:	188a      	adds	r2, r1, r2
 800688c:	801a      	strh	r2, [r3, #0]
 800688e:	e7bb      	b.n	8006808 <_UG_PutText+0x1b0>
         if (w == -1){continue;}
 8006890:	46c0      	nop			@ (mov r8, r8)
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8006892:	e7b9      	b.n	8006808 <_UG_PutText+0x1b0>
      }
      wl -= char_h_space;
 8006894:	2316      	movs	r3, #22
 8006896:	18fb      	adds	r3, r7, r3
 8006898:	881a      	ldrh	r2, [r3, #0]
 800689a:	202a      	movs	r0, #42	@ 0x2a
 800689c:	183b      	adds	r3, r7, r0
 800689e:	1839      	adds	r1, r7, r0
 80068a0:	8809      	ldrh	r1, [r1, #0]
 80068a2:	1a8a      	subs	r2, r1, r2
 80068a4:	801a      	strh	r2, [r3, #0]

      xp = xe - xs + 1;
 80068a6:	231a      	movs	r3, #26
 80068a8:	18fb      	adds	r3, r7, r3
 80068aa:	881a      	ldrh	r2, [r3, #0]
 80068ac:	231c      	movs	r3, #28
 80068ae:	18fb      	adds	r3, r7, r3
 80068b0:	881b      	ldrh	r3, [r3, #0]
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	3301      	adds	r3, #1
 80068b8:	b29a      	uxth	r2, r3
 80068ba:	2128      	movs	r1, #40	@ 0x28
 80068bc:	187b      	adds	r3, r7, r1
 80068be:	801a      	strh	r2, [r3, #0]
      xp -= wl;
 80068c0:	187b      	adds	r3, r7, r1
 80068c2:	881a      	ldrh	r2, [r3, #0]
 80068c4:	183b      	adds	r3, r7, r0
 80068c6:	881b      	ldrh	r3, [r3, #0]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	187b      	adds	r3, r7, r1
 80068ce:	801a      	strh	r2, [r3, #0]
      if ( xp < 0 ) break;
 80068d0:	187b      	adds	r3, r7, r1
 80068d2:	2200      	movs	r2, #0
 80068d4:	5e9b      	ldrsh	r3, [r3, r2]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	da00      	bge.n	80068dc <_UG_PutText+0x284>
 80068da:	e083      	b.n	80069e4 <_UG_PutText+0x38c>

      if ( align & ALIGN_H_LEFT ) xp = 0;
 80068dc:	2319      	movs	r3, #25
 80068de:	18fb      	adds	r3, r7, r3
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	2201      	movs	r2, #1
 80068e4:	4013      	ands	r3, r2
 80068e6:	d003      	beq.n	80068f0 <_UG_PutText+0x298>
 80068e8:	187b      	adds	r3, r7, r1
 80068ea:	2200      	movs	r2, #0
 80068ec:	801a      	strh	r2, [r3, #0]
 80068ee:	e00c      	b.n	800690a <_UG_PutText+0x2b2>
      else if ( align & ALIGN_H_CENTER ) xp >>= 1;
 80068f0:	2319      	movs	r3, #25
 80068f2:	18fb      	adds	r3, r7, r3
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	2202      	movs	r2, #2
 80068f8:	4013      	ands	r3, r2
 80068fa:	d006      	beq.n	800690a <_UG_PutText+0x2b2>
 80068fc:	2228      	movs	r2, #40	@ 0x28
 80068fe:	18bb      	adds	r3, r7, r2
 8006900:	18ba      	adds	r2, r7, r2
 8006902:	2100      	movs	r1, #0
 8006904:	5e52      	ldrsh	r2, [r2, r1]
 8006906:	1052      	asrs	r2, r2, #1
 8006908:	801a      	strh	r2, [r3, #0]
      xp += xs;
 800690a:	2128      	movs	r1, #40	@ 0x28
 800690c:	187b      	adds	r3, r7, r1
 800690e:	881a      	ldrh	r2, [r3, #0]
 8006910:	231c      	movs	r3, #28
 8006912:	18fb      	adds	r3, r7, r3
 8006914:	881b      	ldrh	r3, [r3, #0]
 8006916:	18d3      	adds	r3, r2, r3
 8006918:	b29a      	uxth	r2, r3
 800691a:	187b      	adds	r3, r7, r1
 800691c:	801a      	strh	r2, [r3, #0]


      while(1){
         #ifdef UGUI_USE_UTF8
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 800691e:	4b34      	ldr	r3, [pc, #208]	@ (80069f0 <_UG_PutText+0x398>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	222d      	movs	r2, #45	@ 0x2d
 8006924:	5c9b      	ldrb	r3, [r3, r2]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d109      	bne.n	800693e <_UG_PutText+0x2e6>
           chr = _UG_DecodeUTF8(&str);
 800692a:	2324      	movs	r3, #36	@ 0x24
 800692c:	18fc      	adds	r4, r7, r3
 800692e:	230c      	movs	r3, #12
 8006930:	18fb      	adds	r3, r7, r3
 8006932:	0018      	movs	r0, r3
 8006934:	f7fe feba 	bl	80056ac <_UG_DecodeUTF8>
 8006938:	0003      	movs	r3, r0
 800693a:	8023      	strh	r3, [r4, #0]
 800693c:	e006      	b.n	800694c <_UG_PutText+0x2f4>
         }
         else{
           chr = *str++;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	1c5a      	adds	r2, r3, #1
 8006942:	60fa      	str	r2, [r7, #12]
 8006944:	781a      	ldrb	r2, [r3, #0]
 8006946:	2324      	movs	r3, #36	@ 0x24
 8006948:	18fb      	adds	r3, r7, r3
 800694a:	801a      	strh	r2, [r3, #0]
         }
         #else
         chr = *str++;
         #endif
         if ( chr == 0 ){
 800694c:	2024      	movs	r0, #36	@ 0x24
 800694e:	183b      	adds	r3, r7, r0
 8006950:	881b      	ldrh	r3, [r3, #0]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d048      	beq.n	80069e8 <_UG_PutText+0x390>
           return;
         }
         else if(chr=='\n'){
 8006956:	183b      	adds	r3, r7, r0
 8006958:	881b      	ldrh	r3, [r3, #0]
 800695a:	2b0a      	cmp	r3, #10
 800695c:	d02b      	beq.n	80069b6 <_UG_PutText+0x35e>
           break;
         }
         w = _UG_PutChar(chr,xp,yp,txt->fc,txt->bc);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	8a1e      	ldrh	r6, [r3, #16]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	8a5b      	ldrh	r3, [r3, #18]
 8006966:	2212      	movs	r2, #18
 8006968:	18bc      	adds	r4, r7, r2
 800696a:	2126      	movs	r1, #38	@ 0x26
 800696c:	187a      	adds	r2, r7, r1
 800696e:	2100      	movs	r1, #0
 8006970:	5e55      	ldrsh	r5, [r2, r1]
 8006972:	2128      	movs	r1, #40	@ 0x28
 8006974:	187a      	adds	r2, r7, r1
 8006976:	2100      	movs	r1, #0
 8006978:	5e51      	ldrsh	r1, [r2, r1]
 800697a:	183a      	adds	r2, r7, r0
 800697c:	8810      	ldrh	r0, [r2, #0]
 800697e:	9300      	str	r3, [sp, #0]
 8006980:	0033      	movs	r3, r6
 8006982:	002a      	movs	r2, r5
 8006984:	f7ff f914 	bl	8005bb0 <_UG_PutChar>
 8006988:	0003      	movs	r3, r0
 800698a:	8023      	strh	r3, [r4, #0]
         if(w!=-1)
 800698c:	2212      	movs	r2, #18
 800698e:	18bb      	adds	r3, r7, r2
 8006990:	2000      	movs	r0, #0
 8006992:	5e1b      	ldrsh	r3, [r3, r0]
 8006994:	3301      	adds	r3, #1
 8006996:	d0c2      	beq.n	800691e <_UG_PutText+0x2c6>
           xp += w + char_h_space;
 8006998:	18bb      	adds	r3, r7, r2
 800699a:	881a      	ldrh	r2, [r3, #0]
 800699c:	2316      	movs	r3, #22
 800699e:	18fb      	adds	r3, r7, r3
 80069a0:	881b      	ldrh	r3, [r3, #0]
 80069a2:	18d3      	adds	r3, r2, r3
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	2128      	movs	r1, #40	@ 0x28
 80069a8:	187b      	adds	r3, r7, r1
 80069aa:	881b      	ldrh	r3, [r3, #0]
 80069ac:	18d3      	adds	r3, r2, r3
 80069ae:	b29a      	uxth	r2, r3
 80069b0:	187b      	adds	r3, r7, r1
 80069b2:	801a      	strh	r2, [r3, #0]
 80069b4:	e7b3      	b.n	800691e <_UG_PutText+0x2c6>
           break;
 80069b6:	46c0      	nop			@ (mov r8, r8)
      }
      yp += char_height + char_v_space;
 80069b8:	231e      	movs	r3, #30
 80069ba:	18fb      	adds	r3, r7, r3
 80069bc:	881a      	ldrh	r2, [r3, #0]
 80069be:	2314      	movs	r3, #20
 80069c0:	18fb      	adds	r3, r7, r3
 80069c2:	881b      	ldrh	r3, [r3, #0]
 80069c4:	18d3      	adds	r3, r2, r3
 80069c6:	b29a      	uxth	r2, r3
 80069c8:	2126      	movs	r1, #38	@ 0x26
 80069ca:	187b      	adds	r3, r7, r1
 80069cc:	881b      	ldrh	r3, [r3, #0]
 80069ce:	18d3      	adds	r3, r2, r3
 80069d0:	b29a      	uxth	r2, r3
 80069d2:	187b      	adds	r3, r7, r1
 80069d4:	801a      	strh	r2, [r3, #0]
      sl=0;
 80069d6:	e70d      	b.n	80067f4 <_UG_PutText+0x19c>
     return;
 80069d8:	46c0      	nop			@ (mov r8, r8)
 80069da:	e006      	b.n	80069ea <_UG_PutText+0x392>
     return;
 80069dc:	46c0      	nop			@ (mov r8, r8)
 80069de:	e004      	b.n	80069ea <_UG_PutText+0x392>
        return;
 80069e0:	46c0      	nop			@ (mov r8, r8)
 80069e2:	e002      	b.n	80069ea <_UG_PutText+0x392>
      if ( xp < 0 ) break;
 80069e4:	46c0      	nop			@ (mov r8, r8)
 80069e6:	e000      	b.n	80069ea <_UG_PutText+0x392>
           return;
 80069e8:	46c0      	nop			@ (mov r8, r8)
   }
}
 80069ea:	46bd      	mov	sp, r7
 80069ec:	b00d      	add	sp, #52	@ 0x34
 80069ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069f0:	200002f8 	.word	0x200002f8

080069f4 <_UG_DrawObjectFrame>:
   }
   return NULL;
}

void _UG_DrawObjectFrame( UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye, UG_COLOR* p )
{
 80069f4:	b5b0      	push	{r4, r5, r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af02      	add	r7, sp, #8
 80069fa:	0005      	movs	r5, r0
 80069fc:	000c      	movs	r4, r1
 80069fe:	0010      	movs	r0, r2
 8006a00:	0019      	movs	r1, r3
 8006a02:	1dbb      	adds	r3, r7, #6
 8006a04:	1c2a      	adds	r2, r5, #0
 8006a06:	801a      	strh	r2, [r3, #0]
 8006a08:	1d3b      	adds	r3, r7, #4
 8006a0a:	1c22      	adds	r2, r4, #0
 8006a0c:	801a      	strh	r2, [r3, #0]
 8006a0e:	1cbb      	adds	r3, r7, #2
 8006a10:	1c02      	adds	r2, r0, #0
 8006a12:	801a      	strh	r2, [r3, #0]
 8006a14:	003b      	movs	r3, r7
 8006a16:	1c0a      	adds	r2, r1, #0
 8006a18:	801a      	strh	r2, [r3, #0]
   // Frame 0
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 8006a1a:	1cbb      	adds	r3, r7, #2
 8006a1c:	881b      	ldrh	r3, [r3, #0]
 8006a1e:	3b01      	subs	r3, #1
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	b21c      	sxth	r4, r3
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	1c9a      	adds	r2, r3, #2
 8006a28:	61ba      	str	r2, [r7, #24]
 8006a2a:	881b      	ldrh	r3, [r3, #0]
 8006a2c:	1d3a      	adds	r2, r7, #4
 8006a2e:	2500      	movs	r5, #0
 8006a30:	5f55      	ldrsh	r5, [r2, r5]
 8006a32:	1d3a      	adds	r2, r7, #4
 8006a34:	2100      	movs	r1, #0
 8006a36:	5e51      	ldrsh	r1, [r2, r1]
 8006a38:	1dba      	adds	r2, r7, #6
 8006a3a:	2000      	movs	r0, #0
 8006a3c:	5e10      	ldrsh	r0, [r2, r0]
 8006a3e:	9300      	str	r3, [sp, #0]
 8006a40:	002b      	movs	r3, r5
 8006a42:	0022      	movs	r2, r4
 8006a44:	f7fe fbc4 	bl	80051d0 <UG_DrawLine>
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 8006a48:	1d3b      	adds	r3, r7, #4
 8006a4a:	881b      	ldrh	r3, [r3, #0]
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	b219      	sxth	r1, r3
 8006a52:	003b      	movs	r3, r7
 8006a54:	881b      	ldrh	r3, [r3, #0]
 8006a56:	3b01      	subs	r3, #1
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	b21d      	sxth	r5, r3
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	1c9a      	adds	r2, r3, #2
 8006a60:	61ba      	str	r2, [r7, #24]
 8006a62:	881b      	ldrh	r3, [r3, #0]
 8006a64:	1dba      	adds	r2, r7, #6
 8006a66:	2400      	movs	r4, #0
 8006a68:	5f14      	ldrsh	r4, [r2, r4]
 8006a6a:	1dba      	adds	r2, r7, #6
 8006a6c:	2000      	movs	r0, #0
 8006a6e:	5e10      	ldrsh	r0, [r2, r0]
 8006a70:	9300      	str	r3, [sp, #0]
 8006a72:	002b      	movs	r3, r5
 8006a74:	0022      	movs	r2, r4
 8006a76:	f7fe fbab 	bl	80051d0 <UG_DrawLine>
   UG_DrawLine(xs, ye  , xe  , ye  , *p++);
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	1c9a      	adds	r2, r3, #2
 8006a7e:	61ba      	str	r2, [r7, #24]
 8006a80:	881b      	ldrh	r3, [r3, #0]
 8006a82:	003a      	movs	r2, r7
 8006a84:	2500      	movs	r5, #0
 8006a86:	5f55      	ldrsh	r5, [r2, r5]
 8006a88:	1cba      	adds	r2, r7, #2
 8006a8a:	2400      	movs	r4, #0
 8006a8c:	5f14      	ldrsh	r4, [r2, r4]
 8006a8e:	003a      	movs	r2, r7
 8006a90:	2100      	movs	r1, #0
 8006a92:	5e51      	ldrsh	r1, [r2, r1]
 8006a94:	1dba      	adds	r2, r7, #6
 8006a96:	2000      	movs	r0, #0
 8006a98:	5e10      	ldrsh	r0, [r2, r0]
 8006a9a:	9300      	str	r3, [sp, #0]
 8006a9c:	002b      	movs	r3, r5
 8006a9e:	0022      	movs	r2, r4
 8006aa0:	f7fe fb96 	bl	80051d0 <UG_DrawLine>
   UG_DrawLine(xe, ys  , xe  , ye-1, *p++);
 8006aa4:	003b      	movs	r3, r7
 8006aa6:	881b      	ldrh	r3, [r3, #0]
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	b21d      	sxth	r5, r3
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	1c9a      	adds	r2, r3, #2
 8006ab2:	61ba      	str	r2, [r7, #24]
 8006ab4:	881b      	ldrh	r3, [r3, #0]
 8006ab6:	1cba      	adds	r2, r7, #2
 8006ab8:	2400      	movs	r4, #0
 8006aba:	5f14      	ldrsh	r4, [r2, r4]
 8006abc:	1d3a      	adds	r2, r7, #4
 8006abe:	2100      	movs	r1, #0
 8006ac0:	5e51      	ldrsh	r1, [r2, r1]
 8006ac2:	1cba      	adds	r2, r7, #2
 8006ac4:	2000      	movs	r0, #0
 8006ac6:	5e10      	ldrsh	r0, [r2, r0]
 8006ac8:	9300      	str	r3, [sp, #0]
 8006aca:	002b      	movs	r3, r5
 8006acc:	0022      	movs	r2, r4
 8006ace:	f7fe fb7f 	bl	80051d0 <UG_DrawLine>
   // Frame 1
   UG_DrawLine(xs+1, ys+1, xe-2, ys+1, *p++);
 8006ad2:	1dbb      	adds	r3, r7, #6
 8006ad4:	881b      	ldrh	r3, [r3, #0]
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	b218      	sxth	r0, r3
 8006adc:	1d3b      	adds	r3, r7, #4
 8006ade:	881b      	ldrh	r3, [r3, #0]
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	b219      	sxth	r1, r3
 8006ae6:	1cbb      	adds	r3, r7, #2
 8006ae8:	881b      	ldrh	r3, [r3, #0]
 8006aea:	3b02      	subs	r3, #2
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	b21c      	sxth	r4, r3
 8006af0:	1d3b      	adds	r3, r7, #4
 8006af2:	881b      	ldrh	r3, [r3, #0]
 8006af4:	3301      	adds	r3, #1
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	b21d      	sxth	r5, r3
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	1c9a      	adds	r2, r3, #2
 8006afe:	61ba      	str	r2, [r7, #24]
 8006b00:	881b      	ldrh	r3, [r3, #0]
 8006b02:	9300      	str	r3, [sp, #0]
 8006b04:	002b      	movs	r3, r5
 8006b06:	0022      	movs	r2, r4
 8006b08:	f7fe fb62 	bl	80051d0 <UG_DrawLine>
   UG_DrawLine(xs+1, ys+2, xs+1, ye-2, *p++);
 8006b0c:	1dbb      	adds	r3, r7, #6
 8006b0e:	881b      	ldrh	r3, [r3, #0]
 8006b10:	3301      	adds	r3, #1
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	b218      	sxth	r0, r3
 8006b16:	1d3b      	adds	r3, r7, #4
 8006b18:	881b      	ldrh	r3, [r3, #0]
 8006b1a:	3302      	adds	r3, #2
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	b219      	sxth	r1, r3
 8006b20:	1dbb      	adds	r3, r7, #6
 8006b22:	881b      	ldrh	r3, [r3, #0]
 8006b24:	3301      	adds	r3, #1
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	b21c      	sxth	r4, r3
 8006b2a:	003b      	movs	r3, r7
 8006b2c:	881b      	ldrh	r3, [r3, #0]
 8006b2e:	3b02      	subs	r3, #2
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	b21d      	sxth	r5, r3
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	1c9a      	adds	r2, r3, #2
 8006b38:	61ba      	str	r2, [r7, #24]
 8006b3a:	881b      	ldrh	r3, [r3, #0]
 8006b3c:	9300      	str	r3, [sp, #0]
 8006b3e:	002b      	movs	r3, r5
 8006b40:	0022      	movs	r2, r4
 8006b42:	f7fe fb45 	bl	80051d0 <UG_DrawLine>
   UG_DrawLine(xs+1, ye-1, xe-1, ye-1, *p++);
 8006b46:	1dbb      	adds	r3, r7, #6
 8006b48:	881b      	ldrh	r3, [r3, #0]
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	b218      	sxth	r0, r3
 8006b50:	003b      	movs	r3, r7
 8006b52:	881b      	ldrh	r3, [r3, #0]
 8006b54:	3b01      	subs	r3, #1
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	b219      	sxth	r1, r3
 8006b5a:	1cbb      	adds	r3, r7, #2
 8006b5c:	881b      	ldrh	r3, [r3, #0]
 8006b5e:	3b01      	subs	r3, #1
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	b21c      	sxth	r4, r3
 8006b64:	003b      	movs	r3, r7
 8006b66:	881b      	ldrh	r3, [r3, #0]
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	b21d      	sxth	r5, r3
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	1c9a      	adds	r2, r3, #2
 8006b72:	61ba      	str	r2, [r7, #24]
 8006b74:	881b      	ldrh	r3, [r3, #0]
 8006b76:	9300      	str	r3, [sp, #0]
 8006b78:	002b      	movs	r3, r5
 8006b7a:	0022      	movs	r2, r4
 8006b7c:	f7fe fb28 	bl	80051d0 <UG_DrawLine>
   UG_DrawLine(xe-1, ys+1, xe-1, ye-2, *p++);
 8006b80:	1cbb      	adds	r3, r7, #2
 8006b82:	881b      	ldrh	r3, [r3, #0]
 8006b84:	3b01      	subs	r3, #1
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	b218      	sxth	r0, r3
 8006b8a:	1d3b      	adds	r3, r7, #4
 8006b8c:	881b      	ldrh	r3, [r3, #0]
 8006b8e:	3301      	adds	r3, #1
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	b219      	sxth	r1, r3
 8006b94:	1cbb      	adds	r3, r7, #2
 8006b96:	881b      	ldrh	r3, [r3, #0]
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	b21c      	sxth	r4, r3
 8006b9e:	003b      	movs	r3, r7
 8006ba0:	881b      	ldrh	r3, [r3, #0]
 8006ba2:	3b02      	subs	r3, #2
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	b21d      	sxth	r5, r3
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	1c9a      	adds	r2, r3, #2
 8006bac:	61ba      	str	r2, [r7, #24]
 8006bae:	881b      	ldrh	r3, [r3, #0]
 8006bb0:	9300      	str	r3, [sp, #0]
 8006bb2:	002b      	movs	r3, r5
 8006bb4:	0022      	movs	r2, r4
 8006bb6:	f7fe fb0b 	bl	80051d0 <UG_DrawLine>
   // Frame 2
   UG_DrawLine(xs+2, ys+2, xe-3, ys+2, *p++);
 8006bba:	1dbb      	adds	r3, r7, #6
 8006bbc:	881b      	ldrh	r3, [r3, #0]
 8006bbe:	3302      	adds	r3, #2
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	b218      	sxth	r0, r3
 8006bc4:	1d3b      	adds	r3, r7, #4
 8006bc6:	881b      	ldrh	r3, [r3, #0]
 8006bc8:	3302      	adds	r3, #2
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	b219      	sxth	r1, r3
 8006bce:	1cbb      	adds	r3, r7, #2
 8006bd0:	881b      	ldrh	r3, [r3, #0]
 8006bd2:	3b03      	subs	r3, #3
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	b21c      	sxth	r4, r3
 8006bd8:	1d3b      	adds	r3, r7, #4
 8006bda:	881b      	ldrh	r3, [r3, #0]
 8006bdc:	3302      	adds	r3, #2
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	b21d      	sxth	r5, r3
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	1c9a      	adds	r2, r3, #2
 8006be6:	61ba      	str	r2, [r7, #24]
 8006be8:	881b      	ldrh	r3, [r3, #0]
 8006bea:	9300      	str	r3, [sp, #0]
 8006bec:	002b      	movs	r3, r5
 8006bee:	0022      	movs	r2, r4
 8006bf0:	f7fe faee 	bl	80051d0 <UG_DrawLine>
   UG_DrawLine(xs+2, ys+3, xs+2, ye-3, *p++);
 8006bf4:	1dbb      	adds	r3, r7, #6
 8006bf6:	881b      	ldrh	r3, [r3, #0]
 8006bf8:	3302      	adds	r3, #2
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	b218      	sxth	r0, r3
 8006bfe:	1d3b      	adds	r3, r7, #4
 8006c00:	881b      	ldrh	r3, [r3, #0]
 8006c02:	3303      	adds	r3, #3
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	b219      	sxth	r1, r3
 8006c08:	1dbb      	adds	r3, r7, #6
 8006c0a:	881b      	ldrh	r3, [r3, #0]
 8006c0c:	3302      	adds	r3, #2
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	b21c      	sxth	r4, r3
 8006c12:	003b      	movs	r3, r7
 8006c14:	881b      	ldrh	r3, [r3, #0]
 8006c16:	3b03      	subs	r3, #3
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	b21d      	sxth	r5, r3
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	1c9a      	adds	r2, r3, #2
 8006c20:	61ba      	str	r2, [r7, #24]
 8006c22:	881b      	ldrh	r3, [r3, #0]
 8006c24:	9300      	str	r3, [sp, #0]
 8006c26:	002b      	movs	r3, r5
 8006c28:	0022      	movs	r2, r4
 8006c2a:	f7fe fad1 	bl	80051d0 <UG_DrawLine>
   UG_DrawLine(xs+2, ye-2, xe-2, ye-2, *p++);
 8006c2e:	1dbb      	adds	r3, r7, #6
 8006c30:	881b      	ldrh	r3, [r3, #0]
 8006c32:	3302      	adds	r3, #2
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	b218      	sxth	r0, r3
 8006c38:	003b      	movs	r3, r7
 8006c3a:	881b      	ldrh	r3, [r3, #0]
 8006c3c:	3b02      	subs	r3, #2
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	b219      	sxth	r1, r3
 8006c42:	1cbb      	adds	r3, r7, #2
 8006c44:	881b      	ldrh	r3, [r3, #0]
 8006c46:	3b02      	subs	r3, #2
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	b21c      	sxth	r4, r3
 8006c4c:	003b      	movs	r3, r7
 8006c4e:	881b      	ldrh	r3, [r3, #0]
 8006c50:	3b02      	subs	r3, #2
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	b21d      	sxth	r5, r3
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	1c9a      	adds	r2, r3, #2
 8006c5a:	61ba      	str	r2, [r7, #24]
 8006c5c:	881b      	ldrh	r3, [r3, #0]
 8006c5e:	9300      	str	r3, [sp, #0]
 8006c60:	002b      	movs	r3, r5
 8006c62:	0022      	movs	r2, r4
 8006c64:	f7fe fab4 	bl	80051d0 <UG_DrawLine>
   UG_DrawLine(xe-2, ys+2, xe-2, ye-3, *p);
 8006c68:	1cbb      	adds	r3, r7, #2
 8006c6a:	881b      	ldrh	r3, [r3, #0]
 8006c6c:	3b02      	subs	r3, #2
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	b218      	sxth	r0, r3
 8006c72:	1d3b      	adds	r3, r7, #4
 8006c74:	881b      	ldrh	r3, [r3, #0]
 8006c76:	3302      	adds	r3, #2
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	b219      	sxth	r1, r3
 8006c7c:	1cbb      	adds	r3, r7, #2
 8006c7e:	881b      	ldrh	r3, [r3, #0]
 8006c80:	3b02      	subs	r3, #2
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	b21a      	sxth	r2, r3
 8006c86:	003b      	movs	r3, r7
 8006c88:	881b      	ldrh	r3, [r3, #0]
 8006c8a:	3b03      	subs	r3, #3
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	b21c      	sxth	r4, r3
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	881b      	ldrh	r3, [r3, #0]
 8006c94:	9300      	str	r3, [sp, #0]
 8006c96:	0023      	movs	r3, r4
 8006c98:	f7fe fa9a 	bl	80051d0 <UG_DrawLine>
}
 8006c9c:	46c0      	nop			@ (mov r8, r8)
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	b002      	add	sp, #8
 8006ca2:	bdb0      	pop	{r4, r5, r7, pc}

08006ca4 <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	0002      	movs	r2, r0
 8006cac:	6039      	str	r1, [r7, #0]
 8006cae:	1dfb      	adds	r3, r7, #7
 8006cb0:	701a      	strb	r2, [r3, #0]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8006cb2:	1dfb      	adds	r3, r7, #7
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	2b03      	cmp	r3, #3
 8006cb8:	d814      	bhi.n	8006ce4 <UG_DriverRegister+0x40>

   gui->driver[type].driver = driver;
 8006cba:	4b0c      	ldr	r3, [pc, #48]	@ (8006cec <UG_DriverRegister+0x48>)
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	1dfb      	adds	r3, r7, #7
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	330a      	adds	r3, #10
 8006cc4:	00db      	lsls	r3, r3, #3
 8006cc6:	18d3      	adds	r3, r2, r3
 8006cc8:	3304      	adds	r3, #4
 8006cca:	683a      	ldr	r2, [r7, #0]
 8006ccc:	601a      	str	r2, [r3, #0]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 8006cce:	4b07      	ldr	r3, [pc, #28]	@ (8006cec <UG_DriverRegister+0x48>)
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	1dfb      	adds	r3, r7, #7
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	330a      	adds	r3, #10
 8006cd8:	00db      	lsls	r3, r3, #3
 8006cda:	18d3      	adds	r3, r2, r3
 8006cdc:	3308      	adds	r3, #8
 8006cde:	2203      	movs	r2, #3
 8006ce0:	701a      	strb	r2, [r3, #0]
 8006ce2:	e000      	b.n	8006ce6 <UG_DriverRegister+0x42>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8006ce4:	46c0      	nop			@ (mov r8, r8)
}
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	b002      	add	sp, #8
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	200002f8 	.word	0x200002f8

08006cf0 <UG_Update>:

/* -------------------------------------------------------------------------------- */
/* -- MISCELLANEOUS FUNCTIONS                                                    -- */
/* -------------------------------------------------------------------------------- */
void UG_Update( void )
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b082      	sub	sp, #8
 8006cf4:	af00      	add	r7, sp, #0
   UG_WINDOW* wnd;

   /* Is somebody waiting for this update? */
   if ( gui->state & UG_STATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_STATUS_WAIT_FOR_UPDATE;
 8006cf6:	4b61      	ldr	r3, [pc, #388]	@ (8006e7c <UG_Update+0x18c>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2252      	movs	r2, #82	@ 0x52
 8006cfc:	5c9b      	ldrb	r3, [r3, r2]
 8006cfe:	001a      	movs	r2, r3
 8006d00:	2301      	movs	r3, #1
 8006d02:	4013      	ands	r3, r2
 8006d04:	d00a      	beq.n	8006d1c <UG_Update+0x2c>
 8006d06:	4b5d      	ldr	r3, [pc, #372]	@ (8006e7c <UG_Update+0x18c>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2252      	movs	r2, #82	@ 0x52
 8006d0c:	5c9a      	ldrb	r2, [r3, r2]
 8006d0e:	4b5b      	ldr	r3, [pc, #364]	@ (8006e7c <UG_Update+0x18c>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2101      	movs	r1, #1
 8006d14:	438a      	bics	r2, r1
 8006d16:	b2d1      	uxtb	r1, r2
 8006d18:	2252      	movs	r2, #82	@ 0x52
 8006d1a:	5499      	strb	r1, [r3, r2]

   /* Keep track of the windows */
   if ( gui->next_window != gui->active_window )
 8006d1c:	4b57      	ldr	r3, [pc, #348]	@ (8006e7c <UG_Update+0x18c>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	68da      	ldr	r2, [r3, #12]
 8006d22:	4b56      	ldr	r3, [pc, #344]	@ (8006e7c <UG_Update+0x18c>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	691b      	ldr	r3, [r3, #16]
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d100      	bne.n	8006d2e <UG_Update+0x3e>
 8006d2c:	e071      	b.n	8006e12 <UG_Update+0x122>
   {
      if ( gui->next_window != NULL )
 8006d2e:	4b53      	ldr	r3, [pc, #332]	@ (8006e7c <UG_Update+0x18c>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d06c      	beq.n	8006e12 <UG_Update+0x122>
      {
         gui->last_window = gui->active_window;
 8006d38:	4b50      	ldr	r3, [pc, #320]	@ (8006e7c <UG_Update+0x18c>)
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	4b4f      	ldr	r3, [pc, #316]	@ (8006e7c <UG_Update+0x18c>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	6912      	ldr	r2, [r2, #16]
 8006d42:	615a      	str	r2, [r3, #20]
         gui->active_window = gui->next_window;
 8006d44:	4b4d      	ldr	r3, [pc, #308]	@ (8006e7c <UG_Update+0x18c>)
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	4b4c      	ldr	r3, [pc, #304]	@ (8006e7c <UG_Update+0x18c>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	68d2      	ldr	r2, [r2, #12]
 8006d4e:	611a      	str	r2, [r3, #16]

         /* Do we need to draw an inactive title? */
         if ((gui->last_window != NULL) && (gui->last_window->style & WND_STYLE_SHOW_TITLE) && (gui->last_window->state & WND_STATE_VISIBLE) )
 8006d50:	4b4a      	ldr	r3, [pc, #296]	@ (8006e7c <UG_Update+0x18c>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	695b      	ldr	r3, [r3, #20]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d045      	beq.n	8006de6 <UG_Update+0xf6>
 8006d5a:	4b48      	ldr	r3, [pc, #288]	@ (8006e7c <UG_Update+0x18c>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	695b      	ldr	r3, [r3, #20]
 8006d60:	7d9b      	ldrb	r3, [r3, #22]
 8006d62:	001a      	movs	r2, r3
 8006d64:	2302      	movs	r3, #2
 8006d66:	4013      	ands	r3, r2
 8006d68:	d03d      	beq.n	8006de6 <UG_Update+0xf6>
 8006d6a:	4b44      	ldr	r3, [pc, #272]	@ (8006e7c <UG_Update+0x18c>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	695b      	ldr	r3, [r3, #20]
 8006d70:	7a1b      	ldrb	r3, [r3, #8]
 8006d72:	001a      	movs	r2, r3
 8006d74:	2308      	movs	r3, #8
 8006d76:	4013      	ands	r3, r2
 8006d78:	d035      	beq.n	8006de6 <UG_Update+0xf6>
         {
            /* Do both windows differ in size */
            if ( (gui->last_window->xs != gui->active_window->xs) || (gui->last_window->xe != gui->active_window->xe) || (gui->last_window->ys != gui->active_window->ys) || (gui->last_window->ye != gui->active_window->ye) )
 8006d7a:	4b40      	ldr	r3, [pc, #256]	@ (8006e7c <UG_Update+0x18c>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	695b      	ldr	r3, [r3, #20]
 8006d80:	220e      	movs	r2, #14
 8006d82:	5e9a      	ldrsh	r2, [r3, r2]
 8006d84:	4b3d      	ldr	r3, [pc, #244]	@ (8006e7c <UG_Update+0x18c>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	210e      	movs	r1, #14
 8006d8c:	5e5b      	ldrsh	r3, [r3, r1]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d123      	bne.n	8006dda <UG_Update+0xea>
 8006d92:	4b3a      	ldr	r3, [pc, #232]	@ (8006e7c <UG_Update+0x18c>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	695b      	ldr	r3, [r3, #20]
 8006d98:	2212      	movs	r2, #18
 8006d9a:	5e9a      	ldrsh	r2, [r3, r2]
 8006d9c:	4b37      	ldr	r3, [pc, #220]	@ (8006e7c <UG_Update+0x18c>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	2112      	movs	r1, #18
 8006da4:	5e5b      	ldrsh	r3, [r3, r1]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d117      	bne.n	8006dda <UG_Update+0xea>
 8006daa:	4b34      	ldr	r3, [pc, #208]	@ (8006e7c <UG_Update+0x18c>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	695b      	ldr	r3, [r3, #20]
 8006db0:	2210      	movs	r2, #16
 8006db2:	5e9a      	ldrsh	r2, [r3, r2]
 8006db4:	4b31      	ldr	r3, [pc, #196]	@ (8006e7c <UG_Update+0x18c>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	2110      	movs	r1, #16
 8006dbc:	5e5b      	ldrsh	r3, [r3, r1]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d10b      	bne.n	8006dda <UG_Update+0xea>
 8006dc2:	4b2e      	ldr	r3, [pc, #184]	@ (8006e7c <UG_Update+0x18c>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	695b      	ldr	r3, [r3, #20]
 8006dc8:	2214      	movs	r2, #20
 8006dca:	5e9a      	ldrsh	r2, [r3, r2]
 8006dcc:	4b2b      	ldr	r3, [pc, #172]	@ (8006e7c <UG_Update+0x18c>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	2114      	movs	r1, #20
 8006dd4:	5e5b      	ldrsh	r3, [r3, r1]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d005      	beq.n	8006de6 <UG_Update+0xf6>
            {
               /* Redraw title of the last window */
               _UG_WindowDrawTitle( gui->last_window );
 8006dda:	4b28      	ldr	r3, [pc, #160]	@ (8006e7c <UG_Update+0x18c>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	695b      	ldr	r3, [r3, #20]
 8006de0:	0018      	movs	r0, r3
 8006de2:	f000 f84d 	bl	8006e80 <_UG_WindowDrawTitle>
            }
         }
         gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 8006de6:	4b25      	ldr	r3, [pc, #148]	@ (8006e7c <UG_Update+0x18c>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	7a1a      	ldrb	r2, [r3, #8]
 8006dee:	4b23      	ldr	r3, [pc, #140]	@ (8006e7c <UG_Update+0x18c>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	2140      	movs	r1, #64	@ 0x40
 8006df6:	438a      	bics	r2, r1
 8006df8:	b2d2      	uxtb	r2, r2
 8006dfa:	721a      	strb	r2, [r3, #8]
         gui->active_window->state |= WND_STATE_UPDATE | WND_STATE_VISIBLE;
 8006dfc:	4b1f      	ldr	r3, [pc, #124]	@ (8006e7c <UG_Update+0x18c>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	7a1a      	ldrb	r2, [r3, #8]
 8006e04:	4b1d      	ldr	r3, [pc, #116]	@ (8006e7c <UG_Update+0x18c>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	2128      	movs	r1, #40	@ 0x28
 8006e0c:	430a      	orrs	r2, r1
 8006e0e:	b2d2      	uxtb	r2, r2
 8006e10:	721a      	strb	r2, [r3, #8]
      }
   }

   /* Is there an active window */
   if ( gui->active_window != NULL )
 8006e12:	4b1a      	ldr	r3, [pc, #104]	@ (8006e7c <UG_Update+0x18c>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	691b      	ldr	r3, [r3, #16]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d01f      	beq.n	8006e5c <UG_Update+0x16c>
   {
      wnd = gui->active_window;
 8006e1c:	4b17      	ldr	r3, [pc, #92]	@ (8006e7c <UG_Update+0x18c>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	607b      	str	r3, [r7, #4]

      /* Does the window need to be updated? */
      if ( wnd->state & WND_STATE_UPDATE )
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	7a1b      	ldrb	r3, [r3, #8]
 8006e28:	001a      	movs	r2, r3
 8006e2a:	2320      	movs	r3, #32
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	d003      	beq.n	8006e38 <UG_Update+0x148>
      {
         /* Do it! */
         _UG_WindowUpdate( wnd );
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	0018      	movs	r0, r3
 8006e34:	f000 f904 	bl	8007040 <_UG_WindowUpdate>
      }

      /* Is the window visible? */
      if ( wnd->state & WND_STATE_VISIBLE )
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	7a1b      	ldrb	r3, [r3, #8]
 8006e3c:	001a      	movs	r2, r3
 8006e3e:	2308      	movs	r3, #8
 8006e40:	4013      	ands	r3, r2
 8006e42:	d00b      	beq.n	8006e5c <UG_Update+0x16c>
      {
         #ifdef UGUI_USE_TOUCH
         _UG_ProcessTouchData( wnd );
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	0018      	movs	r0, r3
 8006e48:	f7ff fa54 	bl	80062f4 <_UG_ProcessTouchData>
         #endif
         _UG_UpdateObjects( wnd );
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	0018      	movs	r0, r3
 8006e50:	f7ff fb46 	bl	80064e0 <_UG_UpdateObjects>
         _UG_HandleEvents( wnd );
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	0018      	movs	r0, r3
 8006e58:	f7ff fba2 	bl	80065a0 <_UG_HandleEvents>
      }
   }
   if(gui->device->flush){
 8006e5c:	4b07      	ldr	r3, [pc, #28]	@ (8006e7c <UG_Update+0x18c>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d004      	beq.n	8006e72 <UG_Update+0x182>
     gui->device->flush();
 8006e68:	4b04      	ldr	r3, [pc, #16]	@ (8006e7c <UG_Update+0x18c>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	4798      	blx	r3
   }
}
 8006e72:	46c0      	nop			@ (mov r8, r8)
 8006e74:	46bd      	mov	sp, r7
 8006e76:	b002      	add	sp, #8
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	46c0      	nop			@ (mov r8, r8)
 8006e7c:	200002f8 	.word	0x200002f8

08006e80 <_UG_WindowDrawTitle>:
   }
   return h;
}

static UG_RESULT _UG_WindowDrawTitle( UG_WINDOW* wnd )
{
 8006e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e82:	b08f      	sub	sp, #60	@ 0x3c
 8006e84:	af02      	add	r7, sp, #8
 8006e86:	6078      	str	r0, [r7, #4]
   UG_TEXT txt;
   UG_S16 xs,ys,xe,ye;

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d100      	bne.n	8006e90 <_UG_WindowDrawTitle+0x10>
 8006e8e:	e0cd      	b.n	800702c <_UG_WindowDrawTitle+0x1ac>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	7a1b      	ldrb	r3, [r3, #8]
 8006e94:	001a      	movs	r2, r3
 8006e96:	2302      	movs	r3, #2
 8006e98:	4013      	ands	r3, r2
 8006e9a:	d100      	bne.n	8006e9e <_UG_WindowDrawTitle+0x1e>
 8006e9c:	e0c6      	b.n	800702c <_UG_WindowDrawTitle+0x1ac>
   {
      xs = wnd->xs;
 8006e9e:	212e      	movs	r1, #46	@ 0x2e
 8006ea0:	187b      	adds	r3, r7, r1
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	89d2      	ldrh	r2, [r2, #14]
 8006ea6:	801a      	strh	r2, [r3, #0]
      ys = wnd->ys;
 8006ea8:	202c      	movs	r0, #44	@ 0x2c
 8006eaa:	183b      	adds	r3, r7, r0
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	8a12      	ldrh	r2, [r2, #16]
 8006eb0:	801a      	strh	r2, [r3, #0]
      xe = wnd->xe;
 8006eb2:	242a      	movs	r4, #42	@ 0x2a
 8006eb4:	193b      	adds	r3, r7, r4
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	8a52      	ldrh	r2, [r2, #18]
 8006eba:	801a      	strh	r2, [r3, #0]
      ye = wnd->ye;
 8006ebc:	2528      	movs	r5, #40	@ 0x28
 8006ebe:	197b      	adds	r3, r7, r5
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	8a92      	ldrh	r2, [r2, #20]
 8006ec4:	801a      	strh	r2, [r3, #0]

      /* 3D style? */
      if ( wnd->style & WND_STYLE_3D )
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	7d9b      	ldrb	r3, [r3, #22]
 8006eca:	001a      	movs	r2, r3
 8006ecc:	2301      	movs	r3, #1
 8006ece:	4013      	ands	r3, r2
 8006ed0:	d017      	beq.n	8006f02 <_UG_WindowDrawTitle+0x82>
      {
         xs+=3;
 8006ed2:	187b      	adds	r3, r7, r1
 8006ed4:	881b      	ldrh	r3, [r3, #0]
 8006ed6:	3303      	adds	r3, #3
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	187b      	adds	r3, r7, r1
 8006edc:	801a      	strh	r2, [r3, #0]
         ys+=3;
 8006ede:	183b      	adds	r3, r7, r0
 8006ee0:	881b      	ldrh	r3, [r3, #0]
 8006ee2:	3303      	adds	r3, #3
 8006ee4:	b29a      	uxth	r2, r3
 8006ee6:	183b      	adds	r3, r7, r0
 8006ee8:	801a      	strh	r2, [r3, #0]
         xe-=3;
 8006eea:	193b      	adds	r3, r7, r4
 8006eec:	881b      	ldrh	r3, [r3, #0]
 8006eee:	3b03      	subs	r3, #3
 8006ef0:	b29a      	uxth	r2, r3
 8006ef2:	193b      	adds	r3, r7, r4
 8006ef4:	801a      	strh	r2, [r3, #0]
         ye-=3;
 8006ef6:	197b      	adds	r3, r7, r5
 8006ef8:	881b      	ldrh	r3, [r3, #0]
 8006efa:	3b03      	subs	r3, #3
 8006efc:	b29a      	uxth	r2, r3
 8006efe:	197b      	adds	r3, r7, r5
 8006f00:	801a      	strh	r2, [r3, #0]
      }

      /* Is the window active or inactive? */
      if ( wnd == gui->active_window )
 8006f02:	4b4d      	ldr	r3, [pc, #308]	@ (8007038 <_UG_WindowDrawTitle+0x1b8>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d109      	bne.n	8006f22 <_UG_WindowDrawTitle+0xa2>
      {
         txt.bc = wnd->title.bc;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	8cda      	ldrh	r2, [r3, #38]	@ 0x26
 8006f12:	210c      	movs	r1, #12
 8006f14:	187b      	adds	r3, r7, r1
 8006f16:	825a      	strh	r2, [r3, #18]
         txt.fc = wnd->title.fc;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 8006f1c:	187b      	adds	r3, r7, r1
 8006f1e:	821a      	strh	r2, [r3, #16]
 8006f20:	e008      	b.n	8006f34 <_UG_WindowDrawTitle+0xb4>
      }
      else
      {
         txt.bc = wnd->title.ibc;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8006f26:	210c      	movs	r1, #12
 8006f28:	187b      	adds	r3, r7, r1
 8006f2a:	825a      	strh	r2, [r3, #18]
         txt.fc = wnd->title.ifc;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8006f30:	187b      	adds	r3, r7, r1
 8006f32:	821a      	strh	r2, [r3, #16]
      }

      /* Draw title */
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	222c      	movs	r2, #44	@ 0x2c
 8006f38:	5c9b      	ldrb	r3, [r3, r2]
 8006f3a:	001a      	movs	r2, r3
 8006f3c:	212c      	movs	r1, #44	@ 0x2c
 8006f3e:	187b      	adds	r3, r7, r1
 8006f40:	881b      	ldrh	r3, [r3, #0]
 8006f42:	18d3      	adds	r3, r2, r3
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	3b01      	subs	r3, #1
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	b21d      	sxth	r5, r3
 8006f4c:	260c      	movs	r6, #12
 8006f4e:	19bb      	adds	r3, r7, r6
 8006f50:	8a5b      	ldrh	r3, [r3, #18]
 8006f52:	222a      	movs	r2, #42	@ 0x2a
 8006f54:	18ba      	adds	r2, r7, r2
 8006f56:	2000      	movs	r0, #0
 8006f58:	5e14      	ldrsh	r4, [r2, r0]
 8006f5a:	187a      	adds	r2, r7, r1
 8006f5c:	2000      	movs	r0, #0
 8006f5e:	5e11      	ldrsh	r1, [r2, r0]
 8006f60:	202e      	movs	r0, #46	@ 0x2e
 8006f62:	183a      	adds	r2, r7, r0
 8006f64:	2000      	movs	r0, #0
 8006f66:	5e10      	ldrsh	r0, [r2, r0]
 8006f68:	9300      	str	r3, [sp, #0]
 8006f6a:	002b      	movs	r3, r5
 8006f6c:	0022      	movs	r2, r4
 8006f6e:	f7fe f889 	bl	8005084 <UG_FillFrame>

      /* Draw title text */
      txt.str = wnd->title.str;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	699a      	ldr	r2, [r3, #24]
 8006f76:	19bb      	adds	r3, r7, r6
 8006f78:	601a      	str	r2, [r3, #0]
      txt.font = wnd->title.font;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	69da      	ldr	r2, [r3, #28]
 8006f7e:	19bb      	adds	r3, r7, r6
 8006f80:	605a      	str	r2, [r3, #4]
      txt.a.xs = xs+3;
 8006f82:	202e      	movs	r0, #46	@ 0x2e
 8006f84:	183b      	adds	r3, r7, r0
 8006f86:	881b      	ldrh	r3, [r3, #0]
 8006f88:	3303      	adds	r3, #3
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	b21a      	sxth	r2, r3
 8006f8e:	0031      	movs	r1, r6
 8006f90:	187b      	adds	r3, r7, r1
 8006f92:	811a      	strh	r2, [r3, #8]
      txt.a.ys = ys;
 8006f94:	187b      	adds	r3, r7, r1
 8006f96:	242c      	movs	r4, #44	@ 0x2c
 8006f98:	193a      	adds	r2, r7, r4
 8006f9a:	8812      	ldrh	r2, [r2, #0]
 8006f9c:	815a      	strh	r2, [r3, #10]
      txt.a.xe = xe;
 8006f9e:	187b      	adds	r3, r7, r1
 8006fa0:	262a      	movs	r6, #42	@ 0x2a
 8006fa2:	19ba      	adds	r2, r7, r6
 8006fa4:	8812      	ldrh	r2, [r2, #0]
 8006fa6:	819a      	strh	r2, [r3, #12]
      txt.a.ye = ys+wnd->title.height-1;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	222c      	movs	r2, #44	@ 0x2c
 8006fac:	5c9b      	ldrb	r3, [r3, r2]
 8006fae:	001a      	movs	r2, r3
 8006fb0:	193b      	adds	r3, r7, r4
 8006fb2:	881b      	ldrh	r3, [r3, #0]
 8006fb4:	18d3      	adds	r3, r2, r3
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	b21a      	sxth	r2, r3
 8006fbe:	187b      	adds	r3, r7, r1
 8006fc0:	81da      	strh	r2, [r3, #14]
      txt.align = wnd->title.align;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2222      	movs	r2, #34	@ 0x22
 8006fc6:	5c9a      	ldrb	r2, [r3, r2]
 8006fc8:	187b      	adds	r3, r7, r1
 8006fca:	751a      	strb	r2, [r3, #20]
      txt.h_space = wnd->title.h_space;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2220      	movs	r2, #32
 8006fd0:	569b      	ldrsb	r3, [r3, r2]
 8006fd2:	001a      	movs	r2, r3
 8006fd4:	187b      	adds	r3, r7, r1
 8006fd6:	82da      	strh	r2, [r3, #22]
      txt.v_space = wnd->title.v_space;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2221      	movs	r2, #33	@ 0x21
 8006fdc:	569b      	ldrsb	r3, [r3, r2]
 8006fde:	001a      	movs	r2, r3
 8006fe0:	187b      	adds	r3, r7, r1
 8006fe2:	831a      	strh	r2, [r3, #24]
      _UG_PutText( &txt );
 8006fe4:	187b      	adds	r3, r7, r1
 8006fe6:	0018      	movs	r0, r3
 8006fe8:	f7ff fb36 	bl	8006658 <_UG_PutText>

      /* Draw line */
      UG_DrawLine(xs,ys+wnd->title.height,xe,ys+wnd->title.height,pal_window[11]);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	222c      	movs	r2, #44	@ 0x2c
 8006ff0:	5c9b      	ldrb	r3, [r3, r2]
 8006ff2:	001a      	movs	r2, r3
 8006ff4:	193b      	adds	r3, r7, r4
 8006ff6:	881b      	ldrh	r3, [r3, #0]
 8006ff8:	18d3      	adds	r3, r2, r3
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	b219      	sxth	r1, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	222c      	movs	r2, #44	@ 0x2c
 8007002:	5c9b      	ldrb	r3, [r3, r2]
 8007004:	001a      	movs	r2, r3
 8007006:	193b      	adds	r3, r7, r4
 8007008:	881b      	ldrh	r3, [r3, #0]
 800700a:	18d3      	adds	r3, r2, r3
 800700c:	b29b      	uxth	r3, r3
 800700e:	b21c      	sxth	r4, r3
 8007010:	4d0a      	ldr	r5, [pc, #40]	@ (800703c <_UG_WindowDrawTitle+0x1bc>)
 8007012:	19bb      	adds	r3, r7, r6
 8007014:	2200      	movs	r2, #0
 8007016:	5e9a      	ldrsh	r2, [r3, r2]
 8007018:	202e      	movs	r0, #46	@ 0x2e
 800701a:	183b      	adds	r3, r7, r0
 800701c:	2000      	movs	r0, #0
 800701e:	5e18      	ldrsh	r0, [r3, r0]
 8007020:	9500      	str	r5, [sp, #0]
 8007022:	0023      	movs	r3, r4
 8007024:	f7fe f8d4 	bl	80051d0 <UG_DrawLine>
      return UG_RESULT_OK;
 8007028:	2300      	movs	r3, #0
 800702a:	e001      	b.n	8007030 <_UG_WindowDrawTitle+0x1b0>
   }
   return UG_RESULT_FAIL;
 800702c:	2301      	movs	r3, #1
 800702e:	425b      	negs	r3, r3
}
 8007030:	0018      	movs	r0, r3
 8007032:	46bd      	mov	sp, r7
 8007034:	b00d      	add	sp, #52	@ 0x34
 8007036:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007038:	200002f8 	.word	0x200002f8
 800703c:	00009d13 	.word	0x00009d13

08007040 <_UG_WindowUpdate>:

static void _UG_WindowUpdate( UG_WINDOW* wnd )
{
 8007040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007042:	b089      	sub	sp, #36	@ 0x24
 8007044:	af02      	add	r7, sp, #8
 8007046:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_S16 xs,ys,xe,ye;

   xs = wnd->xs;
 8007048:	2014      	movs	r0, #20
 800704a:	183b      	adds	r3, r7, r0
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	89d2      	ldrh	r2, [r2, #14]
 8007050:	801a      	strh	r2, [r3, #0]
   ys = wnd->ys;
 8007052:	2112      	movs	r1, #18
 8007054:	187b      	adds	r3, r7, r1
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	8a12      	ldrh	r2, [r2, #16]
 800705a:	801a      	strh	r2, [r3, #0]
   xe = wnd->xe;
 800705c:	2510      	movs	r5, #16
 800705e:	197b      	adds	r3, r7, r5
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	8a52      	ldrh	r2, [r2, #18]
 8007064:	801a      	strh	r2, [r3, #0]
   ye = wnd->ye;
 8007066:	240e      	movs	r4, #14
 8007068:	193b      	adds	r3, r7, r4
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	8a92      	ldrh	r2, [r2, #20]
 800706e:	801a      	strh	r2, [r3, #0]

   wnd->state &= ~WND_STATE_UPDATE;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	7a1b      	ldrb	r3, [r3, #8]
 8007074:	2220      	movs	r2, #32
 8007076:	4393      	bics	r3, r2
 8007078:	b2da      	uxtb	r2, r3
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	721a      	strb	r2, [r3, #8]
   /* Is the window visible? */
   if ( wnd->state & WND_STATE_VISIBLE )
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	7a1b      	ldrb	r3, [r3, #8]
 8007082:	001a      	movs	r2, r3
 8007084:	2308      	movs	r3, #8
 8007086:	4013      	ands	r3, r2
 8007088:	d100      	bne.n	800708c <_UG_WindowUpdate+0x4c>
 800708a:	e0af      	b.n	80071ec <_UG_WindowUpdate+0x1ac>
   {
      /* 3D style? */
      if ( (wnd->style & WND_STYLE_3D) && !(wnd->state & WND_STATE_REDRAW_TITLE) )
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	7d9b      	ldrb	r3, [r3, #22]
 8007090:	001a      	movs	r2, r3
 8007092:	2301      	movs	r3, #1
 8007094:	4013      	ands	r3, r2
 8007096:	d033      	beq.n	8007100 <_UG_WindowUpdate+0xc0>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	7a1b      	ldrb	r3, [r3, #8]
 800709c:	001a      	movs	r2, r3
 800709e:	2340      	movs	r3, #64	@ 0x40
 80070a0:	4013      	ands	r3, r2
 80070a2:	d12d      	bne.n	8007100 <_UG_WindowUpdate+0xc0>
      {
         _UG_DrawObjectFrame(xs,ys,xe,ye,(UG_COLOR*)pal_window);
 80070a4:	193b      	adds	r3, r7, r4
 80070a6:	2400      	movs	r4, #0
 80070a8:	5f1c      	ldrsh	r4, [r3, r4]
 80070aa:	197b      	adds	r3, r7, r5
 80070ac:	2200      	movs	r2, #0
 80070ae:	5e9a      	ldrsh	r2, [r3, r2]
 80070b0:	000e      	movs	r6, r1
 80070b2:	187b      	adds	r3, r7, r1
 80070b4:	2100      	movs	r1, #0
 80070b6:	5e59      	ldrsh	r1, [r3, r1]
 80070b8:	0005      	movs	r5, r0
 80070ba:	183b      	adds	r3, r7, r0
 80070bc:	2000      	movs	r0, #0
 80070be:	5e18      	ldrsh	r0, [r3, r0]
 80070c0:	4b56      	ldr	r3, [pc, #344]	@ (800721c <_UG_WindowUpdate+0x1dc>)
 80070c2:	9300      	str	r3, [sp, #0]
 80070c4:	0023      	movs	r3, r4
 80070c6:	f7ff fc95 	bl	80069f4 <_UG_DrawObjectFrame>
         xs+=3;
 80070ca:	0028      	movs	r0, r5
 80070cc:	183b      	adds	r3, r7, r0
 80070ce:	881b      	ldrh	r3, [r3, #0]
 80070d0:	3303      	adds	r3, #3
 80070d2:	b29a      	uxth	r2, r3
 80070d4:	183b      	adds	r3, r7, r0
 80070d6:	801a      	strh	r2, [r3, #0]
         ys+=3;
 80070d8:	19bb      	adds	r3, r7, r6
 80070da:	881b      	ldrh	r3, [r3, #0]
 80070dc:	3303      	adds	r3, #3
 80070de:	b29a      	uxth	r2, r3
 80070e0:	19bb      	adds	r3, r7, r6
 80070e2:	801a      	strh	r2, [r3, #0]
         xe-=3;
 80070e4:	2510      	movs	r5, #16
 80070e6:	197b      	adds	r3, r7, r5
 80070e8:	881b      	ldrh	r3, [r3, #0]
 80070ea:	3b03      	subs	r3, #3
 80070ec:	b29a      	uxth	r2, r3
 80070ee:	197b      	adds	r3, r7, r5
 80070f0:	801a      	strh	r2, [r3, #0]
         ye-=3;
 80070f2:	240e      	movs	r4, #14
 80070f4:	193b      	adds	r3, r7, r4
 80070f6:	881b      	ldrh	r3, [r3, #0]
 80070f8:	3b03      	subs	r3, #3
 80070fa:	b29a      	uxth	r2, r3
 80070fc:	193b      	adds	r3, r7, r4
 80070fe:	801a      	strh	r2, [r3, #0]
      }
      /* Show title bar? */
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	7d9b      	ldrb	r3, [r3, #22]
 8007104:	001a      	movs	r2, r3
 8007106:	2302      	movs	r3, #2
 8007108:	4013      	ands	r3, r2
 800710a:	d01e      	beq.n	800714a <_UG_WindowUpdate+0x10a>
      {
         _UG_WindowDrawTitle( wnd );
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	0018      	movs	r0, r3
 8007110:	f7ff feb6 	bl	8006e80 <_UG_WindowDrawTitle>
         ys += wnd->title.height+1;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	222c      	movs	r2, #44	@ 0x2c
 8007118:	5c9b      	ldrb	r3, [r3, r2]
 800711a:	001a      	movs	r2, r3
 800711c:	2112      	movs	r1, #18
 800711e:	187b      	adds	r3, r7, r1
 8007120:	881b      	ldrh	r3, [r3, #0]
 8007122:	18d3      	adds	r3, r2, r3
 8007124:	b29b      	uxth	r3, r3
 8007126:	3301      	adds	r3, #1
 8007128:	b29a      	uxth	r2, r3
 800712a:	187b      	adds	r3, r7, r1
 800712c:	801a      	strh	r2, [r3, #0]
         if ( wnd->state & WND_STATE_REDRAW_TITLE )
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	7a1b      	ldrb	r3, [r3, #8]
 8007132:	001a      	movs	r2, r3
 8007134:	2340      	movs	r3, #64	@ 0x40
 8007136:	4013      	ands	r3, r2
 8007138:	d007      	beq.n	800714a <_UG_WindowUpdate+0x10a>
         {
            wnd->state &= ~WND_STATE_REDRAW_TITLE;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	7a1b      	ldrb	r3, [r3, #8]
 800713e:	2240      	movs	r2, #64	@ 0x40
 8007140:	4393      	bics	r3, r2
 8007142:	b2da      	uxtb	r2, r3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	721a      	strb	r2, [r3, #8]
            return;
 8007148:	e064      	b.n	8007214 <_UG_WindowUpdate+0x1d4>
         }
      }
      /* Draw window area? */
      UG_FillFrame(xs,ys,xe,ye,wnd->bc);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	899b      	ldrh	r3, [r3, #12]
 800714e:	220e      	movs	r2, #14
 8007150:	18ba      	adds	r2, r7, r2
 8007152:	2500      	movs	r5, #0
 8007154:	5f55      	ldrsh	r5, [r2, r5]
 8007156:	2210      	movs	r2, #16
 8007158:	18ba      	adds	r2, r7, r2
 800715a:	2400      	movs	r4, #0
 800715c:	5f14      	ldrsh	r4, [r2, r4]
 800715e:	2212      	movs	r2, #18
 8007160:	18ba      	adds	r2, r7, r2
 8007162:	2100      	movs	r1, #0
 8007164:	5e51      	ldrsh	r1, [r2, r1]
 8007166:	2214      	movs	r2, #20
 8007168:	18ba      	adds	r2, r7, r2
 800716a:	2000      	movs	r0, #0
 800716c:	5e10      	ldrsh	r0, [r2, r0]
 800716e:	9300      	str	r3, [sp, #0]
 8007170:	002b      	movs	r3, r5
 8007172:	0022      	movs	r2, r4
 8007174:	f7fd ff86 	bl	8005084 <UG_FillFrame>

      /* Force each object to be updated! */
      objcnt = wnd->objcnt;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	781a      	ldrb	r2, [r3, #0]
 800717c:	230c      	movs	r3, #12
 800717e:	18fb      	adds	r3, r7, r3
 8007180:	801a      	strh	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 8007182:	2316      	movs	r3, #22
 8007184:	18fb      	adds	r3, r7, r3
 8007186:	2200      	movs	r2, #0
 8007188:	801a      	strh	r2, [r3, #0]
 800718a:	e026      	b.n	80071da <_UG_WindowUpdate+0x19a>
      {
         obj = (UG_OBJECT*)&wnd->objlst[i];
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	685a      	ldr	r2, [r3, #4]
 8007190:	2316      	movs	r3, #22
 8007192:	18fb      	adds	r3, r7, r3
 8007194:	881b      	ldrh	r3, [r3, #0]
 8007196:	015b      	lsls	r3, r3, #5
 8007198:	18d3      	adds	r3, r2, r3
 800719a:	60bb      	str	r3, [r7, #8]
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	001a      	movs	r2, r3
 80071a2:	2301      	movs	r3, #1
 80071a4:	4013      	ands	r3, r2
 80071a6:	d112      	bne.n	80071ce <_UG_WindowUpdate+0x18e>
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	001a      	movs	r2, r3
 80071ae:	2302      	movs	r3, #2
 80071b0:	4013      	ands	r3, r2
 80071b2:	d00c      	beq.n	80071ce <_UG_WindowUpdate+0x18e>
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	001a      	movs	r2, r3
 80071ba:	2308      	movs	r3, #8
 80071bc:	4013      	ands	r3, r2
 80071be:	d006      	beq.n	80071ce <_UG_WindowUpdate+0x18e>
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	2260      	movs	r2, #96	@ 0x60
 80071c6:	4313      	orrs	r3, r2
 80071c8:	b2da      	uxtb	r2, r3
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	701a      	strb	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 80071ce:	2116      	movs	r1, #22
 80071d0:	187b      	adds	r3, r7, r1
 80071d2:	881a      	ldrh	r2, [r3, #0]
 80071d4:	187b      	adds	r3, r7, r1
 80071d6:	3201      	adds	r2, #1
 80071d8:	801a      	strh	r2, [r3, #0]
 80071da:	2316      	movs	r3, #22
 80071dc:	18fa      	adds	r2, r7, r3
 80071de:	230c      	movs	r3, #12
 80071e0:	18fb      	adds	r3, r7, r3
 80071e2:	8812      	ldrh	r2, [r2, #0]
 80071e4:	881b      	ldrh	r3, [r3, #0]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d3d0      	bcc.n	800718c <_UG_WindowUpdate+0x14c>
 80071ea:	e013      	b.n	8007214 <_UG_WindowUpdate+0x1d4>
      }
   }
   else
   {
      UG_FillFrame(wnd->xs,wnd->xs,wnd->xe,wnd->ye,gui->desktop_color);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	200e      	movs	r0, #14
 80071f0:	5e18      	ldrsh	r0, [r3, r0]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	210e      	movs	r1, #14
 80071f6:	5e59      	ldrsh	r1, [r3, r1]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2212      	movs	r2, #18
 80071fc:	5e9a      	ldrsh	r2, [r3, r2]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2414      	movs	r4, #20
 8007202:	5f1c      	ldrsh	r4, [r3, r4]
 8007204:	4b06      	ldr	r3, [pc, #24]	@ (8007220 <_UG_WindowUpdate+0x1e0>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2550      	movs	r5, #80	@ 0x50
 800720a:	5b5b      	ldrh	r3, [r3, r5]
 800720c:	9300      	str	r3, [sp, #0]
 800720e:	0023      	movs	r3, r4
 8007210:	f7fd ff38 	bl	8005084 <UG_FillFrame>
   }
}
 8007214:	46bd      	mov	sp, r7
 8007216:	b007      	add	sp, #28
 8007218:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800721a:	46c0      	nop			@ (mov r8, r8)
 800721c:	0800d0d0 	.word	0x0800d0d0
 8007220:	200002f8 	.word	0x200002f8

08007224 <srand>:
 8007224:	4b11      	ldr	r3, [pc, #68]	@ (800726c <srand+0x48>)
 8007226:	b570      	push	{r4, r5, r6, lr}
 8007228:	681d      	ldr	r5, [r3, #0]
 800722a:	0004      	movs	r4, r0
 800722c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800722e:	2b00      	cmp	r3, #0
 8007230:	d116      	bne.n	8007260 <srand+0x3c>
 8007232:	2018      	movs	r0, #24
 8007234:	f000 faae 	bl	8007794 <malloc>
 8007238:	1e02      	subs	r2, r0, #0
 800723a:	6328      	str	r0, [r5, #48]	@ 0x30
 800723c:	d104      	bne.n	8007248 <srand+0x24>
 800723e:	2146      	movs	r1, #70	@ 0x46
 8007240:	4b0b      	ldr	r3, [pc, #44]	@ (8007270 <srand+0x4c>)
 8007242:	480c      	ldr	r0, [pc, #48]	@ (8007274 <srand+0x50>)
 8007244:	f000 fa3e 	bl	80076c4 <__assert_func>
 8007248:	4b0b      	ldr	r3, [pc, #44]	@ (8007278 <srand+0x54>)
 800724a:	2100      	movs	r1, #0
 800724c:	6003      	str	r3, [r0, #0]
 800724e:	4b0b      	ldr	r3, [pc, #44]	@ (800727c <srand+0x58>)
 8007250:	6043      	str	r3, [r0, #4]
 8007252:	4b0b      	ldr	r3, [pc, #44]	@ (8007280 <srand+0x5c>)
 8007254:	6083      	str	r3, [r0, #8]
 8007256:	230b      	movs	r3, #11
 8007258:	8183      	strh	r3, [r0, #12]
 800725a:	2001      	movs	r0, #1
 800725c:	6110      	str	r0, [r2, #16]
 800725e:	6151      	str	r1, [r2, #20]
 8007260:	2200      	movs	r2, #0
 8007262:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8007264:	611c      	str	r4, [r3, #16]
 8007266:	615a      	str	r2, [r3, #20]
 8007268:	bd70      	pop	{r4, r5, r6, pc}
 800726a:	46c0      	nop			@ (mov r8, r8)
 800726c:	2000003c 	.word	0x2000003c
 8007270:	0800d184 	.word	0x0800d184
 8007274:	0800d19b 	.word	0x0800d19b
 8007278:	abcd330e 	.word	0xabcd330e
 800727c:	e66d1234 	.word	0xe66d1234
 8007280:	0005deec 	.word	0x0005deec

08007284 <random>:
 8007284:	4b16      	ldr	r3, [pc, #88]	@ (80072e0 <random+0x5c>)
 8007286:	b510      	push	{r4, lr}
 8007288:	681c      	ldr	r4, [r3, #0]
 800728a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800728c:	2b00      	cmp	r3, #0
 800728e:	d116      	bne.n	80072be <random+0x3a>
 8007290:	2018      	movs	r0, #24
 8007292:	f000 fa7f 	bl	8007794 <malloc>
 8007296:	1e02      	subs	r2, r0, #0
 8007298:	6320      	str	r0, [r4, #48]	@ 0x30
 800729a:	d104      	bne.n	80072a6 <random+0x22>
 800729c:	214c      	movs	r1, #76	@ 0x4c
 800729e:	4b11      	ldr	r3, [pc, #68]	@ (80072e4 <random+0x60>)
 80072a0:	4811      	ldr	r0, [pc, #68]	@ (80072e8 <random+0x64>)
 80072a2:	f000 fa0f 	bl	80076c4 <__assert_func>
 80072a6:	4b11      	ldr	r3, [pc, #68]	@ (80072ec <random+0x68>)
 80072a8:	2100      	movs	r1, #0
 80072aa:	6003      	str	r3, [r0, #0]
 80072ac:	4b10      	ldr	r3, [pc, #64]	@ (80072f0 <random+0x6c>)
 80072ae:	6043      	str	r3, [r0, #4]
 80072b0:	4b10      	ldr	r3, [pc, #64]	@ (80072f4 <random+0x70>)
 80072b2:	6083      	str	r3, [r0, #8]
 80072b4:	230b      	movs	r3, #11
 80072b6:	8183      	strh	r3, [r0, #12]
 80072b8:	2001      	movs	r0, #1
 80072ba:	6110      	str	r0, [r2, #16]
 80072bc:	6151      	str	r1, [r2, #20]
 80072be:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 80072c0:	4a0d      	ldr	r2, [pc, #52]	@ (80072f8 <random+0x74>)
 80072c2:	6920      	ldr	r0, [r4, #16]
 80072c4:	6961      	ldr	r1, [r4, #20]
 80072c6:	4b0d      	ldr	r3, [pc, #52]	@ (80072fc <random+0x78>)
 80072c8:	f7f9 f8be 	bl	8000448 <__aeabi_lmul>
 80072cc:	2201      	movs	r2, #1
 80072ce:	2300      	movs	r3, #0
 80072d0:	1880      	adds	r0, r0, r2
 80072d2:	4159      	adcs	r1, r3
 80072d4:	6120      	str	r0, [r4, #16]
 80072d6:	6161      	str	r1, [r4, #20]
 80072d8:	0048      	lsls	r0, r1, #1
 80072da:	0840      	lsrs	r0, r0, #1
 80072dc:	bd10      	pop	{r4, pc}
 80072de:	46c0      	nop			@ (mov r8, r8)
 80072e0:	2000003c 	.word	0x2000003c
 80072e4:	0800d184 	.word	0x0800d184
 80072e8:	0800d1f3 	.word	0x0800d1f3
 80072ec:	abcd330e 	.word	0xabcd330e
 80072f0:	e66d1234 	.word	0xe66d1234
 80072f4:	0005deec 	.word	0x0005deec
 80072f8:	4c957f2d 	.word	0x4c957f2d
 80072fc:	5851f42d 	.word	0x5851f42d

08007300 <std>:
 8007300:	2300      	movs	r3, #0
 8007302:	b510      	push	{r4, lr}
 8007304:	0004      	movs	r4, r0
 8007306:	6003      	str	r3, [r0, #0]
 8007308:	6043      	str	r3, [r0, #4]
 800730a:	6083      	str	r3, [r0, #8]
 800730c:	8181      	strh	r1, [r0, #12]
 800730e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007310:	81c2      	strh	r2, [r0, #14]
 8007312:	6103      	str	r3, [r0, #16]
 8007314:	6143      	str	r3, [r0, #20]
 8007316:	6183      	str	r3, [r0, #24]
 8007318:	0019      	movs	r1, r3
 800731a:	2208      	movs	r2, #8
 800731c:	305c      	adds	r0, #92	@ 0x5c
 800731e:	f000 f91f 	bl	8007560 <memset>
 8007322:	4b0b      	ldr	r3, [pc, #44]	@ (8007350 <std+0x50>)
 8007324:	6224      	str	r4, [r4, #32]
 8007326:	6263      	str	r3, [r4, #36]	@ 0x24
 8007328:	4b0a      	ldr	r3, [pc, #40]	@ (8007354 <std+0x54>)
 800732a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800732c:	4b0a      	ldr	r3, [pc, #40]	@ (8007358 <std+0x58>)
 800732e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007330:	4b0a      	ldr	r3, [pc, #40]	@ (800735c <std+0x5c>)
 8007332:	6323      	str	r3, [r4, #48]	@ 0x30
 8007334:	4b0a      	ldr	r3, [pc, #40]	@ (8007360 <std+0x60>)
 8007336:	429c      	cmp	r4, r3
 8007338:	d005      	beq.n	8007346 <std+0x46>
 800733a:	4b0a      	ldr	r3, [pc, #40]	@ (8007364 <std+0x64>)
 800733c:	429c      	cmp	r4, r3
 800733e:	d002      	beq.n	8007346 <std+0x46>
 8007340:	4b09      	ldr	r3, [pc, #36]	@ (8007368 <std+0x68>)
 8007342:	429c      	cmp	r4, r3
 8007344:	d103      	bne.n	800734e <std+0x4e>
 8007346:	0020      	movs	r0, r4
 8007348:	3058      	adds	r0, #88	@ 0x58
 800734a:	f000 f9b7 	bl	80076bc <__retarget_lock_init_recursive>
 800734e:	bd10      	pop	{r4, pc}
 8007350:	080074c9 	.word	0x080074c9
 8007354:	080074f1 	.word	0x080074f1
 8007358:	08007529 	.word	0x08007529
 800735c:	08007555 	.word	0x08007555
 8007360:	20000314 	.word	0x20000314
 8007364:	2000037c 	.word	0x2000037c
 8007368:	200003e4 	.word	0x200003e4

0800736c <stdio_exit_handler>:
 800736c:	b510      	push	{r4, lr}
 800736e:	4a03      	ldr	r2, [pc, #12]	@ (800737c <stdio_exit_handler+0x10>)
 8007370:	4903      	ldr	r1, [pc, #12]	@ (8007380 <stdio_exit_handler+0x14>)
 8007372:	4804      	ldr	r0, [pc, #16]	@ (8007384 <stdio_exit_handler+0x18>)
 8007374:	f000 f86c 	bl	8007450 <_fwalk_sglue>
 8007378:	bd10      	pop	{r4, pc}
 800737a:	46c0      	nop			@ (mov r8, r8)
 800737c:	20000030 	.word	0x20000030
 8007380:	08007fd1 	.word	0x08007fd1
 8007384:	20000040 	.word	0x20000040

08007388 <cleanup_stdio>:
 8007388:	6841      	ldr	r1, [r0, #4]
 800738a:	4b0b      	ldr	r3, [pc, #44]	@ (80073b8 <cleanup_stdio+0x30>)
 800738c:	b510      	push	{r4, lr}
 800738e:	0004      	movs	r4, r0
 8007390:	4299      	cmp	r1, r3
 8007392:	d001      	beq.n	8007398 <cleanup_stdio+0x10>
 8007394:	f000 fe1c 	bl	8007fd0 <_fflush_r>
 8007398:	68a1      	ldr	r1, [r4, #8]
 800739a:	4b08      	ldr	r3, [pc, #32]	@ (80073bc <cleanup_stdio+0x34>)
 800739c:	4299      	cmp	r1, r3
 800739e:	d002      	beq.n	80073a6 <cleanup_stdio+0x1e>
 80073a0:	0020      	movs	r0, r4
 80073a2:	f000 fe15 	bl	8007fd0 <_fflush_r>
 80073a6:	68e1      	ldr	r1, [r4, #12]
 80073a8:	4b05      	ldr	r3, [pc, #20]	@ (80073c0 <cleanup_stdio+0x38>)
 80073aa:	4299      	cmp	r1, r3
 80073ac:	d002      	beq.n	80073b4 <cleanup_stdio+0x2c>
 80073ae:	0020      	movs	r0, r4
 80073b0:	f000 fe0e 	bl	8007fd0 <_fflush_r>
 80073b4:	bd10      	pop	{r4, pc}
 80073b6:	46c0      	nop			@ (mov r8, r8)
 80073b8:	20000314 	.word	0x20000314
 80073bc:	2000037c 	.word	0x2000037c
 80073c0:	200003e4 	.word	0x200003e4

080073c4 <global_stdio_init.part.0>:
 80073c4:	b510      	push	{r4, lr}
 80073c6:	4b09      	ldr	r3, [pc, #36]	@ (80073ec <global_stdio_init.part.0+0x28>)
 80073c8:	4a09      	ldr	r2, [pc, #36]	@ (80073f0 <global_stdio_init.part.0+0x2c>)
 80073ca:	2104      	movs	r1, #4
 80073cc:	601a      	str	r2, [r3, #0]
 80073ce:	4809      	ldr	r0, [pc, #36]	@ (80073f4 <global_stdio_init.part.0+0x30>)
 80073d0:	2200      	movs	r2, #0
 80073d2:	f7ff ff95 	bl	8007300 <std>
 80073d6:	2201      	movs	r2, #1
 80073d8:	2109      	movs	r1, #9
 80073da:	4807      	ldr	r0, [pc, #28]	@ (80073f8 <global_stdio_init.part.0+0x34>)
 80073dc:	f7ff ff90 	bl	8007300 <std>
 80073e0:	2202      	movs	r2, #2
 80073e2:	2112      	movs	r1, #18
 80073e4:	4805      	ldr	r0, [pc, #20]	@ (80073fc <global_stdio_init.part.0+0x38>)
 80073e6:	f7ff ff8b 	bl	8007300 <std>
 80073ea:	bd10      	pop	{r4, pc}
 80073ec:	2000044c 	.word	0x2000044c
 80073f0:	0800736d 	.word	0x0800736d
 80073f4:	20000314 	.word	0x20000314
 80073f8:	2000037c 	.word	0x2000037c
 80073fc:	200003e4 	.word	0x200003e4

08007400 <__sfp_lock_acquire>:
 8007400:	b510      	push	{r4, lr}
 8007402:	4802      	ldr	r0, [pc, #8]	@ (800740c <__sfp_lock_acquire+0xc>)
 8007404:	f000 f95b 	bl	80076be <__retarget_lock_acquire_recursive>
 8007408:	bd10      	pop	{r4, pc}
 800740a:	46c0      	nop			@ (mov r8, r8)
 800740c:	20000455 	.word	0x20000455

08007410 <__sfp_lock_release>:
 8007410:	b510      	push	{r4, lr}
 8007412:	4802      	ldr	r0, [pc, #8]	@ (800741c <__sfp_lock_release+0xc>)
 8007414:	f000 f954 	bl	80076c0 <__retarget_lock_release_recursive>
 8007418:	bd10      	pop	{r4, pc}
 800741a:	46c0      	nop			@ (mov r8, r8)
 800741c:	20000455 	.word	0x20000455

08007420 <__sinit>:
 8007420:	b510      	push	{r4, lr}
 8007422:	0004      	movs	r4, r0
 8007424:	f7ff ffec 	bl	8007400 <__sfp_lock_acquire>
 8007428:	6a23      	ldr	r3, [r4, #32]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d002      	beq.n	8007434 <__sinit+0x14>
 800742e:	f7ff ffef 	bl	8007410 <__sfp_lock_release>
 8007432:	bd10      	pop	{r4, pc}
 8007434:	4b04      	ldr	r3, [pc, #16]	@ (8007448 <__sinit+0x28>)
 8007436:	6223      	str	r3, [r4, #32]
 8007438:	4b04      	ldr	r3, [pc, #16]	@ (800744c <__sinit+0x2c>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d1f6      	bne.n	800742e <__sinit+0xe>
 8007440:	f7ff ffc0 	bl	80073c4 <global_stdio_init.part.0>
 8007444:	e7f3      	b.n	800742e <__sinit+0xe>
 8007446:	46c0      	nop			@ (mov r8, r8)
 8007448:	08007389 	.word	0x08007389
 800744c:	2000044c 	.word	0x2000044c

08007450 <_fwalk_sglue>:
 8007450:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007452:	0014      	movs	r4, r2
 8007454:	2600      	movs	r6, #0
 8007456:	9000      	str	r0, [sp, #0]
 8007458:	9101      	str	r1, [sp, #4]
 800745a:	68a5      	ldr	r5, [r4, #8]
 800745c:	6867      	ldr	r7, [r4, #4]
 800745e:	3f01      	subs	r7, #1
 8007460:	d504      	bpl.n	800746c <_fwalk_sglue+0x1c>
 8007462:	6824      	ldr	r4, [r4, #0]
 8007464:	2c00      	cmp	r4, #0
 8007466:	d1f8      	bne.n	800745a <_fwalk_sglue+0xa>
 8007468:	0030      	movs	r0, r6
 800746a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800746c:	89ab      	ldrh	r3, [r5, #12]
 800746e:	2b01      	cmp	r3, #1
 8007470:	d908      	bls.n	8007484 <_fwalk_sglue+0x34>
 8007472:	220e      	movs	r2, #14
 8007474:	5eab      	ldrsh	r3, [r5, r2]
 8007476:	3301      	adds	r3, #1
 8007478:	d004      	beq.n	8007484 <_fwalk_sglue+0x34>
 800747a:	0029      	movs	r1, r5
 800747c:	9800      	ldr	r0, [sp, #0]
 800747e:	9b01      	ldr	r3, [sp, #4]
 8007480:	4798      	blx	r3
 8007482:	4306      	orrs	r6, r0
 8007484:	3568      	adds	r5, #104	@ 0x68
 8007486:	e7ea      	b.n	800745e <_fwalk_sglue+0xe>

08007488 <siprintf>:
 8007488:	b40e      	push	{r1, r2, r3}
 800748a:	b500      	push	{lr}
 800748c:	490b      	ldr	r1, [pc, #44]	@ (80074bc <siprintf+0x34>)
 800748e:	b09c      	sub	sp, #112	@ 0x70
 8007490:	ab1d      	add	r3, sp, #116	@ 0x74
 8007492:	9002      	str	r0, [sp, #8]
 8007494:	9006      	str	r0, [sp, #24]
 8007496:	9107      	str	r1, [sp, #28]
 8007498:	9104      	str	r1, [sp, #16]
 800749a:	4809      	ldr	r0, [pc, #36]	@ (80074c0 <siprintf+0x38>)
 800749c:	4909      	ldr	r1, [pc, #36]	@ (80074c4 <siprintf+0x3c>)
 800749e:	cb04      	ldmia	r3!, {r2}
 80074a0:	9105      	str	r1, [sp, #20]
 80074a2:	6800      	ldr	r0, [r0, #0]
 80074a4:	a902      	add	r1, sp, #8
 80074a6:	9301      	str	r3, [sp, #4]
 80074a8:	f000 fa90 	bl	80079cc <_svfiprintf_r>
 80074ac:	2200      	movs	r2, #0
 80074ae:	9b02      	ldr	r3, [sp, #8]
 80074b0:	701a      	strb	r2, [r3, #0]
 80074b2:	b01c      	add	sp, #112	@ 0x70
 80074b4:	bc08      	pop	{r3}
 80074b6:	b003      	add	sp, #12
 80074b8:	4718      	bx	r3
 80074ba:	46c0      	nop			@ (mov r8, r8)
 80074bc:	7fffffff 	.word	0x7fffffff
 80074c0:	2000003c 	.word	0x2000003c
 80074c4:	ffff0208 	.word	0xffff0208

080074c8 <__sread>:
 80074c8:	b570      	push	{r4, r5, r6, lr}
 80074ca:	000c      	movs	r4, r1
 80074cc:	250e      	movs	r5, #14
 80074ce:	5f49      	ldrsh	r1, [r1, r5]
 80074d0:	f000 f8a2 	bl	8007618 <_read_r>
 80074d4:	2800      	cmp	r0, #0
 80074d6:	db03      	blt.n	80074e0 <__sread+0x18>
 80074d8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80074da:	181b      	adds	r3, r3, r0
 80074dc:	6563      	str	r3, [r4, #84]	@ 0x54
 80074de:	bd70      	pop	{r4, r5, r6, pc}
 80074e0:	89a3      	ldrh	r3, [r4, #12]
 80074e2:	4a02      	ldr	r2, [pc, #8]	@ (80074ec <__sread+0x24>)
 80074e4:	4013      	ands	r3, r2
 80074e6:	81a3      	strh	r3, [r4, #12]
 80074e8:	e7f9      	b.n	80074de <__sread+0x16>
 80074ea:	46c0      	nop			@ (mov r8, r8)
 80074ec:	ffffefff 	.word	0xffffefff

080074f0 <__swrite>:
 80074f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074f2:	001f      	movs	r7, r3
 80074f4:	898b      	ldrh	r3, [r1, #12]
 80074f6:	0005      	movs	r5, r0
 80074f8:	000c      	movs	r4, r1
 80074fa:	0016      	movs	r6, r2
 80074fc:	05db      	lsls	r3, r3, #23
 80074fe:	d505      	bpl.n	800750c <__swrite+0x1c>
 8007500:	230e      	movs	r3, #14
 8007502:	5ec9      	ldrsh	r1, [r1, r3]
 8007504:	2200      	movs	r2, #0
 8007506:	2302      	movs	r3, #2
 8007508:	f000 f872 	bl	80075f0 <_lseek_r>
 800750c:	89a3      	ldrh	r3, [r4, #12]
 800750e:	4a05      	ldr	r2, [pc, #20]	@ (8007524 <__swrite+0x34>)
 8007510:	0028      	movs	r0, r5
 8007512:	4013      	ands	r3, r2
 8007514:	81a3      	strh	r3, [r4, #12]
 8007516:	0032      	movs	r2, r6
 8007518:	230e      	movs	r3, #14
 800751a:	5ee1      	ldrsh	r1, [r4, r3]
 800751c:	003b      	movs	r3, r7
 800751e:	f000 f88f 	bl	8007640 <_write_r>
 8007522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007524:	ffffefff 	.word	0xffffefff

08007528 <__sseek>:
 8007528:	b570      	push	{r4, r5, r6, lr}
 800752a:	000c      	movs	r4, r1
 800752c:	250e      	movs	r5, #14
 800752e:	5f49      	ldrsh	r1, [r1, r5]
 8007530:	f000 f85e 	bl	80075f0 <_lseek_r>
 8007534:	89a3      	ldrh	r3, [r4, #12]
 8007536:	1c42      	adds	r2, r0, #1
 8007538:	d103      	bne.n	8007542 <__sseek+0x1a>
 800753a:	4a05      	ldr	r2, [pc, #20]	@ (8007550 <__sseek+0x28>)
 800753c:	4013      	ands	r3, r2
 800753e:	81a3      	strh	r3, [r4, #12]
 8007540:	bd70      	pop	{r4, r5, r6, pc}
 8007542:	2280      	movs	r2, #128	@ 0x80
 8007544:	0152      	lsls	r2, r2, #5
 8007546:	4313      	orrs	r3, r2
 8007548:	81a3      	strh	r3, [r4, #12]
 800754a:	6560      	str	r0, [r4, #84]	@ 0x54
 800754c:	e7f8      	b.n	8007540 <__sseek+0x18>
 800754e:	46c0      	nop			@ (mov r8, r8)
 8007550:	ffffefff 	.word	0xffffefff

08007554 <__sclose>:
 8007554:	b510      	push	{r4, lr}
 8007556:	230e      	movs	r3, #14
 8007558:	5ec9      	ldrsh	r1, [r1, r3]
 800755a:	f000 f825 	bl	80075a8 <_close_r>
 800755e:	bd10      	pop	{r4, pc}

08007560 <memset>:
 8007560:	0003      	movs	r3, r0
 8007562:	1882      	adds	r2, r0, r2
 8007564:	4293      	cmp	r3, r2
 8007566:	d100      	bne.n	800756a <memset+0xa>
 8007568:	4770      	bx	lr
 800756a:	7019      	strb	r1, [r3, #0]
 800756c:	3301      	adds	r3, #1
 800756e:	e7f9      	b.n	8007564 <memset+0x4>

08007570 <time>:
 8007570:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 8007572:	2601      	movs	r6, #1
 8007574:	4276      	negs	r6, r6
 8007576:	17f7      	asrs	r7, r6, #31
 8007578:	4b0a      	ldr	r3, [pc, #40]	@ (80075a4 <time+0x34>)
 800757a:	0004      	movs	r4, r0
 800757c:	2200      	movs	r2, #0
 800757e:	4669      	mov	r1, sp
 8007580:	6818      	ldr	r0, [r3, #0]
 8007582:	9600      	str	r6, [sp, #0]
 8007584:	9701      	str	r7, [sp, #4]
 8007586:	f000 f821 	bl	80075cc <_gettimeofday_r>
 800758a:	2800      	cmp	r0, #0
 800758c:	da01      	bge.n	8007592 <time+0x22>
 800758e:	9600      	str	r6, [sp, #0]
 8007590:	9701      	str	r7, [sp, #4]
 8007592:	9800      	ldr	r0, [sp, #0]
 8007594:	9901      	ldr	r1, [sp, #4]
 8007596:	2c00      	cmp	r4, #0
 8007598:	d001      	beq.n	800759e <time+0x2e>
 800759a:	6020      	str	r0, [r4, #0]
 800759c:	6061      	str	r1, [r4, #4]
 800759e:	b004      	add	sp, #16
 80075a0:	bdd0      	pop	{r4, r6, r7, pc}
 80075a2:	46c0      	nop			@ (mov r8, r8)
 80075a4:	2000003c 	.word	0x2000003c

080075a8 <_close_r>:
 80075a8:	2300      	movs	r3, #0
 80075aa:	b570      	push	{r4, r5, r6, lr}
 80075ac:	4d06      	ldr	r5, [pc, #24]	@ (80075c8 <_close_r+0x20>)
 80075ae:	0004      	movs	r4, r0
 80075b0:	0008      	movs	r0, r1
 80075b2:	602b      	str	r3, [r5, #0]
 80075b4:	f7f9 ff83 	bl	80014be <_close>
 80075b8:	1c43      	adds	r3, r0, #1
 80075ba:	d103      	bne.n	80075c4 <_close_r+0x1c>
 80075bc:	682b      	ldr	r3, [r5, #0]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d000      	beq.n	80075c4 <_close_r+0x1c>
 80075c2:	6023      	str	r3, [r4, #0]
 80075c4:	bd70      	pop	{r4, r5, r6, pc}
 80075c6:	46c0      	nop			@ (mov r8, r8)
 80075c8:	20000450 	.word	0x20000450

080075cc <_gettimeofday_r>:
 80075cc:	2300      	movs	r3, #0
 80075ce:	b570      	push	{r4, r5, r6, lr}
 80075d0:	4d06      	ldr	r5, [pc, #24]	@ (80075ec <_gettimeofday_r+0x20>)
 80075d2:	0004      	movs	r4, r0
 80075d4:	0008      	movs	r0, r1
 80075d6:	0011      	movs	r1, r2
 80075d8:	602b      	str	r3, [r5, #0]
 80075da:	f001 f86b 	bl	80086b4 <_gettimeofday>
 80075de:	1c43      	adds	r3, r0, #1
 80075e0:	d103      	bne.n	80075ea <_gettimeofday_r+0x1e>
 80075e2:	682b      	ldr	r3, [r5, #0]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d000      	beq.n	80075ea <_gettimeofday_r+0x1e>
 80075e8:	6023      	str	r3, [r4, #0]
 80075ea:	bd70      	pop	{r4, r5, r6, pc}
 80075ec:	20000450 	.word	0x20000450

080075f0 <_lseek_r>:
 80075f0:	b570      	push	{r4, r5, r6, lr}
 80075f2:	0004      	movs	r4, r0
 80075f4:	0008      	movs	r0, r1
 80075f6:	0011      	movs	r1, r2
 80075f8:	001a      	movs	r2, r3
 80075fa:	2300      	movs	r3, #0
 80075fc:	4d05      	ldr	r5, [pc, #20]	@ (8007614 <_lseek_r+0x24>)
 80075fe:	602b      	str	r3, [r5, #0]
 8007600:	f7f9 ff7e 	bl	8001500 <_lseek>
 8007604:	1c43      	adds	r3, r0, #1
 8007606:	d103      	bne.n	8007610 <_lseek_r+0x20>
 8007608:	682b      	ldr	r3, [r5, #0]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d000      	beq.n	8007610 <_lseek_r+0x20>
 800760e:	6023      	str	r3, [r4, #0]
 8007610:	bd70      	pop	{r4, r5, r6, pc}
 8007612:	46c0      	nop			@ (mov r8, r8)
 8007614:	20000450 	.word	0x20000450

08007618 <_read_r>:
 8007618:	b570      	push	{r4, r5, r6, lr}
 800761a:	0004      	movs	r4, r0
 800761c:	0008      	movs	r0, r1
 800761e:	0011      	movs	r1, r2
 8007620:	001a      	movs	r2, r3
 8007622:	2300      	movs	r3, #0
 8007624:	4d05      	ldr	r5, [pc, #20]	@ (800763c <_read_r+0x24>)
 8007626:	602b      	str	r3, [r5, #0]
 8007628:	f7f9 ff10 	bl	800144c <_read>
 800762c:	1c43      	adds	r3, r0, #1
 800762e:	d103      	bne.n	8007638 <_read_r+0x20>
 8007630:	682b      	ldr	r3, [r5, #0]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d000      	beq.n	8007638 <_read_r+0x20>
 8007636:	6023      	str	r3, [r4, #0]
 8007638:	bd70      	pop	{r4, r5, r6, pc}
 800763a:	46c0      	nop			@ (mov r8, r8)
 800763c:	20000450 	.word	0x20000450

08007640 <_write_r>:
 8007640:	b570      	push	{r4, r5, r6, lr}
 8007642:	0004      	movs	r4, r0
 8007644:	0008      	movs	r0, r1
 8007646:	0011      	movs	r1, r2
 8007648:	001a      	movs	r2, r3
 800764a:	2300      	movs	r3, #0
 800764c:	4d05      	ldr	r5, [pc, #20]	@ (8007664 <_write_r+0x24>)
 800764e:	602b      	str	r3, [r5, #0]
 8007650:	f7f9 ff19 	bl	8001486 <_write>
 8007654:	1c43      	adds	r3, r0, #1
 8007656:	d103      	bne.n	8007660 <_write_r+0x20>
 8007658:	682b      	ldr	r3, [r5, #0]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d000      	beq.n	8007660 <_write_r+0x20>
 800765e:	6023      	str	r3, [r4, #0]
 8007660:	bd70      	pop	{r4, r5, r6, pc}
 8007662:	46c0      	nop			@ (mov r8, r8)
 8007664:	20000450 	.word	0x20000450

08007668 <__errno>:
 8007668:	4b01      	ldr	r3, [pc, #4]	@ (8007670 <__errno+0x8>)
 800766a:	6818      	ldr	r0, [r3, #0]
 800766c:	4770      	bx	lr
 800766e:	46c0      	nop			@ (mov r8, r8)
 8007670:	2000003c 	.word	0x2000003c

08007674 <__libc_init_array>:
 8007674:	b570      	push	{r4, r5, r6, lr}
 8007676:	2600      	movs	r6, #0
 8007678:	4c0c      	ldr	r4, [pc, #48]	@ (80076ac <__libc_init_array+0x38>)
 800767a:	4d0d      	ldr	r5, [pc, #52]	@ (80076b0 <__libc_init_array+0x3c>)
 800767c:	1b64      	subs	r4, r4, r5
 800767e:	10a4      	asrs	r4, r4, #2
 8007680:	42a6      	cmp	r6, r4
 8007682:	d109      	bne.n	8007698 <__libc_init_array+0x24>
 8007684:	2600      	movs	r6, #0
 8007686:	f001 f81d 	bl	80086c4 <_init>
 800768a:	4c0a      	ldr	r4, [pc, #40]	@ (80076b4 <__libc_init_array+0x40>)
 800768c:	4d0a      	ldr	r5, [pc, #40]	@ (80076b8 <__libc_init_array+0x44>)
 800768e:	1b64      	subs	r4, r4, r5
 8007690:	10a4      	asrs	r4, r4, #2
 8007692:	42a6      	cmp	r6, r4
 8007694:	d105      	bne.n	80076a2 <__libc_init_array+0x2e>
 8007696:	bd70      	pop	{r4, r5, r6, pc}
 8007698:	00b3      	lsls	r3, r6, #2
 800769a:	58eb      	ldr	r3, [r5, r3]
 800769c:	4798      	blx	r3
 800769e:	3601      	adds	r6, #1
 80076a0:	e7ee      	b.n	8007680 <__libc_init_array+0xc>
 80076a2:	00b3      	lsls	r3, r6, #2
 80076a4:	58eb      	ldr	r3, [r5, r3]
 80076a6:	4798      	blx	r3
 80076a8:	3601      	adds	r6, #1
 80076aa:	e7f2      	b.n	8007692 <__libc_init_array+0x1e>
 80076ac:	0800d2c4 	.word	0x0800d2c4
 80076b0:	0800d2c4 	.word	0x0800d2c4
 80076b4:	0800d2c8 	.word	0x0800d2c8
 80076b8:	0800d2c4 	.word	0x0800d2c4

080076bc <__retarget_lock_init_recursive>:
 80076bc:	4770      	bx	lr

080076be <__retarget_lock_acquire_recursive>:
 80076be:	4770      	bx	lr

080076c0 <__retarget_lock_release_recursive>:
 80076c0:	4770      	bx	lr
	...

080076c4 <__assert_func>:
 80076c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80076c6:	0014      	movs	r4, r2
 80076c8:	001a      	movs	r2, r3
 80076ca:	4b09      	ldr	r3, [pc, #36]	@ (80076f0 <__assert_func+0x2c>)
 80076cc:	0005      	movs	r5, r0
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	000e      	movs	r6, r1
 80076d2:	68d8      	ldr	r0, [r3, #12]
 80076d4:	4b07      	ldr	r3, [pc, #28]	@ (80076f4 <__assert_func+0x30>)
 80076d6:	2c00      	cmp	r4, #0
 80076d8:	d101      	bne.n	80076de <__assert_func+0x1a>
 80076da:	4b07      	ldr	r3, [pc, #28]	@ (80076f8 <__assert_func+0x34>)
 80076dc:	001c      	movs	r4, r3
 80076de:	4907      	ldr	r1, [pc, #28]	@ (80076fc <__assert_func+0x38>)
 80076e0:	9301      	str	r3, [sp, #4]
 80076e2:	9402      	str	r4, [sp, #8]
 80076e4:	002b      	movs	r3, r5
 80076e6:	9600      	str	r6, [sp, #0]
 80076e8:	f000 fc9e 	bl	8008028 <fiprintf>
 80076ec:	f000 fce6 	bl	80080bc <abort>
 80076f0:	2000003c 	.word	0x2000003c
 80076f4:	0800d24d 	.word	0x0800d24d
 80076f8:	0800d288 	.word	0x0800d288
 80076fc:	0800d25a 	.word	0x0800d25a

08007700 <_free_r>:
 8007700:	b570      	push	{r4, r5, r6, lr}
 8007702:	0005      	movs	r5, r0
 8007704:	1e0c      	subs	r4, r1, #0
 8007706:	d010      	beq.n	800772a <_free_r+0x2a>
 8007708:	3c04      	subs	r4, #4
 800770a:	6823      	ldr	r3, [r4, #0]
 800770c:	2b00      	cmp	r3, #0
 800770e:	da00      	bge.n	8007712 <_free_r+0x12>
 8007710:	18e4      	adds	r4, r4, r3
 8007712:	0028      	movs	r0, r5
 8007714:	f000 f8ea 	bl	80078ec <__malloc_lock>
 8007718:	4a1d      	ldr	r2, [pc, #116]	@ (8007790 <_free_r+0x90>)
 800771a:	6813      	ldr	r3, [r2, #0]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d105      	bne.n	800772c <_free_r+0x2c>
 8007720:	6063      	str	r3, [r4, #4]
 8007722:	6014      	str	r4, [r2, #0]
 8007724:	0028      	movs	r0, r5
 8007726:	f000 f8e9 	bl	80078fc <__malloc_unlock>
 800772a:	bd70      	pop	{r4, r5, r6, pc}
 800772c:	42a3      	cmp	r3, r4
 800772e:	d908      	bls.n	8007742 <_free_r+0x42>
 8007730:	6820      	ldr	r0, [r4, #0]
 8007732:	1821      	adds	r1, r4, r0
 8007734:	428b      	cmp	r3, r1
 8007736:	d1f3      	bne.n	8007720 <_free_r+0x20>
 8007738:	6819      	ldr	r1, [r3, #0]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	1809      	adds	r1, r1, r0
 800773e:	6021      	str	r1, [r4, #0]
 8007740:	e7ee      	b.n	8007720 <_free_r+0x20>
 8007742:	001a      	movs	r2, r3
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d001      	beq.n	800774e <_free_r+0x4e>
 800774a:	42a3      	cmp	r3, r4
 800774c:	d9f9      	bls.n	8007742 <_free_r+0x42>
 800774e:	6811      	ldr	r1, [r2, #0]
 8007750:	1850      	adds	r0, r2, r1
 8007752:	42a0      	cmp	r0, r4
 8007754:	d10b      	bne.n	800776e <_free_r+0x6e>
 8007756:	6820      	ldr	r0, [r4, #0]
 8007758:	1809      	adds	r1, r1, r0
 800775a:	1850      	adds	r0, r2, r1
 800775c:	6011      	str	r1, [r2, #0]
 800775e:	4283      	cmp	r3, r0
 8007760:	d1e0      	bne.n	8007724 <_free_r+0x24>
 8007762:	6818      	ldr	r0, [r3, #0]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	1841      	adds	r1, r0, r1
 8007768:	6011      	str	r1, [r2, #0]
 800776a:	6053      	str	r3, [r2, #4]
 800776c:	e7da      	b.n	8007724 <_free_r+0x24>
 800776e:	42a0      	cmp	r0, r4
 8007770:	d902      	bls.n	8007778 <_free_r+0x78>
 8007772:	230c      	movs	r3, #12
 8007774:	602b      	str	r3, [r5, #0]
 8007776:	e7d5      	b.n	8007724 <_free_r+0x24>
 8007778:	6820      	ldr	r0, [r4, #0]
 800777a:	1821      	adds	r1, r4, r0
 800777c:	428b      	cmp	r3, r1
 800777e:	d103      	bne.n	8007788 <_free_r+0x88>
 8007780:	6819      	ldr	r1, [r3, #0]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	1809      	adds	r1, r1, r0
 8007786:	6021      	str	r1, [r4, #0]
 8007788:	6063      	str	r3, [r4, #4]
 800778a:	6054      	str	r4, [r2, #4]
 800778c:	e7ca      	b.n	8007724 <_free_r+0x24>
 800778e:	46c0      	nop			@ (mov r8, r8)
 8007790:	2000045c 	.word	0x2000045c

08007794 <malloc>:
 8007794:	b510      	push	{r4, lr}
 8007796:	4b03      	ldr	r3, [pc, #12]	@ (80077a4 <malloc+0x10>)
 8007798:	0001      	movs	r1, r0
 800779a:	6818      	ldr	r0, [r3, #0]
 800779c:	f000 f826 	bl	80077ec <_malloc_r>
 80077a0:	bd10      	pop	{r4, pc}
 80077a2:	46c0      	nop			@ (mov r8, r8)
 80077a4:	2000003c 	.word	0x2000003c

080077a8 <sbrk_aligned>:
 80077a8:	b570      	push	{r4, r5, r6, lr}
 80077aa:	4e0f      	ldr	r6, [pc, #60]	@ (80077e8 <sbrk_aligned+0x40>)
 80077ac:	000d      	movs	r5, r1
 80077ae:	6831      	ldr	r1, [r6, #0]
 80077b0:	0004      	movs	r4, r0
 80077b2:	2900      	cmp	r1, #0
 80077b4:	d102      	bne.n	80077bc <sbrk_aligned+0x14>
 80077b6:	f000 fc5b 	bl	8008070 <_sbrk_r>
 80077ba:	6030      	str	r0, [r6, #0]
 80077bc:	0029      	movs	r1, r5
 80077be:	0020      	movs	r0, r4
 80077c0:	f000 fc56 	bl	8008070 <_sbrk_r>
 80077c4:	1c43      	adds	r3, r0, #1
 80077c6:	d103      	bne.n	80077d0 <sbrk_aligned+0x28>
 80077c8:	2501      	movs	r5, #1
 80077ca:	426d      	negs	r5, r5
 80077cc:	0028      	movs	r0, r5
 80077ce:	bd70      	pop	{r4, r5, r6, pc}
 80077d0:	2303      	movs	r3, #3
 80077d2:	1cc5      	adds	r5, r0, #3
 80077d4:	439d      	bics	r5, r3
 80077d6:	42a8      	cmp	r0, r5
 80077d8:	d0f8      	beq.n	80077cc <sbrk_aligned+0x24>
 80077da:	1a29      	subs	r1, r5, r0
 80077dc:	0020      	movs	r0, r4
 80077de:	f000 fc47 	bl	8008070 <_sbrk_r>
 80077e2:	3001      	adds	r0, #1
 80077e4:	d1f2      	bne.n	80077cc <sbrk_aligned+0x24>
 80077e6:	e7ef      	b.n	80077c8 <sbrk_aligned+0x20>
 80077e8:	20000458 	.word	0x20000458

080077ec <_malloc_r>:
 80077ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077ee:	2203      	movs	r2, #3
 80077f0:	1ccb      	adds	r3, r1, #3
 80077f2:	4393      	bics	r3, r2
 80077f4:	3308      	adds	r3, #8
 80077f6:	0005      	movs	r5, r0
 80077f8:	001f      	movs	r7, r3
 80077fa:	2b0c      	cmp	r3, #12
 80077fc:	d234      	bcs.n	8007868 <_malloc_r+0x7c>
 80077fe:	270c      	movs	r7, #12
 8007800:	42b9      	cmp	r1, r7
 8007802:	d833      	bhi.n	800786c <_malloc_r+0x80>
 8007804:	0028      	movs	r0, r5
 8007806:	f000 f871 	bl	80078ec <__malloc_lock>
 800780a:	4e37      	ldr	r6, [pc, #220]	@ (80078e8 <_malloc_r+0xfc>)
 800780c:	6833      	ldr	r3, [r6, #0]
 800780e:	001c      	movs	r4, r3
 8007810:	2c00      	cmp	r4, #0
 8007812:	d12f      	bne.n	8007874 <_malloc_r+0x88>
 8007814:	0039      	movs	r1, r7
 8007816:	0028      	movs	r0, r5
 8007818:	f7ff ffc6 	bl	80077a8 <sbrk_aligned>
 800781c:	0004      	movs	r4, r0
 800781e:	1c43      	adds	r3, r0, #1
 8007820:	d15f      	bne.n	80078e2 <_malloc_r+0xf6>
 8007822:	6834      	ldr	r4, [r6, #0]
 8007824:	9400      	str	r4, [sp, #0]
 8007826:	9b00      	ldr	r3, [sp, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d14a      	bne.n	80078c2 <_malloc_r+0xd6>
 800782c:	2c00      	cmp	r4, #0
 800782e:	d052      	beq.n	80078d6 <_malloc_r+0xea>
 8007830:	6823      	ldr	r3, [r4, #0]
 8007832:	0028      	movs	r0, r5
 8007834:	18e3      	adds	r3, r4, r3
 8007836:	9900      	ldr	r1, [sp, #0]
 8007838:	9301      	str	r3, [sp, #4]
 800783a:	f000 fc19 	bl	8008070 <_sbrk_r>
 800783e:	9b01      	ldr	r3, [sp, #4]
 8007840:	4283      	cmp	r3, r0
 8007842:	d148      	bne.n	80078d6 <_malloc_r+0xea>
 8007844:	6823      	ldr	r3, [r4, #0]
 8007846:	0028      	movs	r0, r5
 8007848:	1aff      	subs	r7, r7, r3
 800784a:	0039      	movs	r1, r7
 800784c:	f7ff ffac 	bl	80077a8 <sbrk_aligned>
 8007850:	3001      	adds	r0, #1
 8007852:	d040      	beq.n	80078d6 <_malloc_r+0xea>
 8007854:	6823      	ldr	r3, [r4, #0]
 8007856:	19db      	adds	r3, r3, r7
 8007858:	6023      	str	r3, [r4, #0]
 800785a:	6833      	ldr	r3, [r6, #0]
 800785c:	685a      	ldr	r2, [r3, #4]
 800785e:	2a00      	cmp	r2, #0
 8007860:	d133      	bne.n	80078ca <_malloc_r+0xde>
 8007862:	9b00      	ldr	r3, [sp, #0]
 8007864:	6033      	str	r3, [r6, #0]
 8007866:	e019      	b.n	800789c <_malloc_r+0xb0>
 8007868:	2b00      	cmp	r3, #0
 800786a:	dac9      	bge.n	8007800 <_malloc_r+0x14>
 800786c:	230c      	movs	r3, #12
 800786e:	602b      	str	r3, [r5, #0]
 8007870:	2000      	movs	r0, #0
 8007872:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007874:	6821      	ldr	r1, [r4, #0]
 8007876:	1bc9      	subs	r1, r1, r7
 8007878:	d420      	bmi.n	80078bc <_malloc_r+0xd0>
 800787a:	290b      	cmp	r1, #11
 800787c:	d90a      	bls.n	8007894 <_malloc_r+0xa8>
 800787e:	19e2      	adds	r2, r4, r7
 8007880:	6027      	str	r7, [r4, #0]
 8007882:	42a3      	cmp	r3, r4
 8007884:	d104      	bne.n	8007890 <_malloc_r+0xa4>
 8007886:	6032      	str	r2, [r6, #0]
 8007888:	6863      	ldr	r3, [r4, #4]
 800788a:	6011      	str	r1, [r2, #0]
 800788c:	6053      	str	r3, [r2, #4]
 800788e:	e005      	b.n	800789c <_malloc_r+0xb0>
 8007890:	605a      	str	r2, [r3, #4]
 8007892:	e7f9      	b.n	8007888 <_malloc_r+0x9c>
 8007894:	6862      	ldr	r2, [r4, #4]
 8007896:	42a3      	cmp	r3, r4
 8007898:	d10e      	bne.n	80078b8 <_malloc_r+0xcc>
 800789a:	6032      	str	r2, [r6, #0]
 800789c:	0028      	movs	r0, r5
 800789e:	f000 f82d 	bl	80078fc <__malloc_unlock>
 80078a2:	0020      	movs	r0, r4
 80078a4:	2207      	movs	r2, #7
 80078a6:	300b      	adds	r0, #11
 80078a8:	1d23      	adds	r3, r4, #4
 80078aa:	4390      	bics	r0, r2
 80078ac:	1ac2      	subs	r2, r0, r3
 80078ae:	4298      	cmp	r0, r3
 80078b0:	d0df      	beq.n	8007872 <_malloc_r+0x86>
 80078b2:	1a1b      	subs	r3, r3, r0
 80078b4:	50a3      	str	r3, [r4, r2]
 80078b6:	e7dc      	b.n	8007872 <_malloc_r+0x86>
 80078b8:	605a      	str	r2, [r3, #4]
 80078ba:	e7ef      	b.n	800789c <_malloc_r+0xb0>
 80078bc:	0023      	movs	r3, r4
 80078be:	6864      	ldr	r4, [r4, #4]
 80078c0:	e7a6      	b.n	8007810 <_malloc_r+0x24>
 80078c2:	9c00      	ldr	r4, [sp, #0]
 80078c4:	6863      	ldr	r3, [r4, #4]
 80078c6:	9300      	str	r3, [sp, #0]
 80078c8:	e7ad      	b.n	8007826 <_malloc_r+0x3a>
 80078ca:	001a      	movs	r2, r3
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	42a3      	cmp	r3, r4
 80078d0:	d1fb      	bne.n	80078ca <_malloc_r+0xde>
 80078d2:	2300      	movs	r3, #0
 80078d4:	e7da      	b.n	800788c <_malloc_r+0xa0>
 80078d6:	230c      	movs	r3, #12
 80078d8:	0028      	movs	r0, r5
 80078da:	602b      	str	r3, [r5, #0]
 80078dc:	f000 f80e 	bl	80078fc <__malloc_unlock>
 80078e0:	e7c6      	b.n	8007870 <_malloc_r+0x84>
 80078e2:	6007      	str	r7, [r0, #0]
 80078e4:	e7da      	b.n	800789c <_malloc_r+0xb0>
 80078e6:	46c0      	nop			@ (mov r8, r8)
 80078e8:	2000045c 	.word	0x2000045c

080078ec <__malloc_lock>:
 80078ec:	b510      	push	{r4, lr}
 80078ee:	4802      	ldr	r0, [pc, #8]	@ (80078f8 <__malloc_lock+0xc>)
 80078f0:	f7ff fee5 	bl	80076be <__retarget_lock_acquire_recursive>
 80078f4:	bd10      	pop	{r4, pc}
 80078f6:	46c0      	nop			@ (mov r8, r8)
 80078f8:	20000454 	.word	0x20000454

080078fc <__malloc_unlock>:
 80078fc:	b510      	push	{r4, lr}
 80078fe:	4802      	ldr	r0, [pc, #8]	@ (8007908 <__malloc_unlock+0xc>)
 8007900:	f7ff fede 	bl	80076c0 <__retarget_lock_release_recursive>
 8007904:	bd10      	pop	{r4, pc}
 8007906:	46c0      	nop			@ (mov r8, r8)
 8007908:	20000454 	.word	0x20000454

0800790c <__ssputs_r>:
 800790c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800790e:	688e      	ldr	r6, [r1, #8]
 8007910:	b085      	sub	sp, #20
 8007912:	001f      	movs	r7, r3
 8007914:	000c      	movs	r4, r1
 8007916:	680b      	ldr	r3, [r1, #0]
 8007918:	9002      	str	r0, [sp, #8]
 800791a:	9203      	str	r2, [sp, #12]
 800791c:	42be      	cmp	r6, r7
 800791e:	d830      	bhi.n	8007982 <__ssputs_r+0x76>
 8007920:	210c      	movs	r1, #12
 8007922:	5e62      	ldrsh	r2, [r4, r1]
 8007924:	2190      	movs	r1, #144	@ 0x90
 8007926:	00c9      	lsls	r1, r1, #3
 8007928:	420a      	tst	r2, r1
 800792a:	d028      	beq.n	800797e <__ssputs_r+0x72>
 800792c:	2003      	movs	r0, #3
 800792e:	6921      	ldr	r1, [r4, #16]
 8007930:	1a5b      	subs	r3, r3, r1
 8007932:	9301      	str	r3, [sp, #4]
 8007934:	6963      	ldr	r3, [r4, #20]
 8007936:	4343      	muls	r3, r0
 8007938:	9801      	ldr	r0, [sp, #4]
 800793a:	0fdd      	lsrs	r5, r3, #31
 800793c:	18ed      	adds	r5, r5, r3
 800793e:	1c7b      	adds	r3, r7, #1
 8007940:	181b      	adds	r3, r3, r0
 8007942:	106d      	asrs	r5, r5, #1
 8007944:	42ab      	cmp	r3, r5
 8007946:	d900      	bls.n	800794a <__ssputs_r+0x3e>
 8007948:	001d      	movs	r5, r3
 800794a:	0552      	lsls	r2, r2, #21
 800794c:	d528      	bpl.n	80079a0 <__ssputs_r+0x94>
 800794e:	0029      	movs	r1, r5
 8007950:	9802      	ldr	r0, [sp, #8]
 8007952:	f7ff ff4b 	bl	80077ec <_malloc_r>
 8007956:	1e06      	subs	r6, r0, #0
 8007958:	d02c      	beq.n	80079b4 <__ssputs_r+0xa8>
 800795a:	9a01      	ldr	r2, [sp, #4]
 800795c:	6921      	ldr	r1, [r4, #16]
 800795e:	f000 fba4 	bl	80080aa <memcpy>
 8007962:	89a2      	ldrh	r2, [r4, #12]
 8007964:	4b18      	ldr	r3, [pc, #96]	@ (80079c8 <__ssputs_r+0xbc>)
 8007966:	401a      	ands	r2, r3
 8007968:	2380      	movs	r3, #128	@ 0x80
 800796a:	4313      	orrs	r3, r2
 800796c:	81a3      	strh	r3, [r4, #12]
 800796e:	9b01      	ldr	r3, [sp, #4]
 8007970:	6126      	str	r6, [r4, #16]
 8007972:	18f6      	adds	r6, r6, r3
 8007974:	6026      	str	r6, [r4, #0]
 8007976:	003e      	movs	r6, r7
 8007978:	6165      	str	r5, [r4, #20]
 800797a:	1aed      	subs	r5, r5, r3
 800797c:	60a5      	str	r5, [r4, #8]
 800797e:	42be      	cmp	r6, r7
 8007980:	d900      	bls.n	8007984 <__ssputs_r+0x78>
 8007982:	003e      	movs	r6, r7
 8007984:	0032      	movs	r2, r6
 8007986:	9903      	ldr	r1, [sp, #12]
 8007988:	6820      	ldr	r0, [r4, #0]
 800798a:	f000 fb5d 	bl	8008048 <memmove>
 800798e:	2000      	movs	r0, #0
 8007990:	68a3      	ldr	r3, [r4, #8]
 8007992:	1b9b      	subs	r3, r3, r6
 8007994:	60a3      	str	r3, [r4, #8]
 8007996:	6823      	ldr	r3, [r4, #0]
 8007998:	199b      	adds	r3, r3, r6
 800799a:	6023      	str	r3, [r4, #0]
 800799c:	b005      	add	sp, #20
 800799e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079a0:	002a      	movs	r2, r5
 80079a2:	9802      	ldr	r0, [sp, #8]
 80079a4:	f000 fb91 	bl	80080ca <_realloc_r>
 80079a8:	1e06      	subs	r6, r0, #0
 80079aa:	d1e0      	bne.n	800796e <__ssputs_r+0x62>
 80079ac:	6921      	ldr	r1, [r4, #16]
 80079ae:	9802      	ldr	r0, [sp, #8]
 80079b0:	f7ff fea6 	bl	8007700 <_free_r>
 80079b4:	230c      	movs	r3, #12
 80079b6:	2001      	movs	r0, #1
 80079b8:	9a02      	ldr	r2, [sp, #8]
 80079ba:	4240      	negs	r0, r0
 80079bc:	6013      	str	r3, [r2, #0]
 80079be:	89a2      	ldrh	r2, [r4, #12]
 80079c0:	3334      	adds	r3, #52	@ 0x34
 80079c2:	4313      	orrs	r3, r2
 80079c4:	81a3      	strh	r3, [r4, #12]
 80079c6:	e7e9      	b.n	800799c <__ssputs_r+0x90>
 80079c8:	fffffb7f 	.word	0xfffffb7f

080079cc <_svfiprintf_r>:
 80079cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079ce:	b0a1      	sub	sp, #132	@ 0x84
 80079d0:	9003      	str	r0, [sp, #12]
 80079d2:	001d      	movs	r5, r3
 80079d4:	898b      	ldrh	r3, [r1, #12]
 80079d6:	000f      	movs	r7, r1
 80079d8:	0016      	movs	r6, r2
 80079da:	061b      	lsls	r3, r3, #24
 80079dc:	d511      	bpl.n	8007a02 <_svfiprintf_r+0x36>
 80079de:	690b      	ldr	r3, [r1, #16]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d10e      	bne.n	8007a02 <_svfiprintf_r+0x36>
 80079e4:	2140      	movs	r1, #64	@ 0x40
 80079e6:	f7ff ff01 	bl	80077ec <_malloc_r>
 80079ea:	6038      	str	r0, [r7, #0]
 80079ec:	6138      	str	r0, [r7, #16]
 80079ee:	2800      	cmp	r0, #0
 80079f0:	d105      	bne.n	80079fe <_svfiprintf_r+0x32>
 80079f2:	230c      	movs	r3, #12
 80079f4:	9a03      	ldr	r2, [sp, #12]
 80079f6:	6013      	str	r3, [r2, #0]
 80079f8:	2001      	movs	r0, #1
 80079fa:	4240      	negs	r0, r0
 80079fc:	e0cf      	b.n	8007b9e <_svfiprintf_r+0x1d2>
 80079fe:	2340      	movs	r3, #64	@ 0x40
 8007a00:	617b      	str	r3, [r7, #20]
 8007a02:	2300      	movs	r3, #0
 8007a04:	ac08      	add	r4, sp, #32
 8007a06:	6163      	str	r3, [r4, #20]
 8007a08:	3320      	adds	r3, #32
 8007a0a:	7663      	strb	r3, [r4, #25]
 8007a0c:	3310      	adds	r3, #16
 8007a0e:	76a3      	strb	r3, [r4, #26]
 8007a10:	9507      	str	r5, [sp, #28]
 8007a12:	0035      	movs	r5, r6
 8007a14:	782b      	ldrb	r3, [r5, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d001      	beq.n	8007a1e <_svfiprintf_r+0x52>
 8007a1a:	2b25      	cmp	r3, #37	@ 0x25
 8007a1c:	d148      	bne.n	8007ab0 <_svfiprintf_r+0xe4>
 8007a1e:	1bab      	subs	r3, r5, r6
 8007a20:	9305      	str	r3, [sp, #20]
 8007a22:	42b5      	cmp	r5, r6
 8007a24:	d00b      	beq.n	8007a3e <_svfiprintf_r+0x72>
 8007a26:	0032      	movs	r2, r6
 8007a28:	0039      	movs	r1, r7
 8007a2a:	9803      	ldr	r0, [sp, #12]
 8007a2c:	f7ff ff6e 	bl	800790c <__ssputs_r>
 8007a30:	3001      	adds	r0, #1
 8007a32:	d100      	bne.n	8007a36 <_svfiprintf_r+0x6a>
 8007a34:	e0ae      	b.n	8007b94 <_svfiprintf_r+0x1c8>
 8007a36:	6963      	ldr	r3, [r4, #20]
 8007a38:	9a05      	ldr	r2, [sp, #20]
 8007a3a:	189b      	adds	r3, r3, r2
 8007a3c:	6163      	str	r3, [r4, #20]
 8007a3e:	782b      	ldrb	r3, [r5, #0]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d100      	bne.n	8007a46 <_svfiprintf_r+0x7a>
 8007a44:	e0a6      	b.n	8007b94 <_svfiprintf_r+0x1c8>
 8007a46:	2201      	movs	r2, #1
 8007a48:	2300      	movs	r3, #0
 8007a4a:	4252      	negs	r2, r2
 8007a4c:	6062      	str	r2, [r4, #4]
 8007a4e:	a904      	add	r1, sp, #16
 8007a50:	3254      	adds	r2, #84	@ 0x54
 8007a52:	1852      	adds	r2, r2, r1
 8007a54:	1c6e      	adds	r6, r5, #1
 8007a56:	6023      	str	r3, [r4, #0]
 8007a58:	60e3      	str	r3, [r4, #12]
 8007a5a:	60a3      	str	r3, [r4, #8]
 8007a5c:	7013      	strb	r3, [r2, #0]
 8007a5e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8007a60:	4b54      	ldr	r3, [pc, #336]	@ (8007bb4 <_svfiprintf_r+0x1e8>)
 8007a62:	2205      	movs	r2, #5
 8007a64:	0018      	movs	r0, r3
 8007a66:	7831      	ldrb	r1, [r6, #0]
 8007a68:	9305      	str	r3, [sp, #20]
 8007a6a:	f000 fb13 	bl	8008094 <memchr>
 8007a6e:	1c75      	adds	r5, r6, #1
 8007a70:	2800      	cmp	r0, #0
 8007a72:	d11f      	bne.n	8007ab4 <_svfiprintf_r+0xe8>
 8007a74:	6822      	ldr	r2, [r4, #0]
 8007a76:	06d3      	lsls	r3, r2, #27
 8007a78:	d504      	bpl.n	8007a84 <_svfiprintf_r+0xb8>
 8007a7a:	2353      	movs	r3, #83	@ 0x53
 8007a7c:	a904      	add	r1, sp, #16
 8007a7e:	185b      	adds	r3, r3, r1
 8007a80:	2120      	movs	r1, #32
 8007a82:	7019      	strb	r1, [r3, #0]
 8007a84:	0713      	lsls	r3, r2, #28
 8007a86:	d504      	bpl.n	8007a92 <_svfiprintf_r+0xc6>
 8007a88:	2353      	movs	r3, #83	@ 0x53
 8007a8a:	a904      	add	r1, sp, #16
 8007a8c:	185b      	adds	r3, r3, r1
 8007a8e:	212b      	movs	r1, #43	@ 0x2b
 8007a90:	7019      	strb	r1, [r3, #0]
 8007a92:	7833      	ldrb	r3, [r6, #0]
 8007a94:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a96:	d016      	beq.n	8007ac6 <_svfiprintf_r+0xfa>
 8007a98:	0035      	movs	r5, r6
 8007a9a:	2100      	movs	r1, #0
 8007a9c:	200a      	movs	r0, #10
 8007a9e:	68e3      	ldr	r3, [r4, #12]
 8007aa0:	782a      	ldrb	r2, [r5, #0]
 8007aa2:	1c6e      	adds	r6, r5, #1
 8007aa4:	3a30      	subs	r2, #48	@ 0x30
 8007aa6:	2a09      	cmp	r2, #9
 8007aa8:	d950      	bls.n	8007b4c <_svfiprintf_r+0x180>
 8007aaa:	2900      	cmp	r1, #0
 8007aac:	d111      	bne.n	8007ad2 <_svfiprintf_r+0x106>
 8007aae:	e017      	b.n	8007ae0 <_svfiprintf_r+0x114>
 8007ab0:	3501      	adds	r5, #1
 8007ab2:	e7af      	b.n	8007a14 <_svfiprintf_r+0x48>
 8007ab4:	9b05      	ldr	r3, [sp, #20]
 8007ab6:	6822      	ldr	r2, [r4, #0]
 8007ab8:	1ac0      	subs	r0, r0, r3
 8007aba:	2301      	movs	r3, #1
 8007abc:	4083      	lsls	r3, r0
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	002e      	movs	r6, r5
 8007ac2:	6023      	str	r3, [r4, #0]
 8007ac4:	e7cc      	b.n	8007a60 <_svfiprintf_r+0x94>
 8007ac6:	9b07      	ldr	r3, [sp, #28]
 8007ac8:	1d19      	adds	r1, r3, #4
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	9107      	str	r1, [sp, #28]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	db01      	blt.n	8007ad6 <_svfiprintf_r+0x10a>
 8007ad2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ad4:	e004      	b.n	8007ae0 <_svfiprintf_r+0x114>
 8007ad6:	425b      	negs	r3, r3
 8007ad8:	60e3      	str	r3, [r4, #12]
 8007ada:	2302      	movs	r3, #2
 8007adc:	4313      	orrs	r3, r2
 8007ade:	6023      	str	r3, [r4, #0]
 8007ae0:	782b      	ldrb	r3, [r5, #0]
 8007ae2:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ae4:	d10c      	bne.n	8007b00 <_svfiprintf_r+0x134>
 8007ae6:	786b      	ldrb	r3, [r5, #1]
 8007ae8:	2b2a      	cmp	r3, #42	@ 0x2a
 8007aea:	d134      	bne.n	8007b56 <_svfiprintf_r+0x18a>
 8007aec:	9b07      	ldr	r3, [sp, #28]
 8007aee:	3502      	adds	r5, #2
 8007af0:	1d1a      	adds	r2, r3, #4
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	9207      	str	r2, [sp, #28]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	da01      	bge.n	8007afe <_svfiprintf_r+0x132>
 8007afa:	2301      	movs	r3, #1
 8007afc:	425b      	negs	r3, r3
 8007afe:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b00:	4e2d      	ldr	r6, [pc, #180]	@ (8007bb8 <_svfiprintf_r+0x1ec>)
 8007b02:	2203      	movs	r2, #3
 8007b04:	0030      	movs	r0, r6
 8007b06:	7829      	ldrb	r1, [r5, #0]
 8007b08:	f000 fac4 	bl	8008094 <memchr>
 8007b0c:	2800      	cmp	r0, #0
 8007b0e:	d006      	beq.n	8007b1e <_svfiprintf_r+0x152>
 8007b10:	2340      	movs	r3, #64	@ 0x40
 8007b12:	1b80      	subs	r0, r0, r6
 8007b14:	4083      	lsls	r3, r0
 8007b16:	6822      	ldr	r2, [r4, #0]
 8007b18:	3501      	adds	r5, #1
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	6023      	str	r3, [r4, #0]
 8007b1e:	7829      	ldrb	r1, [r5, #0]
 8007b20:	2206      	movs	r2, #6
 8007b22:	4826      	ldr	r0, [pc, #152]	@ (8007bbc <_svfiprintf_r+0x1f0>)
 8007b24:	1c6e      	adds	r6, r5, #1
 8007b26:	7621      	strb	r1, [r4, #24]
 8007b28:	f000 fab4 	bl	8008094 <memchr>
 8007b2c:	2800      	cmp	r0, #0
 8007b2e:	d038      	beq.n	8007ba2 <_svfiprintf_r+0x1d6>
 8007b30:	4b23      	ldr	r3, [pc, #140]	@ (8007bc0 <_svfiprintf_r+0x1f4>)
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d122      	bne.n	8007b7c <_svfiprintf_r+0x1b0>
 8007b36:	2207      	movs	r2, #7
 8007b38:	9b07      	ldr	r3, [sp, #28]
 8007b3a:	3307      	adds	r3, #7
 8007b3c:	4393      	bics	r3, r2
 8007b3e:	3308      	adds	r3, #8
 8007b40:	9307      	str	r3, [sp, #28]
 8007b42:	6963      	ldr	r3, [r4, #20]
 8007b44:	9a04      	ldr	r2, [sp, #16]
 8007b46:	189b      	adds	r3, r3, r2
 8007b48:	6163      	str	r3, [r4, #20]
 8007b4a:	e762      	b.n	8007a12 <_svfiprintf_r+0x46>
 8007b4c:	4343      	muls	r3, r0
 8007b4e:	0035      	movs	r5, r6
 8007b50:	2101      	movs	r1, #1
 8007b52:	189b      	adds	r3, r3, r2
 8007b54:	e7a4      	b.n	8007aa0 <_svfiprintf_r+0xd4>
 8007b56:	2300      	movs	r3, #0
 8007b58:	200a      	movs	r0, #10
 8007b5a:	0019      	movs	r1, r3
 8007b5c:	3501      	adds	r5, #1
 8007b5e:	6063      	str	r3, [r4, #4]
 8007b60:	782a      	ldrb	r2, [r5, #0]
 8007b62:	1c6e      	adds	r6, r5, #1
 8007b64:	3a30      	subs	r2, #48	@ 0x30
 8007b66:	2a09      	cmp	r2, #9
 8007b68:	d903      	bls.n	8007b72 <_svfiprintf_r+0x1a6>
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d0c8      	beq.n	8007b00 <_svfiprintf_r+0x134>
 8007b6e:	9109      	str	r1, [sp, #36]	@ 0x24
 8007b70:	e7c6      	b.n	8007b00 <_svfiprintf_r+0x134>
 8007b72:	4341      	muls	r1, r0
 8007b74:	0035      	movs	r5, r6
 8007b76:	2301      	movs	r3, #1
 8007b78:	1889      	adds	r1, r1, r2
 8007b7a:	e7f1      	b.n	8007b60 <_svfiprintf_r+0x194>
 8007b7c:	aa07      	add	r2, sp, #28
 8007b7e:	9200      	str	r2, [sp, #0]
 8007b80:	0021      	movs	r1, r4
 8007b82:	003a      	movs	r2, r7
 8007b84:	4b0f      	ldr	r3, [pc, #60]	@ (8007bc4 <_svfiprintf_r+0x1f8>)
 8007b86:	9803      	ldr	r0, [sp, #12]
 8007b88:	e000      	b.n	8007b8c <_svfiprintf_r+0x1c0>
 8007b8a:	bf00      	nop
 8007b8c:	9004      	str	r0, [sp, #16]
 8007b8e:	9b04      	ldr	r3, [sp, #16]
 8007b90:	3301      	adds	r3, #1
 8007b92:	d1d6      	bne.n	8007b42 <_svfiprintf_r+0x176>
 8007b94:	89bb      	ldrh	r3, [r7, #12]
 8007b96:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8007b98:	065b      	lsls	r3, r3, #25
 8007b9a:	d500      	bpl.n	8007b9e <_svfiprintf_r+0x1d2>
 8007b9c:	e72c      	b.n	80079f8 <_svfiprintf_r+0x2c>
 8007b9e:	b021      	add	sp, #132	@ 0x84
 8007ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ba2:	aa07      	add	r2, sp, #28
 8007ba4:	9200      	str	r2, [sp, #0]
 8007ba6:	0021      	movs	r1, r4
 8007ba8:	003a      	movs	r2, r7
 8007baa:	4b06      	ldr	r3, [pc, #24]	@ (8007bc4 <_svfiprintf_r+0x1f8>)
 8007bac:	9803      	ldr	r0, [sp, #12]
 8007bae:	f000 f87b 	bl	8007ca8 <_printf_i>
 8007bb2:	e7eb      	b.n	8007b8c <_svfiprintf_r+0x1c0>
 8007bb4:	0800d289 	.word	0x0800d289
 8007bb8:	0800d28f 	.word	0x0800d28f
 8007bbc:	0800d293 	.word	0x0800d293
 8007bc0:	00000000 	.word	0x00000000
 8007bc4:	0800790d 	.word	0x0800790d

08007bc8 <_printf_common>:
 8007bc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bca:	0016      	movs	r6, r2
 8007bcc:	9301      	str	r3, [sp, #4]
 8007bce:	688a      	ldr	r2, [r1, #8]
 8007bd0:	690b      	ldr	r3, [r1, #16]
 8007bd2:	000c      	movs	r4, r1
 8007bd4:	9000      	str	r0, [sp, #0]
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	da00      	bge.n	8007bdc <_printf_common+0x14>
 8007bda:	0013      	movs	r3, r2
 8007bdc:	0022      	movs	r2, r4
 8007bde:	6033      	str	r3, [r6, #0]
 8007be0:	3243      	adds	r2, #67	@ 0x43
 8007be2:	7812      	ldrb	r2, [r2, #0]
 8007be4:	2a00      	cmp	r2, #0
 8007be6:	d001      	beq.n	8007bec <_printf_common+0x24>
 8007be8:	3301      	adds	r3, #1
 8007bea:	6033      	str	r3, [r6, #0]
 8007bec:	6823      	ldr	r3, [r4, #0]
 8007bee:	069b      	lsls	r3, r3, #26
 8007bf0:	d502      	bpl.n	8007bf8 <_printf_common+0x30>
 8007bf2:	6833      	ldr	r3, [r6, #0]
 8007bf4:	3302      	adds	r3, #2
 8007bf6:	6033      	str	r3, [r6, #0]
 8007bf8:	6822      	ldr	r2, [r4, #0]
 8007bfa:	2306      	movs	r3, #6
 8007bfc:	0015      	movs	r5, r2
 8007bfe:	401d      	ands	r5, r3
 8007c00:	421a      	tst	r2, r3
 8007c02:	d027      	beq.n	8007c54 <_printf_common+0x8c>
 8007c04:	0023      	movs	r3, r4
 8007c06:	3343      	adds	r3, #67	@ 0x43
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	1e5a      	subs	r2, r3, #1
 8007c0c:	4193      	sbcs	r3, r2
 8007c0e:	6822      	ldr	r2, [r4, #0]
 8007c10:	0692      	lsls	r2, r2, #26
 8007c12:	d430      	bmi.n	8007c76 <_printf_common+0xae>
 8007c14:	0022      	movs	r2, r4
 8007c16:	9901      	ldr	r1, [sp, #4]
 8007c18:	9800      	ldr	r0, [sp, #0]
 8007c1a:	9d08      	ldr	r5, [sp, #32]
 8007c1c:	3243      	adds	r2, #67	@ 0x43
 8007c1e:	47a8      	blx	r5
 8007c20:	3001      	adds	r0, #1
 8007c22:	d025      	beq.n	8007c70 <_printf_common+0xa8>
 8007c24:	2206      	movs	r2, #6
 8007c26:	6823      	ldr	r3, [r4, #0]
 8007c28:	2500      	movs	r5, #0
 8007c2a:	4013      	ands	r3, r2
 8007c2c:	2b04      	cmp	r3, #4
 8007c2e:	d105      	bne.n	8007c3c <_printf_common+0x74>
 8007c30:	6833      	ldr	r3, [r6, #0]
 8007c32:	68e5      	ldr	r5, [r4, #12]
 8007c34:	1aed      	subs	r5, r5, r3
 8007c36:	43eb      	mvns	r3, r5
 8007c38:	17db      	asrs	r3, r3, #31
 8007c3a:	401d      	ands	r5, r3
 8007c3c:	68a3      	ldr	r3, [r4, #8]
 8007c3e:	6922      	ldr	r2, [r4, #16]
 8007c40:	4293      	cmp	r3, r2
 8007c42:	dd01      	ble.n	8007c48 <_printf_common+0x80>
 8007c44:	1a9b      	subs	r3, r3, r2
 8007c46:	18ed      	adds	r5, r5, r3
 8007c48:	2600      	movs	r6, #0
 8007c4a:	42b5      	cmp	r5, r6
 8007c4c:	d120      	bne.n	8007c90 <_printf_common+0xc8>
 8007c4e:	2000      	movs	r0, #0
 8007c50:	e010      	b.n	8007c74 <_printf_common+0xac>
 8007c52:	3501      	adds	r5, #1
 8007c54:	68e3      	ldr	r3, [r4, #12]
 8007c56:	6832      	ldr	r2, [r6, #0]
 8007c58:	1a9b      	subs	r3, r3, r2
 8007c5a:	42ab      	cmp	r3, r5
 8007c5c:	ddd2      	ble.n	8007c04 <_printf_common+0x3c>
 8007c5e:	0022      	movs	r2, r4
 8007c60:	2301      	movs	r3, #1
 8007c62:	9901      	ldr	r1, [sp, #4]
 8007c64:	9800      	ldr	r0, [sp, #0]
 8007c66:	9f08      	ldr	r7, [sp, #32]
 8007c68:	3219      	adds	r2, #25
 8007c6a:	47b8      	blx	r7
 8007c6c:	3001      	adds	r0, #1
 8007c6e:	d1f0      	bne.n	8007c52 <_printf_common+0x8a>
 8007c70:	2001      	movs	r0, #1
 8007c72:	4240      	negs	r0, r0
 8007c74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007c76:	2030      	movs	r0, #48	@ 0x30
 8007c78:	18e1      	adds	r1, r4, r3
 8007c7a:	3143      	adds	r1, #67	@ 0x43
 8007c7c:	7008      	strb	r0, [r1, #0]
 8007c7e:	0021      	movs	r1, r4
 8007c80:	1c5a      	adds	r2, r3, #1
 8007c82:	3145      	adds	r1, #69	@ 0x45
 8007c84:	7809      	ldrb	r1, [r1, #0]
 8007c86:	18a2      	adds	r2, r4, r2
 8007c88:	3243      	adds	r2, #67	@ 0x43
 8007c8a:	3302      	adds	r3, #2
 8007c8c:	7011      	strb	r1, [r2, #0]
 8007c8e:	e7c1      	b.n	8007c14 <_printf_common+0x4c>
 8007c90:	0022      	movs	r2, r4
 8007c92:	2301      	movs	r3, #1
 8007c94:	9901      	ldr	r1, [sp, #4]
 8007c96:	9800      	ldr	r0, [sp, #0]
 8007c98:	9f08      	ldr	r7, [sp, #32]
 8007c9a:	321a      	adds	r2, #26
 8007c9c:	47b8      	blx	r7
 8007c9e:	3001      	adds	r0, #1
 8007ca0:	d0e6      	beq.n	8007c70 <_printf_common+0xa8>
 8007ca2:	3601      	adds	r6, #1
 8007ca4:	e7d1      	b.n	8007c4a <_printf_common+0x82>
	...

08007ca8 <_printf_i>:
 8007ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007caa:	b08b      	sub	sp, #44	@ 0x2c
 8007cac:	9206      	str	r2, [sp, #24]
 8007cae:	000a      	movs	r2, r1
 8007cb0:	3243      	adds	r2, #67	@ 0x43
 8007cb2:	9307      	str	r3, [sp, #28]
 8007cb4:	9005      	str	r0, [sp, #20]
 8007cb6:	9203      	str	r2, [sp, #12]
 8007cb8:	7e0a      	ldrb	r2, [r1, #24]
 8007cba:	000c      	movs	r4, r1
 8007cbc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007cbe:	2a78      	cmp	r2, #120	@ 0x78
 8007cc0:	d809      	bhi.n	8007cd6 <_printf_i+0x2e>
 8007cc2:	2a62      	cmp	r2, #98	@ 0x62
 8007cc4:	d80b      	bhi.n	8007cde <_printf_i+0x36>
 8007cc6:	2a00      	cmp	r2, #0
 8007cc8:	d100      	bne.n	8007ccc <_printf_i+0x24>
 8007cca:	e0bc      	b.n	8007e46 <_printf_i+0x19e>
 8007ccc:	497b      	ldr	r1, [pc, #492]	@ (8007ebc <_printf_i+0x214>)
 8007cce:	9104      	str	r1, [sp, #16]
 8007cd0:	2a58      	cmp	r2, #88	@ 0x58
 8007cd2:	d100      	bne.n	8007cd6 <_printf_i+0x2e>
 8007cd4:	e090      	b.n	8007df8 <_printf_i+0x150>
 8007cd6:	0025      	movs	r5, r4
 8007cd8:	3542      	adds	r5, #66	@ 0x42
 8007cda:	702a      	strb	r2, [r5, #0]
 8007cdc:	e022      	b.n	8007d24 <_printf_i+0x7c>
 8007cde:	0010      	movs	r0, r2
 8007ce0:	3863      	subs	r0, #99	@ 0x63
 8007ce2:	2815      	cmp	r0, #21
 8007ce4:	d8f7      	bhi.n	8007cd6 <_printf_i+0x2e>
 8007ce6:	f7f8 fa0f 	bl	8000108 <__gnu_thumb1_case_shi>
 8007cea:	0016      	.short	0x0016
 8007cec:	fff6001f 	.word	0xfff6001f
 8007cf0:	fff6fff6 	.word	0xfff6fff6
 8007cf4:	001ffff6 	.word	0x001ffff6
 8007cf8:	fff6fff6 	.word	0xfff6fff6
 8007cfc:	fff6fff6 	.word	0xfff6fff6
 8007d00:	003600a1 	.word	0x003600a1
 8007d04:	fff60080 	.word	0xfff60080
 8007d08:	00b2fff6 	.word	0x00b2fff6
 8007d0c:	0036fff6 	.word	0x0036fff6
 8007d10:	fff6fff6 	.word	0xfff6fff6
 8007d14:	0084      	.short	0x0084
 8007d16:	0025      	movs	r5, r4
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	3542      	adds	r5, #66	@ 0x42
 8007d1c:	1d11      	adds	r1, r2, #4
 8007d1e:	6019      	str	r1, [r3, #0]
 8007d20:	6813      	ldr	r3, [r2, #0]
 8007d22:	702b      	strb	r3, [r5, #0]
 8007d24:	2301      	movs	r3, #1
 8007d26:	e0a0      	b.n	8007e6a <_printf_i+0x1c2>
 8007d28:	6818      	ldr	r0, [r3, #0]
 8007d2a:	6809      	ldr	r1, [r1, #0]
 8007d2c:	1d02      	adds	r2, r0, #4
 8007d2e:	060d      	lsls	r5, r1, #24
 8007d30:	d50b      	bpl.n	8007d4a <_printf_i+0xa2>
 8007d32:	6806      	ldr	r6, [r0, #0]
 8007d34:	601a      	str	r2, [r3, #0]
 8007d36:	2e00      	cmp	r6, #0
 8007d38:	da03      	bge.n	8007d42 <_printf_i+0x9a>
 8007d3a:	232d      	movs	r3, #45	@ 0x2d
 8007d3c:	9a03      	ldr	r2, [sp, #12]
 8007d3e:	4276      	negs	r6, r6
 8007d40:	7013      	strb	r3, [r2, #0]
 8007d42:	4b5e      	ldr	r3, [pc, #376]	@ (8007ebc <_printf_i+0x214>)
 8007d44:	270a      	movs	r7, #10
 8007d46:	9304      	str	r3, [sp, #16]
 8007d48:	e018      	b.n	8007d7c <_printf_i+0xd4>
 8007d4a:	6806      	ldr	r6, [r0, #0]
 8007d4c:	601a      	str	r2, [r3, #0]
 8007d4e:	0649      	lsls	r1, r1, #25
 8007d50:	d5f1      	bpl.n	8007d36 <_printf_i+0x8e>
 8007d52:	b236      	sxth	r6, r6
 8007d54:	e7ef      	b.n	8007d36 <_printf_i+0x8e>
 8007d56:	6808      	ldr	r0, [r1, #0]
 8007d58:	6819      	ldr	r1, [r3, #0]
 8007d5a:	c940      	ldmia	r1!, {r6}
 8007d5c:	0605      	lsls	r5, r0, #24
 8007d5e:	d402      	bmi.n	8007d66 <_printf_i+0xbe>
 8007d60:	0640      	lsls	r0, r0, #25
 8007d62:	d500      	bpl.n	8007d66 <_printf_i+0xbe>
 8007d64:	b2b6      	uxth	r6, r6
 8007d66:	6019      	str	r1, [r3, #0]
 8007d68:	4b54      	ldr	r3, [pc, #336]	@ (8007ebc <_printf_i+0x214>)
 8007d6a:	270a      	movs	r7, #10
 8007d6c:	9304      	str	r3, [sp, #16]
 8007d6e:	2a6f      	cmp	r2, #111	@ 0x6f
 8007d70:	d100      	bne.n	8007d74 <_printf_i+0xcc>
 8007d72:	3f02      	subs	r7, #2
 8007d74:	0023      	movs	r3, r4
 8007d76:	2200      	movs	r2, #0
 8007d78:	3343      	adds	r3, #67	@ 0x43
 8007d7a:	701a      	strb	r2, [r3, #0]
 8007d7c:	6863      	ldr	r3, [r4, #4]
 8007d7e:	60a3      	str	r3, [r4, #8]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	db03      	blt.n	8007d8c <_printf_i+0xe4>
 8007d84:	2104      	movs	r1, #4
 8007d86:	6822      	ldr	r2, [r4, #0]
 8007d88:	438a      	bics	r2, r1
 8007d8a:	6022      	str	r2, [r4, #0]
 8007d8c:	2e00      	cmp	r6, #0
 8007d8e:	d102      	bne.n	8007d96 <_printf_i+0xee>
 8007d90:	9d03      	ldr	r5, [sp, #12]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d00c      	beq.n	8007db0 <_printf_i+0x108>
 8007d96:	9d03      	ldr	r5, [sp, #12]
 8007d98:	0030      	movs	r0, r6
 8007d9a:	0039      	movs	r1, r7
 8007d9c:	f7f8 fa44 	bl	8000228 <__aeabi_uidivmod>
 8007da0:	9b04      	ldr	r3, [sp, #16]
 8007da2:	3d01      	subs	r5, #1
 8007da4:	5c5b      	ldrb	r3, [r3, r1]
 8007da6:	702b      	strb	r3, [r5, #0]
 8007da8:	0033      	movs	r3, r6
 8007daa:	0006      	movs	r6, r0
 8007dac:	429f      	cmp	r7, r3
 8007dae:	d9f3      	bls.n	8007d98 <_printf_i+0xf0>
 8007db0:	2f08      	cmp	r7, #8
 8007db2:	d109      	bne.n	8007dc8 <_printf_i+0x120>
 8007db4:	6823      	ldr	r3, [r4, #0]
 8007db6:	07db      	lsls	r3, r3, #31
 8007db8:	d506      	bpl.n	8007dc8 <_printf_i+0x120>
 8007dba:	6862      	ldr	r2, [r4, #4]
 8007dbc:	6923      	ldr	r3, [r4, #16]
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	dc02      	bgt.n	8007dc8 <_printf_i+0x120>
 8007dc2:	2330      	movs	r3, #48	@ 0x30
 8007dc4:	3d01      	subs	r5, #1
 8007dc6:	702b      	strb	r3, [r5, #0]
 8007dc8:	9b03      	ldr	r3, [sp, #12]
 8007dca:	1b5b      	subs	r3, r3, r5
 8007dcc:	6123      	str	r3, [r4, #16]
 8007dce:	9b07      	ldr	r3, [sp, #28]
 8007dd0:	0021      	movs	r1, r4
 8007dd2:	9300      	str	r3, [sp, #0]
 8007dd4:	9805      	ldr	r0, [sp, #20]
 8007dd6:	9b06      	ldr	r3, [sp, #24]
 8007dd8:	aa09      	add	r2, sp, #36	@ 0x24
 8007dda:	f7ff fef5 	bl	8007bc8 <_printf_common>
 8007dde:	3001      	adds	r0, #1
 8007de0:	d148      	bne.n	8007e74 <_printf_i+0x1cc>
 8007de2:	2001      	movs	r0, #1
 8007de4:	4240      	negs	r0, r0
 8007de6:	b00b      	add	sp, #44	@ 0x2c
 8007de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dea:	2220      	movs	r2, #32
 8007dec:	6809      	ldr	r1, [r1, #0]
 8007dee:	430a      	orrs	r2, r1
 8007df0:	6022      	str	r2, [r4, #0]
 8007df2:	2278      	movs	r2, #120	@ 0x78
 8007df4:	4932      	ldr	r1, [pc, #200]	@ (8007ec0 <_printf_i+0x218>)
 8007df6:	9104      	str	r1, [sp, #16]
 8007df8:	0021      	movs	r1, r4
 8007dfa:	3145      	adds	r1, #69	@ 0x45
 8007dfc:	700a      	strb	r2, [r1, #0]
 8007dfe:	6819      	ldr	r1, [r3, #0]
 8007e00:	6822      	ldr	r2, [r4, #0]
 8007e02:	c940      	ldmia	r1!, {r6}
 8007e04:	0610      	lsls	r0, r2, #24
 8007e06:	d402      	bmi.n	8007e0e <_printf_i+0x166>
 8007e08:	0650      	lsls	r0, r2, #25
 8007e0a:	d500      	bpl.n	8007e0e <_printf_i+0x166>
 8007e0c:	b2b6      	uxth	r6, r6
 8007e0e:	6019      	str	r1, [r3, #0]
 8007e10:	07d3      	lsls	r3, r2, #31
 8007e12:	d502      	bpl.n	8007e1a <_printf_i+0x172>
 8007e14:	2320      	movs	r3, #32
 8007e16:	4313      	orrs	r3, r2
 8007e18:	6023      	str	r3, [r4, #0]
 8007e1a:	2e00      	cmp	r6, #0
 8007e1c:	d001      	beq.n	8007e22 <_printf_i+0x17a>
 8007e1e:	2710      	movs	r7, #16
 8007e20:	e7a8      	b.n	8007d74 <_printf_i+0xcc>
 8007e22:	2220      	movs	r2, #32
 8007e24:	6823      	ldr	r3, [r4, #0]
 8007e26:	4393      	bics	r3, r2
 8007e28:	6023      	str	r3, [r4, #0]
 8007e2a:	e7f8      	b.n	8007e1e <_printf_i+0x176>
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	680d      	ldr	r5, [r1, #0]
 8007e30:	1d10      	adds	r0, r2, #4
 8007e32:	6949      	ldr	r1, [r1, #20]
 8007e34:	6018      	str	r0, [r3, #0]
 8007e36:	6813      	ldr	r3, [r2, #0]
 8007e38:	062e      	lsls	r6, r5, #24
 8007e3a:	d501      	bpl.n	8007e40 <_printf_i+0x198>
 8007e3c:	6019      	str	r1, [r3, #0]
 8007e3e:	e002      	b.n	8007e46 <_printf_i+0x19e>
 8007e40:	066d      	lsls	r5, r5, #25
 8007e42:	d5fb      	bpl.n	8007e3c <_printf_i+0x194>
 8007e44:	8019      	strh	r1, [r3, #0]
 8007e46:	2300      	movs	r3, #0
 8007e48:	9d03      	ldr	r5, [sp, #12]
 8007e4a:	6123      	str	r3, [r4, #16]
 8007e4c:	e7bf      	b.n	8007dce <_printf_i+0x126>
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	1d11      	adds	r1, r2, #4
 8007e52:	6019      	str	r1, [r3, #0]
 8007e54:	6815      	ldr	r5, [r2, #0]
 8007e56:	2100      	movs	r1, #0
 8007e58:	0028      	movs	r0, r5
 8007e5a:	6862      	ldr	r2, [r4, #4]
 8007e5c:	f000 f91a 	bl	8008094 <memchr>
 8007e60:	2800      	cmp	r0, #0
 8007e62:	d001      	beq.n	8007e68 <_printf_i+0x1c0>
 8007e64:	1b40      	subs	r0, r0, r5
 8007e66:	6060      	str	r0, [r4, #4]
 8007e68:	6863      	ldr	r3, [r4, #4]
 8007e6a:	6123      	str	r3, [r4, #16]
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	9a03      	ldr	r2, [sp, #12]
 8007e70:	7013      	strb	r3, [r2, #0]
 8007e72:	e7ac      	b.n	8007dce <_printf_i+0x126>
 8007e74:	002a      	movs	r2, r5
 8007e76:	6923      	ldr	r3, [r4, #16]
 8007e78:	9906      	ldr	r1, [sp, #24]
 8007e7a:	9805      	ldr	r0, [sp, #20]
 8007e7c:	9d07      	ldr	r5, [sp, #28]
 8007e7e:	47a8      	blx	r5
 8007e80:	3001      	adds	r0, #1
 8007e82:	d0ae      	beq.n	8007de2 <_printf_i+0x13a>
 8007e84:	6823      	ldr	r3, [r4, #0]
 8007e86:	079b      	lsls	r3, r3, #30
 8007e88:	d415      	bmi.n	8007eb6 <_printf_i+0x20e>
 8007e8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e8c:	68e0      	ldr	r0, [r4, #12]
 8007e8e:	4298      	cmp	r0, r3
 8007e90:	daa9      	bge.n	8007de6 <_printf_i+0x13e>
 8007e92:	0018      	movs	r0, r3
 8007e94:	e7a7      	b.n	8007de6 <_printf_i+0x13e>
 8007e96:	0022      	movs	r2, r4
 8007e98:	2301      	movs	r3, #1
 8007e9a:	9906      	ldr	r1, [sp, #24]
 8007e9c:	9805      	ldr	r0, [sp, #20]
 8007e9e:	9e07      	ldr	r6, [sp, #28]
 8007ea0:	3219      	adds	r2, #25
 8007ea2:	47b0      	blx	r6
 8007ea4:	3001      	adds	r0, #1
 8007ea6:	d09c      	beq.n	8007de2 <_printf_i+0x13a>
 8007ea8:	3501      	adds	r5, #1
 8007eaa:	68e3      	ldr	r3, [r4, #12]
 8007eac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007eae:	1a9b      	subs	r3, r3, r2
 8007eb0:	42ab      	cmp	r3, r5
 8007eb2:	dcf0      	bgt.n	8007e96 <_printf_i+0x1ee>
 8007eb4:	e7e9      	b.n	8007e8a <_printf_i+0x1e2>
 8007eb6:	2500      	movs	r5, #0
 8007eb8:	e7f7      	b.n	8007eaa <_printf_i+0x202>
 8007eba:	46c0      	nop			@ (mov r8, r8)
 8007ebc:	0800d29a 	.word	0x0800d29a
 8007ec0:	0800d2ab 	.word	0x0800d2ab

08007ec4 <__sflush_r>:
 8007ec4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ec6:	220c      	movs	r2, #12
 8007ec8:	5e8b      	ldrsh	r3, [r1, r2]
 8007eca:	0005      	movs	r5, r0
 8007ecc:	000c      	movs	r4, r1
 8007ece:	071a      	lsls	r2, r3, #28
 8007ed0:	d456      	bmi.n	8007f80 <__sflush_r+0xbc>
 8007ed2:	684a      	ldr	r2, [r1, #4]
 8007ed4:	2a00      	cmp	r2, #0
 8007ed6:	dc02      	bgt.n	8007ede <__sflush_r+0x1a>
 8007ed8:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8007eda:	2a00      	cmp	r2, #0
 8007edc:	dd4e      	ble.n	8007f7c <__sflush_r+0xb8>
 8007ede:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8007ee0:	2f00      	cmp	r7, #0
 8007ee2:	d04b      	beq.n	8007f7c <__sflush_r+0xb8>
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	2080      	movs	r0, #128	@ 0x80
 8007ee8:	682e      	ldr	r6, [r5, #0]
 8007eea:	602a      	str	r2, [r5, #0]
 8007eec:	001a      	movs	r2, r3
 8007eee:	0140      	lsls	r0, r0, #5
 8007ef0:	6a21      	ldr	r1, [r4, #32]
 8007ef2:	4002      	ands	r2, r0
 8007ef4:	4203      	tst	r3, r0
 8007ef6:	d033      	beq.n	8007f60 <__sflush_r+0x9c>
 8007ef8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007efa:	89a3      	ldrh	r3, [r4, #12]
 8007efc:	075b      	lsls	r3, r3, #29
 8007efe:	d506      	bpl.n	8007f0e <__sflush_r+0x4a>
 8007f00:	6863      	ldr	r3, [r4, #4]
 8007f02:	1ad2      	subs	r2, r2, r3
 8007f04:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d001      	beq.n	8007f0e <__sflush_r+0x4a>
 8007f0a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007f0c:	1ad2      	subs	r2, r2, r3
 8007f0e:	2300      	movs	r3, #0
 8007f10:	0028      	movs	r0, r5
 8007f12:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8007f14:	6a21      	ldr	r1, [r4, #32]
 8007f16:	47b8      	blx	r7
 8007f18:	89a2      	ldrh	r2, [r4, #12]
 8007f1a:	1c43      	adds	r3, r0, #1
 8007f1c:	d106      	bne.n	8007f2c <__sflush_r+0x68>
 8007f1e:	6829      	ldr	r1, [r5, #0]
 8007f20:	291d      	cmp	r1, #29
 8007f22:	d846      	bhi.n	8007fb2 <__sflush_r+0xee>
 8007f24:	4b29      	ldr	r3, [pc, #164]	@ (8007fcc <__sflush_r+0x108>)
 8007f26:	410b      	asrs	r3, r1
 8007f28:	07db      	lsls	r3, r3, #31
 8007f2a:	d442      	bmi.n	8007fb2 <__sflush_r+0xee>
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	6063      	str	r3, [r4, #4]
 8007f30:	6923      	ldr	r3, [r4, #16]
 8007f32:	6023      	str	r3, [r4, #0]
 8007f34:	04d2      	lsls	r2, r2, #19
 8007f36:	d505      	bpl.n	8007f44 <__sflush_r+0x80>
 8007f38:	1c43      	adds	r3, r0, #1
 8007f3a:	d102      	bne.n	8007f42 <__sflush_r+0x7e>
 8007f3c:	682b      	ldr	r3, [r5, #0]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d100      	bne.n	8007f44 <__sflush_r+0x80>
 8007f42:	6560      	str	r0, [r4, #84]	@ 0x54
 8007f44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f46:	602e      	str	r6, [r5, #0]
 8007f48:	2900      	cmp	r1, #0
 8007f4a:	d017      	beq.n	8007f7c <__sflush_r+0xb8>
 8007f4c:	0023      	movs	r3, r4
 8007f4e:	3344      	adds	r3, #68	@ 0x44
 8007f50:	4299      	cmp	r1, r3
 8007f52:	d002      	beq.n	8007f5a <__sflush_r+0x96>
 8007f54:	0028      	movs	r0, r5
 8007f56:	f7ff fbd3 	bl	8007700 <_free_r>
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f5e:	e00d      	b.n	8007f7c <__sflush_r+0xb8>
 8007f60:	2301      	movs	r3, #1
 8007f62:	0028      	movs	r0, r5
 8007f64:	47b8      	blx	r7
 8007f66:	0002      	movs	r2, r0
 8007f68:	1c43      	adds	r3, r0, #1
 8007f6a:	d1c6      	bne.n	8007efa <__sflush_r+0x36>
 8007f6c:	682b      	ldr	r3, [r5, #0]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d0c3      	beq.n	8007efa <__sflush_r+0x36>
 8007f72:	2b1d      	cmp	r3, #29
 8007f74:	d001      	beq.n	8007f7a <__sflush_r+0xb6>
 8007f76:	2b16      	cmp	r3, #22
 8007f78:	d11a      	bne.n	8007fb0 <__sflush_r+0xec>
 8007f7a:	602e      	str	r6, [r5, #0]
 8007f7c:	2000      	movs	r0, #0
 8007f7e:	e01e      	b.n	8007fbe <__sflush_r+0xfa>
 8007f80:	690e      	ldr	r6, [r1, #16]
 8007f82:	2e00      	cmp	r6, #0
 8007f84:	d0fa      	beq.n	8007f7c <__sflush_r+0xb8>
 8007f86:	680f      	ldr	r7, [r1, #0]
 8007f88:	600e      	str	r6, [r1, #0]
 8007f8a:	1bba      	subs	r2, r7, r6
 8007f8c:	9201      	str	r2, [sp, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	079b      	lsls	r3, r3, #30
 8007f92:	d100      	bne.n	8007f96 <__sflush_r+0xd2>
 8007f94:	694a      	ldr	r2, [r1, #20]
 8007f96:	60a2      	str	r2, [r4, #8]
 8007f98:	9b01      	ldr	r3, [sp, #4]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	ddee      	ble.n	8007f7c <__sflush_r+0xb8>
 8007f9e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007fa0:	0032      	movs	r2, r6
 8007fa2:	001f      	movs	r7, r3
 8007fa4:	0028      	movs	r0, r5
 8007fa6:	9b01      	ldr	r3, [sp, #4]
 8007fa8:	6a21      	ldr	r1, [r4, #32]
 8007faa:	47b8      	blx	r7
 8007fac:	2800      	cmp	r0, #0
 8007fae:	dc07      	bgt.n	8007fc0 <__sflush_r+0xfc>
 8007fb0:	89a2      	ldrh	r2, [r4, #12]
 8007fb2:	2340      	movs	r3, #64	@ 0x40
 8007fb4:	2001      	movs	r0, #1
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	b21b      	sxth	r3, r3
 8007fba:	81a3      	strh	r3, [r4, #12]
 8007fbc:	4240      	negs	r0, r0
 8007fbe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007fc0:	9b01      	ldr	r3, [sp, #4]
 8007fc2:	1836      	adds	r6, r6, r0
 8007fc4:	1a1b      	subs	r3, r3, r0
 8007fc6:	9301      	str	r3, [sp, #4]
 8007fc8:	e7e6      	b.n	8007f98 <__sflush_r+0xd4>
 8007fca:	46c0      	nop			@ (mov r8, r8)
 8007fcc:	dfbffffe 	.word	0xdfbffffe

08007fd0 <_fflush_r>:
 8007fd0:	690b      	ldr	r3, [r1, #16]
 8007fd2:	b570      	push	{r4, r5, r6, lr}
 8007fd4:	0005      	movs	r5, r0
 8007fd6:	000c      	movs	r4, r1
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d102      	bne.n	8007fe2 <_fflush_r+0x12>
 8007fdc:	2500      	movs	r5, #0
 8007fde:	0028      	movs	r0, r5
 8007fe0:	bd70      	pop	{r4, r5, r6, pc}
 8007fe2:	2800      	cmp	r0, #0
 8007fe4:	d004      	beq.n	8007ff0 <_fflush_r+0x20>
 8007fe6:	6a03      	ldr	r3, [r0, #32]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d101      	bne.n	8007ff0 <_fflush_r+0x20>
 8007fec:	f7ff fa18 	bl	8007420 <__sinit>
 8007ff0:	220c      	movs	r2, #12
 8007ff2:	5ea3      	ldrsh	r3, [r4, r2]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d0f1      	beq.n	8007fdc <_fflush_r+0xc>
 8007ff8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007ffa:	07d2      	lsls	r2, r2, #31
 8007ffc:	d404      	bmi.n	8008008 <_fflush_r+0x38>
 8007ffe:	059b      	lsls	r3, r3, #22
 8008000:	d402      	bmi.n	8008008 <_fflush_r+0x38>
 8008002:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008004:	f7ff fb5b 	bl	80076be <__retarget_lock_acquire_recursive>
 8008008:	0028      	movs	r0, r5
 800800a:	0021      	movs	r1, r4
 800800c:	f7ff ff5a 	bl	8007ec4 <__sflush_r>
 8008010:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008012:	0005      	movs	r5, r0
 8008014:	07db      	lsls	r3, r3, #31
 8008016:	d4e2      	bmi.n	8007fde <_fflush_r+0xe>
 8008018:	89a3      	ldrh	r3, [r4, #12]
 800801a:	059b      	lsls	r3, r3, #22
 800801c:	d4df      	bmi.n	8007fde <_fflush_r+0xe>
 800801e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008020:	f7ff fb4e 	bl	80076c0 <__retarget_lock_release_recursive>
 8008024:	e7db      	b.n	8007fde <_fflush_r+0xe>
	...

08008028 <fiprintf>:
 8008028:	b40e      	push	{r1, r2, r3}
 800802a:	b517      	push	{r0, r1, r2, r4, lr}
 800802c:	4c05      	ldr	r4, [pc, #20]	@ (8008044 <fiprintf+0x1c>)
 800802e:	ab05      	add	r3, sp, #20
 8008030:	cb04      	ldmia	r3!, {r2}
 8008032:	0001      	movs	r1, r0
 8008034:	6820      	ldr	r0, [r4, #0]
 8008036:	9301      	str	r3, [sp, #4]
 8008038:	f000 f89e 	bl	8008178 <_vfiprintf_r>
 800803c:	bc1e      	pop	{r1, r2, r3, r4}
 800803e:	bc08      	pop	{r3}
 8008040:	b003      	add	sp, #12
 8008042:	4718      	bx	r3
 8008044:	2000003c 	.word	0x2000003c

08008048 <memmove>:
 8008048:	b510      	push	{r4, lr}
 800804a:	4288      	cmp	r0, r1
 800804c:	d806      	bhi.n	800805c <memmove+0x14>
 800804e:	2300      	movs	r3, #0
 8008050:	429a      	cmp	r2, r3
 8008052:	d008      	beq.n	8008066 <memmove+0x1e>
 8008054:	5ccc      	ldrb	r4, [r1, r3]
 8008056:	54c4      	strb	r4, [r0, r3]
 8008058:	3301      	adds	r3, #1
 800805a:	e7f9      	b.n	8008050 <memmove+0x8>
 800805c:	188b      	adds	r3, r1, r2
 800805e:	4298      	cmp	r0, r3
 8008060:	d2f5      	bcs.n	800804e <memmove+0x6>
 8008062:	3a01      	subs	r2, #1
 8008064:	d200      	bcs.n	8008068 <memmove+0x20>
 8008066:	bd10      	pop	{r4, pc}
 8008068:	5c8b      	ldrb	r3, [r1, r2]
 800806a:	5483      	strb	r3, [r0, r2]
 800806c:	e7f9      	b.n	8008062 <memmove+0x1a>
	...

08008070 <_sbrk_r>:
 8008070:	2300      	movs	r3, #0
 8008072:	b570      	push	{r4, r5, r6, lr}
 8008074:	4d06      	ldr	r5, [pc, #24]	@ (8008090 <_sbrk_r+0x20>)
 8008076:	0004      	movs	r4, r0
 8008078:	0008      	movs	r0, r1
 800807a:	602b      	str	r3, [r5, #0]
 800807c:	f7f9 fa4c 	bl	8001518 <_sbrk>
 8008080:	1c43      	adds	r3, r0, #1
 8008082:	d103      	bne.n	800808c <_sbrk_r+0x1c>
 8008084:	682b      	ldr	r3, [r5, #0]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d000      	beq.n	800808c <_sbrk_r+0x1c>
 800808a:	6023      	str	r3, [r4, #0]
 800808c:	bd70      	pop	{r4, r5, r6, pc}
 800808e:	46c0      	nop			@ (mov r8, r8)
 8008090:	20000450 	.word	0x20000450

08008094 <memchr>:
 8008094:	b2c9      	uxtb	r1, r1
 8008096:	1882      	adds	r2, r0, r2
 8008098:	4290      	cmp	r0, r2
 800809a:	d101      	bne.n	80080a0 <memchr+0xc>
 800809c:	2000      	movs	r0, #0
 800809e:	4770      	bx	lr
 80080a0:	7803      	ldrb	r3, [r0, #0]
 80080a2:	428b      	cmp	r3, r1
 80080a4:	d0fb      	beq.n	800809e <memchr+0xa>
 80080a6:	3001      	adds	r0, #1
 80080a8:	e7f6      	b.n	8008098 <memchr+0x4>

080080aa <memcpy>:
 80080aa:	2300      	movs	r3, #0
 80080ac:	b510      	push	{r4, lr}
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d100      	bne.n	80080b4 <memcpy+0xa>
 80080b2:	bd10      	pop	{r4, pc}
 80080b4:	5ccc      	ldrb	r4, [r1, r3]
 80080b6:	54c4      	strb	r4, [r0, r3]
 80080b8:	3301      	adds	r3, #1
 80080ba:	e7f8      	b.n	80080ae <memcpy+0x4>

080080bc <abort>:
 80080bc:	2006      	movs	r0, #6
 80080be:	b510      	push	{r4, lr}
 80080c0:	f000 fa40 	bl	8008544 <raise>
 80080c4:	2001      	movs	r0, #1
 80080c6:	f7f9 f9b4 	bl	8001432 <_exit>

080080ca <_realloc_r>:
 80080ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080cc:	0006      	movs	r6, r0
 80080ce:	000c      	movs	r4, r1
 80080d0:	0015      	movs	r5, r2
 80080d2:	2900      	cmp	r1, #0
 80080d4:	d105      	bne.n	80080e2 <_realloc_r+0x18>
 80080d6:	0011      	movs	r1, r2
 80080d8:	f7ff fb88 	bl	80077ec <_malloc_r>
 80080dc:	0004      	movs	r4, r0
 80080de:	0020      	movs	r0, r4
 80080e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80080e2:	2a00      	cmp	r2, #0
 80080e4:	d103      	bne.n	80080ee <_realloc_r+0x24>
 80080e6:	f7ff fb0b 	bl	8007700 <_free_r>
 80080ea:	2400      	movs	r4, #0
 80080ec:	e7f7      	b.n	80080de <_realloc_r+0x14>
 80080ee:	f000 fa49 	bl	8008584 <_malloc_usable_size_r>
 80080f2:	0007      	movs	r7, r0
 80080f4:	4285      	cmp	r5, r0
 80080f6:	d802      	bhi.n	80080fe <_realloc_r+0x34>
 80080f8:	0843      	lsrs	r3, r0, #1
 80080fa:	42ab      	cmp	r3, r5
 80080fc:	d3ef      	bcc.n	80080de <_realloc_r+0x14>
 80080fe:	0029      	movs	r1, r5
 8008100:	0030      	movs	r0, r6
 8008102:	f7ff fb73 	bl	80077ec <_malloc_r>
 8008106:	9001      	str	r0, [sp, #4]
 8008108:	2800      	cmp	r0, #0
 800810a:	d0ee      	beq.n	80080ea <_realloc_r+0x20>
 800810c:	002a      	movs	r2, r5
 800810e:	42bd      	cmp	r5, r7
 8008110:	d900      	bls.n	8008114 <_realloc_r+0x4a>
 8008112:	003a      	movs	r2, r7
 8008114:	0021      	movs	r1, r4
 8008116:	9801      	ldr	r0, [sp, #4]
 8008118:	f7ff ffc7 	bl	80080aa <memcpy>
 800811c:	0021      	movs	r1, r4
 800811e:	0030      	movs	r0, r6
 8008120:	f7ff faee 	bl	8007700 <_free_r>
 8008124:	9c01      	ldr	r4, [sp, #4]
 8008126:	e7da      	b.n	80080de <_realloc_r+0x14>

08008128 <__sfputc_r>:
 8008128:	6893      	ldr	r3, [r2, #8]
 800812a:	b510      	push	{r4, lr}
 800812c:	3b01      	subs	r3, #1
 800812e:	6093      	str	r3, [r2, #8]
 8008130:	2b00      	cmp	r3, #0
 8008132:	da04      	bge.n	800813e <__sfputc_r+0x16>
 8008134:	6994      	ldr	r4, [r2, #24]
 8008136:	42a3      	cmp	r3, r4
 8008138:	db07      	blt.n	800814a <__sfputc_r+0x22>
 800813a:	290a      	cmp	r1, #10
 800813c:	d005      	beq.n	800814a <__sfputc_r+0x22>
 800813e:	6813      	ldr	r3, [r2, #0]
 8008140:	1c58      	adds	r0, r3, #1
 8008142:	6010      	str	r0, [r2, #0]
 8008144:	7019      	strb	r1, [r3, #0]
 8008146:	0008      	movs	r0, r1
 8008148:	bd10      	pop	{r4, pc}
 800814a:	f000 f931 	bl	80083b0 <__swbuf_r>
 800814e:	0001      	movs	r1, r0
 8008150:	e7f9      	b.n	8008146 <__sfputc_r+0x1e>

08008152 <__sfputs_r>:
 8008152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008154:	0006      	movs	r6, r0
 8008156:	000f      	movs	r7, r1
 8008158:	0014      	movs	r4, r2
 800815a:	18d5      	adds	r5, r2, r3
 800815c:	42ac      	cmp	r4, r5
 800815e:	d101      	bne.n	8008164 <__sfputs_r+0x12>
 8008160:	2000      	movs	r0, #0
 8008162:	e007      	b.n	8008174 <__sfputs_r+0x22>
 8008164:	7821      	ldrb	r1, [r4, #0]
 8008166:	003a      	movs	r2, r7
 8008168:	0030      	movs	r0, r6
 800816a:	f7ff ffdd 	bl	8008128 <__sfputc_r>
 800816e:	3401      	adds	r4, #1
 8008170:	1c43      	adds	r3, r0, #1
 8008172:	d1f3      	bne.n	800815c <__sfputs_r+0xa>
 8008174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008178 <_vfiprintf_r>:
 8008178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800817a:	b0a1      	sub	sp, #132	@ 0x84
 800817c:	000f      	movs	r7, r1
 800817e:	0015      	movs	r5, r2
 8008180:	001e      	movs	r6, r3
 8008182:	9003      	str	r0, [sp, #12]
 8008184:	2800      	cmp	r0, #0
 8008186:	d004      	beq.n	8008192 <_vfiprintf_r+0x1a>
 8008188:	6a03      	ldr	r3, [r0, #32]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d101      	bne.n	8008192 <_vfiprintf_r+0x1a>
 800818e:	f7ff f947 	bl	8007420 <__sinit>
 8008192:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008194:	07db      	lsls	r3, r3, #31
 8008196:	d405      	bmi.n	80081a4 <_vfiprintf_r+0x2c>
 8008198:	89bb      	ldrh	r3, [r7, #12]
 800819a:	059b      	lsls	r3, r3, #22
 800819c:	d402      	bmi.n	80081a4 <_vfiprintf_r+0x2c>
 800819e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80081a0:	f7ff fa8d 	bl	80076be <__retarget_lock_acquire_recursive>
 80081a4:	89bb      	ldrh	r3, [r7, #12]
 80081a6:	071b      	lsls	r3, r3, #28
 80081a8:	d502      	bpl.n	80081b0 <_vfiprintf_r+0x38>
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d113      	bne.n	80081d8 <_vfiprintf_r+0x60>
 80081b0:	0039      	movs	r1, r7
 80081b2:	9803      	ldr	r0, [sp, #12]
 80081b4:	f000 f93e 	bl	8008434 <__swsetup_r>
 80081b8:	2800      	cmp	r0, #0
 80081ba:	d00d      	beq.n	80081d8 <_vfiprintf_r+0x60>
 80081bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80081be:	07db      	lsls	r3, r3, #31
 80081c0:	d503      	bpl.n	80081ca <_vfiprintf_r+0x52>
 80081c2:	2001      	movs	r0, #1
 80081c4:	4240      	negs	r0, r0
 80081c6:	b021      	add	sp, #132	@ 0x84
 80081c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081ca:	89bb      	ldrh	r3, [r7, #12]
 80081cc:	059b      	lsls	r3, r3, #22
 80081ce:	d4f8      	bmi.n	80081c2 <_vfiprintf_r+0x4a>
 80081d0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80081d2:	f7ff fa75 	bl	80076c0 <__retarget_lock_release_recursive>
 80081d6:	e7f4      	b.n	80081c2 <_vfiprintf_r+0x4a>
 80081d8:	2300      	movs	r3, #0
 80081da:	ac08      	add	r4, sp, #32
 80081dc:	6163      	str	r3, [r4, #20]
 80081de:	3320      	adds	r3, #32
 80081e0:	7663      	strb	r3, [r4, #25]
 80081e2:	3310      	adds	r3, #16
 80081e4:	76a3      	strb	r3, [r4, #26]
 80081e6:	9607      	str	r6, [sp, #28]
 80081e8:	002e      	movs	r6, r5
 80081ea:	7833      	ldrb	r3, [r6, #0]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d001      	beq.n	80081f4 <_vfiprintf_r+0x7c>
 80081f0:	2b25      	cmp	r3, #37	@ 0x25
 80081f2:	d148      	bne.n	8008286 <_vfiprintf_r+0x10e>
 80081f4:	1b73      	subs	r3, r6, r5
 80081f6:	9305      	str	r3, [sp, #20]
 80081f8:	42ae      	cmp	r6, r5
 80081fa:	d00b      	beq.n	8008214 <_vfiprintf_r+0x9c>
 80081fc:	002a      	movs	r2, r5
 80081fe:	0039      	movs	r1, r7
 8008200:	9803      	ldr	r0, [sp, #12]
 8008202:	f7ff ffa6 	bl	8008152 <__sfputs_r>
 8008206:	3001      	adds	r0, #1
 8008208:	d100      	bne.n	800820c <_vfiprintf_r+0x94>
 800820a:	e0ae      	b.n	800836a <_vfiprintf_r+0x1f2>
 800820c:	6963      	ldr	r3, [r4, #20]
 800820e:	9a05      	ldr	r2, [sp, #20]
 8008210:	189b      	adds	r3, r3, r2
 8008212:	6163      	str	r3, [r4, #20]
 8008214:	7833      	ldrb	r3, [r6, #0]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d100      	bne.n	800821c <_vfiprintf_r+0xa4>
 800821a:	e0a6      	b.n	800836a <_vfiprintf_r+0x1f2>
 800821c:	2201      	movs	r2, #1
 800821e:	2300      	movs	r3, #0
 8008220:	4252      	negs	r2, r2
 8008222:	6062      	str	r2, [r4, #4]
 8008224:	a904      	add	r1, sp, #16
 8008226:	3254      	adds	r2, #84	@ 0x54
 8008228:	1852      	adds	r2, r2, r1
 800822a:	1c75      	adds	r5, r6, #1
 800822c:	6023      	str	r3, [r4, #0]
 800822e:	60e3      	str	r3, [r4, #12]
 8008230:	60a3      	str	r3, [r4, #8]
 8008232:	7013      	strb	r3, [r2, #0]
 8008234:	65a3      	str	r3, [r4, #88]	@ 0x58
 8008236:	4b59      	ldr	r3, [pc, #356]	@ (800839c <_vfiprintf_r+0x224>)
 8008238:	2205      	movs	r2, #5
 800823a:	0018      	movs	r0, r3
 800823c:	7829      	ldrb	r1, [r5, #0]
 800823e:	9305      	str	r3, [sp, #20]
 8008240:	f7ff ff28 	bl	8008094 <memchr>
 8008244:	1c6e      	adds	r6, r5, #1
 8008246:	2800      	cmp	r0, #0
 8008248:	d11f      	bne.n	800828a <_vfiprintf_r+0x112>
 800824a:	6822      	ldr	r2, [r4, #0]
 800824c:	06d3      	lsls	r3, r2, #27
 800824e:	d504      	bpl.n	800825a <_vfiprintf_r+0xe2>
 8008250:	2353      	movs	r3, #83	@ 0x53
 8008252:	a904      	add	r1, sp, #16
 8008254:	185b      	adds	r3, r3, r1
 8008256:	2120      	movs	r1, #32
 8008258:	7019      	strb	r1, [r3, #0]
 800825a:	0713      	lsls	r3, r2, #28
 800825c:	d504      	bpl.n	8008268 <_vfiprintf_r+0xf0>
 800825e:	2353      	movs	r3, #83	@ 0x53
 8008260:	a904      	add	r1, sp, #16
 8008262:	185b      	adds	r3, r3, r1
 8008264:	212b      	movs	r1, #43	@ 0x2b
 8008266:	7019      	strb	r1, [r3, #0]
 8008268:	782b      	ldrb	r3, [r5, #0]
 800826a:	2b2a      	cmp	r3, #42	@ 0x2a
 800826c:	d016      	beq.n	800829c <_vfiprintf_r+0x124>
 800826e:	002e      	movs	r6, r5
 8008270:	2100      	movs	r1, #0
 8008272:	200a      	movs	r0, #10
 8008274:	68e3      	ldr	r3, [r4, #12]
 8008276:	7832      	ldrb	r2, [r6, #0]
 8008278:	1c75      	adds	r5, r6, #1
 800827a:	3a30      	subs	r2, #48	@ 0x30
 800827c:	2a09      	cmp	r2, #9
 800827e:	d950      	bls.n	8008322 <_vfiprintf_r+0x1aa>
 8008280:	2900      	cmp	r1, #0
 8008282:	d111      	bne.n	80082a8 <_vfiprintf_r+0x130>
 8008284:	e017      	b.n	80082b6 <_vfiprintf_r+0x13e>
 8008286:	3601      	adds	r6, #1
 8008288:	e7af      	b.n	80081ea <_vfiprintf_r+0x72>
 800828a:	9b05      	ldr	r3, [sp, #20]
 800828c:	6822      	ldr	r2, [r4, #0]
 800828e:	1ac0      	subs	r0, r0, r3
 8008290:	2301      	movs	r3, #1
 8008292:	4083      	lsls	r3, r0
 8008294:	4313      	orrs	r3, r2
 8008296:	0035      	movs	r5, r6
 8008298:	6023      	str	r3, [r4, #0]
 800829a:	e7cc      	b.n	8008236 <_vfiprintf_r+0xbe>
 800829c:	9b07      	ldr	r3, [sp, #28]
 800829e:	1d19      	adds	r1, r3, #4
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	9107      	str	r1, [sp, #28]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	db01      	blt.n	80082ac <_vfiprintf_r+0x134>
 80082a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80082aa:	e004      	b.n	80082b6 <_vfiprintf_r+0x13e>
 80082ac:	425b      	negs	r3, r3
 80082ae:	60e3      	str	r3, [r4, #12]
 80082b0:	2302      	movs	r3, #2
 80082b2:	4313      	orrs	r3, r2
 80082b4:	6023      	str	r3, [r4, #0]
 80082b6:	7833      	ldrb	r3, [r6, #0]
 80082b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80082ba:	d10c      	bne.n	80082d6 <_vfiprintf_r+0x15e>
 80082bc:	7873      	ldrb	r3, [r6, #1]
 80082be:	2b2a      	cmp	r3, #42	@ 0x2a
 80082c0:	d134      	bne.n	800832c <_vfiprintf_r+0x1b4>
 80082c2:	9b07      	ldr	r3, [sp, #28]
 80082c4:	3602      	adds	r6, #2
 80082c6:	1d1a      	adds	r2, r3, #4
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	9207      	str	r2, [sp, #28]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	da01      	bge.n	80082d4 <_vfiprintf_r+0x15c>
 80082d0:	2301      	movs	r3, #1
 80082d2:	425b      	negs	r3, r3
 80082d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80082d6:	4d32      	ldr	r5, [pc, #200]	@ (80083a0 <_vfiprintf_r+0x228>)
 80082d8:	2203      	movs	r2, #3
 80082da:	0028      	movs	r0, r5
 80082dc:	7831      	ldrb	r1, [r6, #0]
 80082de:	f7ff fed9 	bl	8008094 <memchr>
 80082e2:	2800      	cmp	r0, #0
 80082e4:	d006      	beq.n	80082f4 <_vfiprintf_r+0x17c>
 80082e6:	2340      	movs	r3, #64	@ 0x40
 80082e8:	1b40      	subs	r0, r0, r5
 80082ea:	4083      	lsls	r3, r0
 80082ec:	6822      	ldr	r2, [r4, #0]
 80082ee:	3601      	adds	r6, #1
 80082f0:	4313      	orrs	r3, r2
 80082f2:	6023      	str	r3, [r4, #0]
 80082f4:	7831      	ldrb	r1, [r6, #0]
 80082f6:	2206      	movs	r2, #6
 80082f8:	482a      	ldr	r0, [pc, #168]	@ (80083a4 <_vfiprintf_r+0x22c>)
 80082fa:	1c75      	adds	r5, r6, #1
 80082fc:	7621      	strb	r1, [r4, #24]
 80082fe:	f7ff fec9 	bl	8008094 <memchr>
 8008302:	2800      	cmp	r0, #0
 8008304:	d040      	beq.n	8008388 <_vfiprintf_r+0x210>
 8008306:	4b28      	ldr	r3, [pc, #160]	@ (80083a8 <_vfiprintf_r+0x230>)
 8008308:	2b00      	cmp	r3, #0
 800830a:	d122      	bne.n	8008352 <_vfiprintf_r+0x1da>
 800830c:	2207      	movs	r2, #7
 800830e:	9b07      	ldr	r3, [sp, #28]
 8008310:	3307      	adds	r3, #7
 8008312:	4393      	bics	r3, r2
 8008314:	3308      	adds	r3, #8
 8008316:	9307      	str	r3, [sp, #28]
 8008318:	6963      	ldr	r3, [r4, #20]
 800831a:	9a04      	ldr	r2, [sp, #16]
 800831c:	189b      	adds	r3, r3, r2
 800831e:	6163      	str	r3, [r4, #20]
 8008320:	e762      	b.n	80081e8 <_vfiprintf_r+0x70>
 8008322:	4343      	muls	r3, r0
 8008324:	002e      	movs	r6, r5
 8008326:	2101      	movs	r1, #1
 8008328:	189b      	adds	r3, r3, r2
 800832a:	e7a4      	b.n	8008276 <_vfiprintf_r+0xfe>
 800832c:	2300      	movs	r3, #0
 800832e:	200a      	movs	r0, #10
 8008330:	0019      	movs	r1, r3
 8008332:	3601      	adds	r6, #1
 8008334:	6063      	str	r3, [r4, #4]
 8008336:	7832      	ldrb	r2, [r6, #0]
 8008338:	1c75      	adds	r5, r6, #1
 800833a:	3a30      	subs	r2, #48	@ 0x30
 800833c:	2a09      	cmp	r2, #9
 800833e:	d903      	bls.n	8008348 <_vfiprintf_r+0x1d0>
 8008340:	2b00      	cmp	r3, #0
 8008342:	d0c8      	beq.n	80082d6 <_vfiprintf_r+0x15e>
 8008344:	9109      	str	r1, [sp, #36]	@ 0x24
 8008346:	e7c6      	b.n	80082d6 <_vfiprintf_r+0x15e>
 8008348:	4341      	muls	r1, r0
 800834a:	002e      	movs	r6, r5
 800834c:	2301      	movs	r3, #1
 800834e:	1889      	adds	r1, r1, r2
 8008350:	e7f1      	b.n	8008336 <_vfiprintf_r+0x1be>
 8008352:	aa07      	add	r2, sp, #28
 8008354:	9200      	str	r2, [sp, #0]
 8008356:	0021      	movs	r1, r4
 8008358:	003a      	movs	r2, r7
 800835a:	4b14      	ldr	r3, [pc, #80]	@ (80083ac <_vfiprintf_r+0x234>)
 800835c:	9803      	ldr	r0, [sp, #12]
 800835e:	e000      	b.n	8008362 <_vfiprintf_r+0x1ea>
 8008360:	bf00      	nop
 8008362:	9004      	str	r0, [sp, #16]
 8008364:	9b04      	ldr	r3, [sp, #16]
 8008366:	3301      	adds	r3, #1
 8008368:	d1d6      	bne.n	8008318 <_vfiprintf_r+0x1a0>
 800836a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800836c:	07db      	lsls	r3, r3, #31
 800836e:	d405      	bmi.n	800837c <_vfiprintf_r+0x204>
 8008370:	89bb      	ldrh	r3, [r7, #12]
 8008372:	059b      	lsls	r3, r3, #22
 8008374:	d402      	bmi.n	800837c <_vfiprintf_r+0x204>
 8008376:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8008378:	f7ff f9a2 	bl	80076c0 <__retarget_lock_release_recursive>
 800837c:	89bb      	ldrh	r3, [r7, #12]
 800837e:	065b      	lsls	r3, r3, #25
 8008380:	d500      	bpl.n	8008384 <_vfiprintf_r+0x20c>
 8008382:	e71e      	b.n	80081c2 <_vfiprintf_r+0x4a>
 8008384:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8008386:	e71e      	b.n	80081c6 <_vfiprintf_r+0x4e>
 8008388:	aa07      	add	r2, sp, #28
 800838a:	9200      	str	r2, [sp, #0]
 800838c:	0021      	movs	r1, r4
 800838e:	003a      	movs	r2, r7
 8008390:	4b06      	ldr	r3, [pc, #24]	@ (80083ac <_vfiprintf_r+0x234>)
 8008392:	9803      	ldr	r0, [sp, #12]
 8008394:	f7ff fc88 	bl	8007ca8 <_printf_i>
 8008398:	e7e3      	b.n	8008362 <_vfiprintf_r+0x1ea>
 800839a:	46c0      	nop			@ (mov r8, r8)
 800839c:	0800d289 	.word	0x0800d289
 80083a0:	0800d28f 	.word	0x0800d28f
 80083a4:	0800d293 	.word	0x0800d293
 80083a8:	00000000 	.word	0x00000000
 80083ac:	08008153 	.word	0x08008153

080083b0 <__swbuf_r>:
 80083b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083b2:	0006      	movs	r6, r0
 80083b4:	000d      	movs	r5, r1
 80083b6:	0014      	movs	r4, r2
 80083b8:	2800      	cmp	r0, #0
 80083ba:	d004      	beq.n	80083c6 <__swbuf_r+0x16>
 80083bc:	6a03      	ldr	r3, [r0, #32]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d101      	bne.n	80083c6 <__swbuf_r+0x16>
 80083c2:	f7ff f82d 	bl	8007420 <__sinit>
 80083c6:	69a3      	ldr	r3, [r4, #24]
 80083c8:	60a3      	str	r3, [r4, #8]
 80083ca:	89a3      	ldrh	r3, [r4, #12]
 80083cc:	071b      	lsls	r3, r3, #28
 80083ce:	d502      	bpl.n	80083d6 <__swbuf_r+0x26>
 80083d0:	6923      	ldr	r3, [r4, #16]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d109      	bne.n	80083ea <__swbuf_r+0x3a>
 80083d6:	0021      	movs	r1, r4
 80083d8:	0030      	movs	r0, r6
 80083da:	f000 f82b 	bl	8008434 <__swsetup_r>
 80083de:	2800      	cmp	r0, #0
 80083e0:	d003      	beq.n	80083ea <__swbuf_r+0x3a>
 80083e2:	2501      	movs	r5, #1
 80083e4:	426d      	negs	r5, r5
 80083e6:	0028      	movs	r0, r5
 80083e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083ea:	6923      	ldr	r3, [r4, #16]
 80083ec:	6820      	ldr	r0, [r4, #0]
 80083ee:	b2ef      	uxtb	r7, r5
 80083f0:	1ac0      	subs	r0, r0, r3
 80083f2:	6963      	ldr	r3, [r4, #20]
 80083f4:	b2ed      	uxtb	r5, r5
 80083f6:	4283      	cmp	r3, r0
 80083f8:	dc05      	bgt.n	8008406 <__swbuf_r+0x56>
 80083fa:	0021      	movs	r1, r4
 80083fc:	0030      	movs	r0, r6
 80083fe:	f7ff fde7 	bl	8007fd0 <_fflush_r>
 8008402:	2800      	cmp	r0, #0
 8008404:	d1ed      	bne.n	80083e2 <__swbuf_r+0x32>
 8008406:	68a3      	ldr	r3, [r4, #8]
 8008408:	3001      	adds	r0, #1
 800840a:	3b01      	subs	r3, #1
 800840c:	60a3      	str	r3, [r4, #8]
 800840e:	6823      	ldr	r3, [r4, #0]
 8008410:	1c5a      	adds	r2, r3, #1
 8008412:	6022      	str	r2, [r4, #0]
 8008414:	701f      	strb	r7, [r3, #0]
 8008416:	6963      	ldr	r3, [r4, #20]
 8008418:	4283      	cmp	r3, r0
 800841a:	d004      	beq.n	8008426 <__swbuf_r+0x76>
 800841c:	89a3      	ldrh	r3, [r4, #12]
 800841e:	07db      	lsls	r3, r3, #31
 8008420:	d5e1      	bpl.n	80083e6 <__swbuf_r+0x36>
 8008422:	2d0a      	cmp	r5, #10
 8008424:	d1df      	bne.n	80083e6 <__swbuf_r+0x36>
 8008426:	0021      	movs	r1, r4
 8008428:	0030      	movs	r0, r6
 800842a:	f7ff fdd1 	bl	8007fd0 <_fflush_r>
 800842e:	2800      	cmp	r0, #0
 8008430:	d0d9      	beq.n	80083e6 <__swbuf_r+0x36>
 8008432:	e7d6      	b.n	80083e2 <__swbuf_r+0x32>

08008434 <__swsetup_r>:
 8008434:	4b2d      	ldr	r3, [pc, #180]	@ (80084ec <__swsetup_r+0xb8>)
 8008436:	b570      	push	{r4, r5, r6, lr}
 8008438:	0005      	movs	r5, r0
 800843a:	6818      	ldr	r0, [r3, #0]
 800843c:	000c      	movs	r4, r1
 800843e:	2800      	cmp	r0, #0
 8008440:	d004      	beq.n	800844c <__swsetup_r+0x18>
 8008442:	6a03      	ldr	r3, [r0, #32]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d101      	bne.n	800844c <__swsetup_r+0x18>
 8008448:	f7fe ffea 	bl	8007420 <__sinit>
 800844c:	230c      	movs	r3, #12
 800844e:	5ee2      	ldrsh	r2, [r4, r3]
 8008450:	0713      	lsls	r3, r2, #28
 8008452:	d423      	bmi.n	800849c <__swsetup_r+0x68>
 8008454:	06d3      	lsls	r3, r2, #27
 8008456:	d407      	bmi.n	8008468 <__swsetup_r+0x34>
 8008458:	2309      	movs	r3, #9
 800845a:	602b      	str	r3, [r5, #0]
 800845c:	2340      	movs	r3, #64	@ 0x40
 800845e:	2001      	movs	r0, #1
 8008460:	4313      	orrs	r3, r2
 8008462:	81a3      	strh	r3, [r4, #12]
 8008464:	4240      	negs	r0, r0
 8008466:	e03a      	b.n	80084de <__swsetup_r+0xaa>
 8008468:	0752      	lsls	r2, r2, #29
 800846a:	d513      	bpl.n	8008494 <__swsetup_r+0x60>
 800846c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800846e:	2900      	cmp	r1, #0
 8008470:	d008      	beq.n	8008484 <__swsetup_r+0x50>
 8008472:	0023      	movs	r3, r4
 8008474:	3344      	adds	r3, #68	@ 0x44
 8008476:	4299      	cmp	r1, r3
 8008478:	d002      	beq.n	8008480 <__swsetup_r+0x4c>
 800847a:	0028      	movs	r0, r5
 800847c:	f7ff f940 	bl	8007700 <_free_r>
 8008480:	2300      	movs	r3, #0
 8008482:	6363      	str	r3, [r4, #52]	@ 0x34
 8008484:	2224      	movs	r2, #36	@ 0x24
 8008486:	89a3      	ldrh	r3, [r4, #12]
 8008488:	4393      	bics	r3, r2
 800848a:	81a3      	strh	r3, [r4, #12]
 800848c:	2300      	movs	r3, #0
 800848e:	6063      	str	r3, [r4, #4]
 8008490:	6923      	ldr	r3, [r4, #16]
 8008492:	6023      	str	r3, [r4, #0]
 8008494:	2308      	movs	r3, #8
 8008496:	89a2      	ldrh	r2, [r4, #12]
 8008498:	4313      	orrs	r3, r2
 800849a:	81a3      	strh	r3, [r4, #12]
 800849c:	6923      	ldr	r3, [r4, #16]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d10b      	bne.n	80084ba <__swsetup_r+0x86>
 80084a2:	21a0      	movs	r1, #160	@ 0xa0
 80084a4:	2280      	movs	r2, #128	@ 0x80
 80084a6:	89a3      	ldrh	r3, [r4, #12]
 80084a8:	0089      	lsls	r1, r1, #2
 80084aa:	0092      	lsls	r2, r2, #2
 80084ac:	400b      	ands	r3, r1
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d003      	beq.n	80084ba <__swsetup_r+0x86>
 80084b2:	0021      	movs	r1, r4
 80084b4:	0028      	movs	r0, r5
 80084b6:	f000 f897 	bl	80085e8 <__smakebuf_r>
 80084ba:	230c      	movs	r3, #12
 80084bc:	5ee2      	ldrsh	r2, [r4, r3]
 80084be:	2101      	movs	r1, #1
 80084c0:	0013      	movs	r3, r2
 80084c2:	400b      	ands	r3, r1
 80084c4:	420a      	tst	r2, r1
 80084c6:	d00b      	beq.n	80084e0 <__swsetup_r+0xac>
 80084c8:	2300      	movs	r3, #0
 80084ca:	60a3      	str	r3, [r4, #8]
 80084cc:	6963      	ldr	r3, [r4, #20]
 80084ce:	425b      	negs	r3, r3
 80084d0:	61a3      	str	r3, [r4, #24]
 80084d2:	2000      	movs	r0, #0
 80084d4:	6923      	ldr	r3, [r4, #16]
 80084d6:	4283      	cmp	r3, r0
 80084d8:	d101      	bne.n	80084de <__swsetup_r+0xaa>
 80084da:	0613      	lsls	r3, r2, #24
 80084dc:	d4be      	bmi.n	800845c <__swsetup_r+0x28>
 80084de:	bd70      	pop	{r4, r5, r6, pc}
 80084e0:	0791      	lsls	r1, r2, #30
 80084e2:	d400      	bmi.n	80084e6 <__swsetup_r+0xb2>
 80084e4:	6963      	ldr	r3, [r4, #20]
 80084e6:	60a3      	str	r3, [r4, #8]
 80084e8:	e7f3      	b.n	80084d2 <__swsetup_r+0x9e>
 80084ea:	46c0      	nop			@ (mov r8, r8)
 80084ec:	2000003c 	.word	0x2000003c

080084f0 <_raise_r>:
 80084f0:	b570      	push	{r4, r5, r6, lr}
 80084f2:	0004      	movs	r4, r0
 80084f4:	000d      	movs	r5, r1
 80084f6:	291f      	cmp	r1, #31
 80084f8:	d904      	bls.n	8008504 <_raise_r+0x14>
 80084fa:	2316      	movs	r3, #22
 80084fc:	6003      	str	r3, [r0, #0]
 80084fe:	2001      	movs	r0, #1
 8008500:	4240      	negs	r0, r0
 8008502:	bd70      	pop	{r4, r5, r6, pc}
 8008504:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8008506:	2b00      	cmp	r3, #0
 8008508:	d004      	beq.n	8008514 <_raise_r+0x24>
 800850a:	008a      	lsls	r2, r1, #2
 800850c:	189b      	adds	r3, r3, r2
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	2a00      	cmp	r2, #0
 8008512:	d108      	bne.n	8008526 <_raise_r+0x36>
 8008514:	0020      	movs	r0, r4
 8008516:	f000 f831 	bl	800857c <_getpid_r>
 800851a:	002a      	movs	r2, r5
 800851c:	0001      	movs	r1, r0
 800851e:	0020      	movs	r0, r4
 8008520:	f000 f81a 	bl	8008558 <_kill_r>
 8008524:	e7ed      	b.n	8008502 <_raise_r+0x12>
 8008526:	2a01      	cmp	r2, #1
 8008528:	d009      	beq.n	800853e <_raise_r+0x4e>
 800852a:	1c51      	adds	r1, r2, #1
 800852c:	d103      	bne.n	8008536 <_raise_r+0x46>
 800852e:	2316      	movs	r3, #22
 8008530:	6003      	str	r3, [r0, #0]
 8008532:	2001      	movs	r0, #1
 8008534:	e7e5      	b.n	8008502 <_raise_r+0x12>
 8008536:	2100      	movs	r1, #0
 8008538:	0028      	movs	r0, r5
 800853a:	6019      	str	r1, [r3, #0]
 800853c:	4790      	blx	r2
 800853e:	2000      	movs	r0, #0
 8008540:	e7df      	b.n	8008502 <_raise_r+0x12>
	...

08008544 <raise>:
 8008544:	b510      	push	{r4, lr}
 8008546:	4b03      	ldr	r3, [pc, #12]	@ (8008554 <raise+0x10>)
 8008548:	0001      	movs	r1, r0
 800854a:	6818      	ldr	r0, [r3, #0]
 800854c:	f7ff ffd0 	bl	80084f0 <_raise_r>
 8008550:	bd10      	pop	{r4, pc}
 8008552:	46c0      	nop			@ (mov r8, r8)
 8008554:	2000003c 	.word	0x2000003c

08008558 <_kill_r>:
 8008558:	2300      	movs	r3, #0
 800855a:	b570      	push	{r4, r5, r6, lr}
 800855c:	4d06      	ldr	r5, [pc, #24]	@ (8008578 <_kill_r+0x20>)
 800855e:	0004      	movs	r4, r0
 8008560:	0008      	movs	r0, r1
 8008562:	0011      	movs	r1, r2
 8008564:	602b      	str	r3, [r5, #0]
 8008566:	f7f8 ff54 	bl	8001412 <_kill>
 800856a:	1c43      	adds	r3, r0, #1
 800856c:	d103      	bne.n	8008576 <_kill_r+0x1e>
 800856e:	682b      	ldr	r3, [r5, #0]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d000      	beq.n	8008576 <_kill_r+0x1e>
 8008574:	6023      	str	r3, [r4, #0]
 8008576:	bd70      	pop	{r4, r5, r6, pc}
 8008578:	20000450 	.word	0x20000450

0800857c <_getpid_r>:
 800857c:	b510      	push	{r4, lr}
 800857e:	f7f8 ff42 	bl	8001406 <_getpid>
 8008582:	bd10      	pop	{r4, pc}

08008584 <_malloc_usable_size_r>:
 8008584:	1f0b      	subs	r3, r1, #4
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	1f18      	subs	r0, r3, #4
 800858a:	2b00      	cmp	r3, #0
 800858c:	da01      	bge.n	8008592 <_malloc_usable_size_r+0xe>
 800858e:	580b      	ldr	r3, [r1, r0]
 8008590:	18c0      	adds	r0, r0, r3
 8008592:	4770      	bx	lr

08008594 <__swhatbuf_r>:
 8008594:	b570      	push	{r4, r5, r6, lr}
 8008596:	000e      	movs	r6, r1
 8008598:	001d      	movs	r5, r3
 800859a:	230e      	movs	r3, #14
 800859c:	5ec9      	ldrsh	r1, [r1, r3]
 800859e:	0014      	movs	r4, r2
 80085a0:	b096      	sub	sp, #88	@ 0x58
 80085a2:	2900      	cmp	r1, #0
 80085a4:	da0c      	bge.n	80085c0 <__swhatbuf_r+0x2c>
 80085a6:	89b2      	ldrh	r2, [r6, #12]
 80085a8:	2380      	movs	r3, #128	@ 0x80
 80085aa:	0011      	movs	r1, r2
 80085ac:	4019      	ands	r1, r3
 80085ae:	421a      	tst	r2, r3
 80085b0:	d114      	bne.n	80085dc <__swhatbuf_r+0x48>
 80085b2:	2380      	movs	r3, #128	@ 0x80
 80085b4:	00db      	lsls	r3, r3, #3
 80085b6:	2000      	movs	r0, #0
 80085b8:	6029      	str	r1, [r5, #0]
 80085ba:	6023      	str	r3, [r4, #0]
 80085bc:	b016      	add	sp, #88	@ 0x58
 80085be:	bd70      	pop	{r4, r5, r6, pc}
 80085c0:	466a      	mov	r2, sp
 80085c2:	f000 f853 	bl	800866c <_fstat_r>
 80085c6:	2800      	cmp	r0, #0
 80085c8:	dbed      	blt.n	80085a6 <__swhatbuf_r+0x12>
 80085ca:	23f0      	movs	r3, #240	@ 0xf0
 80085cc:	9901      	ldr	r1, [sp, #4]
 80085ce:	021b      	lsls	r3, r3, #8
 80085d0:	4019      	ands	r1, r3
 80085d2:	4b04      	ldr	r3, [pc, #16]	@ (80085e4 <__swhatbuf_r+0x50>)
 80085d4:	18c9      	adds	r1, r1, r3
 80085d6:	424b      	negs	r3, r1
 80085d8:	4159      	adcs	r1, r3
 80085da:	e7ea      	b.n	80085b2 <__swhatbuf_r+0x1e>
 80085dc:	2100      	movs	r1, #0
 80085de:	2340      	movs	r3, #64	@ 0x40
 80085e0:	e7e9      	b.n	80085b6 <__swhatbuf_r+0x22>
 80085e2:	46c0      	nop			@ (mov r8, r8)
 80085e4:	ffffe000 	.word	0xffffe000

080085e8 <__smakebuf_r>:
 80085e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085ea:	2602      	movs	r6, #2
 80085ec:	898b      	ldrh	r3, [r1, #12]
 80085ee:	0005      	movs	r5, r0
 80085f0:	000c      	movs	r4, r1
 80085f2:	b085      	sub	sp, #20
 80085f4:	4233      	tst	r3, r6
 80085f6:	d007      	beq.n	8008608 <__smakebuf_r+0x20>
 80085f8:	0023      	movs	r3, r4
 80085fa:	3347      	adds	r3, #71	@ 0x47
 80085fc:	6023      	str	r3, [r4, #0]
 80085fe:	6123      	str	r3, [r4, #16]
 8008600:	2301      	movs	r3, #1
 8008602:	6163      	str	r3, [r4, #20]
 8008604:	b005      	add	sp, #20
 8008606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008608:	ab03      	add	r3, sp, #12
 800860a:	aa02      	add	r2, sp, #8
 800860c:	f7ff ffc2 	bl	8008594 <__swhatbuf_r>
 8008610:	9f02      	ldr	r7, [sp, #8]
 8008612:	9001      	str	r0, [sp, #4]
 8008614:	0039      	movs	r1, r7
 8008616:	0028      	movs	r0, r5
 8008618:	f7ff f8e8 	bl	80077ec <_malloc_r>
 800861c:	2800      	cmp	r0, #0
 800861e:	d108      	bne.n	8008632 <__smakebuf_r+0x4a>
 8008620:	220c      	movs	r2, #12
 8008622:	5ea3      	ldrsh	r3, [r4, r2]
 8008624:	059a      	lsls	r2, r3, #22
 8008626:	d4ed      	bmi.n	8008604 <__smakebuf_r+0x1c>
 8008628:	2203      	movs	r2, #3
 800862a:	4393      	bics	r3, r2
 800862c:	431e      	orrs	r6, r3
 800862e:	81a6      	strh	r6, [r4, #12]
 8008630:	e7e2      	b.n	80085f8 <__smakebuf_r+0x10>
 8008632:	2380      	movs	r3, #128	@ 0x80
 8008634:	89a2      	ldrh	r2, [r4, #12]
 8008636:	6020      	str	r0, [r4, #0]
 8008638:	4313      	orrs	r3, r2
 800863a:	81a3      	strh	r3, [r4, #12]
 800863c:	9b03      	ldr	r3, [sp, #12]
 800863e:	6120      	str	r0, [r4, #16]
 8008640:	6167      	str	r7, [r4, #20]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d00c      	beq.n	8008660 <__smakebuf_r+0x78>
 8008646:	0028      	movs	r0, r5
 8008648:	230e      	movs	r3, #14
 800864a:	5ee1      	ldrsh	r1, [r4, r3]
 800864c:	f000 f820 	bl	8008690 <_isatty_r>
 8008650:	2800      	cmp	r0, #0
 8008652:	d005      	beq.n	8008660 <__smakebuf_r+0x78>
 8008654:	2303      	movs	r3, #3
 8008656:	89a2      	ldrh	r2, [r4, #12]
 8008658:	439a      	bics	r2, r3
 800865a:	3b02      	subs	r3, #2
 800865c:	4313      	orrs	r3, r2
 800865e:	81a3      	strh	r3, [r4, #12]
 8008660:	89a3      	ldrh	r3, [r4, #12]
 8008662:	9a01      	ldr	r2, [sp, #4]
 8008664:	4313      	orrs	r3, r2
 8008666:	81a3      	strh	r3, [r4, #12]
 8008668:	e7cc      	b.n	8008604 <__smakebuf_r+0x1c>
	...

0800866c <_fstat_r>:
 800866c:	2300      	movs	r3, #0
 800866e:	b570      	push	{r4, r5, r6, lr}
 8008670:	4d06      	ldr	r5, [pc, #24]	@ (800868c <_fstat_r+0x20>)
 8008672:	0004      	movs	r4, r0
 8008674:	0008      	movs	r0, r1
 8008676:	0011      	movs	r1, r2
 8008678:	602b      	str	r3, [r5, #0]
 800867a:	f7f8 ff2a 	bl	80014d2 <_fstat>
 800867e:	1c43      	adds	r3, r0, #1
 8008680:	d103      	bne.n	800868a <_fstat_r+0x1e>
 8008682:	682b      	ldr	r3, [r5, #0]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d000      	beq.n	800868a <_fstat_r+0x1e>
 8008688:	6023      	str	r3, [r4, #0]
 800868a:	bd70      	pop	{r4, r5, r6, pc}
 800868c:	20000450 	.word	0x20000450

08008690 <_isatty_r>:
 8008690:	2300      	movs	r3, #0
 8008692:	b570      	push	{r4, r5, r6, lr}
 8008694:	4d06      	ldr	r5, [pc, #24]	@ (80086b0 <_isatty_r+0x20>)
 8008696:	0004      	movs	r4, r0
 8008698:	0008      	movs	r0, r1
 800869a:	602b      	str	r3, [r5, #0]
 800869c:	f7f8 ff27 	bl	80014ee <_isatty>
 80086a0:	1c43      	adds	r3, r0, #1
 80086a2:	d103      	bne.n	80086ac <_isatty_r+0x1c>
 80086a4:	682b      	ldr	r3, [r5, #0]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d000      	beq.n	80086ac <_isatty_r+0x1c>
 80086aa:	6023      	str	r3, [r4, #0]
 80086ac:	bd70      	pop	{r4, r5, r6, pc}
 80086ae:	46c0      	nop			@ (mov r8, r8)
 80086b0:	20000450 	.word	0x20000450

080086b4 <_gettimeofday>:
 80086b4:	2258      	movs	r2, #88	@ 0x58
 80086b6:	2001      	movs	r0, #1
 80086b8:	4b01      	ldr	r3, [pc, #4]	@ (80086c0 <_gettimeofday+0xc>)
 80086ba:	4240      	negs	r0, r0
 80086bc:	601a      	str	r2, [r3, #0]
 80086be:	4770      	bx	lr
 80086c0:	20000450 	.word	0x20000450

080086c4 <_init>:
 80086c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086c6:	46c0      	nop			@ (mov r8, r8)
 80086c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086ca:	bc08      	pop	{r3}
 80086cc:	469e      	mov	lr, r3
 80086ce:	4770      	bx	lr

080086d0 <_fini>:
 80086d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086d2:	46c0      	nop			@ (mov r8, r8)
 80086d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086d6:	bc08      	pop	{r3}
 80086d8:	469e      	mov	lr, r3
 80086da:	4770      	bx	lr
